
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000ea38 memsz 0x0000ea38 flags r-x
    LOAD off    0x0000fa58 vaddr 0x0800ea58 paddr 0x080104b0 align 2**12
         filesz 0x00001a58 memsz 0x00001a58 flags rw-
    LOAD off    0x00011f08 vaddr 0x08011f08 paddr 0x08011f08 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000de0c  080001b8  080001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a94  0800dfc4  0800dfc4  0000efc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a58  0800ea58  080104b0  0000fa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  08011f08  08011f08  00011f08  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d80  00000000  00000000  000114d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00022959  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008ea3  00000000  00000000  00034bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000a3b4  00000000  00000000  0003da54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000019a0  00000000  00000000  00047e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002e30  00000000  00000000  000497a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010ec0  00000000  00000000  0004c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  0005d498  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0005d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00060f8c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00060f8f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00060f92  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00060f93  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00060f94  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00060f9d  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00060fa6  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000a  00000000  00000000  00060faf  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000023  00000000  00000000  00060fb9  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0004fd93  00000000  00000000  00060fdc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001b8 l    d  .text	00000000 .text
0800dfc4 l    d  .rodata	00000000 .rodata
0800ea58 l    d  .rwdata	00000000 .rwdata
08011f08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
08011f08 l     O .bss	00000002 ctl_reg.3183
08011f0a l     O .bss	00000002 no_device.3184
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08002238 l     F .text	00000034 __sprint_r
0800e77e l     O .rodata	00000010 blanks.3546
0800e78e l     O .rodata	00000010 zeroes.3547
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004280 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005cf0 l     F .text	00000008 __fp_lock
08005cf8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800ea58 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800e7c4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800e90c l     O .rodata	0000000c p05.2466
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
0800a2d4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800b004 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800b798 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800b8b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800b8e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800b9e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800bad4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800bbc0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800bd9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080104a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800c040 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800c180 l     F .text	00000038 alt_dev_reg
0800f414 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800c454 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800c658 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800cf40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800d3cc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800d524 l     F .text	00000050 alt_get_errno
0800d574 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
080087b0 g     F .text	00000074 _mprec_log10
080088a0 g     F .text	00000084 __any_on
08009520 g     F .text	00000064 _isatty_r
0800e7f4 g     O .rodata	00000028 __mprec_tinytens
0800bce4 g     F .text	00000078 alt_main
0800b754 g     F .text	00000044 __ashldi3
08002114 g     F .text	00000084 _puts_r
08011f68 g     O .bss	00000100 alt_irq
08009584 g     F .text	0000006c _lseek_r
080104b0 g       *ABS*	00000000 __flash_rwdata_start
0800ab74 g     F .text	0000005c __eqdf2
080121f8 g       *ABS*	00000000 __alt_heap_start
080020d8 g     F .text	0000003c printf
080090c4 g     F .text	0000005c __sseek
08005d94 g     F .text	0000010c __sinit
08006a2c g     F .text	0000009c _setlocale_r
08005d0c g     F .text	00000078 __sfmoreglue
0800bd7c g     F .text	00000020 __malloc_unlock
08001fa8 g     F .text	00000088 UsbGetRetryCnt
0800766c g     F .text	0000018c memmove
08005d84 g     F .text	00000010 _cleanup
080078d4 g     F .text	000000a8 _Balloc
0800ac2c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080094b8 g     F .text	00000068 _fstat_r
08011f24 g     O .bss	00000004 errno
08011f2c g     O .bss	00000004 alt_argv
08018474 g       *ABS*	00000000 _gp
0800c010 g     F .text	00000030 usleep
0800f294 g     O .rwdata	00000180 alt_fd_list
0800d978 g     F .text	00000090 alt_find_dev
0800752c g     F .text	00000140 memcpy
08005d00 g     F .text	0000000c _cleanup_r
0800ad50 g     F .text	000000d4 __floatsidf
0800d4ac g     F .text	00000078 alt_io_redirect
0800acf4 g     F .text	0000005c __ltdf2
0800dfc4 g       *ABS*	00000000 __DTOR_END__
08002198 g     F .text	00000014 puts
0800870c g     F .text	000000a4 __ratio
0800c858 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080020ac g     F .text	0000002c _printf_r
0800b124 g     F .text	00000008 __udivsi3
0800ba30 g     F .text	000000a4 isatty
0800e844 g     O .rodata	000000c8 __mprec_tens
08006ac8 g     F .text	0000000c __locale_charset
08011f20 g     O .bss	00000004 __malloc_top_pad
08001634 g     F .text	00000268 UsbGetConfigDesc2
0801047c g     O .rwdata	00000004 __mb_cur_max
08006ad4 g     F .text	0000000c _localeconv_r
08007d04 g     F .text	0000003c __i2b
080063e8 g     F .text	000004e4 __sfvwrite_r
08008f84 g     F .text	00000064 _sbrk_r
080095f0 g     F .text	0000006c _read_r
0800ee58 g     O .rwdata	0000000c __lc_ctype
08010498 g     O .rwdata	00000004 alt_max_fd
0800b53c g     F .text	00000104 __unpack_d
08009368 g     F .text	0000013c _fclose_r
08005cc0 g     F .text	00000030 fflush
08011f1c g     O .bss	00000004 __malloc_max_sbrked_mem
0800a628 g     F .text	00000054 __adddf3
08008480 g     F .text	00000148 __b2d
08009cac g     F .text	00000628 __umoddi3
0800bc10 g     F .text	000000d4 lseek
08010474 g     O .rwdata	00000004 _global_impure_ptr
08008924 g     F .text	000005fc _realloc_r
080121f8 g       *ABS*	00000000 __bss_end
0800d2dc g     F .text	000000f0 alt_iic_isr_register
0800d854 g     F .text	00000104 alt_tick
0800965c g     F .text	00000650 __udivdi3
0800e81c g     O .rodata	00000028 __mprec_bigtens
08007ae8 g     F .text	00000104 __s2b
0800aee8 g     F .text	0000011c __floatunsidf
08008220 g     F .text	00000058 __mcmp
08001084 g     F .text	00000100 UsbSetAddress
08005fac g     F .text	00000018 __fp_lock_all
0800d290 g     F .text	0000004c alt_ic_irq_enabled
0800d7bc g     F .text	00000098 alt_alarm_stop
08011f34 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000cc alt_irq_handler
0800f26c g     O .rwdata	00000028 alt_dev_null
0800cf24 g     F .text	0000001c alt_dcache_flush_all
08007bec g     F .text	00000068 __hi0bits
0800ae24 g     F .text	000000c4 __fixdfsi
080104b0 g       *ABS*	00000000 __ram_rwdata_end
08010490 g     O .rwdata	00000008 alt_dev_list
0800c090 g     F .text	000000f0 write
0800ea58 g       *ABS*	00000000 __ram_rodata_end
0800b930 g     F .text	000000b0 fstat
0800b710 g     F .text	00000044 __lshrdi3
08002030 g     F .text	0000007c UsbPrintMem
08007f98 g     F .text	0000012c __pow5mult
08011f14 g     O .bss	00000004 __nlocale_changed
0800b12c g     F .text	00000008 __umodsi3
080121f8 g       *ABS*	00000000 end
0800c394 g     F .text	000000c0 altera_avalon_jtag_uart_init
0800dfc4 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800b26c g     F .text	000000ac __clzsi2
0800ca70 g     F .text	00000220 altera_avalon_jtag_uart_write
08005f9c g     F .text	00000004 __sfp_lock_acquire
08007434 g     F .text	000000f8 memchr
0800226c g     F .text	00001e7c ___vfprintf_internal_r
0800199c g     F .text	00000100 UsbClassRequest
08006118 g     F .text	000002d0 _free_r
0800dde8 g     F .text	000001a0 __call_exitprocs
08011f10 g     O .bss	00000004 __mlocale_changed
08010480 g     O .rwdata	00000004 __malloc_sbrk_base
080001b8 g     F .text	0000003c _start
08011f38 g     O .bss	00000004 _alt_tick_rate
080080c4 g     F .text	0000015c __lshift
08011f3c g     O .bss	00000004 _alt_nticks
0800bdec g     F .text	000000f4 read
0800c1ec g     F .text	00000044 alt_sys_init
0800dcb8 g     F .text	00000130 __register_exitproc
08007d40 g     F .text	00000258 __multiply
0800c6fc g     F .text	00000068 altera_avalon_jtag_uart_close
0800b134 g     F .text	00000028 __mulsi3
0800ea58 g       *ABS*	00000000 __ram_rwdata_start
0800dfc4 g       *ABS*	00000000 __ram_rodata_start
08011f40 g     O .bss	00000028 __malloc_current_mallinfo
080085c8 g     F .text	00000144 __d2b
08001184 g     F .text	00000148 UsbGetDeviceDesc1
0800c230 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800db1c g     F .text	000000d4 alt_get_fd
0800cdd0 g     F .text	00000154 alt_busy_sleep
0800b640 g     F .text	000000d0 __fpcmp_parts_d
08009304 g     F .text	00000064 _close_r
0800dc3c g     F .text	0000007c memcmp
0800c2f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080121f8 g       *ABS*	00000000 __alt_stack_base
0800c340 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800410c g     F .text	00000174 __swsetup_r
0800a9c0 g     F .text	000001b4 __divdf3
08005ea0 g     F .text	000000fc __sfp
08008824 g     F .text	0000007c __copybits
0800ee64 g     O .rwdata	00000408 __malloc_av_
08005fa8 g     F .text	00000004 __sinit_lock_release
0800a6dc g     F .text	000002e4 __muldf3
08008fe8 g     F .text	00000054 __sread
08001f24 g     F .text	00000084 UsbWaitTDListDone
0800da08 g     F .text	00000114 alt_find_file
0800cf90 g     F .text	000000a0 alt_dev_llist_insert
0800bd5c g     F .text	00000020 __malloc_lock
0800bf60 g     F .text	000000b0 sbrk
08005ad8 g     F .text	000001e8 _fflush_r
08009238 g     F .text	000000cc _calloc_r
08011f08 g       *ABS*	00000000 __bss_start
080077f8 g     F .text	000000dc memset
080001f4 g     F .text	00000d50 main
08011f30 g     O .bss	00000004 alt_envp
08011f18 g     O .bss	00000004 __malloc_max_total_mem
0800c290 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800189c g     F .text	00000100 UsbSetConfig
08009120 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
080094a4 g     F .text	00000014 fclose
08012068 g     O .bss	00000190 _atexit0
080044bc g     F .text	0000161c _dtoa_r
08006cb0 g     F .text	00000784 _malloc_r
0801049c g     O .rwdata	00000004 alt_errno
080068cc g     F .text	000000a8 _fwalk
0800b078 g     F .text	00000050 __divsi3
0800e918 g     O .rodata	00000014 __thenan_df
08005fdc g     F .text	0000013c _malloc_trim_r
08001a9c g     F .text	00000148 UsbGetHidDesc
0800dfc4 g       *ABS*	00000000 __CTOR_END__
08009128 g     F .text	000000a4 strcmp
0800dfc4 g       *ABS*	00000000 __flash_rodata_start
0800dfc4 g       *ABS*	00000000 __DTOR_LIST__
0800abd0 g     F .text	0000005c __nedf2
08000f8c g     F .text	0000003c UsbRead
0800c1b8 g     F .text	00000034 alt_irq_init
0800bee0 g     F .text	00000080 alt_release_fd
0800e92c g     O .rodata	00000100 __clz_tab
08011f0c g     O .bss	00000004 _PathLocale
0800dbf0 g     F .text	00000014 atexit
080091cc g     F .text	0000006c _write_r
08006ae0 g     F .text	0000001c setlocale
08010478 g     O .rwdata	00000004 _impure_ptr
08011f28 g     O .bss	00000004 alt_argc
0800d08c g     F .text	0000005c _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08008420 g     F .text	00000060 __ulp
08008f20 g     F .text	00000038 __isinfd
08005fc4 g     F .text	00000018 __fp_unlock_all
08010488 g     O .rwdata	00000008 alt_fs_list
08001be4 g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006afc g     F .text	0000000c localeconv
0800d104 g     F .text	00000050 alt_ic_isr_register
080104b0 g       *ABS*	00000000 _edata
080121f8 g       *ABS*	00000000 _end
08000f44 g     F .text	00000048 UsbWrite
080001b8 g       *ABS*	00000000 __ram_exceptions_end
0800c764 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800d1f0 g     F .text	000000a0 alt_ic_irq_disable
0800903c g     F .text	00000088 __swrite
08010484 g     O .rwdata	00000004 __malloc_trim_threshold
0800d958 g     F .text	00000020 altera_nios2_qsys_irq_init
0800dc04 g     F .text	00000038 exit
08006974 g     F .text	000000b8 _fwalk_reent
08008278 g     F .text	000001a8 __mdiff
0800b0c8 g     F .text	0000005c __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08005fa0 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800df88 g     F .text	0000003c _exit
08008f58 g     F .text	0000002c __isnand
0800cc90 g     F .text	00000140 alt_alarm_start
0800b15c g     F .text	00000110 __muldi3
08006b08 g     F .text	000001a8 __smakebuf_r
080021ac g     F .text	0000008c strlen
0800d664 g     F .text	00000158 open
0800ac90 g     F .text	00000064 __gedf2
0800d0e8 g     F .text	0000001c alt_icache_flush_all
080104a4 g     O .rwdata	00000004 alt_priority_mask
0800d154 g     F .text	0000009c alt_ic_irq_enable
080040e8 g     F .text	00000024 __vfprintf_internal
0800a67c g     F .text	00000060 __subdf3
08007c54 g     F .text	000000b0 __lo0bits
080014a4 g     F .text	00000190 UsbGetConfigDesc1
080104a8 g     O .rwdata	00000008 alt_alarm_list
0800d030 g     F .text	0000005c _do_ctors
08000fc8 g     F .text	000000bc UsbSoftReset
0800b7e8 g     F .text	000000cc close
080012cc g     F .text	000001d8 UsbGetDeviceDesc2
0800bb40 g     F .text	00000080 alt_load
0800b318 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
08005fa4 g     F .text	00000004 __sinit_lock_acquire
080079a4 g     F .text	00000144 __multadd
0800797c g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406e14 	ori	at,at,440
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c20074 	movhi	r3,2049
 8000130:	18c7da04 	addi	r3,r3,8040
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	01020074 	movhi	r4,2049
 8000148:	2107da04 	addi	r4,r4,8040
 800014c:	e0bffd17 	ldw	r2,-12(fp)
 8000150:	100490fa 	slli	r2,r2,3
 8000154:	2085883a 	add	r2,r4,r2
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <__alt_data_end+0xf800011c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80001a4:	e037883a 	mov	sp,fp
 80001a8:	dfc00117 	ldw	ra,4(sp)
 80001ac:	df000017 	ldw	fp,0(sp)
 80001b0:	dec00204 	addi	sp,sp,8
 80001b4:	f800283a 	ret

Disassembly of section .text:

080001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001b8:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c0:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c4:	d6a11d14 	ori	gp,gp,33908
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001c8:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001cc:	1087c214 	ori	r2,r2,7944

    movhi r3, %hi(__bss_end)
 80001d0:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d4:	18c87e14 	ori	r3,r3,8696

    beq r2, r3, 1f
 80001d8:	10c00326 	beq	r2,r3,80001e8 <_start+0x30>

0:
    stw zero, (r2)
 80001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e4:	10fffd36 	bltu	r2,r3,80001dc <__alt_data_end+0xf80001dc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001e8:	800bb400 	call	800bb40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001ec:	800bce40 	call	800bce4 <alt_main>

080001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f0:	003fff06 	br	80001f0 <__alt_data_end+0xf80001f0>

080001f4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 80001f4:	defff804 	addi	sp,sp,-32
 80001f8:	dfc00715 	stw	ra,28(sp)
 80001fc:	df000615 	stw	fp,24(sp)
 8000200:	df000604 	addi	fp,sp,24
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 8000204:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 8000208:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 800020c:	e03ffa85 	stb	zero,-22(fp)

	alt_u16 code;
	int i,hot_plug_count;
	

	printf("USB keyboard setup...\n\n");
 8000210:	01020074 	movhi	r4,2049
 8000214:	2137f104 	addi	r4,r4,-8252
 8000218:	80021980 	call	8002198 <puts>
 800021c:	00000306 	br	800022c <main+0x38>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
			{
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device)
					goto USB_HOT_PLUG;
 8000220:	0001883a 	nop
 8000224:	00000106 	br	800022c <main+0x38>
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			usleep(5*1000);

			if(usb_ctl_val & no_device)
				goto USB_HOT_PLUG;
 8000228:	0001883a 	nop

	printf("USB keyboard setup...\n\n");

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 800022c:	8000fc80 	call	8000fc8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000230:	01005104 	movi	r4,324
 8000234:	000b883a 	mov	r5,zero
 8000238:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 800023c:	01302414 	movui	r4,49296
 8000240:	017fffd4 	movui	r5,65535
 8000244:	8000f440 	call	8000f44 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 8000248:	01006d04 	movi	r4,436
 800024c:	01409604 	movi	r5,600
 8000250:	8000f440 	call	8000f44 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 8000254:	00811004 	movi	r2,1088
 8000258:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 800025c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000260:	01005084 	movi	r4,322
 8000264:	100b883a 	mov	r5,r2
 8000268:	8000f440 	call	8000f44 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 800026c:	00808404 	movi	r2,528
 8000270:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 8000274:	e0bffe0b 	ldhu	r2,-8(fp)
 8000278:	01302314 	movui	r4,49292
 800027c:	100b883a 	mov	r5,r2
 8000280:	8000f440 	call	8000f44 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 8000284:	01007104 	movi	r4,452
 8000288:	000b883a 	mov	r5,zero
 800028c:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000290:	01007184 	movi	r4,454
 8000294:	000b883a 	mov	r5,zero
 8000298:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 800029c:	01007204 	movi	r4,456
 80002a0:	000b883a 	mov	r5,zero
 80002a4:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80002a8:	01007284 	movi	r4,458
 80002ac:	000b883a 	mov	r5,zero
 80002b0:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80002b4:	01007304 	movi	r4,460
 80002b8:	000b883a 	mov	r5,zero
 80002bc:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80002c0:	01007384 	movi	r4,462
 80002c4:	000b883a 	mov	r5,zero
 80002c8:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80002cc:	01007404 	movi	r4,464
 80002d0:	000b883a 	mov	r5,zero
 80002d4:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80002d8:	01007484 	movi	r4,466
 80002dc:	000b883a 	mov	r5,zero
 80002e0:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80002e4:	01007504 	movi	r4,468
 80002e8:	000b883a 	mov	r5,zero
 80002ec:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80002f0:	01007584 	movi	r4,470
 80002f4:	000b883a 	mov	r5,zero
 80002f8:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80002fc:	01007604 	movi	r4,472
 8000300:	000b883a 	mov	r5,zero
 8000304:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000308:	01007684 	movi	r4,474
 800030c:	000b883a 	mov	r5,zero
 8000310:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000314:	01007704 	movi	r4,476
 8000318:	000b883a 	mov	r5,zero
 800031c:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000320:	01007784 	movi	r4,478
 8000324:	000b883a 	mov	r5,zero
 8000328:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 800032c:	01007084 	movi	r4,450
 8000330:	01401c84 	movi	r5,114
 8000334:	8000f440 	call	8000f44 <UsbWrite>
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 8000338:	00f38054 	movui	r3,52737
 800033c:	00840034 	movhi	r2,4096
 8000340:	10800104 	addi	r2,r2,4
 8000344:	10c00035 	stwio	r3,0(r2)

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 8000348:	0001883a 	nop
 800034c:	00840034 	movhi	r2,4096
 8000350:	10800304 	addi	r2,r2,12
 8000354:	10800037 	ldwio	r2,0(r2)
 8000358:	10bfffcc 	andi	r2,r2,65535
 800035c:	103ffb26 	beq	r2,zero,800034c <__alt_data_end+0xf800034c>
	{
	}
	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 8000360:	00000806 	br	8000384 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 8000364:	00840034 	movhi	r2,4096
 8000368:	10800104 	addi	r2,r2,4
 800036c:	10800037 	ldwio	r2,0(r2)
 8000370:	01020074 	movhi	r4,2049
 8000374:	2137f704 	addi	r4,r4,-8228
 8000378:	100b883a 	mov	r5,r2
 800037c:	80020d80 	call	80020d8 <printf>
		goto USB_HOT_PLUG;
 8000380:	003faa06 	br	800022c <__alt_data_end+0xf800022c>
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 8000384:	00840034 	movhi	r2,4096
 8000388:	10800104 	addi	r2,r2,4
 800038c:	10800037 	ldwio	r2,0(r2)
 8000390:	1083fb58 	cmpnei	r2,r2,4077
 8000394:	103ff31e 	bne	r2,zero,8000364 <__alt_data_end+0xf8000364>
	}
	// STEP 1b end


	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 8000398:	01007084 	movi	r4,450
 800039c:	01401d04 	movi	r5,116
 80003a0:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 80003a4:	01007104 	movi	r4,452
 80003a8:	01400f04 	movi	r5,60
 80003ac:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003b0:	01007184 	movi	r4,454
 80003b4:	000b883a 	mov	r5,zero
 80003b8:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80003bc:	01007204 	movi	r4,456
 80003c0:	000b883a 	mov	r5,zero
 80003c4:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80003c8:	01007284 	movi	r4,458
 80003cc:	000b883a 	mov	r5,zero
 80003d0:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80003d4:	01007304 	movi	r4,460
 80003d8:	000b883a 	mov	r5,zero
 80003dc:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80003e0:	01007384 	movi	r4,462
 80003e4:	000b883a 	mov	r5,zero
 80003e8:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80003ec:	01007404 	movi	r4,464
 80003f0:	000b883a 	mov	r5,zero
 80003f4:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80003f8:	01007484 	movi	r4,466
 80003fc:	000b883a 	mov	r5,zero
 8000400:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000404:	01007504 	movi	r4,468
 8000408:	000b883a 	mov	r5,zero
 800040c:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000410:	01007584 	movi	r4,470
 8000414:	000b883a 	mov	r5,zero
 8000418:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 800041c:	01007604 	movi	r4,472
 8000420:	000b883a 	mov	r5,zero
 8000424:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000428:	01007684 	movi	r4,474
 800042c:	000b883a 	mov	r5,zero
 8000430:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000434:	01007704 	movi	r4,476
 8000438:	000b883a 	mov	r5,zero
 800043c:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000440:	01007784 	movi	r4,478
 8000444:	000b883a 	mov	r5,zero
 8000448:	8000f440 	call	8000f44 <UsbWrite>

	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 800044c:	00f38054 	movui	r3,52737
 8000450:	00840034 	movhi	r2,4096
 8000454:	10800104 	addi	r2,r2,4
 8000458:	10c00035 	stwio	r3,0(r2)

	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 800045c:	0001883a 	nop
 8000460:	00840034 	movhi	r2,4096
 8000464:	10800104 	addi	r2,r2,4
 8000468:	10800037 	ldwio	r2,0(r2)
 800046c:	1083fb58 	cmpnei	r2,r2,4077
 8000470:	10000826 	beq	r2,zero,8000494 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 8000474:	00840034 	movhi	r2,4096
 8000478:	10800104 	addi	r2,r2,4
 800047c:	10800037 	ldwio	r2,0(r2)
 8000480:	01020074 	movhi	r4,2049
 8000484:	2137f704 	addi	r4,r4,-8228
 8000488:	100b883a 	mov	r5,r2
 800048c:	80020d80 	call	80020d8 <printf>
		goto USB_HOT_PLUG;
 8000490:	003f6606 	br	800022c <__alt_data_end+0xf800022c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 8000494:	00b02284 	movi	r2,-16246
 8000498:	d0a6a50d 	sth	r2,-25964(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 800049c:	008c0004 	movi	r2,12288
 80004a0:	d0a6a58d 	sth	r2,-25962(gp)
	fs_device = A_DP_STAT;
 80004a4:	00880004 	movi	r2,8192
 80004a8:	e0bffc0d 	sth	r2,-16(fp)

	usb_ctl_val = UsbRead(ctl_reg);
 80004ac:	d0a6a50b 	ldhu	r2,-25964(gp)
 80004b0:	10bfffcc 	andi	r2,r2,65535
 80004b4:	1009883a 	mov	r4,r2
 80004b8:	8000f8c0 	call	8000f8c <UsbRead>
 80004bc:	e0bffa0d 	sth	r2,-24(fp)

	if (!(usb_ctl_val & no_device))
 80004c0:	d0a6a58b 	ldhu	r2,-25962(gp)
 80004c4:	e0fffa0b 	ldhu	r3,-24(fp)
 80004c8:	1884703a 	and	r2,r3,r2
 80004cc:	10bfffcc 	andi	r2,r2,65535
 80004d0:	1000341e 	bne	r2,zero,80005a4 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80004d4:	e03ffb15 	stw	zero,-20(fp)
 80004d8:	00000f06 	br	8000518 <main+0x324>
		{
			usleep(5*1000);
 80004dc:	0104e204 	movi	r4,5000
 80004e0:	800c0100 	call	800c010 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80004e4:	d0a6a50b 	ldhu	r2,-25964(gp)
 80004e8:	10bfffcc 	andi	r2,r2,65535
 80004ec:	1009883a 	mov	r4,r2
 80004f0:	8000f8c0 	call	8000f8c <UsbRead>
 80004f4:	e0bffa0d 	sth	r2,-24(fp)
			if(usb_ctl_val & no_device) break;
 80004f8:	d0a6a58b 	ldhu	r2,-25962(gp)
 80004fc:	e0fffa0b 	ldhu	r3,-24(fp)
 8000500:	1884703a 	and	r2,r3,r2
 8000504:	10bfffcc 	andi	r2,r2,65535
 8000508:	1000071e 	bne	r2,zero,8000528 <main+0x334>

	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 800050c:	e0bffb17 	ldw	r2,-20(fp)
 8000510:	10800044 	addi	r2,r2,1
 8000514:	e0bffb15 	stw	r2,-20(fp)
 8000518:	e0bffb17 	ldw	r2,-20(fp)
 800051c:	10800150 	cmplti	r2,r2,5
 8000520:	103fee1e 	bne	r2,zero,80004dc <__alt_data_end+0xf80004dc>
 8000524:	00000106 	br	800052c <main+0x338>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
 8000528:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 800052c:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000530:	e0fffa0b 	ldhu	r3,-24(fp)
 8000534:	1884703a 	and	r2,r3,r2
 8000538:	10bfffcc 	andi	r2,r2,65535
 800053c:	1000251e 	bne	r2,zero,80005d4 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000540:	01020074 	movhi	r4,2049
 8000544:	21380004 	addi	r4,r4,-8192
 8000548:	80021980 	call	8002198 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 800054c:	01020074 	movhi	r4,2049
 8000550:	21380a04 	addi	r4,r4,-8152
 8000554:	80021980 	call	8002198 <puts>
			while (!(usb_ctl_val & no_device))
 8000558:	00000c06 	br	800058c <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 800055c:	d0a6a50b 	ldhu	r2,-25964(gp)
 8000560:	10bfffcc 	andi	r2,r2,65535
 8000564:	1009883a 	mov	r4,r2
 8000568:	8000f8c0 	call	8000f8c <UsbRead>
 800056c:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device)
 8000570:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000574:	e0fffa0b 	ldhu	r3,-24(fp)
 8000578:	1884703a 	and	r2,r3,r2
 800057c:	10bfffcc 	andi	r2,r2,65535
 8000580:	103f271e 	bne	r2,zero,8000220 <__alt_data_end+0xf8000220>
					goto USB_HOT_PLUG;

				usleep(2000);
 8000584:	0101f404 	movi	r4,2000
 8000588:	800c0100 	call	800c010 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 800058c:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000590:	e0fffa0b 	ldhu	r3,-24(fp)
 8000594:	1884703a 	and	r2,r3,r2
 8000598:	10bfffcc 	andi	r2,r2,65535
 800059c:	103fef26 	beq	r2,zero,800055c <__alt_data_end+0xf800055c>
 80005a0:	00000c06 	br	80005d4 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 80005a4:	e0fffa0b 	ldhu	r3,-24(fp)
 80005a8:	e0bffc0b 	ldhu	r2,-16(fp)
 80005ac:	1884703a 	and	r2,r3,r2
 80005b0:	10bfffcc 	andi	r2,r2,65535
 80005b4:	10000426 	beq	r2,zero,80005c8 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
 80005b8:	01020074 	movhi	r4,2049
 80005bc:	21381604 	addi	r4,r4,-8104
 80005c0:	80021980 	call	8002198 <puts>
 80005c4:	00000306 	br	80005d4 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80005c8:	01020074 	movhi	r4,2049
 80005cc:	21381d04 	addi	r4,r4,-8076
 80005d0:	80021980 	call	8002198 <puts>
		}
	}

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80005d4:	80010840 	call	8001084 <UsbSetAddress>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80005d8:	00000306 	br	80005e8 <main+0x3f4>
	{
		UsbSetAddress();
 80005dc:	80010840 	call	8001084 <UsbSetAddress>
		usleep(10*1000);
 80005e0:	0109c404 	movi	r4,10000
 80005e4:	800c0100 	call	800c010 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80005e8:	00840034 	movhi	r2,4096
 80005ec:	10800304 	addi	r2,r2,12
 80005f0:	10800037 	ldwio	r2,0(r2)
 80005f4:	1080040c 	andi	r2,r2,16
 80005f8:	103ff826 	beq	r2,zero,80005dc <__alt_data_end+0xf80005dc>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80005fc:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506); // i
 8000600:	00c14184 	movi	r3,1286
 8000604:	00840034 	movhi	r2,4096
 8000608:	10800204 	addi	r2,r2,8
 800060c:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000610:	00840034 	movhi	r2,4096
 8000614:	10800037 	ldwio	r2,0(r2)
 8000618:	01020074 	movhi	r4,2049
 800061c:	21382404 	addi	r4,r4,-8048
 8000620:	100b883a 	mov	r5,r2
 8000624:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508); // n
 8000628:	00c14204 	movi	r3,1288
 800062c:	00840034 	movhi	r2,4096
 8000630:	10800204 	addi	r2,r2,8
 8000634:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000638:	00840034 	movhi	r2,4096
 800063c:	10800037 	ldwio	r2,0(r2)
 8000640:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 8000644:	e0bffa0b 	ldhu	r2,-24(fp)
 8000648:	01020074 	movhi	r4,2049
 800064c:	21382f04 	addi	r4,r4,-8004
 8000650:	100b883a 	mov	r5,r2
 8000654:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 8000658:	e0bffa0b 	ldhu	r2,-24(fp)
 800065c:	108000e0 	cmpeqi	r2,r2,3
 8000660:	1000031e 	bne	r2,zero,8000670 <main+0x47c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000664:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000668:	e0bffa0d 	sth	r2,-24(fp)

		goto USB_HOT_PLUG;
 800066c:	003eef06 	br	800022c <__alt_data_end+0xf800022c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000670:	01020074 	movhi	r4,2049
 8000674:	21383b04 	addi	r4,r4,-7956
 8000678:	80021980 	call	8002198 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetDeviceDesc1();
 800067c:	80011840 	call	8001184 <UsbGetDeviceDesc1>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000680:	00000306 	br	8000690 <main+0x49c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 8000684:	80011840 	call	8001184 <UsbGetDeviceDesc1>
		usleep(10*1000);
 8000688:	0109c404 	movi	r4,10000
 800068c:	800c0100 	call	800c010 <usleep>
	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetDeviceDesc1();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000690:	00840034 	movhi	r2,4096
 8000694:	10800304 	addi	r2,r2,12
 8000698:	10800037 	ldwio	r2,0(r2)
 800069c:	1080040c 	andi	r2,r2,16
 80006a0:	103ff826 	beq	r2,zero,8000684 <__alt_data_end+0xf8000684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}
	UsbWaitTDListDone();
 80006a4:	8001f240 	call	8001f24 <UsbWaitTDListDone>
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80006a8:	00c14184 	movi	r3,1286
 80006ac:	00840034 	movhi	r2,4096
 80006b0:	10800204 	addi	r2,r2,8
 80006b4:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80006b8:	00840034 	movhi	r2,4096
 80006bc:	10800037 	ldwio	r2,0(r2)
 80006c0:	01020074 	movhi	r4,2049
 80006c4:	21384a04 	addi	r4,r4,-7896
 80006c8:	100b883a 	mov	r5,r2
 80006cc:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80006d0:	00c14204 	movi	r3,1288
 80006d4:	00840034 	movhi	r2,4096
 80006d8:	10800204 	addi	r2,r2,8
 80006dc:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80006e0:	00840034 	movhi	r2,4096
 80006e4:	10800037 	ldwio	r2,0(r2)
 80006e8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80006ec:	e0bffa0b 	ldhu	r2,-24(fp)
 80006f0:	01020074 	movhi	r4,2049
 80006f4:	21385504 	addi	r4,r4,-7852
 80006f8:	100b883a 	mov	r5,r2
 80006fc:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000700:	00000206 	br	800070c <main+0x518>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000704:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000708:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 800070c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000710:	108000d8 	cmpnei	r2,r2,3
 8000714:	103ffb1e 	bne	r2,zero,8000704 <__alt_data_end+0xf8000704>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000718:	01020074 	movhi	r4,2049
 800071c:	21386104 	addi	r4,r4,-7804
 8000720:	80021980 	call	8002198 <puts>

	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.

	UsbGetDeviceDesc2();
 8000724:	80012cc0 	call	80012cc <UsbGetDeviceDesc2>

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000728:	00000306 	br	8000738 <main+0x544>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 800072c:	80012cc0 	call	80012cc <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000730:	0109c404 	movi	r4,10000
 8000734:	800c0100 	call	800c010 <usleep>
	// TASK: Call the appropriate function for this step.

	UsbGetDeviceDesc2();

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000738:	00840034 	movhi	r2,4096
 800073c:	10800304 	addi	r2,r2,12
 8000740:	10800037 	ldwio	r2,0(r2)
 8000744:	1080040c 	andi	r2,r2,16
 8000748:	103ff826 	beq	r2,zero,800072c <__alt_data_end+0xf800072c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800074c:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000750:	00c14184 	movi	r3,1286
 8000754:	00840034 	movhi	r2,4096
 8000758:	10800204 	addi	r2,r2,8
 800075c:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000760:	00840034 	movhi	r2,4096
 8000764:	10800037 	ldwio	r2,0(r2)
 8000768:	01020074 	movhi	r4,2049
 800076c:	21384a04 	addi	r4,r4,-7896
 8000770:	100b883a 	mov	r5,r2
 8000774:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000778:	00c14204 	movi	r3,1288
 800077c:	00840034 	movhi	r2,4096
 8000780:	10800204 	addi	r2,r2,8
 8000784:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000788:	00840034 	movhi	r2,4096
 800078c:	10800037 	ldwio	r2,0(r2)
 8000790:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000794:	e0bffa0b 	ldhu	r2,-24(fp)
 8000798:	01020074 	movhi	r4,2049
 800079c:	21385504 	addi	r4,r4,-7852
 80007a0:	100b883a 	mov	r5,r2
 80007a4:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 80007a8:	00000206 	br	80007b4 <main+0x5c0>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80007ac:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 80007b0:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80007b4:	e0bffa0b 	ldhu	r2,-24(fp)
 80007b8:	108000d8 	cmpnei	r2,r2,3
 80007bc:	103ffb1e 	bne	r2,zero,80007ac <__alt_data_end+0xf80007ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 80007c0:	01020074 	movhi	r4,2049
 80007c4:	21387504 	addi	r4,r4,-7724
 80007c8:	80021980 	call	8002198 <puts>

	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetConfigDesc1();
 80007cc:	80014a40 	call	80014a4 <UsbGetConfigDesc1>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007d0:	00000306 	br	80007e0 <main+0x5ec>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 80007d4:	80014a40 	call	80014a4 <UsbGetConfigDesc1>
		usleep(10*1000);
 80007d8:	0109c404 	movi	r4,10000
 80007dc:	800c0100 	call	800c010 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetConfigDesc1();
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007e0:	00840034 	movhi	r2,4096
 80007e4:	10800304 	addi	r2,r2,12
 80007e8:	10800037 	ldwio	r2,0(r2)
 80007ec:	1080040c 	andi	r2,r2,16
 80007f0:	103ff826 	beq	r2,zero,80007d4 <__alt_data_end+0xf80007d4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80007f4:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80007f8:	00c14184 	movi	r3,1286
 80007fc:	00840034 	movhi	r2,4096
 8000800:	10800204 	addi	r2,r2,8
 8000804:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000808:	00840034 	movhi	r2,4096
 800080c:	10800037 	ldwio	r2,0(r2)
 8000810:	01020074 	movhi	r4,2049
 8000814:	21388704 	addi	r4,r4,-7652
 8000818:	100b883a 	mov	r5,r2
 800081c:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000820:	00c14204 	movi	r3,1288
 8000824:	00840034 	movhi	r2,4096
 8000828:	10800204 	addi	r2,r2,8
 800082c:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000830:	00840034 	movhi	r2,4096
 8000834:	10800037 	ldwio	r2,0(r2)
 8000838:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 800083c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000840:	01020074 	movhi	r4,2049
 8000844:	21389204 	addi	r4,r4,-7608
 8000848:	100b883a 	mov	r5,r2
 800084c:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000850:	00000206 	br	800085c <main+0x668>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000854:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000858:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 800085c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000860:	108000d8 	cmpnei	r2,r2,3
 8000864:	103ffb1e 	bne	r2,zero,8000854 <__alt_data_end+0xf8000854>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8000868:	01020074 	movhi	r4,2049
 800086c:	21389e04 	addi	r4,r4,-7560
 8000870:	80021980 	call	8002198 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetConfigDesc2();
 8000874:	80016340 	call	8001634 <UsbGetConfigDesc2>
	usleep(100*1000);
 8000878:	010000b4 	movhi	r4,2
 800087c:	2121a804 	addi	r4,r4,-31072
 8000880:	800c0100 	call	800c010 <usleep>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000884:	00000306 	br	8000894 <main+0x6a0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 8000888:	80016340 	call	8001634 <UsbGetConfigDesc2>
		usleep(10*1000);
 800088c:	0109c404 	movi	r4,10000
 8000890:	800c0100 	call	800c010 <usleep>
	// TASK: Call the appropriate function for this step.

	UsbGetConfigDesc2();
	usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000894:	00840034 	movhi	r2,4096
 8000898:	10800304 	addi	r2,r2,12
 800089c:	10800037 	ldwio	r2,0(r2)
 80008a0:	1080040c 	andi	r2,r2,16
 80008a4:	103ff826 	beq	r2,zero,8000888 <__alt_data_end+0xf8000888>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80008a8:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80008ac:	00c14184 	movi	r3,1286
 80008b0:	00840034 	movhi	r2,4096
 80008b4:	10800204 	addi	r2,r2,8
 80008b8:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80008bc:	00840034 	movhi	r2,4096
 80008c0:	10800037 	ldwio	r2,0(r2)
 80008c4:	01020074 	movhi	r4,2049
 80008c8:	2138b104 	addi	r4,r4,-7484
 80008cc:	100b883a 	mov	r5,r2
 80008d0:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80008d4:	00c14204 	movi	r3,1288
 80008d8:	00840034 	movhi	r2,4096
 80008dc:	10800204 	addi	r2,r2,8
 80008e0:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80008e4:	00840034 	movhi	r2,4096
 80008e8:	10800037 	ldwio	r2,0(r2)
 80008ec:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 80008f0:	e0bffa0b 	ldhu	r2,-24(fp)
 80008f4:	01020074 	movhi	r4,2049
 80008f8:	2138bc04 	addi	r4,r4,-7440
 80008fc:	100b883a 	mov	r5,r2
 8000900:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000904:	00000206 	br	8000910 <main+0x71c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000908:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 800090c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000910:	e0bffa0b 	ldhu	r2,-24(fp)
 8000914:	108000d8 	cmpnei	r2,r2,3
 8000918:	103ffb1e 	bne	r2,zero,8000908 <__alt_data_end+0xf8000908>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 800091c:	01020074 	movhi	r4,2049
 8000920:	2138c804 	addi	r4,r4,-7392
 8000924:	80021980 	call	8002198 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR
	UsbPrintMem();
 8000928:	80020300 	call	8002030 <UsbPrintMem>
	IOWR(CY7C67200_BASE, HPI_ADDR, 0x056C);
 800092c:	00c15b04 	movi	r3,1388
 8000930:	00840034 	movhi	r2,4096
 8000934:	10800204 	addi	r2,r2,8
 8000938:	10c00035 	stwio	r3,0(r2)
	code = IORD(CY7C67200_BASE,HPI_DATA);
 800093c:	00840034 	movhi	r2,4096
 8000940:	10800037 	ldwio	r2,0(r2)
 8000944:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000948:	e0bffe8b 	ldhu	r2,-6(fp)
 800094c:	01020074 	movhi	r4,2049
 8000950:	2138db04 	addi	r4,r4,-7316
 8000954:	100b883a 	mov	r5,r2
 8000958:	80020d80 	call	80020d8 <printf>
	code = code & 0x0ff;
 800095c:	e0bffe8b 	ldhu	r2,-6(fp)
 8000960:	10803fcc 	andi	r2,r2,255
 8000964:	e0bffe8d 	sth	r2,-6(fp)
	if (code == 0x01)
 8000968:	e0bffe8b 	ldhu	r2,-6(fp)
 800096c:	10800058 	cmpnei	r2,r2,1
 8000970:	1000041e 	bne	r2,zero,8000984 <main+0x790>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000974:	01020074 	movhi	r4,2049
 8000978:	2138de04 	addi	r4,r4,-7304
 800097c:	80021980 	call	8002198 <puts>
 8000980:	00000806 	br	80009a4 <main+0x7b0>
	}
	else
	{
		printf("\nvalue= %x\n", code);
 8000984:	e0bffe8b 	ldhu	r2,-6(fp)
 8000988:	01020074 	movhi	r4,2049
 800098c:	2138ed04 	addi	r4,r4,-7244
 8000990:	100b883a 	mov	r5,r2
 8000994:	80020d80 	call	80020d8 <printf>
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000998:	01020074 	movhi	r4,2049
 800099c:	2138f004 	addi	r4,r4,-7232
 80009a0:	80021980 	call	8002198 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.
	IOWR(CY7C67200_BASE, HPI_ADDR, 0x057B);
 80009a4:	00c15ec4 	movi	r3,1403
 80009a8:	00840034 	movhi	r2,4096
 80009ac:	10800204 	addi	r2,r2,8
 80009b0:	10c00035 	stwio	r3,0(r2)
	data_size = 0x08;//(IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff;
 80009b4:	00800204 	movi	r2,8
 80009b8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 80009bc:	e0bfff03 	ldbu	r2,-4(fp)
 80009c0:	01020074 	movhi	r4,2049
 80009c4:	2138f904 	addi	r4,r4,-7196
 80009c8:	100b883a 	mov	r5,r2
 80009cc:	80020d80 	call	80020d8 <printf>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbSetConfig();
 80009d0:	800189c0 	call	800189c <UsbSetConfig>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009d4:	00000306 	br	80009e4 <main+0x7f0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();
 80009d8:	800189c0 	call	800189c <UsbSetConfig>
		usleep(10*1000);
 80009dc:	0109c404 	movi	r4,10000
 80009e0:	800c0100 	call	800c010 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbSetConfig();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009e4:	00840034 	movhi	r2,4096
 80009e8:	10800304 	addi	r2,r2,12
 80009ec:	10800037 	ldwio	r2,0(r2)
 80009f0:	1080040c 	andi	r2,r2,16
 80009f4:	103ff826 	beq	r2,zero,80009d8 <__alt_data_end+0xf80009d8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80009f8:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80009fc:	00c14184 	movi	r3,1286
 8000a00:	00840034 	movhi	r2,4096
 8000a04:	10800204 	addi	r2,r2,8
 8000a08:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000a0c:	00840034 	movhi	r2,4096
 8000a10:	10800037 	ldwio	r2,0(r2)
 8000a14:	01020074 	movhi	r4,2049
 8000a18:	21390304 	addi	r4,r4,-7156
 8000a1c:	100b883a 	mov	r5,r2
 8000a20:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000a24:	00c14204 	movi	r3,1288
 8000a28:	00840034 	movhi	r2,4096
 8000a2c:	10800204 	addi	r2,r2,8
 8000a30:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000a34:	00840034 	movhi	r2,4096
 8000a38:	10800037 	ldwio	r2,0(r2)
 8000a3c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000a40:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a44:	01020074 	movhi	r4,2049
 8000a48:	21390e04 	addi	r4,r4,-7112
 8000a4c:	100b883a 	mov	r5,r2
 8000a50:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000a54:	00000206 	br	8000a60 <main+0x86c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a58:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000a5c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a60:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a64:	108000d8 	cmpnei	r2,r2,3
 8000a68:	103ffb1e 	bne	r2,zero,8000a58 <__alt_data_end+0xf8000a58>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000a6c:	01020074 	movhi	r4,2049
 8000a70:	21391a04 	addi	r4,r4,-7064
 8000a74:	80021980 	call	8002198 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbClassRequest();
 8000a78:	800199c0 	call	800199c <UsbClassRequest>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a7c:	00000306 	br	8000a8c <main+0x898>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000a80:	800199c0 	call	800199c <UsbClassRequest>
		usleep(10*1000);
 8000a84:	0109c404 	movi	r4,10000
 8000a88:	800c0100 	call	800c010 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbClassRequest();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a8c:	00840034 	movhi	r2,4096
 8000a90:	10800304 	addi	r2,r2,12
 8000a94:	10800037 	ldwio	r2,0(r2)
 8000a98:	1080040c 	andi	r2,r2,16
 8000a9c:	103ff826 	beq	r2,zero,8000a80 <__alt_data_end+0xf8000a80>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000aa0:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000aa4:	00c14184 	movi	r3,1286
 8000aa8:	00840034 	movhi	r2,4096
 8000aac:	10800204 	addi	r2,r2,8
 8000ab0:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000ab4:	00840034 	movhi	r2,4096
 8000ab8:	10800037 	ldwio	r2,0(r2)
 8000abc:	01020074 	movhi	r4,2049
 8000ac0:	21392c04 	addi	r4,r4,-6992
 8000ac4:	100b883a 	mov	r5,r2
 8000ac8:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000acc:	00c14204 	movi	r3,1288
 8000ad0:	00840034 	movhi	r2,4096
 8000ad4:	10800204 	addi	r2,r2,8
 8000ad8:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000adc:	00840034 	movhi	r2,4096
 8000ae0:	10800037 	ldwio	r2,0(r2)
 8000ae4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000ae8:	e0bffa0b 	ldhu	r2,-24(fp)
 8000aec:	01020074 	movhi	r4,2049
 8000af0:	21393704 	addi	r4,r4,-6948
 8000af4:	100b883a 	mov	r5,r2
 8000af8:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000afc:	00000206 	br	8000b08 <main+0x914>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000b00:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000b04:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000b08:	e0bffa0b 	ldhu	r2,-24(fp)
 8000b0c:	108000d8 	cmpnei	r2,r2,3
 8000b10:	103ffb1e 	bne	r2,zero,8000b00 <__alt_data_end+0xf8000b00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000b14:	01020074 	movhi	r4,2049
 8000b18:	21394304 	addi	r4,r4,-6900
 8000b1c:	80021980 	call	8002198 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetHidDesc();
 8000b20:	8001a9c0 	call	8001a9c <UsbGetHidDesc>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b24:	00000306 	br	8000b34 <main+0x940>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000b28:	8001a9c0 	call	8001a9c <UsbGetHidDesc>
		usleep(10*1000);
 8000b2c:	0109c404 	movi	r4,10000
 8000b30:	800c0100 	call	800c010 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.

	UsbGetHidDesc();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b34:	00840034 	movhi	r2,4096
 8000b38:	10800304 	addi	r2,r2,12
 8000b3c:	10800037 	ldwio	r2,0(r2)
 8000b40:	1080040c 	andi	r2,r2,16
 8000b44:	103ff826 	beq	r2,zero,8000b28 <__alt_data_end+0xf8000b28>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b48:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000b4c:	00c14184 	movi	r3,1286
 8000b50:	00840034 	movhi	r2,4096
 8000b54:	10800204 	addi	r2,r2,8
 8000b58:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000b5c:	00840034 	movhi	r2,4096
 8000b60:	10800037 	ldwio	r2,0(r2)
 8000b64:	01020074 	movhi	r4,2049
 8000b68:	21392c04 	addi	r4,r4,-6992
 8000b6c:	100b883a 	mov	r5,r2
 8000b70:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000b74:	00c14204 	movi	r3,1288
 8000b78:	00840034 	movhi	r2,4096
 8000b7c:	10800204 	addi	r2,r2,8
 8000b80:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000b84:	00840034 	movhi	r2,4096
 8000b88:	10800037 	ldwio	r2,0(r2)
 8000b8c:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000b90:	e0bffa0b 	ldhu	r2,-24(fp)
 8000b94:	01020074 	movhi	r4,2049
 8000b98:	21393704 	addi	r4,r4,-6948
 8000b9c:	100b883a 	mov	r5,r2
 8000ba0:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000ba4:	00000206 	br	8000bb0 <main+0x9bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000ba8:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000bac:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000bb0:	e0bffa0b 	ldhu	r2,-24(fp)
 8000bb4:	108000d8 	cmpnei	r2,r2,3
 8000bb8:	103ffb1e 	bne	r2,zero,8000ba8 <__alt_data_end+0xf8000ba8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000bbc:	01020074 	movhi	r4,2049
 8000bc0:	21395504 	addi	r4,r4,-6828
 8000bc4:	80021980 	call	8002198 <puts>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	//if no message

	UsbGetReportDesc();
 8000bc8:	8001be40 	call	8001be4 <UsbGetReportDesc>
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bcc:	00000306 	br	8000bdc <main+0x9e8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000bd0:	8001be40 	call	8001be4 <UsbGetReportDesc>
		usleep(10*1000);
 8000bd4:	0109c404 	movi	r4,10000
 8000bd8:	800c0100 	call	800c010 <usleep>
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	//if no message

	UsbGetReportDesc();
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bdc:	00840034 	movhi	r2,4096
 8000be0:	10800304 	addi	r2,r2,12
 8000be4:	10800037 	ldwio	r2,0(r2)
 8000be8:	1080040c 	andi	r2,r2,16
 8000bec:	103ff826 	beq	r2,zero,8000bd0 <__alt_data_end+0xf8000bd0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000bf0:	8001f240 	call	8001f24 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000bf4:	00c14184 	movi	r3,1286
 8000bf8:	00840034 	movhi	r2,4096
 8000bfc:	10800204 	addi	r2,r2,8
 8000c00:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000c04:	00840034 	movhi	r2,4096
 8000c08:	10800037 	ldwio	r2,0(r2)
 8000c0c:	01020074 	movhi	r4,2049
 8000c10:	21396904 	addi	r4,r4,-6748
 8000c14:	100b883a 	mov	r5,r2
 8000c18:	80020d80 	call	80020d8 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000c1c:	00c14204 	movi	r3,1288
 8000c20:	00840034 	movhi	r2,4096
 8000c24:	10800204 	addi	r2,r2,8
 8000c28:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000c2c:	00840034 	movhi	r2,4096
 8000c30:	10800037 	ldwio	r2,0(r2)
 8000c34:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000c38:	e0bffa0b 	ldhu	r2,-24(fp)
 8000c3c:	01020074 	movhi	r4,2049
 8000c40:	21397504 	addi	r4,r4,-6700
 8000c44:	100b883a 	mov	r5,r2
 8000c48:	80020d80 	call	80020d8 <printf>
	while (usb_ctl_val != 0x03)
 8000c4c:	00000206 	br	8000c58 <main+0xa64>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c50:	8001fa80 	call	8001fa8 <UsbGetRetryCnt>
 8000c54:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c58:	e0bffa0b 	ldhu	r2,-24(fp)
 8000c5c:	108000d8 	cmpnei	r2,r2,3
 8000c60:	103ffb1e 	bne	r2,zero,8000c50 <__alt_data_end+0xf8000c50>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000c64:	01020074 	movhi	r4,2049
 8000c68:	21398104 	addi	r4,r4,-6652
 8000c6c:	80021980 	call	8002198 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000c70:	0109c404 	movi	r4,10000
 8000c74:	800c0100 	call	800c010 <usleep>
	while(1)
	{
		toggle++;
 8000c78:	e0bffa83 	ldbu	r2,-22(fp)
 8000c7c:	10800044 	addi	r2,r2,1
 8000c80:	e0bffa85 	stb	r2,-22(fp)
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000c84:	00c14004 	movi	r3,1280
 8000c88:	00840034 	movhi	r2,4096
 8000c8c:	10800204 	addi	r2,r2,8
 8000c90:	10c00035 	stwio	r3,0(r2)
		//data phase IN-1
		IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000c94:	00c14704 	movi	r3,1308
 8000c98:	00840034 	movhi	r2,4096
 8000c9c:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000ca0:	e0bfff03 	ldbu	r2,-4(fp)
 8000ca4:	10c003cc 	andi	r3,r2,15
 8000ca8:	00840034 	movhi	r2,4096
 8000cac:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000cb0:	00c0a444 	movi	r3,657
 8000cb4:	00840034 	movhi	r2,4096
 8000cb8:	10c00035 	stwio	r3,0(r2)
		if(toggle%2)
 8000cbc:	e0bffa83 	ldbu	r2,-22(fp)
 8000cc0:	1080004c 	andi	r2,r2,1
 8000cc4:	10803fcc 	andi	r2,r2,255
 8000cc8:	10000426 	beq	r2,zero,8000cdc <main+0xae8>
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000ccc:	00c00044 	movi	r3,1
 8000cd0:	00840034 	movhi	r2,4096
 8000cd4:	10c00035 	stwio	r3,0(r2)
 8000cd8:	00000306 	br	8000ce8 <main+0xaf4>
		}
		else
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000cdc:	00c01044 	movi	r3,65
 8000ce0:	00840034 	movhi	r2,4096
 8000ce4:	10c00035 	stwio	r3,0(r2)
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000ce8:	00c004c4 	movi	r3,19
 8000cec:	00840034 	movhi	r2,4096
 8000cf0:	10c00035 	stwio	r3,0(r2)
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8000cf4:	0007883a 	mov	r3,zero
 8000cf8:	00840034 	movhi	r2,4096
 8000cfc:	10c00035 	stwio	r3,0(r2)
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000d00:	01006c04 	movi	r4,432
 8000d04:	01414004 	movi	r5,1280
 8000d08:	8000f440 	call	8000f44 <UsbWrite>
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d0c:	00002406 	br	8000da0 <main+0xbac>
		{
			IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000d10:	00c14004 	movi	r3,1280
 8000d14:	00840034 	movhi	r2,4096
 8000d18:	10800204 	addi	r2,r2,8
 8000d1c:	10c00035 	stwio	r3,0(r2)
			//data phase IN-1
			IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000d20:	00c14704 	movi	r3,1308
 8000d24:	00840034 	movhi	r2,4096
 8000d28:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000d2c:	e0bfff03 	ldbu	r2,-4(fp)
 8000d30:	10c003cc 	andi	r3,r2,15
 8000d34:	00840034 	movhi	r2,4096
 8000d38:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000d3c:	00c0a444 	movi	r3,657
 8000d40:	00840034 	movhi	r2,4096
 8000d44:	10c00035 	stwio	r3,0(r2)
			if(toggle%2)
 8000d48:	e0bffa83 	ldbu	r2,-22(fp)
 8000d4c:	1080004c 	andi	r2,r2,1
 8000d50:	10803fcc 	andi	r2,r2,255
 8000d54:	10000426 	beq	r2,zero,8000d68 <main+0xb74>
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000d58:	00c00044 	movi	r3,1
 8000d5c:	00840034 	movhi	r2,4096
 8000d60:	10c00035 	stwio	r3,0(r2)
 8000d64:	00000306 	br	8000d74 <main+0xb80>
			}
			else
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000d68:	00c01044 	movi	r3,65
 8000d6c:	00840034 	movhi	r2,4096
 8000d70:	10c00035 	stwio	r3,0(r2)
			}
			IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000d74:	00c004c4 	movi	r3,19
 8000d78:	00840034 	movhi	r2,4096
 8000d7c:	10c00035 	stwio	r3,0(r2)
			IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//
 8000d80:	0007883a 	mov	r3,zero
 8000d84:	00840034 	movhi	r2,4096
 8000d88:	10c00035 	stwio	r3,0(r2)
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000d8c:	01006c04 	movi	r4,432
 8000d90:	01414004 	movi	r5,1280
 8000d94:	8000f440 	call	8000f44 <UsbWrite>
			usleep(10*1000);
 8000d98:	0109c404 	movi	r4,10000
 8000d9c:	800c0100 	call	800c010 <usleep>
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000da0:	00840034 	movhi	r2,4096
 8000da4:	10800304 	addi	r2,r2,12
 8000da8:	10800037 	ldwio	r2,0(r2)
 8000dac:	1080040c 	andi	r2,r2,16
 8000db0:	103fd726 	beq	r2,zero,8000d10 <__alt_data_end+0xf8000d10>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while


		usb_ctl_val = UsbWaitTDListDone();
 8000db4:	8001f240 	call	8001f24 <UsbWaitTDListDone>
 8000db8:	e0bffa0d 	sth	r2,-24(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IOWR(CY7C67200_BASE, HPI_ADDR, 0x051E);
 8000dbc:	00c14784 	movi	r3,1310
 8000dc0:	00840034 	movhi	r2,4096
 8000dc4:	10800204 	addi	r2,r2,8
 8000dc8:	10c00035 	stwio	r3,0(r2)
		keycode = IORD(CY7C67200_BASE,HPI_DATA);
 8000dcc:	00840034 	movhi	r2,4096
 8000dd0:	10800037 	ldwio	r2,0(r2)
 8000dd4:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000dd8:	01020074 	movhi	r4,2049
 8000ddc:	21399504 	addi	r4,r4,-6572
 8000de0:	e17ffd17 	ldw	r5,-12(fp)
 8000de4:	80020d80 	call	80020d8 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000de8:	e0bffd17 	ldw	r2,-12(fp)
 8000dec:	10c03fcc 	andi	r3,r2,255
 8000df0:	00844034 	movhi	r2,4352
 8000df4:	10840804 	addi	r2,r2,4128
 8000df8:	10c00035 	stwio	r3,0(r2)

		
		usleep(200);//usleep(5000);
 8000dfc:	01003204 	movi	r4,200
 8000e00:	800c0100 	call	800c010 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000e04:	d0a6a50b 	ldhu	r2,-25964(gp)
 8000e08:	10bfffcc 	andi	r2,r2,65535
 8000e0c:	1009883a 	mov	r4,r2
 8000e10:	8000f8c0 	call	8000f8c <UsbRead>
 8000e14:	e0bffa0d 	sth	r2,-24(fp)

		if(!(usb_ctl_val & no_device))
 8000e18:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000e1c:	e0fffa0b 	ldhu	r3,-24(fp)
 8000e20:	1884703a 	and	r2,r3,r2
 8000e24:	10bfffcc 	andi	r2,r2,65535
 8000e28:	10003f1e 	bne	r2,zero,8000f28 <main+0xd34>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000e2c:	e03ffb15 	stw	zero,-20(fp)
 8000e30:	00000f06 	br	8000e70 <main+0xc7c>
			{
				usleep(5*1000);
 8000e34:	0104e204 	movi	r4,5000
 8000e38:	800c0100 	call	800c010 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000e3c:	d0a6a50b 	ldhu	r2,-25964(gp)
 8000e40:	10bfffcc 	andi	r2,r2,65535
 8000e44:	1009883a 	mov	r4,r2
 8000e48:	8000f8c0 	call	8000f8c <UsbRead>
 8000e4c:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device) break;
 8000e50:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000e54:	e0fffa0b 	ldhu	r3,-24(fp)
 8000e58:	1884703a 	and	r2,r3,r2
 8000e5c:	10bfffcc 	andi	r2,r2,65535
 8000e60:	1000071e 	bne	r2,zero,8000e80 <main+0xc8c>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000e64:	e0bffb17 	ldw	r2,-20(fp)
 8000e68:	10800044 	addi	r2,r2,1
 8000e6c:	e0bffb15 	stw	r2,-20(fp)
 8000e70:	e0bffb17 	ldw	r2,-20(fp)
 8000e74:	108001d0 	cmplti	r2,r2,7
 8000e78:	103fee1e 	bne	r2,zero,8000e34 <__alt_data_end+0xf8000e34>
 8000e7c:	00000106 	br	8000e84 <main+0xc90>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
 8000e80:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 8000e84:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000e88:	e0fffa0b 	ldhu	r3,-24(fp)
 8000e8c:	1884703a 	and	r2,r3,r2
 8000e90:	10bfffcc 	andi	r2,r2,65535
 8000e94:	1000241e 	bne	r2,zero,8000f28 <main+0xd34>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000e98:	01020074 	movhi	r4,2049
 8000e9c:	21399e04 	addi	r4,r4,-6536
 8000ea0:	80021980 	call	8002198 <puts>
				printf("[INFO]: please insert again!!! \n");
 8000ea4:	01020074 	movhi	r4,2049
 8000ea8:	2139a904 	addi	r4,r4,-6492
 8000eac:	80021980 	call	8002198 <puts>
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8000eb0:	00001d06 	br	8000f28 <main+0xd34>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8000eb4:	d0a6a50b 	ldhu	r2,-25964(gp)
 8000eb8:	10bfffcc 	andi	r2,r2,65535
 8000ebc:	1009883a 	mov	r4,r2
 8000ec0:	8000f8c0 	call	8000f8c <UsbRead>
 8000ec4:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000ec8:	0104e204 	movi	r4,5000
 8000ecc:	800c0100 	call	800c010 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000ed0:	d0a6a50b 	ldhu	r2,-25964(gp)
 8000ed4:	10bfffcc 	andi	r2,r2,65535
 8000ed8:	1009883a 	mov	r4,r2
 8000edc:	8000f8c0 	call	8000f8c <UsbRead>
 8000ee0:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000ee4:	0104e204 	movi	r4,5000
 8000ee8:	800c0100 	call	800c010 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000eec:	d0a6a50b 	ldhu	r2,-25964(gp)
 8000ef0:	10bfffcc 	andi	r2,r2,65535
 8000ef4:	1009883a 	mov	r4,r2
 8000ef8:	8000f8c0 	call	8000f8c <UsbRead>
 8000efc:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000f00:	0104e204 	movi	r4,5000
 8000f04:	800c0100 	call	800c010 <usleep>

			if(usb_ctl_val & no_device)
 8000f08:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000f0c:	e0fffa0b 	ldhu	r3,-24(fp)
 8000f10:	1884703a 	and	r2,r3,r2
 8000f14:	10bfffcc 	andi	r2,r2,65535
 8000f18:	103cc31e 	bne	r2,zero,8000228 <__alt_data_end+0xf8000228>
				goto USB_HOT_PLUG;

			usleep(200);
 8000f1c:	01003204 	movi	r4,200
 8000f20:	800c0100 	call	800c010 <usleep>
 8000f24:	00000106 	br	8000f2c <main+0xd38>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8000f28:	0001883a 	nop
 8000f2c:	d0a6a58b 	ldhu	r2,-25962(gp)
 8000f30:	e0fffa0b 	ldhu	r3,-24(fp)
 8000f34:	1884703a 	and	r2,r3,r2
 8000f38:	10bfffcc 	andi	r2,r2,65535
 8000f3c:	103fdd26 	beq	r2,zero,8000eb4 <__alt_data_end+0xf8000eb4>

			usleep(200);

		}

	}//end while
 8000f40:	003f4d06 	br	8000c78 <__alt_data_end+0xf8000c78>

08000f44 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8000f44:	defffd04 	addi	sp,sp,-12
 8000f48:	df000215 	stw	fp,8(sp)
 8000f4c:	df000204 	addi	fp,sp,8
 8000f50:	2007883a 	mov	r3,r4
 8000f54:	2805883a 	mov	r2,r5
 8000f58:	e0fffe0d 	sth	r3,-8(fp)
 8000f5c:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(USB_ADDRESS, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 8000f60:	e0fffe0b 	ldhu	r3,-8(fp)
 8000f64:	00840034 	movhi	r2,4096
 8000f68:	10800204 	addi	r2,r2,8
 8000f6c:	10c00035 	stwio	r3,0(r2)
	//usleep(10);

	//XIo_Out16(USB_DATA, Data);
	IOWR(CY7C67200_BASE,HPI_DATA,Data);
 8000f70:	e0ffff0b 	ldhu	r3,-4(fp)
 8000f74:	00840034 	movhi	r2,4096
 8000f78:	10c00035 	stwio	r3,0(r2)
}
 8000f7c:	e037883a 	mov	sp,fp
 8000f80:	df000017 	ldw	fp,0(sp)
 8000f84:	dec00104 	addi	sp,sp,4
 8000f88:	f800283a 	ret

08000f8c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 8000f8c:	defffe04 	addi	sp,sp,-8
 8000f90:	df000115 	stw	fp,4(sp)
 8000f94:	df000104 	addi	fp,sp,4
 8000f98:	2005883a 	mov	r2,r4
 8000f9c:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(HPI_ADDR, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 8000fa0:	e0ffff0b 	ldhu	r3,-4(fp)
 8000fa4:	00840034 	movhi	r2,4096
 8000fa8:	10800204 	addi	r2,r2,8
 8000fac:	10c00035 	stwio	r3,0(r2)
	//usleep(20);
	return IORD(CY7C67200_BASE,HPI_DATA);
 8000fb0:	00840034 	movhi	r2,4096
 8000fb4:	10800037 	ldwio	r2,0(r2)
}
 8000fb8:	e037883a 	mov	sp,fp
 8000fbc:	df000017 	ldw	fp,0(sp)
 8000fc0:	dec00104 	addi	sp,sp,4
 8000fc4:	f800283a 	ret

08000fc8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 8000fc8:	defffe04 	addi	sp,sp,-8
 8000fcc:	dfc00115 	stw	ra,4(sp)
 8000fd0:	df000015 	stw	fp,0(sp)
 8000fd4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 8000fd8:	00fe9414 	movui	r3,64080
 8000fdc:	00840034 	movhi	r2,4096
 8000fe0:	10800104 	addi	r2,r2,4
 8000fe4:	10c00035 	stwio	r3,0(r2)
	usleep(100000);
 8000fe8:	010000b4 	movhi	r4,2
 8000fec:	2121a804 	addi	r4,r4,-31072
 8000ff0:	800c0100 	call	800c010 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8000ff4:	01020074 	movhi	r4,2049
 8000ff8:	2139b104 	addi	r4,r4,-6460
 8000ffc:	80021980 	call	8002198 <puts>

	usleep(500000);
 8001000:	01000234 	movhi	r4,8
 8001004:	21284804 	addi	r4,r4,-24288
 8001008:	800c0100 	call	800c010 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 800100c:	01020074 	movhi	r4,2049
 8001010:	2139b804 	addi	r4,r4,-6432
 8001014:	80021980 	call	8002198 <puts>
	IORD(CY7C67200_BASE,HPI_MAILBOX);
 8001018:	00840034 	movhi	r2,4096
 800101c:	10800104 	addi	r2,r2,4
 8001020:	10800037 	ldwio	r2,0(r2)
	IORD(CY7C67200_BASE,HPI_STATUS);
 8001024:	00840034 	movhi	r2,4096
 8001028:	10800304 	addi	r2,r2,12
 800102c:	10800037 	ldwio	r2,0(r2)

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8001030:	01005104 	movi	r4,324
 8001034:	8000f8c0 	call	8000f8c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8001038:	01005104 	movi	r4,324
 800103c:	000b883a 	mov	r5,zero
 8001040:	8000f440 	call	8000f44 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 8001044:	01005204 	movi	r4,328
 8001048:	8000f8c0 	call	8000f8c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 800104c:	01005204 	movi	r4,328
 8001050:	000b883a 	mov	r5,zero
 8001054:	8000f440 	call	8000f44 <UsbWrite>

	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8001058:	01302414 	movui	r4,49296
 800105c:	017fffd4 	movui	r5,65535
 8001060:	8000f440 	call	8000f44 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8001064:	01302c14 	movui	r4,49328
 8001068:	017fffd4 	movui	r5,65535
 800106c:	8000f440 	call	8000f44 <UsbWrite>
}
 8001070:	e037883a 	mov	sp,fp
 8001074:	dfc00117 	ldw	ra,4(sp)
 8001078:	df000017 	ldw	fp,0(sp)
 800107c:	dec00204 	addi	sp,sp,8
 8001080:	f800283a 	ret

08001084 <UsbSetAddress>:


void UsbSetAddress()
{
 8001084:	defffe04 	addi	sp,sp,-8
 8001088:	dfc00115 	stw	ra,4(sp)
 800108c:	df000015 	stw	fp,0(sp)
 8001090:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001094:	00c14004 	movi	r3,1280
 8001098:	00840034 	movhi	r2,4096
 800109c:	10800204 	addi	r2,r2,8
 80010a0:	10c00035 	stwio	r3,0(r2)
	// TD #1: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80010a4:	00c14304 	movi	r3,1292
 80010a8:	00840034 	movhi	r2,4096
 80010ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80010b0:	00c00204 	movi	r3,8
 80010b4:	00840034 	movhi	r2,4096
 80010b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
 80010bc:	00c03404 	movi	r3,208
 80010c0:	00840034 	movhi	r2,4096
 80010c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80010c8:	00c00044 	movi	r3,1
 80010cc:	00840034 	movhi	r2,4096
 80010d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80010d4:	00c004c4 	movi	r3,19
 80010d8:	00840034 	movhi	r2,4096
 80010dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80010e0:	00c14504 	movi	r3,1300
 80010e4:	00840034 	movhi	r2,4096
 80010e8:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 more IOWR functions

	// TD #2: 4 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
 80010ec:	00c14004 	movi	r3,1280
 80010f0:	00840034 	movhi	r2,4096
 80010f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);
 80010f8:	00c00084 	movi	r3,2
 80010fc:	00840034 	movhi	r2,4096
 8001100:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001104:	0007883a 	mov	r3,zero
 8001108:	00840034 	movhi	r2,4096
 800110c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001110:	0007883a 	mov	r3,zero
 8001114:	00840034 	movhi	r2,4096
 8001118:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 IOWR functions
	
	// TD #3: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800111c:	0007883a 	mov	r3,zero
 8001120:	00840034 	movhi	r2,4096
 8001124:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001128:	0007883a 	mov	r3,zero
 800112c:	00840034 	movhi	r2,4096
 8001130:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0090);
 8001134:	00c02404 	movi	r3,144
 8001138:	00840034 	movhi	r2,4096
 800113c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 8001140:	00c01044 	movi	r3,65
 8001144:	00840034 	movhi	r2,4096
 8001148:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 800114c:	00c004c4 	movi	r3,19
 8001150:	00840034 	movhi	r2,4096
 8001154:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001158:	0007883a 	mov	r3,zero
 800115c:	00840034 	movhi	r2,4096
 8001160:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 6 IOWR functions

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001164:	01006c04 	movi	r4,432
 8001168:	01414004 	movi	r5,1280
 800116c:	8000f440 	call	8000f44 <UsbWrite>
}
 8001170:	e037883a 	mov	sp,fp
 8001174:	dfc00117 	ldw	ra,4(sp)
 8001178:	df000017 	ldw	fp,0(sp)
 800117c:	dec00204 	addi	sp,sp,8
 8001180:	f800283a 	ret

08001184 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 8001184:	defffe04 	addi	sp,sp,-8
 8001188:	dfc00115 	stw	ra,4(sp)
 800118c:	df000015 	stw	fp,0(sp)
 8001190:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001194:	00c14004 	movi	r3,1280
 8001198:	00840034 	movhi	r2,4096
 800119c:	10800204 	addi	r2,r2,8
 80011a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80011a4:	00c14304 	movi	r3,1292
 80011a8:	00840034 	movhi	r2,4096
 80011ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80011b0:	00c00204 	movi	r3,8
 80011b4:	00840034 	movhi	r2,4096
 80011b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 80011bc:	00c0b404 	movi	r3,720
 80011c0:	00840034 	movhi	r2,4096
 80011c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80011c8:	00c00044 	movi	r3,1
 80011cc:	00840034 	movhi	r2,4096
 80011d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80011d4:	00c004c4 	movi	r3,19
 80011d8:	00840034 	movhi	r2,4096
 80011dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80011e0:	00c14504 	movi	r3,1300
 80011e4:	00840034 	movhi	r2,4096
 80011e8:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 80011ec:	00c1a004 	movi	r3,1664
 80011f0:	00840034 	movhi	r2,4096
 80011f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100); //device 0x01
 80011f8:	00c04004 	movi	r3,256
 80011fc:	00840034 	movhi	r2,4096
 8001200:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001204:	0007883a 	mov	r3,zero
 8001208:	00840034 	movhi	r2,4096
 800120c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
 8001210:	00c00204 	movi	r3,8
 8001214:	00840034 	movhi	r2,4096
 8001218:	10c00035 	stwio	r3,0(r2)

	//data phase IN
	IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
 800121c:	00c14b04 	movi	r3,1324
 8001220:	00840034 	movhi	r2,4096
 8001224:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
 8001228:	00c00204 	movi	r3,8
 800122c:	00840034 	movhi	r2,4096
 8001230:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
 8001234:	00c0a404 	movi	r3,656
 8001238:	00840034 	movhi	r2,4096
 800123c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 8001240:	00c01044 	movi	r3,65
 8001244:	00840034 	movhi	r2,4096
 8001248:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 800124c:	00c004c4 	movi	r3,19
 8001250:	00840034 	movhi	r2,4096
 8001254:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
 8001258:	00c14804 	movi	r3,1312
 800125c:	00840034 	movhi	r2,4096
 8001260:	10c00035 	stwio	r3,0(r2)

	//    //status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001264:	0007883a 	mov	r3,zero
 8001268:	00840034 	movhi	r2,4096
 800126c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 8001270:	0007883a 	mov	r3,zero
 8001274:	00840034 	movhi	r2,4096
 8001278:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
 800127c:	00c08404 	movi	r3,528
 8001280:	00840034 	movhi	r2,4096
 8001284:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 8001288:	00c01044 	movi	r3,65
 800128c:	00840034 	movhi	r2,4096
 8001290:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001294:	00c004c4 	movi	r3,19
 8001298:	00840034 	movhi	r2,4096
 800129c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80012a0:	0007883a 	mov	r3,zero
 80012a4:	00840034 	movhi	r2,4096
 80012a8:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80012ac:	01006c04 	movi	r4,432
 80012b0:	01414004 	movi	r5,1280
 80012b4:	8000f440 	call	8000f44 <UsbWrite>
}
 80012b8:	e037883a 	mov	sp,fp
 80012bc:	dfc00117 	ldw	ra,4(sp)
 80012c0:	df000017 	ldw	fp,0(sp)
 80012c4:	dec00204 	addi	sp,sp,8
 80012c8:	f800283a 	ret

080012cc <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 80012cc:	defffe04 	addi	sp,sp,-8
 80012d0:	dfc00115 	stw	ra,4(sp)
 80012d4:	df000015 	stw	fp,0(sp)
 80012d8:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80012dc:	00c14004 	movi	r3,1280
 80012e0:	00840034 	movhi	r2,4096
 80012e4:	10800204 	addi	r2,r2,8
 80012e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80012ec:	00c14304 	movi	r3,1292
 80012f0:	00840034 	movhi	r2,4096
 80012f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80012f8:	00c00204 	movi	r3,8
 80012fc:	00840034 	movhi	r2,4096
 8001300:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001304:	00c0b404 	movi	r3,720
 8001308:	00840034 	movhi	r2,4096
 800130c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001310:	00c00044 	movi	r3,1
 8001314:	00840034 	movhi	r2,4096
 8001318:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 800131c:	00c004c4 	movi	r3,19
 8001320:	00840034 	movhi	r2,4096
 8001324:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001328:	00c14504 	movi	r3,1300
 800132c:	00840034 	movhi	r2,4096
 8001330:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 8001334:	00c1a004 	movi	r3,1664
 8001338:	00840034 	movhi	r2,4096
 800133c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e //device 0x01
 8001340:	00c04004 	movi	r3,256
 8001344:	00840034 	movhi	r2,4096
 8001348:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 800134c:	0007883a 	mov	r3,zero
 8001350:	00840034 	movhi	r2,4096
 8001354:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
 8001358:	00c00484 	movi	r3,18
 800135c:	00840034 	movhi	r2,4096
 8001360:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001364:	00c15104 	movi	r3,1348
 8001368:	00840034 	movhi	r2,4096
 800136c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001370:	00c00204 	movi	r3,8
 8001374:	00840034 	movhi	r2,4096
 8001378:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 800137c:	00c0a404 	movi	r3,656
 8001380:	00840034 	movhi	r2,4096
 8001384:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001388:	00c01044 	movi	r3,65
 800138c:	00840034 	movhi	r2,4096
 8001390:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001394:	00c004c4 	movi	r3,19
 8001398:	00840034 	movhi	r2,4096
 800139c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 80013a0:	00c14804 	movi	r3,1312
 80013a4:	00840034 	movhi	r2,4096
 80013a8:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 80013ac:	00c15304 	movi	r3,1356
 80013b0:	00840034 	movhi	r2,4096
 80013b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 80013b8:	00c00204 	movi	r3,8
 80013bc:	00840034 	movhi	r2,4096
 80013c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 80013c4:	00c0a404 	movi	r3,656
 80013c8:	00840034 	movhi	r2,4096
 80013cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
 80013d0:	00c00044 	movi	r3,1
 80013d4:	00840034 	movhi	r2,4096
 80013d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 80013dc:	00c004c4 	movi	r3,19
 80013e0:	00840034 	movhi	r2,4096
 80013e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 80013e8:	00c14b04 	movi	r3,1324
 80013ec:	00840034 	movhi	r2,4096
 80013f0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
 80013f4:	00c15504 	movi	r3,1364
 80013f8:	00840034 	movhi	r2,4096
 80013fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
 8001400:	00c00084 	movi	r3,2
 8001404:	00840034 	movhi	r2,4096
 8001408:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 800140c:	00c0a404 	movi	r3,656
 8001410:	00840034 	movhi	r2,4096
 8001414:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001418:	00c01044 	movi	r3,65
 800141c:	00840034 	movhi	r2,4096
 8001420:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001424:	00c004c4 	movi	r3,19
 8001428:	00840034 	movhi	r2,4096
 800142c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001430:	00c14e04 	movi	r3,1336
 8001434:	00840034 	movhi	r2,4096
 8001438:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
 800143c:	0007883a 	mov	r3,zero
 8001440:	00840034 	movhi	r2,4096
 8001444:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8001448:	0007883a 	mov	r3,zero
 800144c:	00840034 	movhi	r2,4096
 8001450:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
 8001454:	00c08404 	movi	r3,528
 8001458:	00840034 	movhi	r2,4096
 800145c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
 8001460:	00c01044 	movi	r3,65
 8001464:	00840034 	movhi	r2,4096
 8001468:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 800146c:	00c004c4 	movi	r3,19
 8001470:	00840034 	movhi	r2,4096
 8001474:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 8001478:	0007883a 	mov	r3,zero
 800147c:	00840034 	movhi	r2,4096
 8001480:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001484:	01006c04 	movi	r4,432
 8001488:	01414004 	movi	r5,1280
 800148c:	8000f440 	call	8000f44 <UsbWrite>
}
 8001490:	e037883a 	mov	sp,fp
 8001494:	dfc00117 	ldw	ra,4(sp)
 8001498:	df000017 	ldw	fp,0(sp)
 800149c:	dec00204 	addi	sp,sp,8
 80014a0:	f800283a 	ret

080014a4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 80014a4:	defffe04 	addi	sp,sp,-8
 80014a8:	dfc00115 	stw	ra,4(sp)
 80014ac:	df000015 	stw	fp,0(sp)
 80014b0:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80014b4:	00c14004 	movi	r3,1280
 80014b8:	00840034 	movhi	r2,4096
 80014bc:	10800204 	addi	r2,r2,8
 80014c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80014c4:	00c14304 	movi	r3,1292
 80014c8:	00840034 	movhi	r2,4096
 80014cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80014d0:	00c00204 	movi	r3,8
 80014d4:	00840034 	movhi	r2,4096
 80014d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 80014dc:	00c0b404 	movi	r3,720
 80014e0:	00840034 	movhi	r2,4096
 80014e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80014e8:	00c00044 	movi	r3,1
 80014ec:	00840034 	movhi	r2,4096
 80014f0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80014f4:	00c004c4 	movi	r3,19
 80014f8:	00840034 	movhi	r2,4096
 80014fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001500:	00c14504 	movi	r3,1300
 8001504:	00840034 	movhi	r2,4096
 8001508:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 800150c:	00c1a004 	movi	r3,1664
 8001510:	00840034 	movhi	r2,4096
 8001514:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 8001518:	00c08004 	movi	r3,512
 800151c:	00840034 	movhi	r2,4096
 8001520:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001524:	0007883a 	mov	r3,zero
 8001528:	00840034 	movhi	r2,4096
 800152c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
 8001530:	00c00244 	movi	r3,9
 8001534:	00840034 	movhi	r2,4096
 8001538:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 800153c:	00c15104 	movi	r3,1348
 8001540:	00840034 	movhi	r2,4096
 8001544:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001548:	00c00204 	movi	r3,8
 800154c:	00840034 	movhi	r2,4096
 8001550:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001554:	00c0a404 	movi	r3,656
 8001558:	00840034 	movhi	r2,4096
 800155c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001560:	00c01044 	movi	r3,65
 8001564:	00840034 	movhi	r2,4096
 8001568:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 800156c:	00c004c4 	movi	r3,19
 8001570:	00840034 	movhi	r2,4096
 8001574:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001578:	00c14804 	movi	r3,1312
 800157c:	00840034 	movhi	r2,4096
 8001580:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 8001584:	00c15304 	movi	r3,1356
 8001588:	00840034 	movhi	r2,4096
 800158c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
 8001590:	00c00044 	movi	r3,1
 8001594:	00840034 	movhi	r2,4096
 8001598:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 800159c:	00c0a404 	movi	r3,656
 80015a0:	00840034 	movhi	r2,4096
 80015a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 80015a8:	00c00044 	movi	r3,1
 80015ac:	00840034 	movhi	r2,4096
 80015b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 80015b4:	00c004c4 	movi	r3,19
 80015b8:	00840034 	movhi	r2,4096
 80015bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 80015c0:	00c14b04 	movi	r3,1324
 80015c4:	00840034 	movhi	r2,4096
 80015c8:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 80015cc:	0007883a 	mov	r3,zero
 80015d0:	00840034 	movhi	r2,4096
 80015d4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 80015d8:	0007883a 	mov	r3,zero
 80015dc:	00840034 	movhi	r2,4096
 80015e0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 80015e4:	00c08404 	movi	r3,528
 80015e8:	00840034 	movhi	r2,4096
 80015ec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 80015f0:	00c01044 	movi	r3,65
 80015f4:	00840034 	movhi	r2,4096
 80015f8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 80015fc:	00c004c4 	movi	r3,19
 8001600:	00840034 	movhi	r2,4096
 8001604:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001608:	0007883a 	mov	r3,zero
 800160c:	00840034 	movhi	r2,4096
 8001610:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001614:	01006c04 	movi	r4,432
 8001618:	01414004 	movi	r5,1280
 800161c:	8000f440 	call	8000f44 <UsbWrite>
}
 8001620:	e037883a 	mov	sp,fp
 8001624:	dfc00117 	ldw	ra,4(sp)
 8001628:	df000017 	ldw	fp,0(sp)
 800162c:	dec00204 	addi	sp,sp,8
 8001630:	f800283a 	ret

08001634 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 8001634:	defffe04 	addi	sp,sp,-8
 8001638:	dfc00115 	stw	ra,4(sp)
 800163c:	df000015 	stw	fp,0(sp)
 8001640:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001644:	00c14004 	movi	r3,1280
 8001648:	00840034 	movhi	r2,4096
 800164c:	10800204 	addi	r2,r2,8
 8001650:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001654:	00c14304 	movi	r3,1292
 8001658:	00840034 	movhi	r2,4096
 800165c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001660:	00c00204 	movi	r3,8
 8001664:	00840034 	movhi	r2,4096
 8001668:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 800166c:	00c0b404 	movi	r3,720
 8001670:	00840034 	movhi	r2,4096
 8001674:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001678:	00c00044 	movi	r3,1
 800167c:	00840034 	movhi	r2,4096
 8001680:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001684:	00c004c4 	movi	r3,19
 8001688:	00840034 	movhi	r2,4096
 800168c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001690:	00c14504 	movi	r3,1300
 8001694:	00840034 	movhi	r2,4096
 8001698:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 800169c:	00c1a004 	movi	r3,1664
 80016a0:	00840034 	movhi	r2,4096
 80016a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 80016a8:	00c08004 	movi	r3,512
 80016ac:	00840034 	movhi	r2,4096
 80016b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 80016b4:	0007883a 	mov	r3,zero
 80016b8:	00840034 	movhi	r2,4096
 80016bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
 80016c0:	00c03fc4 	movi	r3,255
 80016c4:	00840034 	movhi	r2,4096
 80016c8:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
 80016cc:	00c15704 	movi	r3,1372
 80016d0:	00840034 	movhi	r2,4096
 80016d4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 80016d8:	00c00204 	movi	r3,8
 80016dc:	00840034 	movhi	r2,4096
 80016e0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 80016e4:	00c0a404 	movi	r3,656
 80016e8:	00840034 	movhi	r2,4096
 80016ec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 80016f0:	00c01044 	movi	r3,65
 80016f4:	00840034 	movhi	r2,4096
 80016f8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 80016fc:	00c004c4 	movi	r3,19
 8001700:	00840034 	movhi	r2,4096
 8001704:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001708:	00c14804 	movi	r3,1312
 800170c:	00840034 	movhi	r2,4096
 8001710:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
 8001714:	00c15904 	movi	r3,1380
 8001718:	00840034 	movhi	r2,4096
 800171c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001720:	00c00204 	movi	r3,8
 8001724:	00840034 	movhi	r2,4096
 8001728:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 800172c:	00c0a404 	movi	r3,656
 8001730:	00840034 	movhi	r2,4096
 8001734:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001738:	00c00044 	movi	r3,1
 800173c:	00840034 	movhi	r2,4096
 8001740:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001744:	00c004c4 	movi	r3,19
 8001748:	00840034 	movhi	r2,4096
 800174c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001750:	00c14b04 	movi	r3,1324
 8001754:	00840034 	movhi	r2,4096
 8001758:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
 800175c:	00c15b04 	movi	r3,1388
 8001760:	00840034 	movhi	r2,4096
 8001764:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001768:	00c00204 	movi	r3,8
 800176c:	00840034 	movhi	r2,4096
 8001770:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001774:	00c0a404 	movi	r3,656
 8001778:	00840034 	movhi	r2,4096
 800177c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001780:	00c01044 	movi	r3,65
 8001784:	00840034 	movhi	r2,4096
 8001788:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 800178c:	00c004c4 	movi	r3,19
 8001790:	00840034 	movhi	r2,4096
 8001794:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001798:	00c14e04 	movi	r3,1336
 800179c:	00840034 	movhi	r2,4096
 80017a0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
 80017a4:	00c15d04 	movi	r3,1396
 80017a8:	00840034 	movhi	r2,4096
 80017ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 80017b0:	00c00204 	movi	r3,8
 80017b4:	00840034 	movhi	r2,4096
 80017b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 80017bc:	00c0a404 	movi	r3,656
 80017c0:	00840034 	movhi	r2,4096
 80017c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 80017c8:	00c00044 	movi	r3,1
 80017cc:	00840034 	movhi	r2,4096
 80017d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 80017d4:	00c004c4 	movi	r3,19
 80017d8:	00840034 	movhi	r2,4096
 80017dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 80017e0:	00c15104 	movi	r3,1348
 80017e4:	00840034 	movhi	r2,4096
 80017e8:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
 80017ec:	00c15f04 	movi	r3,1404
 80017f0:	00840034 	movhi	r2,4096
 80017f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
 80017f8:	00c00084 	movi	r3,2
 80017fc:	00840034 	movhi	r2,4096
 8001800:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001804:	00c0a404 	movi	r3,656
 8001808:	00840034 	movhi	r2,4096
 800180c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001810:	00c01044 	movi	r3,65
 8001814:	00840034 	movhi	r2,4096
 8001818:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 800181c:	00c004c4 	movi	r3,19
 8001820:	00840034 	movhi	r2,4096
 8001824:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 8001828:	00c15404 	movi	r3,1360
 800182c:	00840034 	movhi	r2,4096
 8001830:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
 8001834:	0007883a 	mov	r3,zero
 8001838:	00840034 	movhi	r2,4096
 800183c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 8001840:	0007883a 	mov	r3,zero
 8001844:	00840034 	movhi	r2,4096
 8001848:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
 800184c:	00c08404 	movi	r3,528
 8001850:	00840034 	movhi	r2,4096
 8001854:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
 8001858:	00c01044 	movi	r3,65
 800185c:	00840034 	movhi	r2,4096
 8001860:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001864:	00c004c4 	movi	r3,19
 8001868:	00840034 	movhi	r2,4096
 800186c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8001870:	0007883a 	mov	r3,zero
 8001874:	00840034 	movhi	r2,4096
 8001878:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800187c:	01006c04 	movi	r4,432
 8001880:	01414004 	movi	r5,1280
 8001884:	8000f440 	call	8000f44 <UsbWrite>
}
 8001888:	e037883a 	mov	sp,fp
 800188c:	dfc00117 	ldw	ra,4(sp)
 8001890:	df000017 	ldw	fp,0(sp)
 8001894:	dec00204 	addi	sp,sp,8
 8001898:	f800283a 	ret

0800189c <UsbSetConfig>:

void UsbSetConfig()
{
 800189c:	defffe04 	addi	sp,sp,-8
 80018a0:	dfc00115 	stw	ra,4(sp)
 80018a4:	df000015 	stw	fp,0(sp)
 80018a8:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80018ac:	00c14004 	movi	r3,1280
 80018b0:	00840034 	movhi	r2,4096
 80018b4:	10800204 	addi	r2,r2,8
 80018b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80018bc:	00c14304 	movi	r3,1292
 80018c0:	00840034 	movhi	r2,4096
 80018c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80018c8:	00c00204 	movi	r3,8
 80018cc:	00840034 	movhi	r2,4096
 80018d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 80018d4:	00c0b404 	movi	r3,720
 80018d8:	00840034 	movhi	r2,4096
 80018dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80018e0:	00c00044 	movi	r3,1
 80018e4:	00840034 	movhi	r2,4096
 80018e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80018ec:	00c004c4 	movi	r3,19
 80018f0:	00840034 	movhi	r2,4096
 80018f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80018f8:	00c14504 	movi	r3,1300
 80018fc:	00840034 	movhi	r2,4096
 8001900:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
 8001904:	00c24004 	movi	r3,2304
 8001908:	00840034 	movhi	r2,4096
 800190c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address
 8001910:	00c00044 	movi	r3,1
 8001914:	00840034 	movhi	r2,4096
 8001918:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800191c:	0007883a 	mov	r3,zero
 8001920:	00840034 	movhi	r2,4096
 8001924:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001928:	0007883a 	mov	r3,zero
 800192c:	00840034 	movhi	r2,4096
 8001930:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001934:	0007883a 	mov	r3,zero
 8001938:	00840034 	movhi	r2,4096
 800193c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 8001940:	0007883a 	mov	r3,zero
 8001944:	00840034 	movhi	r2,4096
 8001948:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 800194c:	00c0a404 	movi	r3,656
 8001950:	00840034 	movhi	r2,4096
 8001954:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 8001958:	00c01044 	movi	r3,65
 800195c:	00840034 	movhi	r2,4096
 8001960:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001964:	00c004c4 	movi	r3,19
 8001968:	00840034 	movhi	r2,4096
 800196c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001970:	0007883a 	mov	r3,zero
 8001974:	00840034 	movhi	r2,4096
 8001978:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800197c:	01006c04 	movi	r4,432
 8001980:	01414004 	movi	r5,1280
 8001984:	8000f440 	call	8000f44 <UsbWrite>

}
 8001988:	e037883a 	mov	sp,fp
 800198c:	dfc00117 	ldw	ra,4(sp)
 8001990:	df000017 	ldw	fp,0(sp)
 8001994:	dec00204 	addi	sp,sp,8
 8001998:	f800283a 	ret

0800199c <UsbClassRequest>:

void UsbClassRequest()
{
 800199c:	defffe04 	addi	sp,sp,-8
 80019a0:	dfc00115 	stw	ra,4(sp)
 80019a4:	df000015 	stw	fp,0(sp)
 80019a8:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80019ac:	00c14004 	movi	r3,1280
 80019b0:	00840034 	movhi	r2,4096
 80019b4:	10800204 	addi	r2,r2,8
 80019b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80019bc:	00c14304 	movi	r3,1292
 80019c0:	00840034 	movhi	r2,4096
 80019c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80019c8:	00c00204 	movi	r3,8
 80019cc:	00840034 	movhi	r2,4096
 80019d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 80019d4:	00c0b404 	movi	r3,720
 80019d8:	00840034 	movhi	r2,4096
 80019dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80019e0:	00c00044 	movi	r3,1
 80019e4:	00840034 	movhi	r2,4096
 80019e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80019ec:	00c004c4 	movi	r3,19
 80019f0:	00840034 	movhi	r2,4096
 80019f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 80019f8:	00c14504 	movi	r3,1300
 80019fc:	00840034 	movhi	r2,4096
 8001a00:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
 8001a04:	00c28844 	movi	r3,2593
 8001a08:	00840034 	movhi	r2,4096
 8001a0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address
 8001a10:	0007883a 	mov	r3,zero
 8001a14:	00840034 	movhi	r2,4096
 8001a18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001a1c:	0007883a 	mov	r3,zero
 8001a20:	00840034 	movhi	r2,4096
 8001a24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001a28:	0007883a 	mov	r3,zero
 8001a2c:	00840034 	movhi	r2,4096
 8001a30:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 8001a34:	0007883a 	mov	r3,zero
 8001a38:	00840034 	movhi	r2,4096
 8001a3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
 8001a40:	0007883a 	mov	r3,zero
 8001a44:	00840034 	movhi	r2,4096
 8001a48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 8001a4c:	00c0a404 	movi	r3,656
 8001a50:	00840034 	movhi	r2,4096
 8001a54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 8001a58:	00c01044 	movi	r3,65
 8001a5c:	00840034 	movhi	r2,4096
 8001a60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001a64:	00c004c4 	movi	r3,19
 8001a68:	00840034 	movhi	r2,4096
 8001a6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001a70:	0007883a 	mov	r3,zero
 8001a74:	00840034 	movhi	r2,4096
 8001a78:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001a7c:	01006c04 	movi	r4,432
 8001a80:	01414004 	movi	r5,1280
 8001a84:	8000f440 	call	8000f44 <UsbWrite>
}
 8001a88:	e037883a 	mov	sp,fp
 8001a8c:	dfc00117 	ldw	ra,4(sp)
 8001a90:	df000017 	ldw	fp,0(sp)
 8001a94:	dec00204 	addi	sp,sp,8
 8001a98:	f800283a 	ret

08001a9c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001a9c:	defffe04 	addi	sp,sp,-8
 8001aa0:	dfc00115 	stw	ra,4(sp)
 8001aa4:	df000015 	stw	fp,0(sp)
 8001aa8:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001aac:	00c14004 	movi	r3,1280
 8001ab0:	00840034 	movhi	r2,4096
 8001ab4:	10800204 	addi	r2,r2,8
 8001ab8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001abc:	00c14304 	movi	r3,1292
 8001ac0:	00840034 	movhi	r2,4096
 8001ac4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001ac8:	00c00204 	movi	r3,8
 8001acc:	00840034 	movhi	r2,4096
 8001ad0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001ad4:	00c0b404 	movi	r3,720
 8001ad8:	00840034 	movhi	r2,4096
 8001adc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001ae0:	00c00044 	movi	r3,1
 8001ae4:	00840034 	movhi	r2,4096
 8001ae8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001aec:	00c004c4 	movi	r3,19
 8001af0:	00840034 	movhi	r2,4096
 8001af4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001af8:	00c14504 	movi	r3,1300
 8001afc:	00840034 	movhi	r2,4096
 8001b00:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001b04:	00c1a044 	movi	r3,1665
 8001b08:	00840034 	movhi	r2,4096
 8001b0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //HID 0x21
 8001b10:	00c84004 	movi	r3,8448
 8001b14:	00840034 	movhi	r2,4096
 8001b18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001b1c:	0007883a 	mov	r3,zero
 8001b20:	00840034 	movhi	r2,4096
 8001b24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001b28:	00c01ec4 	movi	r3,123
 8001b2c:	00840034 	movhi	r2,4096
 8001b30:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001b34:	00c15104 	movi	r3,1348
 8001b38:	00840034 	movhi	r2,4096
 8001b3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001b40:	00c00204 	movi	r3,8
 8001b44:	00840034 	movhi	r2,4096
 8001b48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001b4c:	00c0a404 	movi	r3,656
 8001b50:	00840034 	movhi	r2,4096
 8001b54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001b58:	00c01044 	movi	r3,65
 8001b5c:	00840034 	movhi	r2,4096
 8001b60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001b64:	00c004c4 	movi	r3,19
 8001b68:	00840034 	movhi	r2,4096
 8001b6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001b70:	00c14804 	movi	r3,1312
 8001b74:	00840034 	movhi	r2,4096
 8001b78:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 8001b7c:	0007883a 	mov	r3,zero
 8001b80:	00840034 	movhi	r2,4096
 8001b84:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001b88:	0007883a 	mov	r3,zero
 8001b8c:	00840034 	movhi	r2,4096
 8001b90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001b94:	00c08404 	movi	r3,528
 8001b98:	00840034 	movhi	r2,4096
 8001b9c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001ba0:	00c01044 	movi	r3,65
 8001ba4:	00840034 	movhi	r2,4096
 8001ba8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001bac:	00c004c4 	movi	r3,19
 8001bb0:	00840034 	movhi	r2,4096
 8001bb4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001bb8:	0007883a 	mov	r3,zero
 8001bbc:	00840034 	movhi	r2,4096
 8001bc0:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001bc4:	01006c04 	movi	r4,432
 8001bc8:	01414004 	movi	r5,1280
 8001bcc:	8000f440 	call	8000f44 <UsbWrite>

}
 8001bd0:	e037883a 	mov	sp,fp
 8001bd4:	dfc00117 	ldw	ra,4(sp)
 8001bd8:	df000017 	ldw	fp,0(sp)
 8001bdc:	dec00204 	addi	sp,sp,8
 8001be0:	f800283a 	ret

08001be4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001be4:	defffe04 	addi	sp,sp,-8
 8001be8:	dfc00115 	stw	ra,4(sp)
 8001bec:	df000015 	stw	fp,0(sp)
 8001bf0:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001bf4:	00c14004 	movi	r3,1280
 8001bf8:	00840034 	movhi	r2,4096
 8001bfc:	10800204 	addi	r2,r2,8
 8001c00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001c04:	00c14304 	movi	r3,1292
 8001c08:	00840034 	movhi	r2,4096
 8001c0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001c10:	00c00204 	movi	r3,8
 8001c14:	00840034 	movhi	r2,4096
 8001c18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001c1c:	00c0b404 	movi	r3,720
 8001c20:	00840034 	movhi	r2,4096
 8001c24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001c28:	00c00044 	movi	r3,1
 8001c2c:	00840034 	movhi	r2,4096
 8001c30:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001c34:	00c004c4 	movi	r3,19
 8001c38:	00840034 	movhi	r2,4096
 8001c3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001c40:	00c14504 	movi	r3,1300
 8001c44:	00840034 	movhi	r2,4096
 8001c48:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001c4c:	00c1a044 	movi	r3,1665
 8001c50:	00840034 	movhi	r2,4096
 8001c54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //report 0x22
 8001c58:	00c88004 	movi	r3,8704
 8001c5c:	00840034 	movhi	r2,4096
 8001c60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001c64:	0007883a 	mov	r3,zero
 8001c68:	00840034 	movhi	r2,4096
 8001c6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001c70:	00c01ec4 	movi	r3,123
 8001c74:	00840034 	movhi	r2,4096
 8001c78:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
 8001c7c:	00c16004 	movi	r3,1408
 8001c80:	00840034 	movhi	r2,4096
 8001c84:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001c88:	00c00204 	movi	r3,8
 8001c8c:	00840034 	movhi	r2,4096
 8001c90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001c94:	00c0a404 	movi	r3,656
 8001c98:	00840034 	movhi	r2,4096
 8001c9c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001ca0:	00c01044 	movi	r3,65
 8001ca4:	00840034 	movhi	r2,4096
 8001ca8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001cac:	00c004c4 	movi	r3,19
 8001cb0:	00840034 	movhi	r2,4096
 8001cb4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001cb8:	00c14804 	movi	r3,1312
 8001cbc:	00840034 	movhi	r2,4096
 8001cc0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
 8001cc4:	00c16204 	movi	r3,1416
 8001cc8:	00840034 	movhi	r2,4096
 8001ccc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001cd0:	00c00204 	movi	r3,8
 8001cd4:	00840034 	movhi	r2,4096
 8001cd8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001cdc:	00c0a404 	movi	r3,656
 8001ce0:	00840034 	movhi	r2,4096
 8001ce4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001ce8:	00c00044 	movi	r3,1
 8001cec:	00840034 	movhi	r2,4096
 8001cf0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001cf4:	00c004c4 	movi	r3,19
 8001cf8:	00840034 	movhi	r2,4096
 8001cfc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001d00:	00c14b04 	movi	r3,1324
 8001d04:	00840034 	movhi	r2,4096
 8001d08:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
 8001d0c:	00c16404 	movi	r3,1424
 8001d10:	00840034 	movhi	r2,4096
 8001d14:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001d18:	00c00204 	movi	r3,8
 8001d1c:	00840034 	movhi	r2,4096
 8001d20:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001d24:	00c0a404 	movi	r3,656
 8001d28:	00840034 	movhi	r2,4096
 8001d2c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001d30:	00c01044 	movi	r3,65
 8001d34:	00840034 	movhi	r2,4096
 8001d38:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001d3c:	00c004c4 	movi	r3,19
 8001d40:	00840034 	movhi	r2,4096
 8001d44:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001d48:	00c14e04 	movi	r3,1336
 8001d4c:	00840034 	movhi	r2,4096
 8001d50:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
 8001d54:	00c16604 	movi	r3,1432
 8001d58:	00840034 	movhi	r2,4096
 8001d5c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 8001d60:	00c00204 	movi	r3,8
 8001d64:	00840034 	movhi	r2,4096
 8001d68:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001d6c:	00c0a404 	movi	r3,656
 8001d70:	00840034 	movhi	r2,4096
 8001d74:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001d78:	00c00044 	movi	r3,1
 8001d7c:	00840034 	movhi	r2,4096
 8001d80:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001d84:	00c004c4 	movi	r3,19
 8001d88:	00840034 	movhi	r2,4096
 8001d8c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 8001d90:	00c15104 	movi	r3,1348
 8001d94:	00840034 	movhi	r2,4096
 8001d98:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
 8001d9c:	00c16804 	movi	r3,1440
 8001da0:	00840034 	movhi	r2,4096
 8001da4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001da8:	00c00204 	movi	r3,8
 8001dac:	00840034 	movhi	r2,4096
 8001db0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001db4:	00c0a404 	movi	r3,656
 8001db8:	00840034 	movhi	r2,4096
 8001dbc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001dc0:	00c01044 	movi	r3,65
 8001dc4:	00840034 	movhi	r2,4096
 8001dc8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001dcc:	00c004c4 	movi	r3,19
 8001dd0:	00840034 	movhi	r2,4096
 8001dd4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 8001dd8:	00c15404 	movi	r3,1360
 8001ddc:	00840034 	movhi	r2,4096
 8001de0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-6
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
 8001de4:	00c16a04 	movi	r3,1448
 8001de8:	00840034 	movhi	r2,4096
 8001dec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001df0:	00c00204 	movi	r3,8
 8001df4:	00840034 	movhi	r2,4096
 8001df8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001dfc:	00c0a404 	movi	r3,656
 8001e00:	00840034 	movhi	r2,4096
 8001e04:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001e08:	00c00044 	movi	r3,1
 8001e0c:	00840034 	movhi	r2,4096
 8001e10:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001e14:	00c004c4 	movi	r3,19
 8001e18:	00840034 	movhi	r2,4096
 8001e1c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
 8001e20:	00c15704 	movi	r3,1372
 8001e24:	00840034 	movhi	r2,4096
 8001e28:	10c00035 	stwio	r3,0(r2)

	//data phase IN-7
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
 8001e2c:	00c16c04 	movi	r3,1456
 8001e30:	00840034 	movhi	r2,4096
 8001e34:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001e38:	00c00204 	movi	r3,8
 8001e3c:	00840034 	movhi	r2,4096
 8001e40:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
 8001e44:	00c0a404 	movi	r3,656
 8001e48:	00840034 	movhi	r2,4096
 8001e4c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
 8001e50:	00c01044 	movi	r3,65
 8001e54:	00840034 	movhi	r2,4096
 8001e58:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001e5c:	00c004c4 	movi	r3,19
 8001e60:	00840034 	movhi	r2,4096
 8001e64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
 8001e68:	00c15a04 	movi	r3,1384
 8001e6c:	00840034 	movhi	r2,4096
 8001e70:	10c00035 	stwio	r3,0(r2)

	//data phase IN-8
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
 8001e74:	00c16e04 	movi	r3,1464
 8001e78:	00840034 	movhi	r2,4096
 8001e7c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
 8001e80:	00c000c4 	movi	r3,3
 8001e84:	00840034 	movhi	r2,4096
 8001e88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001e8c:	00c0a404 	movi	r3,656
 8001e90:	00840034 	movhi	r2,4096
 8001e94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001e98:	00c00044 	movi	r3,1
 8001e9c:	00840034 	movhi	r2,4096
 8001ea0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
 8001ea4:	00c004c4 	movi	r3,19
 8001ea8:	00840034 	movhi	r2,4096
 8001eac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
 8001eb0:	00c15d04 	movi	r3,1396
 8001eb4:	00840034 	movhi	r2,4096
 8001eb8:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
 8001ebc:	0007883a 	mov	r3,zero
 8001ec0:	00840034 	movhi	r2,4096
 8001ec4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001ec8:	0007883a 	mov	r3,zero
 8001ecc:	00840034 	movhi	r2,4096
 8001ed0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
 8001ed4:	00c08404 	movi	r3,528
 8001ed8:	00840034 	movhi	r2,4096
 8001edc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001ee0:	00c01044 	movi	r3,65
 8001ee4:	00840034 	movhi	r2,4096
 8001ee8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001eec:	00c004c4 	movi	r3,19
 8001ef0:	00840034 	movhi	r2,4096
 8001ef4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001ef8:	0007883a 	mov	r3,zero
 8001efc:	00840034 	movhi	r2,4096
 8001f00:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001f04:	01006c04 	movi	r4,432
 8001f08:	01414004 	movi	r5,1280
 8001f0c:	8000f440 	call	8000f44 <UsbWrite>

}
 8001f10:	e037883a 	mov	sp,fp
 8001f14:	dfc00117 	ldw	ra,4(sp)
 8001f18:	df000017 	ldw	fp,0(sp)
 8001f1c:	dec00204 	addi	sp,sp,8
 8001f20:	f800283a 	ret

08001f24 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 8001f24:	defffd04 	addi	sp,sp,-12
 8001f28:	dfc00215 	stw	ra,8(sp)
 8001f2c:	df000115 	stw	fp,4(sp)
 8001f30:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 8001f34:	01005104 	movi	r4,324
 8001f38:	8000f8c0 	call	8000f8c <UsbRead>
 8001f3c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001f40:	01005104 	movi	r4,324
 8001f44:	000b883a 	mov	r5,zero
 8001f48:	8000f440 	call	8000f44 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001f4c:	00000d06 	br	8001f84 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8001f50:	e0bfff0b 	ldhu	r2,-4(fp)
 8001f54:	10000526 	beq	r2,zero,8001f6c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8001f58:	e0bfff0b 	ldhu	r2,-4(fp)
 8001f5c:	01020074 	movhi	r4,2049
 8001f60:	2139c104 	addi	r4,r4,-6396
 8001f64:	100b883a 	mov	r5,r2
 8001f68:	80020d80 	call	80020d8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8001f6c:	01005104 	movi	r4,324
 8001f70:	8000f8c0 	call	8000f8c <UsbRead>
 8001f74:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001f78:	01005104 	movi	r4,324
 8001f7c:	000b883a 	mov	r5,zero
 8001f80:	8000f440 	call	8000f44 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001f84:	e0bfff0b 	ldhu	r2,-4(fp)
 8001f88:	10840018 	cmpnei	r2,r2,4096
 8001f8c:	103ff01e 	bne	r2,zero,8001f50 <__alt_data_end+0xf8001f50>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 8001f90:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8001f94:	e037883a 	mov	sp,fp
 8001f98:	dfc00117 	ldw	ra,4(sp)
 8001f9c:	df000017 	ldw	fp,0(sp)
 8001fa0:	dec00204 	addi	sp,sp,8
 8001fa4:	f800283a 	ret

08001fa8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 8001fa8:	defffd04 	addi	sp,sp,-12
 8001fac:	dfc00215 	stw	ra,8(sp)
 8001fb0:	df000115 	stw	fp,4(sp)
 8001fb4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IORD(CY7C67200_BASE,HPI_STATUS);
 8001fb8:	00840034 	movhi	r2,4096
 8001fbc:	10800304 	addi	r2,r2,12
 8001fc0:	10800037 	ldwio	r2,0(r2)
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8001fc4:	01005104 	movi	r4,324
 8001fc8:	8000f8c0 	call	8000f8c <UsbRead>
 8001fcc:	10bfffcc 	andi	r2,r2,65535
 8001fd0:	10840018 	cmpnei	r2,r2,4096
 8001fd4:	1000091e 	bne	r2,zero,8001ffc <UsbGetRetryCnt+0x54>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001fd8:	01005104 	movi	r4,324
 8001fdc:	000b883a 	mov	r5,zero
 8001fe0:	8000f440 	call	8000f44 <UsbWrite>

		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001fe4:	0001883a 	nop
 8001fe8:	00840034 	movhi	r2,4096
 8001fec:	10800304 	addi	r2,r2,12
 8001ff0:	10800037 	ldwio	r2,0(r2)
 8001ff4:	1080040c 	andi	r2,r2,16
 8001ff8:	103ffb26 	beq	r2,zero,8001fe8 <__alt_data_end+0xf8001fe8>
		{
		}
	}
	//usleep(1000);
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8001ffc:	00c14204 	movi	r3,1288
 8002000:	00840034 	movhi	r2,4096
 8002004:	10800204 	addi	r2,r2,8
 8002008:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 800200c:	00840034 	movhi	r2,4096
 8002010:	10800037 	ldwio	r2,0(r2)
 8002014:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8002018:	e0bfff0b 	ldhu	r2,-4(fp)
}
 800201c:	e037883a 	mov	sp,fp
 8002020:	dfc00117 	ldw	ra,4(sp)
 8002024:	df000017 	ldw	fp,0(sp)
 8002028:	dec00204 	addi	sp,sp,8
 800202c:	f800283a 	ret

08002030 <UsbPrintMem>:


void UsbPrintMem()
{
 8002030:	defffc04 	addi	sp,sp,-16
 8002034:	dfc00315 	stw	ra,12(sp)
 8002038:	df000215 	stw	fp,8(sp)
 800203c:	df000204 	addi	fp,sp,8
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8002040:	00c14004 	movi	r3,1280
 8002044:	00840034 	movhi	r2,4096
 8002048:	10800204 	addi	r2,r2,8
 800204c:	10c00035 	stwio	r3,0(r2)
	for (i = 0; i <= 200; i += 2)
 8002050:	e03ffe15 	stw	zero,-8(fp)
 8002054:	00000d06 	br	800208c <UsbPrintMem+0x5c>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
 8002058:	00840034 	movhi	r2,4096
 800205c:	10800037 	ldwio	r2,0(r2)
 8002060:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8002064:	e0bffe17 	ldw	r2,-8(fp)
 8002068:	10814004 	addi	r2,r2,1280
 800206c:	01020074 	movhi	r4,2049
 8002070:	2139c904 	addi	r4,r4,-6364
 8002074:	100b883a 	mov	r5,r2
 8002078:	e1bfff17 	ldw	r6,-4(fp)
 800207c:	80020d80 	call	80020d8 <printf>

void UsbPrintMem()
{
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 8002080:	e0bffe17 	ldw	r2,-8(fp)
 8002084:	10800084 	addi	r2,r2,2
 8002088:	e0bffe15 	stw	r2,-8(fp)
 800208c:	e0bffe17 	ldw	r2,-8(fp)
 8002090:	10803250 	cmplti	r2,r2,201
 8002094:	103ff01e 	bne	r2,zero,8002058 <__alt_data_end+0xf8002058>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 8002098:	e037883a 	mov	sp,fp
 800209c:	dfc00117 	ldw	ra,4(sp)
 80020a0:	df000017 	ldw	fp,0(sp)
 80020a4:	dec00204 	addi	sp,sp,8
 80020a8:	f800283a 	ret

080020ac <_printf_r>:
 80020ac:	defffd04 	addi	sp,sp,-12
 80020b0:	dfc00015 	stw	ra,0(sp)
 80020b4:	d9800115 	stw	r6,4(sp)
 80020b8:	d9c00215 	stw	r7,8(sp)
 80020bc:	280d883a 	mov	r6,r5
 80020c0:	21400217 	ldw	r5,8(r4)
 80020c4:	d9c00104 	addi	r7,sp,4
 80020c8:	800226c0 	call	800226c <___vfprintf_internal_r>
 80020cc:	dfc00017 	ldw	ra,0(sp)
 80020d0:	dec00304 	addi	sp,sp,12
 80020d4:	f800283a 	ret

080020d8 <printf>:
 80020d8:	defffc04 	addi	sp,sp,-16
 80020dc:	dfc00015 	stw	ra,0(sp)
 80020e0:	d9400115 	stw	r5,4(sp)
 80020e4:	d9800215 	stw	r6,8(sp)
 80020e8:	d9c00315 	stw	r7,12(sp)
 80020ec:	00820074 	movhi	r2,2049
 80020f0:	10811e04 	addi	r2,r2,1144
 80020f4:	10800017 	ldw	r2,0(r2)
 80020f8:	200b883a 	mov	r5,r4
 80020fc:	d9800104 	addi	r6,sp,4
 8002100:	11000217 	ldw	r4,8(r2)
 8002104:	80040e80 	call	80040e8 <__vfprintf_internal>
 8002108:	dfc00017 	ldw	ra,0(sp)
 800210c:	dec00404 	addi	sp,sp,16
 8002110:	f800283a 	ret

08002114 <_puts_r>:
 8002114:	defff604 	addi	sp,sp,-40
 8002118:	dc400815 	stw	r17,32(sp)
 800211c:	2023883a 	mov	r17,r4
 8002120:	2809883a 	mov	r4,r5
 8002124:	dc000715 	stw	r16,28(sp)
 8002128:	dfc00915 	stw	ra,36(sp)
 800212c:	2821883a 	mov	r16,r5
 8002130:	80021ac0 	call	80021ac <strlen>
 8002134:	10c00044 	addi	r3,r2,1
 8002138:	d8800115 	stw	r2,4(sp)
 800213c:	89400217 	ldw	r5,8(r17)
 8002140:	00820074 	movhi	r2,2049
 8002144:	10b9ce04 	addi	r2,r2,-6344
 8002148:	d8800215 	stw	r2,8(sp)
 800214c:	00800044 	movi	r2,1
 8002150:	d8800315 	stw	r2,12(sp)
 8002154:	8809883a 	mov	r4,r17
 8002158:	00800084 	movi	r2,2
 800215c:	d9800404 	addi	r6,sp,16
 8002160:	dc000015 	stw	r16,0(sp)
 8002164:	d8c00615 	stw	r3,24(sp)
 8002168:	dec00415 	stw	sp,16(sp)
 800216c:	d8800515 	stw	r2,20(sp)
 8002170:	80063e80 	call	80063e8 <__sfvwrite_r>
 8002174:	1000061e 	bne	r2,zero,8002190 <_puts_r+0x7c>
 8002178:	00800284 	movi	r2,10
 800217c:	dfc00917 	ldw	ra,36(sp)
 8002180:	dc400817 	ldw	r17,32(sp)
 8002184:	dc000717 	ldw	r16,28(sp)
 8002188:	dec00a04 	addi	sp,sp,40
 800218c:	f800283a 	ret
 8002190:	00bfffc4 	movi	r2,-1
 8002194:	003ff906 	br	800217c <__alt_data_end+0xf800217c>

08002198 <puts>:
 8002198:	00820074 	movhi	r2,2049
 800219c:	10811e04 	addi	r2,r2,1144
 80021a0:	200b883a 	mov	r5,r4
 80021a4:	11000017 	ldw	r4,0(r2)
 80021a8:	80021141 	jmpi	8002114 <_puts_r>

080021ac <strlen>:
 80021ac:	208000cc 	andi	r2,r4,3
 80021b0:	10001f1e 	bne	r2,zero,8002230 <strlen+0x84>
 80021b4:	20800017 	ldw	r2,0(r4)
 80021b8:	01ffbff4 	movhi	r7,65279
 80021bc:	39ffbfc4 	addi	r7,r7,-257
 80021c0:	01a02074 	movhi	r6,32897
 80021c4:	31a02004 	addi	r6,r6,-32640
 80021c8:	11c7883a 	add	r3,r2,r7
 80021cc:	0084303a 	nor	r2,zero,r2
 80021d0:	1886703a 	and	r3,r3,r2
 80021d4:	1986703a 	and	r3,r3,r6
 80021d8:	2005883a 	mov	r2,r4
 80021dc:	1800101e 	bne	r3,zero,8002220 <strlen+0x74>
 80021e0:	10800104 	addi	r2,r2,4
 80021e4:	10c00017 	ldw	r3,0(r2)
 80021e8:	19cb883a 	add	r5,r3,r7
 80021ec:	00c6303a 	nor	r3,zero,r3
 80021f0:	28c6703a 	and	r3,r5,r3
 80021f4:	1986703a 	and	r3,r3,r6
 80021f8:	1800091e 	bne	r3,zero,8002220 <strlen+0x74>
 80021fc:	10800104 	addi	r2,r2,4
 8002200:	10c00017 	ldw	r3,0(r2)
 8002204:	19cb883a 	add	r5,r3,r7
 8002208:	00c6303a 	nor	r3,zero,r3
 800220c:	28c6703a 	and	r3,r5,r3
 8002210:	1986703a 	and	r3,r3,r6
 8002214:	183ff226 	beq	r3,zero,80021e0 <__alt_data_end+0xf80021e0>
 8002218:	00000106 	br	8002220 <strlen+0x74>
 800221c:	10800044 	addi	r2,r2,1
 8002220:	10c00007 	ldb	r3,0(r2)
 8002224:	183ffd1e 	bne	r3,zero,800221c <__alt_data_end+0xf800221c>
 8002228:	1105c83a 	sub	r2,r2,r4
 800222c:	f800283a 	ret
 8002230:	2005883a 	mov	r2,r4
 8002234:	003ffa06 	br	8002220 <__alt_data_end+0xf8002220>

08002238 <__sprint_r>:
 8002238:	30800217 	ldw	r2,8(r6)
 800223c:	defffe04 	addi	sp,sp,-8
 8002240:	dc000015 	stw	r16,0(sp)
 8002244:	dfc00115 	stw	ra,4(sp)
 8002248:	3021883a 	mov	r16,r6
 800224c:	10000226 	beq	r2,zero,8002258 <__sprint_r+0x20>
 8002250:	80063e80 	call	80063e8 <__sfvwrite_r>
 8002254:	80000215 	stw	zero,8(r16)
 8002258:	80000115 	stw	zero,4(r16)
 800225c:	dfc00117 	ldw	ra,4(sp)
 8002260:	dc000017 	ldw	r16,0(sp)
 8002264:	dec00204 	addi	sp,sp,8
 8002268:	f800283a 	ret

0800226c <___vfprintf_internal_r>:
 800226c:	defeb904 	addi	sp,sp,-1308
 8002270:	dc013d15 	stw	r16,1268(sp)
 8002274:	d9013015 	stw	r4,1216(sp)
 8002278:	dfc14615 	stw	ra,1304(sp)
 800227c:	df014515 	stw	fp,1300(sp)
 8002280:	ddc14415 	stw	r23,1296(sp)
 8002284:	dd814315 	stw	r22,1292(sp)
 8002288:	dd414215 	stw	r21,1288(sp)
 800228c:	dd014115 	stw	r20,1284(sp)
 8002290:	dcc14015 	stw	r19,1280(sp)
 8002294:	dc813f15 	stw	r18,1276(sp)
 8002298:	dc413e15 	stw	r17,1272(sp)
 800229c:	d9412915 	stw	r5,1188(sp)
 80022a0:	3021883a 	mov	r16,r6
 80022a4:	d9c12d15 	stw	r7,1204(sp)
 80022a8:	8006ad40 	call	8006ad4 <_localeconv_r>
 80022ac:	10800017 	ldw	r2,0(r2)
 80022b0:	d9013017 	ldw	r4,1216(sp)
 80022b4:	d8013315 	stw	zero,1228(sp)
 80022b8:	d8813715 	stw	r2,1244(sp)
 80022bc:	d8013415 	stw	zero,1232(sp)
 80022c0:	20000226 	beq	r4,zero,80022cc <___vfprintf_internal_r+0x60>
 80022c4:	20800e17 	ldw	r2,56(r4)
 80022c8:	10014b26 	beq	r2,zero,80027f8 <___vfprintf_internal_r+0x58c>
 80022cc:	d8c12917 	ldw	r3,1188(sp)
 80022d0:	1880030b 	ldhu	r2,12(r3)
 80022d4:	10c0020c 	andi	r3,r2,8
 80022d8:	18ffffcc 	andi	r3,r3,65535
 80022dc:	18e0001c 	xori	r3,r3,32768
 80022e0:	18e00004 	addi	r3,r3,-32768
 80022e4:	1800ed26 	beq	r3,zero,800269c <___vfprintf_internal_r+0x430>
 80022e8:	d9012917 	ldw	r4,1188(sp)
 80022ec:	20c00417 	ldw	r3,16(r4)
 80022f0:	1800ea26 	beq	r3,zero,800269c <___vfprintf_internal_r+0x430>
 80022f4:	1100068c 	andi	r4,r2,26
 80022f8:	00c00284 	movi	r3,10
 80022fc:	20c0f026 	beq	r4,r3,80026c0 <___vfprintf_internal_r+0x454>
 8002300:	d9010dc4 	addi	r4,sp,1079
 8002304:	d8810e04 	addi	r2,sp,1080
 8002308:	dc413017 	ldw	r17,1216(sp)
 800230c:	d8c00404 	addi	r3,sp,16
 8002310:	d9012615 	stw	r4,1176(sp)
 8002314:	1109c83a 	sub	r4,r2,r4
 8002318:	d8812715 	stw	r2,1180(sp)
 800231c:	d8c11b15 	stw	r3,1132(sp)
 8002320:	d8011d15 	stw	zero,1140(sp)
 8002324:	d8011c15 	stw	zero,1136(sp)
 8002328:	802b883a 	mov	r21,r16
 800232c:	d8013215 	stw	zero,1224(sp)
 8002330:	d8013615 	stw	zero,1240(sp)
 8002334:	d8013515 	stw	zero,1236(sp)
 8002338:	d8012c15 	stw	zero,1200(sp)
 800233c:	1813883a 	mov	r9,r3
 8002340:	d9013915 	stw	r4,1252(sp)
 8002344:	a8800007 	ldb	r2,0(r21)
 8002348:	1002f326 	beq	r2,zero,8002f18 <___vfprintf_internal_r+0xcac>
 800234c:	00c00944 	movi	r3,37
 8002350:	a825883a 	mov	r18,r21
 8002354:	10c0021e 	bne	r2,r3,8002360 <___vfprintf_internal_r+0xf4>
 8002358:	00001406 	br	80023ac <___vfprintf_internal_r+0x140>
 800235c:	10c00326 	beq	r2,r3,800236c <___vfprintf_internal_r+0x100>
 8002360:	94800044 	addi	r18,r18,1
 8002364:	90800007 	ldb	r2,0(r18)
 8002368:	103ffc1e 	bne	r2,zero,800235c <__alt_data_end+0xf800235c>
 800236c:	9561c83a 	sub	r16,r18,r21
 8002370:	80000e26 	beq	r16,zero,80023ac <___vfprintf_internal_r+0x140>
 8002374:	da011d17 	ldw	r8,1140(sp)
 8002378:	d8c11c17 	ldw	r3,1136(sp)
 800237c:	4d400015 	stw	r21,0(r9)
 8002380:	4c000115 	stw	r16,4(r9)
 8002384:	4411883a 	add	r8,r8,r16
 8002388:	18c00044 	addi	r3,r3,1
 800238c:	da011d15 	stw	r8,1140(sp)
 8002390:	d8c11c15 	stw	r3,1136(sp)
 8002394:	008001c4 	movi	r2,7
 8002398:	10c11016 	blt	r2,r3,80027dc <___vfprintf_internal_r+0x570>
 800239c:	4a400204 	addi	r9,r9,8
 80023a0:	d8812c17 	ldw	r2,1200(sp)
 80023a4:	1405883a 	add	r2,r2,r16
 80023a8:	d8812c15 	stw	r2,1200(sp)
 80023ac:	90800007 	ldb	r2,0(r18)
 80023b0:	1000ee26 	beq	r2,zero,800276c <___vfprintf_internal_r+0x500>
 80023b4:	95400044 	addi	r21,r18,1
 80023b8:	94800047 	ldb	r18,1(r18)
 80023bc:	073fffc4 	movi	fp,-1
 80023c0:	e007883a 	mov	r3,fp
 80023c4:	d8012585 	stb	zero,1174(sp)
 80023c8:	d8012e15 	stw	zero,1208(sp)
 80023cc:	0021883a 	mov	r16,zero
 80023d0:	05001604 	movi	r20,88
 80023d4:	04c00244 	movi	r19,9
 80023d8:	4839883a 	mov	fp,r9
 80023dc:	ad400044 	addi	r21,r21,1
 80023e0:	90bff804 	addi	r2,r18,-32
 80023e4:	a080462e 	bgeu	r20,r2,8002500 <___vfprintf_internal_r+0x294>
 80023e8:	e013883a 	mov	r9,fp
 80023ec:	9000df26 	beq	r18,zero,800276c <___vfprintf_internal_r+0x500>
 80023f0:	00c00044 	movi	r3,1
 80023f4:	d8c12815 	stw	r3,1184(sp)
 80023f8:	dc810405 	stb	r18,1040(sp)
 80023fc:	d8012585 	stb	zero,1174(sp)
 8002400:	d8c12b15 	stw	r3,1196(sp)
 8002404:	dcc10404 	addi	r19,sp,1040
 8002408:	d8013115 	stw	zero,1220(sp)
 800240c:	80c0008c 	andi	r3,r16,2
 8002410:	d8c12a15 	stw	r3,1192(sp)
 8002414:	18000326 	beq	r3,zero,8002424 <___vfprintf_internal_r+0x1b8>
 8002418:	d8c12817 	ldw	r3,1184(sp)
 800241c:	18c00084 	addi	r3,r3,2
 8002420:	d8c12815 	stw	r3,1184(sp)
 8002424:	80c0210c 	andi	r3,r16,132
 8002428:	d8c12f15 	stw	r3,1212(sp)
 800242c:	1802251e 	bne	r3,zero,8002cc4 <___vfprintf_internal_r+0xa58>
 8002430:	d9012e17 	ldw	r4,1208(sp)
 8002434:	d8c12817 	ldw	r3,1184(sp)
 8002438:	20edc83a 	sub	r22,r4,r3
 800243c:	0582210e 	bge	zero,r22,8002cc4 <___vfprintf_internal_r+0xa58>
 8002440:	02800404 	movi	r10,16
 8002444:	da011d17 	ldw	r8,1140(sp)
 8002448:	d8c11c17 	ldw	r3,1136(sp)
 800244c:	05c20074 	movhi	r23,2049
 8002450:	bdf9df84 	addi	r23,r23,-6274
 8002454:	5580200e 	bge	r10,r22,80024d8 <___vfprintf_internal_r+0x26c>
 8002458:	dc813815 	stw	r18,1248(sp)
 800245c:	5039883a 	mov	fp,r10
 8002460:	b825883a 	mov	r18,r23
 8002464:	050001c4 	movi	r20,7
 8002468:	b02f883a 	mov	r23,r22
 800246c:	802d883a 	mov	r22,r16
 8002470:	dc012917 	ldw	r16,1188(sp)
 8002474:	00000306 	br	8002484 <___vfprintf_internal_r+0x218>
 8002478:	bdfffc04 	addi	r23,r23,-16
 800247c:	4a400204 	addi	r9,r9,8
 8002480:	e5c0110e 	bge	fp,r23,80024c8 <___vfprintf_internal_r+0x25c>
 8002484:	4c800015 	stw	r18,0(r9)
 8002488:	4f000115 	stw	fp,4(r9)
 800248c:	42000404 	addi	r8,r8,16
 8002490:	18c00044 	addi	r3,r3,1
 8002494:	da011d15 	stw	r8,1140(sp)
 8002498:	d8c11c15 	stw	r3,1136(sp)
 800249c:	a0fff60e 	bge	r20,r3,8002478 <__alt_data_end+0xf8002478>
 80024a0:	8809883a 	mov	r4,r17
 80024a4:	800b883a 	mov	r5,r16
 80024a8:	d9811b04 	addi	r6,sp,1132
 80024ac:	80022380 	call	8002238 <__sprint_r>
 80024b0:	1000b41e 	bne	r2,zero,8002784 <___vfprintf_internal_r+0x518>
 80024b4:	bdfffc04 	addi	r23,r23,-16
 80024b8:	da011d17 	ldw	r8,1140(sp)
 80024bc:	d8c11c17 	ldw	r3,1136(sp)
 80024c0:	da400404 	addi	r9,sp,16
 80024c4:	e5ffef16 	blt	fp,r23,8002484 <__alt_data_end+0xf8002484>
 80024c8:	b021883a 	mov	r16,r22
 80024cc:	b82d883a 	mov	r22,r23
 80024d0:	902f883a 	mov	r23,r18
 80024d4:	dc813817 	ldw	r18,1248(sp)
 80024d8:	4dc00015 	stw	r23,0(r9)
 80024dc:	4d800115 	stw	r22,4(r9)
 80024e0:	4591883a 	add	r8,r8,r22
 80024e4:	18c00044 	addi	r3,r3,1
 80024e8:	da011d15 	stw	r8,1140(sp)
 80024ec:	d8c11c15 	stw	r3,1136(sp)
 80024f0:	008001c4 	movi	r2,7
 80024f4:	10c3fe16 	blt	r2,r3,80034f0 <___vfprintf_internal_r+0x1284>
 80024f8:	4a400204 	addi	r9,r9,8
 80024fc:	0001f306 	br	8002ccc <___vfprintf_internal_r+0xa60>
 8002500:	1085883a 	add	r2,r2,r2
 8002504:	1085883a 	add	r2,r2,r2
 8002508:	01020034 	movhi	r4,2048
 800250c:	21094704 	addi	r4,r4,9500
 8002510:	1105883a 	add	r2,r2,r4
 8002514:	10800017 	ldw	r2,0(r2)
 8002518:	1000683a 	jmp	r2
 800251c:	08002bf8 	rdprs	zero,at,175
 8002520:	080023e8 	cmpgeui	zero,at,143
 8002524:	080023e8 	cmpgeui	zero,at,143
 8002528:	08002c10 	cmplti	zero,at,176
 800252c:	080023e8 	cmpgeui	zero,at,143
 8002530:	080023e8 	cmpgeui	zero,at,143
 8002534:	080023e8 	cmpgeui	zero,at,143
 8002538:	080023e8 	cmpgeui	zero,at,143
 800253c:	080023e8 	cmpgeui	zero,at,143
 8002540:	080023e8 	cmpgeui	zero,at,143
 8002544:	08002ac8 	cmpgei	zero,at,171
 8002548:	08002c5c 	xori	zero,at,177
 800254c:	080023e8 	cmpgeui	zero,at,143
 8002550:	08002690 	cmplti	zero,at,154
 8002554:	08002a30 	cmpltui	zero,at,168
 8002558:	080023e8 	cmpgeui	zero,at,143
 800255c:	08002c1c 	xori	zero,at,176
 8002560:	08002c28 	cmpgeui	zero,at,176
 8002564:	08002c28 	cmpgeui	zero,at,176
 8002568:	08002c28 	cmpgeui	zero,at,176
 800256c:	08002c28 	cmpgeui	zero,at,176
 8002570:	08002c28 	cmpgeui	zero,at,176
 8002574:	08002c28 	cmpgeui	zero,at,176
 8002578:	08002c28 	cmpgeui	zero,at,176
 800257c:	08002c28 	cmpgeui	zero,at,176
 8002580:	08002c28 	cmpgeui	zero,at,176
 8002584:	080023e8 	cmpgeui	zero,at,143
 8002588:	080023e8 	cmpgeui	zero,at,143
 800258c:	080023e8 	cmpgeui	zero,at,143
 8002590:	080023e8 	cmpgeui	zero,at,143
 8002594:	080023e8 	cmpgeui	zero,at,143
 8002598:	080023e8 	cmpgeui	zero,at,143
 800259c:	080023e8 	cmpgeui	zero,at,143
 80025a0:	080023e8 	cmpgeui	zero,at,143
 80025a4:	080023e8 	cmpgeui	zero,at,143
 80025a8:	080023e8 	cmpgeui	zero,at,143
 80025ac:	08002800 	call	800280 <__reset-0x77ffd80>
 80025b0:	080028c0 	call	80028c <__reset-0x77ffd74>
 80025b4:	080023e8 	cmpgeui	zero,at,143
 80025b8:	080028c0 	call	80028c <__reset-0x77ffd74>
 80025bc:	080023e8 	cmpgeui	zero,at,143
 80025c0:	080023e8 	cmpgeui	zero,at,143
 80025c4:	080023e8 	cmpgeui	zero,at,143
 80025c8:	080023e8 	cmpgeui	zero,at,143
 80025cc:	08002954 	ori	zero,at,165
 80025d0:	080023e8 	cmpgeui	zero,at,143
 80025d4:	080023e8 	cmpgeui	zero,at,143
 80025d8:	08002960 	cmpeqi	zero,at,165
 80025dc:	080023e8 	cmpgeui	zero,at,143
 80025e0:	080023e8 	cmpgeui	zero,at,143
 80025e4:	080023e8 	cmpgeui	zero,at,143
 80025e8:	080023e8 	cmpgeui	zero,at,143
 80025ec:	080023e8 	cmpgeui	zero,at,143
 80025f0:	08002998 	cmpnei	zero,at,166
 80025f4:	080023e8 	cmpgeui	zero,at,143
 80025f8:	080023e8 	cmpgeui	zero,at,143
 80025fc:	080029d4 	ori	zero,at,167
 8002600:	080023e8 	cmpgeui	zero,at,143
 8002604:	080023e8 	cmpgeui	zero,at,143
 8002608:	080023e8 	cmpgeui	zero,at,143
 800260c:	080023e8 	cmpgeui	zero,at,143
 8002610:	080023e8 	cmpgeui	zero,at,143
 8002614:	080023e8 	cmpgeui	zero,at,143
 8002618:	080023e8 	cmpgeui	zero,at,143
 800261c:	080023e8 	cmpgeui	zero,at,143
 8002620:	080023e8 	cmpgeui	zero,at,143
 8002624:	080023e8 	cmpgeui	zero,at,143
 8002628:	08002c6c 	andhi	zero,at,177
 800262c:	08002ca0 	cmpeqi	zero,at,178
 8002630:	080028c0 	call	80028c <__reset-0x77ffd74>
 8002634:	080028c0 	call	80028c <__reset-0x77ffd74>
 8002638:	080028c0 	call	80028c <__reset-0x77ffd74>
 800263c:	08002bec 	andhi	zero,at,175
 8002640:	08002ca0 	cmpeqi	zero,at,178
 8002644:	080023e8 	cmpgeui	zero,at,143
 8002648:	080023e8 	cmpgeui	zero,at,143
 800264c:	08002a78 	rdprs	zero,at,169
 8002650:	080023e8 	cmpgeui	zero,at,143
 8002654:	08002a90 	cmplti	zero,at,170
 8002658:	08002cac 	andhi	zero,at,178
 800265c:	08002af0 	cmpltui	zero,at,171
 8002660:	08002b40 	call	8002b4 <__reset-0x77ffd4c>
 8002664:	080023e8 	cmpgeui	zero,at,143
 8002668:	08002b4c 	andi	zero,at,173
 800266c:	080023e8 	cmpgeui	zero,at,143
 8002670:	08002cb8 	rdprs	zero,at,178
 8002674:	080023e8 	cmpgeui	zero,at,143
 8002678:	080023e8 	cmpgeui	zero,at,143
 800267c:	08002bb0 	cmpltui	zero,at,174
 8002680:	d9012e17 	ldw	r4,1208(sp)
 8002684:	d8812d15 	stw	r2,1204(sp)
 8002688:	0109c83a 	sub	r4,zero,r4
 800268c:	d9012e15 	stw	r4,1208(sp)
 8002690:	84000114 	ori	r16,r16,4
 8002694:	ac800007 	ldb	r18,0(r21)
 8002698:	003f5006 	br	80023dc <__alt_data_end+0xf80023dc>
 800269c:	d9013017 	ldw	r4,1216(sp)
 80026a0:	d9412917 	ldw	r5,1188(sp)
 80026a4:	800410c0 	call	800410c <__swsetup_r>
 80026a8:	10003d1e 	bne	r2,zero,80027a0 <___vfprintf_internal_r+0x534>
 80026ac:	d8c12917 	ldw	r3,1188(sp)
 80026b0:	1880030b 	ldhu	r2,12(r3)
 80026b4:	00c00284 	movi	r3,10
 80026b8:	1100068c 	andi	r4,r2,26
 80026bc:	20ff101e 	bne	r4,r3,8002300 <__alt_data_end+0xf8002300>
 80026c0:	d9012917 	ldw	r4,1188(sp)
 80026c4:	20c0038b 	ldhu	r3,14(r4)
 80026c8:	193fffcc 	andi	r4,r3,65535
 80026cc:	2120001c 	xori	r4,r4,32768
 80026d0:	21200004 	addi	r4,r4,-32768
 80026d4:	203f0a16 	blt	r4,zero,8002300 <__alt_data_end+0xf8002300>
 80026d8:	d9012917 	ldw	r4,1188(sp)
 80026dc:	d9c12d17 	ldw	r7,1204(sp)
 80026e0:	10bfff4c 	andi	r2,r2,65533
 80026e4:	22800717 	ldw	r10,28(r4)
 80026e8:	22400917 	ldw	r9,36(r4)
 80026ec:	d9013017 	ldw	r4,1216(sp)
 80026f0:	02010004 	movi	r8,1024
 80026f4:	d881070d 	sth	r2,1052(sp)
 80026f8:	d9410404 	addi	r5,sp,1040
 80026fc:	d8800404 	addi	r2,sp,16
 8002700:	800d883a 	mov	r6,r16
 8002704:	d8c1078d 	sth	r3,1054(sp)
 8002708:	da810b15 	stw	r10,1068(sp)
 800270c:	da410d15 	stw	r9,1076(sp)
 8002710:	d8810415 	stw	r2,1040(sp)
 8002714:	d8810815 	stw	r2,1056(sp)
 8002718:	da010615 	stw	r8,1048(sp)
 800271c:	da010915 	stw	r8,1060(sp)
 8002720:	d8010a15 	stw	zero,1064(sp)
 8002724:	800226c0 	call	800226c <___vfprintf_internal_r>
 8002728:	d8812c15 	stw	r2,1200(sp)
 800272c:	10000416 	blt	r2,zero,8002740 <___vfprintf_internal_r+0x4d4>
 8002730:	d9013017 	ldw	r4,1216(sp)
 8002734:	d9410404 	addi	r5,sp,1040
 8002738:	8005ad80 	call	8005ad8 <_fflush_r>
 800273c:	1006501e 	bne	r2,zero,8004080 <___vfprintf_internal_r+0x1e14>
 8002740:	d881070b 	ldhu	r2,1052(sp)
 8002744:	1080100c 	andi	r2,r2,64
 8002748:	10bfffcc 	andi	r2,r2,65535
 800274c:	10a0001c 	xori	r2,r2,32768
 8002750:	10a00004 	addi	r2,r2,-32768
 8002754:	10001426 	beq	r2,zero,80027a8 <___vfprintf_internal_r+0x53c>
 8002758:	d8c12917 	ldw	r3,1188(sp)
 800275c:	1880030b 	ldhu	r2,12(r3)
 8002760:	10801014 	ori	r2,r2,64
 8002764:	1880030d 	sth	r2,12(r3)
 8002768:	00000f06 	br	80027a8 <___vfprintf_internal_r+0x53c>
 800276c:	d8811d17 	ldw	r2,1140(sp)
 8002770:	10000426 	beq	r2,zero,8002784 <___vfprintf_internal_r+0x518>
 8002774:	d9013017 	ldw	r4,1216(sp)
 8002778:	d9412917 	ldw	r5,1188(sp)
 800277c:	d9811b04 	addi	r6,sp,1132
 8002780:	80022380 	call	8002238 <__sprint_r>
 8002784:	d8c12917 	ldw	r3,1188(sp)
 8002788:	1880030b 	ldhu	r2,12(r3)
 800278c:	1080100c 	andi	r2,r2,64
 8002790:	10bfffcc 	andi	r2,r2,65535
 8002794:	10a0001c 	xori	r2,r2,32768
 8002798:	10a00004 	addi	r2,r2,-32768
 800279c:	10000226 	beq	r2,zero,80027a8 <___vfprintf_internal_r+0x53c>
 80027a0:	00bfffc4 	movi	r2,-1
 80027a4:	d8812c15 	stw	r2,1200(sp)
 80027a8:	d8812c17 	ldw	r2,1200(sp)
 80027ac:	dfc14617 	ldw	ra,1304(sp)
 80027b0:	df014517 	ldw	fp,1300(sp)
 80027b4:	ddc14417 	ldw	r23,1296(sp)
 80027b8:	dd814317 	ldw	r22,1292(sp)
 80027bc:	dd414217 	ldw	r21,1288(sp)
 80027c0:	dd014117 	ldw	r20,1284(sp)
 80027c4:	dcc14017 	ldw	r19,1280(sp)
 80027c8:	dc813f17 	ldw	r18,1276(sp)
 80027cc:	dc413e17 	ldw	r17,1272(sp)
 80027d0:	dc013d17 	ldw	r16,1268(sp)
 80027d4:	dec14704 	addi	sp,sp,1308
 80027d8:	f800283a 	ret
 80027dc:	d9412917 	ldw	r5,1188(sp)
 80027e0:	8809883a 	mov	r4,r17
 80027e4:	d9811b04 	addi	r6,sp,1132
 80027e8:	80022380 	call	8002238 <__sprint_r>
 80027ec:	103fe51e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 80027f0:	da400404 	addi	r9,sp,16
 80027f4:	003eea06 	br	80023a0 <__alt_data_end+0xf80023a0>
 80027f8:	8005d940 	call	8005d94 <__sinit>
 80027fc:	003eb306 	br	80022cc <__alt_data_end+0xf80022cc>
 8002800:	e013883a 	mov	r9,fp
 8002804:	84000414 	ori	r16,r16,16
 8002808:	1839883a 	mov	fp,r3
 800280c:	8080080c 	andi	r2,r16,32
 8002810:	10034426 	beq	r2,zero,8003524 <___vfprintf_internal_r+0x12b8>
 8002814:	d8c12d17 	ldw	r3,1204(sp)
 8002818:	18800117 	ldw	r2,4(r3)
 800281c:	1dc00017 	ldw	r23,0(r3)
 8002820:	18c00204 	addi	r3,r3,8
 8002824:	d8c12d15 	stw	r3,1204(sp)
 8002828:	102d883a 	mov	r22,r2
 800282c:	1003020e 	bge	r2,zero,8003438 <___vfprintf_internal_r+0x11cc>
 8002830:	05efc83a 	sub	r23,zero,r23
 8002834:	b804c03a 	cmpne	r2,r23,zero
 8002838:	05adc83a 	sub	r22,zero,r22
 800283c:	b0adc83a 	sub	r22,r22,r2
 8002840:	00800b44 	movi	r2,45
 8002844:	d8812585 	stb	r2,1174(sp)
 8002848:	00c00044 	movi	r3,1
 800284c:	bd84b03a 	or	r2,r23,r22
 8002850:	e0000216 	blt	fp,zero,800285c <___vfprintf_internal_r+0x5f0>
 8002854:	013fdfc4 	movi	r4,-129
 8002858:	8120703a 	and	r16,r16,r4
 800285c:	1001cc1e 	bne	r2,zero,8002f90 <___vfprintf_internal_r+0xd24>
 8002860:	e001cb1e 	bne	fp,zero,8002f90 <___vfprintf_internal_r+0xd24>
 8002864:	18c03fcc 	andi	r3,r3,255
 8002868:	1802ca1e 	bne	r3,zero,8003394 <___vfprintf_internal_r+0x1128>
 800286c:	8080004c 	andi	r2,r16,1
 8002870:	1002c826 	beq	r2,zero,8003394 <___vfprintf_internal_r+0x1128>
 8002874:	d8c13917 	ldw	r3,1252(sp)
 8002878:	00800c04 	movi	r2,48
 800287c:	d8810dc5 	stb	r2,1079(sp)
 8002880:	d8c12b15 	stw	r3,1196(sp)
 8002884:	dcc10dc4 	addi	r19,sp,1079
 8002888:	d8812b17 	ldw	r2,1196(sp)
 800288c:	d8812815 	stw	r2,1184(sp)
 8002890:	1700010e 	bge	r2,fp,8002898 <___vfprintf_internal_r+0x62c>
 8002894:	df012815 	stw	fp,1184(sp)
 8002898:	d8812583 	ldbu	r2,1174(sp)
 800289c:	df013115 	stw	fp,1220(sp)
 80028a0:	10803fcc 	andi	r2,r2,255
 80028a4:	1080201c 	xori	r2,r2,128
 80028a8:	10bfe004 	addi	r2,r2,-128
 80028ac:	103ed726 	beq	r2,zero,800240c <__alt_data_end+0xf800240c>
 80028b0:	d8c12817 	ldw	r3,1184(sp)
 80028b4:	18c00044 	addi	r3,r3,1
 80028b8:	d8c12815 	stw	r3,1184(sp)
 80028bc:	003ed306 	br	800240c <__alt_data_end+0xf800240c>
 80028c0:	8080020c 	andi	r2,r16,8
 80028c4:	e013883a 	mov	r9,fp
 80028c8:	1839883a 	mov	fp,r3
 80028cc:	1003a626 	beq	r2,zero,8003768 <___vfprintf_internal_r+0x14fc>
 80028d0:	d9012d17 	ldw	r4,1204(sp)
 80028d4:	25800017 	ldw	r22,0(r4)
 80028d8:	25000117 	ldw	r20,4(r4)
 80028dc:	21000204 	addi	r4,r4,8
 80028e0:	d9012d15 	stw	r4,1204(sp)
 80028e4:	dd813315 	stw	r22,1228(sp)
 80028e8:	dd013415 	stw	r20,1232(sp)
 80028ec:	b009883a 	mov	r4,r22
 80028f0:	a00b883a 	mov	r5,r20
 80028f4:	da413c15 	stw	r9,1264(sp)
 80028f8:	8008f200 	call	8008f20 <__isinfd>
 80028fc:	da413c17 	ldw	r9,1264(sp)
 8002900:	b009883a 	mov	r4,r22
 8002904:	a00b883a 	mov	r5,r20
 8002908:	10041d26 	beq	r2,zero,8003980 <___vfprintf_internal_r+0x1714>
 800290c:	000d883a 	mov	r6,zero
 8002910:	000f883a 	mov	r7,zero
 8002914:	800acf40 	call	800acf4 <__ltdf2>
 8002918:	da413c17 	ldw	r9,1264(sp)
 800291c:	1004da16 	blt	r2,zero,8003c88 <___vfprintf_internal_r+0x1a1c>
 8002920:	d8812583 	ldbu	r2,1174(sp)
 8002924:	00c011c4 	movi	r3,71
 8002928:	1c83d116 	blt	r3,r18,8003870 <___vfprintf_internal_r+0x1604>
 800292c:	04c20074 	movhi	r19,2049
 8002930:	9cf9cf04 	addi	r19,r19,-6340
 8002934:	00c000c4 	movi	r3,3
 8002938:	d8c12815 	stw	r3,1184(sp)
 800293c:	00ffdfc4 	movi	r3,-129
 8002940:	80e0703a 	and	r16,r16,r3
 8002944:	d8c12817 	ldw	r3,1184(sp)
 8002948:	d8013115 	stw	zero,1220(sp)
 800294c:	d8c12b15 	stw	r3,1196(sp)
 8002950:	003fd306 	br	80028a0 <__alt_data_end+0xf80028a0>
 8002954:	84000214 	ori	r16,r16,8
 8002958:	ac800007 	ldb	r18,0(r21)
 800295c:	003e9f06 	br	80023dc <__alt_data_end+0xf80023dc>
 8002960:	e013883a 	mov	r9,fp
 8002964:	84000414 	ori	r16,r16,16
 8002968:	1839883a 	mov	fp,r3
 800296c:	8080080c 	andi	r2,r16,32
 8002970:	10031d26 	beq	r2,zero,80035e8 <___vfprintf_internal_r+0x137c>
 8002974:	d8812d17 	ldw	r2,1204(sp)
 8002978:	0007883a 	mov	r3,zero
 800297c:	15c00017 	ldw	r23,0(r2)
 8002980:	15800117 	ldw	r22,4(r2)
 8002984:	10800204 	addi	r2,r2,8
 8002988:	d8812d15 	stw	r2,1204(sp)
 800298c:	d8012585 	stb	zero,1174(sp)
 8002990:	bd84b03a 	or	r2,r23,r22
 8002994:	003fae06 	br	8002850 <__alt_data_end+0xf8002850>
 8002998:	e013883a 	mov	r9,fp
 800299c:	84000414 	ori	r16,r16,16
 80029a0:	1839883a 	mov	fp,r3
 80029a4:	8080080c 	andi	r2,r16,32
 80029a8:	1002e726 	beq	r2,zero,8003548 <___vfprintf_internal_r+0x12dc>
 80029ac:	d8c12d17 	ldw	r3,1204(sp)
 80029b0:	d9012d17 	ldw	r4,1204(sp)
 80029b4:	1dc00017 	ldw	r23,0(r3)
 80029b8:	1d800117 	ldw	r22,4(r3)
 80029bc:	21000204 	addi	r4,r4,8
 80029c0:	00c00044 	movi	r3,1
 80029c4:	d9012d15 	stw	r4,1204(sp)
 80029c8:	bd84b03a 	or	r2,r23,r22
 80029cc:	d8012585 	stb	zero,1174(sp)
 80029d0:	003f9f06 	br	8002850 <__alt_data_end+0xf8002850>
 80029d4:	e013883a 	mov	r9,fp
 80029d8:	1839883a 	mov	fp,r3
 80029dc:	00c20074 	movhi	r3,2049
 80029e0:	18f9d304 	addi	r3,r3,-6324
 80029e4:	d8c13615 	stw	r3,1240(sp)
 80029e8:	8080080c 	andi	r2,r16,32
 80029ec:	10007726 	beq	r2,zero,8002bcc <___vfprintf_internal_r+0x960>
 80029f0:	d9012d17 	ldw	r4,1204(sp)
 80029f4:	25c00017 	ldw	r23,0(r4)
 80029f8:	25800117 	ldw	r22,4(r4)
 80029fc:	21000204 	addi	r4,r4,8
 8002a00:	d9012d15 	stw	r4,1204(sp)
 8002a04:	8080004c 	andi	r2,r16,1
 8002a08:	1002c226 	beq	r2,zero,8003514 <___vfprintf_internal_r+0x12a8>
 8002a0c:	bd84b03a 	or	r2,r23,r22
 8002a10:	10035d26 	beq	r2,zero,8003788 <___vfprintf_internal_r+0x151c>
 8002a14:	00c00c04 	movi	r3,48
 8002a18:	d8c12505 	stb	r3,1172(sp)
 8002a1c:	dc812545 	stb	r18,1173(sp)
 8002a20:	84000094 	ori	r16,r16,2
 8002a24:	00c00084 	movi	r3,2
 8002a28:	d8012585 	stb	zero,1174(sp)
 8002a2c:	003f8806 	br	8002850 <__alt_data_end+0xf8002850>
 8002a30:	ac800007 	ldb	r18,0(r21)
 8002a34:	00c00a84 	movi	r3,42
 8002a38:	adc00044 	addi	r23,r21,1
 8002a3c:	90c57526 	beq	r18,r3,8004014 <___vfprintf_internal_r+0x1da8>
 8002a40:	95bff404 	addi	r22,r18,-48
 8002a44:	0009883a 	mov	r4,zero
 8002a48:	9d84ff36 	bltu	r19,r22,8003e48 <___vfprintf_internal_r+0x1bdc>
 8002a4c:	01400284 	movi	r5,10
 8002a50:	800b1340 	call	800b134 <__mulsi3>
 8002a54:	bc800007 	ldb	r18,0(r23)
 8002a58:	b089883a 	add	r4,r22,r2
 8002a5c:	bdc00044 	addi	r23,r23,1
 8002a60:	95bff404 	addi	r22,r18,-48
 8002a64:	9dbff92e 	bgeu	r19,r22,8002a4c <__alt_data_end+0xf8002a4c>
 8002a68:	2007883a 	mov	r3,r4
 8002a6c:	20044316 	blt	r4,zero,8003b7c <___vfprintf_internal_r+0x1910>
 8002a70:	b82b883a 	mov	r21,r23
 8002a74:	003e5a06 	br	80023e0 <__alt_data_end+0xf80023e0>
 8002a78:	ac800007 	ldb	r18,0(r21)
 8002a7c:	01001b04 	movi	r4,108
 8002a80:	a805883a 	mov	r2,r21
 8002a84:	91045526 	beq	r18,r4,8003bdc <___vfprintf_internal_r+0x1970>
 8002a88:	84000414 	ori	r16,r16,16
 8002a8c:	003e5306 	br	80023dc <__alt_data_end+0xf80023dc>
 8002a90:	8080080c 	andi	r2,r16,32
 8002a94:	e013883a 	mov	r9,fp
 8002a98:	10034026 	beq	r2,zero,800379c <___vfprintf_internal_r+0x1530>
 8002a9c:	d9012d17 	ldw	r4,1204(sp)
 8002aa0:	20800017 	ldw	r2,0(r4)
 8002aa4:	d9012c17 	ldw	r4,1200(sp)
 8002aa8:	2007d7fa 	srai	r3,r4,31
 8002aac:	d9012d17 	ldw	r4,1204(sp)
 8002ab0:	10c00115 	stw	r3,4(r2)
 8002ab4:	21000104 	addi	r4,r4,4
 8002ab8:	d9012d15 	stw	r4,1204(sp)
 8002abc:	d9012c17 	ldw	r4,1200(sp)
 8002ac0:	11000015 	stw	r4,0(r2)
 8002ac4:	003e1f06 	br	8002344 <__alt_data_end+0xf8002344>
 8002ac8:	d9012d17 	ldw	r4,1204(sp)
 8002acc:	21000017 	ldw	r4,0(r4)
 8002ad0:	d9012e15 	stw	r4,1208(sp)
 8002ad4:	d9012d17 	ldw	r4,1204(sp)
 8002ad8:	20800104 	addi	r2,r4,4
 8002adc:	d9012e17 	ldw	r4,1208(sp)
 8002ae0:	203ee716 	blt	r4,zero,8002680 <__alt_data_end+0xf8002680>
 8002ae4:	d8812d15 	stw	r2,1204(sp)
 8002ae8:	ac800007 	ldb	r18,0(r21)
 8002aec:	003e3b06 	br	80023dc <__alt_data_end+0xf80023dc>
 8002af0:	e013883a 	mov	r9,fp
 8002af4:	1839883a 	mov	fp,r3
 8002af8:	d8c12d17 	ldw	r3,1204(sp)
 8002afc:	00800c04 	movi	r2,48
 8002b00:	01020074 	movhi	r4,2049
 8002b04:	2139d804 	addi	r4,r4,-6304
 8002b08:	1dc00017 	ldw	r23,0(r3)
 8002b0c:	18c00104 	addi	r3,r3,4
 8002b10:	d8812505 	stb	r2,1172(sp)
 8002b14:	00801e04 	movi	r2,120
 8002b18:	d8812545 	stb	r2,1173(sp)
 8002b1c:	d8c12d15 	stw	r3,1204(sp)
 8002b20:	002d883a 	mov	r22,zero
 8002b24:	84000094 	ori	r16,r16,2
 8002b28:	d9013615 	stw	r4,1240(sp)
 8002b2c:	00c00084 	movi	r3,2
 8002b30:	04801e04 	movi	r18,120
 8002b34:	b805883a 	mov	r2,r23
 8002b38:	d8012585 	stb	zero,1174(sp)
 8002b3c:	003f4406 	br	8002850 <__alt_data_end+0xf8002850>
 8002b40:	84000814 	ori	r16,r16,32
 8002b44:	ac800007 	ldb	r18,0(r21)
 8002b48:	003e2406 	br	80023dc <__alt_data_end+0xf80023dc>
 8002b4c:	d8812d17 	ldw	r2,1204(sp)
 8002b50:	d8012585 	stb	zero,1174(sp)
 8002b54:	e013883a 	mov	r9,fp
 8002b58:	14c00017 	ldw	r19,0(r2)
 8002b5c:	1839883a 	mov	fp,r3
 8002b60:	15c00104 	addi	r23,r2,4
 8002b64:	98045526 	beq	r19,zero,8003cbc <___vfprintf_internal_r+0x1a50>
 8002b68:	9809883a 	mov	r4,r19
 8002b6c:	18043116 	blt	r3,zero,8003c34 <___vfprintf_internal_r+0x19c8>
 8002b70:	000b883a 	mov	r5,zero
 8002b74:	180d883a 	mov	r6,r3
 8002b78:	da413c15 	stw	r9,1264(sp)
 8002b7c:	80074340 	call	8007434 <memchr>
 8002b80:	da413c17 	ldw	r9,1264(sp)
 8002b84:	10047a26 	beq	r2,zero,8003d70 <___vfprintf_internal_r+0x1b04>
 8002b88:	14c5c83a 	sub	r2,r2,r19
 8002b8c:	d8812b15 	stw	r2,1196(sp)
 8002b90:	e083d40e 	bge	fp,r2,8003ae4 <___vfprintf_internal_r+0x1878>
 8002b94:	df012815 	stw	fp,1184(sp)
 8002b98:	e004e416 	blt	fp,zero,8003f2c <___vfprintf_internal_r+0x1cc0>
 8002b9c:	d8812583 	ldbu	r2,1174(sp)
 8002ba0:	df012b15 	stw	fp,1196(sp)
 8002ba4:	ddc12d15 	stw	r23,1204(sp)
 8002ba8:	d8013115 	stw	zero,1220(sp)
 8002bac:	003f3c06 	br	80028a0 <__alt_data_end+0xf80028a0>
 8002bb0:	00820074 	movhi	r2,2049
 8002bb4:	10b9d804 	addi	r2,r2,-6304
 8002bb8:	d8813615 	stw	r2,1240(sp)
 8002bbc:	8080080c 	andi	r2,r16,32
 8002bc0:	e013883a 	mov	r9,fp
 8002bc4:	1839883a 	mov	fp,r3
 8002bc8:	103f891e 	bne	r2,zero,80029f0 <__alt_data_end+0xf80029f0>
 8002bcc:	8080040c 	andi	r2,r16,16
 8002bd0:	1002c326 	beq	r2,zero,80036e0 <___vfprintf_internal_r+0x1474>
 8002bd4:	d8812d17 	ldw	r2,1204(sp)
 8002bd8:	002d883a 	mov	r22,zero
 8002bdc:	15c00017 	ldw	r23,0(r2)
 8002be0:	10800104 	addi	r2,r2,4
 8002be4:	d8812d15 	stw	r2,1204(sp)
 8002be8:	003f8606 	br	8002a04 <__alt_data_end+0xf8002a04>
 8002bec:	84001014 	ori	r16,r16,64
 8002bf0:	ac800007 	ldb	r18,0(r21)
 8002bf4:	003df906 	br	80023dc <__alt_data_end+0xf80023dc>
 8002bf8:	d8812587 	ldb	r2,1174(sp)
 8002bfc:	1002e51e 	bne	r2,zero,8003794 <___vfprintf_internal_r+0x1528>
 8002c00:	00800804 	movi	r2,32
 8002c04:	d8812585 	stb	r2,1174(sp)
 8002c08:	ac800007 	ldb	r18,0(r21)
 8002c0c:	003df306 	br	80023dc <__alt_data_end+0xf80023dc>
 8002c10:	84000054 	ori	r16,r16,1
 8002c14:	ac800007 	ldb	r18,0(r21)
 8002c18:	003df006 	br	80023dc <__alt_data_end+0xf80023dc>
 8002c1c:	84002014 	ori	r16,r16,128
 8002c20:	ac800007 	ldb	r18,0(r21)
 8002c24:	003ded06 	br	80023dc <__alt_data_end+0xf80023dc>
 8002c28:	0009883a 	mov	r4,zero
 8002c2c:	95bff404 	addi	r22,r18,-48
 8002c30:	182f883a 	mov	r23,r3
 8002c34:	01400284 	movi	r5,10
 8002c38:	800b1340 	call	800b134 <__mulsi3>
 8002c3c:	ac800007 	ldb	r18,0(r21)
 8002c40:	1589883a 	add	r4,r2,r22
 8002c44:	ad400044 	addi	r21,r21,1
 8002c48:	95bff404 	addi	r22,r18,-48
 8002c4c:	9dbff92e 	bgeu	r19,r22,8002c34 <__alt_data_end+0xf8002c34>
 8002c50:	b807883a 	mov	r3,r23
 8002c54:	d9012e15 	stw	r4,1208(sp)
 8002c58:	003de106 	br	80023e0 <__alt_data_end+0xf80023e0>
 8002c5c:	00800ac4 	movi	r2,43
 8002c60:	d8812585 	stb	r2,1174(sp)
 8002c64:	ac800007 	ldb	r18,0(r21)
 8002c68:	003ddc06 	br	80023dc <__alt_data_end+0xf80023dc>
 8002c6c:	d8c12d17 	ldw	r3,1204(sp)
 8002c70:	d9012d17 	ldw	r4,1204(sp)
 8002c74:	e013883a 	mov	r9,fp
 8002c78:	18800017 	ldw	r2,0(r3)
 8002c7c:	21000104 	addi	r4,r4,4
 8002c80:	00c00044 	movi	r3,1
 8002c84:	d8c12815 	stw	r3,1184(sp)
 8002c88:	d8012585 	stb	zero,1174(sp)
 8002c8c:	d8810405 	stb	r2,1040(sp)
 8002c90:	d9012d15 	stw	r4,1204(sp)
 8002c94:	d8c12b15 	stw	r3,1196(sp)
 8002c98:	dcc10404 	addi	r19,sp,1040
 8002c9c:	003dda06 	br	8002408 <__alt_data_end+0xf8002408>
 8002ca0:	e013883a 	mov	r9,fp
 8002ca4:	1839883a 	mov	fp,r3
 8002ca8:	003ed806 	br	800280c <__alt_data_end+0xf800280c>
 8002cac:	e013883a 	mov	r9,fp
 8002cb0:	1839883a 	mov	fp,r3
 8002cb4:	003f2d06 	br	800296c <__alt_data_end+0xf800296c>
 8002cb8:	e013883a 	mov	r9,fp
 8002cbc:	1839883a 	mov	fp,r3
 8002cc0:	003f3806 	br	80029a4 <__alt_data_end+0xf80029a4>
 8002cc4:	da011d17 	ldw	r8,1140(sp)
 8002cc8:	d8c11c17 	ldw	r3,1136(sp)
 8002ccc:	d8812587 	ldb	r2,1174(sp)
 8002cd0:	10000b26 	beq	r2,zero,8002d00 <___vfprintf_internal_r+0xa94>
 8002cd4:	d8812584 	addi	r2,sp,1174
 8002cd8:	48800015 	stw	r2,0(r9)
 8002cdc:	00800044 	movi	r2,1
 8002ce0:	48800115 	stw	r2,4(r9)
 8002ce4:	4091883a 	add	r8,r8,r2
 8002ce8:	1887883a 	add	r3,r3,r2
 8002cec:	da011d15 	stw	r8,1140(sp)
 8002cf0:	d8c11c15 	stw	r3,1136(sp)
 8002cf4:	008001c4 	movi	r2,7
 8002cf8:	10c18e16 	blt	r2,r3,8003334 <___vfprintf_internal_r+0x10c8>
 8002cfc:	4a400204 	addi	r9,r9,8
 8002d00:	d9012a17 	ldw	r4,1192(sp)
 8002d04:	20000b26 	beq	r4,zero,8002d34 <___vfprintf_internal_r+0xac8>
 8002d08:	d8812504 	addi	r2,sp,1172
 8002d0c:	48800015 	stw	r2,0(r9)
 8002d10:	00800084 	movi	r2,2
 8002d14:	48800115 	stw	r2,4(r9)
 8002d18:	4091883a 	add	r8,r8,r2
 8002d1c:	18c00044 	addi	r3,r3,1
 8002d20:	da011d15 	stw	r8,1140(sp)
 8002d24:	d8c11c15 	stw	r3,1136(sp)
 8002d28:	008001c4 	movi	r2,7
 8002d2c:	10c17816 	blt	r2,r3,8003310 <___vfprintf_internal_r+0x10a4>
 8002d30:	4a400204 	addi	r9,r9,8
 8002d34:	d9012f17 	ldw	r4,1212(sp)
 8002d38:	00802004 	movi	r2,128
 8002d3c:	2080fc26 	beq	r4,r2,8003130 <___vfprintf_internal_r+0xec4>
 8002d40:	d8813117 	ldw	r2,1220(sp)
 8002d44:	d9012b17 	ldw	r4,1196(sp)
 8002d48:	112fc83a 	sub	r23,r2,r4
 8002d4c:	05c02a0e 	bge	zero,r23,8002df8 <___vfprintf_internal_r+0xb8c>
 8002d50:	07000404 	movi	fp,16
 8002d54:	05020074 	movhi	r20,2049
 8002d58:	a539e384 	addi	r20,r20,-6258
 8002d5c:	e5c01d0e 	bge	fp,r23,8002dd4 <___vfprintf_internal_r+0xb68>
 8002d60:	dc812a15 	stw	r18,1192(sp)
 8002d64:	058001c4 	movi	r22,7
 8002d68:	a025883a 	mov	r18,r20
 8002d6c:	8029883a 	mov	r20,r16
 8002d70:	dc012917 	ldw	r16,1188(sp)
 8002d74:	00000306 	br	8002d84 <___vfprintf_internal_r+0xb18>
 8002d78:	bdfffc04 	addi	r23,r23,-16
 8002d7c:	4a400204 	addi	r9,r9,8
 8002d80:	e5c0110e 	bge	fp,r23,8002dc8 <___vfprintf_internal_r+0xb5c>
 8002d84:	4c800015 	stw	r18,0(r9)
 8002d88:	4f000115 	stw	fp,4(r9)
 8002d8c:	42000404 	addi	r8,r8,16
 8002d90:	18c00044 	addi	r3,r3,1
 8002d94:	da011d15 	stw	r8,1140(sp)
 8002d98:	d8c11c15 	stw	r3,1136(sp)
 8002d9c:	b0fff60e 	bge	r22,r3,8002d78 <__alt_data_end+0xf8002d78>
 8002da0:	8809883a 	mov	r4,r17
 8002da4:	800b883a 	mov	r5,r16
 8002da8:	d9811b04 	addi	r6,sp,1132
 8002dac:	80022380 	call	8002238 <__sprint_r>
 8002db0:	103e741e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8002db4:	bdfffc04 	addi	r23,r23,-16
 8002db8:	da011d17 	ldw	r8,1140(sp)
 8002dbc:	d8c11c17 	ldw	r3,1136(sp)
 8002dc0:	da400404 	addi	r9,sp,16
 8002dc4:	e5ffef16 	blt	fp,r23,8002d84 <__alt_data_end+0xf8002d84>
 8002dc8:	a021883a 	mov	r16,r20
 8002dcc:	9029883a 	mov	r20,r18
 8002dd0:	dc812a17 	ldw	r18,1192(sp)
 8002dd4:	4d000015 	stw	r20,0(r9)
 8002dd8:	4dc00115 	stw	r23,4(r9)
 8002ddc:	45d1883a 	add	r8,r8,r23
 8002de0:	18c00044 	addi	r3,r3,1
 8002de4:	da011d15 	stw	r8,1140(sp)
 8002de8:	d8c11c15 	stw	r3,1136(sp)
 8002dec:	008001c4 	movi	r2,7
 8002df0:	10c13e16 	blt	r2,r3,80032ec <___vfprintf_internal_r+0x1080>
 8002df4:	4a400204 	addi	r9,r9,8
 8002df8:	8080400c 	andi	r2,r16,256
 8002dfc:	1000831e 	bne	r2,zero,800300c <___vfprintf_internal_r+0xda0>
 8002e00:	d8812b17 	ldw	r2,1196(sp)
 8002e04:	4cc00015 	stw	r19,0(r9)
 8002e08:	48800115 	stw	r2,4(r9)
 8002e0c:	4091883a 	add	r8,r8,r2
 8002e10:	18c00044 	addi	r3,r3,1
 8002e14:	da011d15 	stw	r8,1140(sp)
 8002e18:	d8c11c15 	stw	r3,1136(sp)
 8002e1c:	008001c4 	movi	r2,7
 8002e20:	10c05316 	blt	r2,r3,8002f70 <___vfprintf_internal_r+0xd04>
 8002e24:	4a400204 	addi	r9,r9,8
 8002e28:	8400010c 	andi	r16,r16,4
 8002e2c:	80002e26 	beq	r16,zero,8002ee8 <___vfprintf_internal_r+0xc7c>
 8002e30:	d8812e17 	ldw	r2,1208(sp)
 8002e34:	d8c12817 	ldw	r3,1184(sp)
 8002e38:	10e1c83a 	sub	r16,r2,r3
 8002e3c:	04002a0e 	bge	zero,r16,8002ee8 <___vfprintf_internal_r+0xc7c>
 8002e40:	04800404 	movi	r18,16
 8002e44:	d8c11c17 	ldw	r3,1136(sp)
 8002e48:	05c20074 	movhi	r23,2049
 8002e4c:	bdf9df84 	addi	r23,r23,-6274
 8002e50:	9400170e 	bge	r18,r16,8002eb0 <___vfprintf_internal_r+0xc44>
 8002e54:	04c001c4 	movi	r19,7
 8002e58:	dd012917 	ldw	r20,1188(sp)
 8002e5c:	00000306 	br	8002e6c <___vfprintf_internal_r+0xc00>
 8002e60:	843ffc04 	addi	r16,r16,-16
 8002e64:	4a400204 	addi	r9,r9,8
 8002e68:	9400110e 	bge	r18,r16,8002eb0 <___vfprintf_internal_r+0xc44>
 8002e6c:	4dc00015 	stw	r23,0(r9)
 8002e70:	4c800115 	stw	r18,4(r9)
 8002e74:	42000404 	addi	r8,r8,16
 8002e78:	18c00044 	addi	r3,r3,1
 8002e7c:	da011d15 	stw	r8,1140(sp)
 8002e80:	d8c11c15 	stw	r3,1136(sp)
 8002e84:	98fff60e 	bge	r19,r3,8002e60 <__alt_data_end+0xf8002e60>
 8002e88:	8809883a 	mov	r4,r17
 8002e8c:	a00b883a 	mov	r5,r20
 8002e90:	d9811b04 	addi	r6,sp,1132
 8002e94:	80022380 	call	8002238 <__sprint_r>
 8002e98:	103e3a1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8002e9c:	843ffc04 	addi	r16,r16,-16
 8002ea0:	da011d17 	ldw	r8,1140(sp)
 8002ea4:	d8c11c17 	ldw	r3,1136(sp)
 8002ea8:	da400404 	addi	r9,sp,16
 8002eac:	943fef16 	blt	r18,r16,8002e6c <__alt_data_end+0xf8002e6c>
 8002eb0:	4dc00015 	stw	r23,0(r9)
 8002eb4:	4c000115 	stw	r16,4(r9)
 8002eb8:	8211883a 	add	r8,r16,r8
 8002ebc:	18c00044 	addi	r3,r3,1
 8002ec0:	da011d15 	stw	r8,1140(sp)
 8002ec4:	d8c11c15 	stw	r3,1136(sp)
 8002ec8:	008001c4 	movi	r2,7
 8002ecc:	10c0060e 	bge	r2,r3,8002ee8 <___vfprintf_internal_r+0xc7c>
 8002ed0:	d9412917 	ldw	r5,1188(sp)
 8002ed4:	8809883a 	mov	r4,r17
 8002ed8:	d9811b04 	addi	r6,sp,1132
 8002edc:	80022380 	call	8002238 <__sprint_r>
 8002ee0:	103e281e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8002ee4:	da011d17 	ldw	r8,1140(sp)
 8002ee8:	dd012817 	ldw	r20,1184(sp)
 8002eec:	d9012e17 	ldw	r4,1208(sp)
 8002ef0:	a100010e 	bge	r20,r4,8002ef8 <___vfprintf_internal_r+0xc8c>
 8002ef4:	2029883a 	mov	r20,r4
 8002ef8:	d8812c17 	ldw	r2,1200(sp)
 8002efc:	1505883a 	add	r2,r2,r20
 8002f00:	d8812c15 	stw	r2,1200(sp)
 8002f04:	4000b91e 	bne	r8,zero,80031ec <___vfprintf_internal_r+0xf80>
 8002f08:	d8011c15 	stw	zero,1136(sp)
 8002f0c:	a8800007 	ldb	r2,0(r21)
 8002f10:	da400404 	addi	r9,sp,16
 8002f14:	103d0d1e 	bne	r2,zero,800234c <__alt_data_end+0xf800234c>
 8002f18:	a825883a 	mov	r18,r21
 8002f1c:	003d2306 	br	80023ac <__alt_data_end+0xf80023ac>
 8002f20:	d9412917 	ldw	r5,1188(sp)
 8002f24:	8809883a 	mov	r4,r17
 8002f28:	d9811b04 	addi	r6,sp,1132
 8002f2c:	80022380 	call	8002238 <__sprint_r>
 8002f30:	103e141e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8002f34:	da011d17 	ldw	r8,1140(sp)
 8002f38:	da400404 	addi	r9,sp,16
 8002f3c:	8080004c 	andi	r2,r16,1
 8002f40:	103fb926 	beq	r2,zero,8002e28 <__alt_data_end+0xf8002e28>
 8002f44:	d8c11c17 	ldw	r3,1136(sp)
 8002f48:	d9013717 	ldw	r4,1244(sp)
 8002f4c:	00800044 	movi	r2,1
 8002f50:	48800115 	stw	r2,4(r9)
 8002f54:	49000015 	stw	r4,0(r9)
 8002f58:	4091883a 	add	r8,r8,r2
 8002f5c:	1887883a 	add	r3,r3,r2
 8002f60:	da011d15 	stw	r8,1140(sp)
 8002f64:	d8c11c15 	stw	r3,1136(sp)
 8002f68:	008001c4 	movi	r2,7
 8002f6c:	10ffad0e 	bge	r2,r3,8002e24 <__alt_data_end+0xf8002e24>
 8002f70:	d9412917 	ldw	r5,1188(sp)
 8002f74:	8809883a 	mov	r4,r17
 8002f78:	d9811b04 	addi	r6,sp,1132
 8002f7c:	80022380 	call	8002238 <__sprint_r>
 8002f80:	103e001e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8002f84:	da400404 	addi	r9,sp,16
 8002f88:	da011d17 	ldw	r8,1140(sp)
 8002f8c:	003fa606 	br	8002e28 <__alt_data_end+0xf8002e28>
 8002f90:	18803fcc 	andi	r2,r3,255
 8002f94:	00c00044 	movi	r3,1
 8002f98:	10c10126 	beq	r2,r3,80033a0 <___vfprintf_internal_r+0x1134>
 8002f9c:	00c00084 	movi	r3,2
 8002fa0:	10c0ed26 	beq	r2,r3,8003358 <___vfprintf_internal_r+0x10ec>
 8002fa4:	d8c10dc4 	addi	r3,sp,1079
 8002fa8:	b808d0fa 	srli	r4,r23,3
 8002fac:	b00a977a 	slli	r5,r22,29
 8002fb0:	b02cd0fa 	srli	r22,r22,3
 8002fb4:	bdc001cc 	andi	r23,r23,7
 8002fb8:	b8800c04 	addi	r2,r23,48
 8002fbc:	292eb03a 	or	r23,r5,r4
 8002fc0:	18800005 	stb	r2,0(r3)
 8002fc4:	bd88b03a 	or	r4,r23,r22
 8002fc8:	1827883a 	mov	r19,r3
 8002fcc:	18ffffc4 	addi	r3,r3,-1
 8002fd0:	203ff51e 	bne	r4,zero,8002fa8 <__alt_data_end+0xf8002fa8>
 8002fd4:	8100004c 	andi	r4,r16,1
 8002fd8:	980b883a 	mov	r5,r19
 8002fdc:	20000726 	beq	r4,zero,8002ffc <___vfprintf_internal_r+0xd90>
 8002fe0:	10803fcc 	andi	r2,r2,255
 8002fe4:	1080201c 	xori	r2,r2,128
 8002fe8:	10bfe004 	addi	r2,r2,-128
 8002fec:	01000c04 	movi	r4,48
 8002ff0:	11000226 	beq	r2,r4,8002ffc <___vfprintf_internal_r+0xd90>
 8002ff4:	1827883a 	mov	r19,r3
 8002ff8:	293fffc5 	stb	r4,-1(r5)
 8002ffc:	d8812717 	ldw	r2,1180(sp)
 8003000:	14c5c83a 	sub	r2,r2,r19
 8003004:	d8812b15 	stw	r2,1196(sp)
 8003008:	003e1f06 	br	8002888 <__alt_data_end+0xf8002888>
 800300c:	00801944 	movi	r2,101
 8003010:	14807c0e 	bge	r2,r18,8003204 <___vfprintf_internal_r+0xf98>
 8003014:	d9013317 	ldw	r4,1228(sp)
 8003018:	d9413417 	ldw	r5,1232(sp)
 800301c:	000d883a 	mov	r6,zero
 8003020:	000f883a 	mov	r7,zero
 8003024:	d8c13b15 	stw	r3,1260(sp)
 8003028:	da013a15 	stw	r8,1256(sp)
 800302c:	da413c15 	stw	r9,1264(sp)
 8003030:	800abd00 	call	800abd0 <__nedf2>
 8003034:	d8c13b17 	ldw	r3,1260(sp)
 8003038:	da013a17 	ldw	r8,1256(sp)
 800303c:	da413c17 	ldw	r9,1264(sp)
 8003040:	1001001e 	bne	r2,zero,8003444 <___vfprintf_internal_r+0x11d8>
 8003044:	00820074 	movhi	r2,2049
 8003048:	10b9df04 	addi	r2,r2,-6276
 800304c:	48800015 	stw	r2,0(r9)
 8003050:	00800044 	movi	r2,1
 8003054:	48800115 	stw	r2,4(r9)
 8003058:	4091883a 	add	r8,r8,r2
 800305c:	1887883a 	add	r3,r3,r2
 8003060:	da011d15 	stw	r8,1140(sp)
 8003064:	d8c11c15 	stw	r3,1136(sp)
 8003068:	008001c4 	movi	r2,7
 800306c:	10c20316 	blt	r2,r3,800387c <___vfprintf_internal_r+0x1610>
 8003070:	4a400204 	addi	r9,r9,8
 8003074:	d8812417 	ldw	r2,1168(sp)
 8003078:	d8c13217 	ldw	r3,1224(sp)
 800307c:	10c00216 	blt	r2,r3,8003088 <___vfprintf_internal_r+0xe1c>
 8003080:	8080004c 	andi	r2,r16,1
 8003084:	103f6826 	beq	r2,zero,8002e28 <__alt_data_end+0xf8002e28>
 8003088:	d8c11c17 	ldw	r3,1136(sp)
 800308c:	d9013717 	ldw	r4,1244(sp)
 8003090:	00800044 	movi	r2,1
 8003094:	48800115 	stw	r2,4(r9)
 8003098:	49000015 	stw	r4,0(r9)
 800309c:	4091883a 	add	r8,r8,r2
 80030a0:	1887883a 	add	r3,r3,r2
 80030a4:	da011d15 	stw	r8,1140(sp)
 80030a8:	d8c11c15 	stw	r3,1136(sp)
 80030ac:	008001c4 	movi	r2,7
 80030b0:	10c2ce16 	blt	r2,r3,8003bec <___vfprintf_internal_r+0x1980>
 80030b4:	4a400204 	addi	r9,r9,8
 80030b8:	d8813217 	ldw	r2,1224(sp)
 80030bc:	14bfffc4 	addi	r18,r2,-1
 80030c0:	04bf590e 	bge	zero,r18,8002e28 <__alt_data_end+0xf8002e28>
 80030c4:	04c00404 	movi	r19,16
 80030c8:	d8c11c17 	ldw	r3,1136(sp)
 80030cc:	05020074 	movhi	r20,2049
 80030d0:	a539e384 	addi	r20,r20,-6258
 80030d4:	9c818a0e 	bge	r19,r18,8003700 <___vfprintf_internal_r+0x1494>
 80030d8:	058001c4 	movi	r22,7
 80030dc:	ddc12917 	ldw	r23,1188(sp)
 80030e0:	00000306 	br	80030f0 <___vfprintf_internal_r+0xe84>
 80030e4:	4a400204 	addi	r9,r9,8
 80030e8:	94bffc04 	addi	r18,r18,-16
 80030ec:	9c81840e 	bge	r19,r18,8003700 <___vfprintf_internal_r+0x1494>
 80030f0:	4d000015 	stw	r20,0(r9)
 80030f4:	4cc00115 	stw	r19,4(r9)
 80030f8:	42000404 	addi	r8,r8,16
 80030fc:	18c00044 	addi	r3,r3,1
 8003100:	da011d15 	stw	r8,1140(sp)
 8003104:	d8c11c15 	stw	r3,1136(sp)
 8003108:	b0fff60e 	bge	r22,r3,80030e4 <__alt_data_end+0xf80030e4>
 800310c:	8809883a 	mov	r4,r17
 8003110:	b80b883a 	mov	r5,r23
 8003114:	d9811b04 	addi	r6,sp,1132
 8003118:	80022380 	call	8002238 <__sprint_r>
 800311c:	103d991e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003120:	da011d17 	ldw	r8,1140(sp)
 8003124:	d8c11c17 	ldw	r3,1136(sp)
 8003128:	da400404 	addi	r9,sp,16
 800312c:	003fee06 	br	80030e8 <__alt_data_end+0xf80030e8>
 8003130:	d8812e17 	ldw	r2,1208(sp)
 8003134:	d9012817 	ldw	r4,1184(sp)
 8003138:	112fc83a 	sub	r23,r2,r4
 800313c:	05ff000e 	bge	zero,r23,8002d40 <__alt_data_end+0xf8002d40>
 8003140:	07000404 	movi	fp,16
 8003144:	05020074 	movhi	r20,2049
 8003148:	a539e384 	addi	r20,r20,-6258
 800314c:	e5c01d0e 	bge	fp,r23,80031c4 <___vfprintf_internal_r+0xf58>
 8003150:	dc812a15 	stw	r18,1192(sp)
 8003154:	058001c4 	movi	r22,7
 8003158:	a025883a 	mov	r18,r20
 800315c:	8029883a 	mov	r20,r16
 8003160:	dc012917 	ldw	r16,1188(sp)
 8003164:	00000306 	br	8003174 <___vfprintf_internal_r+0xf08>
 8003168:	bdfffc04 	addi	r23,r23,-16
 800316c:	4a400204 	addi	r9,r9,8
 8003170:	e5c0110e 	bge	fp,r23,80031b8 <___vfprintf_internal_r+0xf4c>
 8003174:	4c800015 	stw	r18,0(r9)
 8003178:	4f000115 	stw	fp,4(r9)
 800317c:	42000404 	addi	r8,r8,16
 8003180:	18c00044 	addi	r3,r3,1
 8003184:	da011d15 	stw	r8,1140(sp)
 8003188:	d8c11c15 	stw	r3,1136(sp)
 800318c:	b0fff60e 	bge	r22,r3,8003168 <__alt_data_end+0xf8003168>
 8003190:	8809883a 	mov	r4,r17
 8003194:	800b883a 	mov	r5,r16
 8003198:	d9811b04 	addi	r6,sp,1132
 800319c:	80022380 	call	8002238 <__sprint_r>
 80031a0:	103d781e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 80031a4:	bdfffc04 	addi	r23,r23,-16
 80031a8:	da011d17 	ldw	r8,1140(sp)
 80031ac:	d8c11c17 	ldw	r3,1136(sp)
 80031b0:	da400404 	addi	r9,sp,16
 80031b4:	e5ffef16 	blt	fp,r23,8003174 <__alt_data_end+0xf8003174>
 80031b8:	a021883a 	mov	r16,r20
 80031bc:	9029883a 	mov	r20,r18
 80031c0:	dc812a17 	ldw	r18,1192(sp)
 80031c4:	4d000015 	stw	r20,0(r9)
 80031c8:	4dc00115 	stw	r23,4(r9)
 80031cc:	45d1883a 	add	r8,r8,r23
 80031d0:	18c00044 	addi	r3,r3,1
 80031d4:	da011d15 	stw	r8,1140(sp)
 80031d8:	d8c11c15 	stw	r3,1136(sp)
 80031dc:	008001c4 	movi	r2,7
 80031e0:	10c13616 	blt	r2,r3,80036bc <___vfprintf_internal_r+0x1450>
 80031e4:	4a400204 	addi	r9,r9,8
 80031e8:	003ed506 	br	8002d40 <__alt_data_end+0xf8002d40>
 80031ec:	d9412917 	ldw	r5,1188(sp)
 80031f0:	8809883a 	mov	r4,r17
 80031f4:	d9811b04 	addi	r6,sp,1132
 80031f8:	80022380 	call	8002238 <__sprint_r>
 80031fc:	103f4226 	beq	r2,zero,8002f08 <__alt_data_end+0xf8002f08>
 8003200:	003d6006 	br	8002784 <__alt_data_end+0xf8002784>
 8003204:	d9013217 	ldw	r4,1224(sp)
 8003208:	00800044 	movi	r2,1
 800320c:	4cc00015 	stw	r19,0(r9)
 8003210:	1101000e 	bge	r2,r4,8003614 <___vfprintf_internal_r+0x13a8>
 8003214:	00800044 	movi	r2,1
 8003218:	48800115 	stw	r2,4(r9)
 800321c:	4091883a 	add	r8,r8,r2
 8003220:	1887883a 	add	r3,r3,r2
 8003224:	da011d15 	stw	r8,1140(sp)
 8003228:	d8c11c15 	stw	r3,1136(sp)
 800322c:	008001c4 	movi	r2,7
 8003230:	10c10c16 	blt	r2,r3,8003664 <___vfprintf_internal_r+0x13f8>
 8003234:	4a400204 	addi	r9,r9,8
 8003238:	d8813717 	ldw	r2,1244(sp)
 800323c:	48800015 	stw	r2,0(r9)
 8003240:	00800044 	movi	r2,1
 8003244:	48800115 	stw	r2,4(r9)
 8003248:	4091883a 	add	r8,r8,r2
 800324c:	1887883a 	add	r3,r3,r2
 8003250:	da011d15 	stw	r8,1140(sp)
 8003254:	d8c11c15 	stw	r3,1136(sp)
 8003258:	008001c4 	movi	r2,7
 800325c:	10c10a16 	blt	r2,r3,8003688 <___vfprintf_internal_r+0x141c>
 8003260:	4c800204 	addi	r18,r9,8
 8003264:	d9013317 	ldw	r4,1228(sp)
 8003268:	d9413417 	ldw	r5,1232(sp)
 800326c:	000d883a 	mov	r6,zero
 8003270:	000f883a 	mov	r7,zero
 8003274:	d8c13b15 	stw	r3,1260(sp)
 8003278:	da013a15 	stw	r8,1256(sp)
 800327c:	800ab740 	call	800ab74 <__eqdf2>
 8003280:	d8c13b17 	ldw	r3,1260(sp)
 8003284:	da013a17 	ldw	r8,1256(sp)
 8003288:	1000ba26 	beq	r2,zero,8003574 <___vfprintf_internal_r+0x1308>
 800328c:	d9013217 	ldw	r4,1224(sp)
 8003290:	9cc00044 	addi	r19,r19,1
 8003294:	94c00015 	stw	r19,0(r18)
 8003298:	20bfffc4 	addi	r2,r4,-1
 800329c:	90800115 	stw	r2,4(r18)
 80032a0:	4091883a 	add	r8,r8,r2
 80032a4:	18c00044 	addi	r3,r3,1
 80032a8:	da011d15 	stw	r8,1140(sp)
 80032ac:	d8c11c15 	stw	r3,1136(sp)
 80032b0:	008001c4 	movi	r2,7
 80032b4:	10c0e216 	blt	r2,r3,8003640 <___vfprintf_internal_r+0x13d4>
 80032b8:	94800204 	addi	r18,r18,8
 80032bc:	d9013517 	ldw	r4,1236(sp)
 80032c0:	d8811fc4 	addi	r2,sp,1151
 80032c4:	90800015 	stw	r2,0(r18)
 80032c8:	91000115 	stw	r4,4(r18)
 80032cc:	4111883a 	add	r8,r8,r4
 80032d0:	18c00044 	addi	r3,r3,1
 80032d4:	da011d15 	stw	r8,1140(sp)
 80032d8:	d8c11c15 	stw	r3,1136(sp)
 80032dc:	008001c4 	movi	r2,7
 80032e0:	10ff2316 	blt	r2,r3,8002f70 <__alt_data_end+0xf8002f70>
 80032e4:	92400204 	addi	r9,r18,8
 80032e8:	003ecf06 	br	8002e28 <__alt_data_end+0xf8002e28>
 80032ec:	d9412917 	ldw	r5,1188(sp)
 80032f0:	8809883a 	mov	r4,r17
 80032f4:	d9811b04 	addi	r6,sp,1132
 80032f8:	80022380 	call	8002238 <__sprint_r>
 80032fc:	103d211e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003300:	da011d17 	ldw	r8,1140(sp)
 8003304:	d8c11c17 	ldw	r3,1136(sp)
 8003308:	da400404 	addi	r9,sp,16
 800330c:	003eba06 	br	8002df8 <__alt_data_end+0xf8002df8>
 8003310:	d9412917 	ldw	r5,1188(sp)
 8003314:	8809883a 	mov	r4,r17
 8003318:	d9811b04 	addi	r6,sp,1132
 800331c:	80022380 	call	8002238 <__sprint_r>
 8003320:	103d181e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003324:	da011d17 	ldw	r8,1140(sp)
 8003328:	d8c11c17 	ldw	r3,1136(sp)
 800332c:	da400404 	addi	r9,sp,16
 8003330:	003e8006 	br	8002d34 <__alt_data_end+0xf8002d34>
 8003334:	d9412917 	ldw	r5,1188(sp)
 8003338:	8809883a 	mov	r4,r17
 800333c:	d9811b04 	addi	r6,sp,1132
 8003340:	80022380 	call	8002238 <__sprint_r>
 8003344:	103d0f1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003348:	da011d17 	ldw	r8,1140(sp)
 800334c:	d8c11c17 	ldw	r3,1136(sp)
 8003350:	da400404 	addi	r9,sp,16
 8003354:	003e6a06 	br	8002d00 <__alt_data_end+0xf8002d00>
 8003358:	d9413617 	ldw	r5,1240(sp)
 800335c:	d8810dc4 	addi	r2,sp,1079
 8003360:	b8c003cc 	andi	r3,r23,15
 8003364:	b008973a 	slli	r4,r22,28
 8003368:	28c7883a 	add	r3,r5,r3
 800336c:	b82ed13a 	srli	r23,r23,4
 8003370:	18c00003 	ldbu	r3,0(r3)
 8003374:	b02cd13a 	srli	r22,r22,4
 8003378:	25eeb03a 	or	r23,r4,r23
 800337c:	10c00005 	stb	r3,0(r2)
 8003380:	bd86b03a 	or	r3,r23,r22
 8003384:	1027883a 	mov	r19,r2
 8003388:	10bfffc4 	addi	r2,r2,-1
 800338c:	183ff41e 	bne	r3,zero,8003360 <__alt_data_end+0xf8003360>
 8003390:	003f1a06 	br	8002ffc <__alt_data_end+0xf8002ffc>
 8003394:	d8012b15 	stw	zero,1196(sp)
 8003398:	dcc10e04 	addi	r19,sp,1080
 800339c:	003d3a06 	br	8002888 <__alt_data_end+0xf8002888>
 80033a0:	b0025426 	beq	r22,zero,8003cf4 <___vfprintf_internal_r+0x1a88>
 80033a4:	b807883a 	mov	r3,r23
 80033a8:	d8810dc4 	addi	r2,sp,1079
 80033ac:	882f883a 	mov	r23,r17
 80033b0:	04c00244 	movi	r19,9
 80033b4:	8023883a 	mov	r17,r16
 80033b8:	da412815 	stw	r9,1184(sp)
 80033bc:	1821883a 	mov	r16,r3
 80033c0:	8009883a 	mov	r4,r16
 80033c4:	b00b883a 	mov	r5,r22
 80033c8:	01800284 	movi	r6,10
 80033cc:	000f883a 	mov	r7,zero
 80033d0:	1029883a 	mov	r20,r2
 80033d4:	8009cac0 	call	8009cac <__umoddi3>
 80033d8:	10800c04 	addi	r2,r2,48
 80033dc:	8009883a 	mov	r4,r16
 80033e0:	b00b883a 	mov	r5,r22
 80033e4:	a0800005 	stb	r2,0(r20)
 80033e8:	01800284 	movi	r6,10
 80033ec:	000f883a 	mov	r7,zero
 80033f0:	800965c0 	call	800965c <__udivdi3>
 80033f4:	1021883a 	mov	r16,r2
 80033f8:	182d883a 	mov	r22,r3
 80033fc:	a0bfffc4 	addi	r2,r20,-1
 8003400:	183fef1e 	bne	r3,zero,80033c0 <__alt_data_end+0xf80033c0>
 8003404:	9c3fee36 	bltu	r19,r16,80033c0 <__alt_data_end+0xf80033c0>
 8003408:	da412817 	ldw	r9,1184(sp)
 800340c:	8005883a 	mov	r2,r16
 8003410:	8821883a 	mov	r16,r17
 8003414:	b823883a 	mov	r17,r23
 8003418:	102f883a 	mov	r23,r2
 800341c:	d8812717 	ldw	r2,1180(sp)
 8003420:	a4ffffc4 	addi	r19,r20,-1
 8003424:	bdc00c04 	addi	r23,r23,48
 8003428:	14c5c83a 	sub	r2,r2,r19
 800342c:	a5ffffc5 	stb	r23,-1(r20)
 8003430:	d8812b15 	stw	r2,1196(sp)
 8003434:	003d1406 	br	8002888 <__alt_data_end+0xf8002888>
 8003438:	00c00044 	movi	r3,1
 800343c:	bd84b03a 	or	r2,r23,r22
 8003440:	003d0306 	br	8002850 <__alt_data_end+0xf8002850>
 8003444:	dc812417 	ldw	r18,1168(sp)
 8003448:	0481140e 	bge	zero,r18,800389c <___vfprintf_internal_r+0x1630>
 800344c:	d9013217 	ldw	r4,1224(sp)
 8003450:	4cc00015 	stw	r19,0(r9)
 8003454:	9100ec16 	blt	r18,r4,8003808 <___vfprintf_internal_r+0x159c>
 8003458:	49000115 	stw	r4,4(r9)
 800345c:	4111883a 	add	r8,r8,r4
 8003460:	18c00044 	addi	r3,r3,1
 8003464:	da011d15 	stw	r8,1140(sp)
 8003468:	d8c11c15 	stw	r3,1136(sp)
 800346c:	008001c4 	movi	r2,7
 8003470:	10c23616 	blt	r2,r3,8003d4c <___vfprintf_internal_r+0x1ae0>
 8003474:	4a400204 	addi	r9,r9,8
 8003478:	d8813217 	ldw	r2,1224(sp)
 800347c:	90a5c83a 	sub	r18,r18,r2
 8003480:	04beae0e 	bge	zero,r18,8002f3c <__alt_data_end+0xf8002f3c>
 8003484:	04c00404 	movi	r19,16
 8003488:	d8c11c17 	ldw	r3,1136(sp)
 800348c:	05020074 	movhi	r20,2049
 8003490:	a539e384 	addi	r20,r20,-6258
 8003494:	9c81dd0e 	bge	r19,r18,8003c0c <___vfprintf_internal_r+0x19a0>
 8003498:	058001c4 	movi	r22,7
 800349c:	ddc12917 	ldw	r23,1188(sp)
 80034a0:	00000306 	br	80034b0 <___vfprintf_internal_r+0x1244>
 80034a4:	4a400204 	addi	r9,r9,8
 80034a8:	94bffc04 	addi	r18,r18,-16
 80034ac:	9c81d70e 	bge	r19,r18,8003c0c <___vfprintf_internal_r+0x19a0>
 80034b0:	4d000015 	stw	r20,0(r9)
 80034b4:	4cc00115 	stw	r19,4(r9)
 80034b8:	42000404 	addi	r8,r8,16
 80034bc:	18c00044 	addi	r3,r3,1
 80034c0:	da011d15 	stw	r8,1140(sp)
 80034c4:	d8c11c15 	stw	r3,1136(sp)
 80034c8:	b0fff60e 	bge	r22,r3,80034a4 <__alt_data_end+0xf80034a4>
 80034cc:	8809883a 	mov	r4,r17
 80034d0:	b80b883a 	mov	r5,r23
 80034d4:	d9811b04 	addi	r6,sp,1132
 80034d8:	80022380 	call	8002238 <__sprint_r>
 80034dc:	103ca91e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 80034e0:	da011d17 	ldw	r8,1140(sp)
 80034e4:	d8c11c17 	ldw	r3,1136(sp)
 80034e8:	da400404 	addi	r9,sp,16
 80034ec:	003fee06 	br	80034a8 <__alt_data_end+0xf80034a8>
 80034f0:	d9412917 	ldw	r5,1188(sp)
 80034f4:	8809883a 	mov	r4,r17
 80034f8:	d9811b04 	addi	r6,sp,1132
 80034fc:	80022380 	call	8002238 <__sprint_r>
 8003500:	103ca01e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003504:	da011d17 	ldw	r8,1140(sp)
 8003508:	d8c11c17 	ldw	r3,1136(sp)
 800350c:	da400404 	addi	r9,sp,16
 8003510:	003dee06 	br	8002ccc <__alt_data_end+0xf8002ccc>
 8003514:	00c00084 	movi	r3,2
 8003518:	bd84b03a 	or	r2,r23,r22
 800351c:	d8012585 	stb	zero,1174(sp)
 8003520:	003ccb06 	br	8002850 <__alt_data_end+0xf8002850>
 8003524:	8080040c 	andi	r2,r16,16
 8003528:	1000ae26 	beq	r2,zero,80037e4 <___vfprintf_internal_r+0x1578>
 800352c:	d9012d17 	ldw	r4,1204(sp)
 8003530:	25c00017 	ldw	r23,0(r4)
 8003534:	21000104 	addi	r4,r4,4
 8003538:	d9012d15 	stw	r4,1204(sp)
 800353c:	b82dd7fa 	srai	r22,r23,31
 8003540:	b005883a 	mov	r2,r22
 8003544:	003cb906 	br	800282c <__alt_data_end+0xf800282c>
 8003548:	8080040c 	andi	r2,r16,16
 800354c:	10007026 	beq	r2,zero,8003710 <___vfprintf_internal_r+0x14a4>
 8003550:	d8812d17 	ldw	r2,1204(sp)
 8003554:	002d883a 	mov	r22,zero
 8003558:	00c00044 	movi	r3,1
 800355c:	15c00017 	ldw	r23,0(r2)
 8003560:	10800104 	addi	r2,r2,4
 8003564:	d8812d15 	stw	r2,1204(sp)
 8003568:	d8012585 	stb	zero,1174(sp)
 800356c:	b805883a 	mov	r2,r23
 8003570:	003cb706 	br	8002850 <__alt_data_end+0xf8002850>
 8003574:	d8813217 	ldw	r2,1224(sp)
 8003578:	14ffffc4 	addi	r19,r2,-1
 800357c:	04ff4f0e 	bge	zero,r19,80032bc <__alt_data_end+0xf80032bc>
 8003580:	05800404 	movi	r22,16
 8003584:	05020074 	movhi	r20,2049
 8003588:	a539e384 	addi	r20,r20,-6258
 800358c:	b4c0470e 	bge	r22,r19,80036ac <___vfprintf_internal_r+0x1440>
 8003590:	05c001c4 	movi	r23,7
 8003594:	df012917 	ldw	fp,1188(sp)
 8003598:	00000306 	br	80035a8 <___vfprintf_internal_r+0x133c>
 800359c:	94800204 	addi	r18,r18,8
 80035a0:	9cfffc04 	addi	r19,r19,-16
 80035a4:	b4c0410e 	bge	r22,r19,80036ac <___vfprintf_internal_r+0x1440>
 80035a8:	95000015 	stw	r20,0(r18)
 80035ac:	95800115 	stw	r22,4(r18)
 80035b0:	42000404 	addi	r8,r8,16
 80035b4:	18c00044 	addi	r3,r3,1
 80035b8:	da011d15 	stw	r8,1140(sp)
 80035bc:	d8c11c15 	stw	r3,1136(sp)
 80035c0:	b8fff60e 	bge	r23,r3,800359c <__alt_data_end+0xf800359c>
 80035c4:	8809883a 	mov	r4,r17
 80035c8:	e00b883a 	mov	r5,fp
 80035cc:	d9811b04 	addi	r6,sp,1132
 80035d0:	80022380 	call	8002238 <__sprint_r>
 80035d4:	103c6b1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 80035d8:	da011d17 	ldw	r8,1140(sp)
 80035dc:	d8c11c17 	ldw	r3,1136(sp)
 80035e0:	dc800404 	addi	r18,sp,16
 80035e4:	003fee06 	br	80035a0 <__alt_data_end+0xf80035a0>
 80035e8:	8080040c 	andi	r2,r16,16
 80035ec:	10005326 	beq	r2,zero,800373c <___vfprintf_internal_r+0x14d0>
 80035f0:	d8c12d17 	ldw	r3,1204(sp)
 80035f4:	002d883a 	mov	r22,zero
 80035f8:	1dc00017 	ldw	r23,0(r3)
 80035fc:	18c00104 	addi	r3,r3,4
 8003600:	d8c12d15 	stw	r3,1204(sp)
 8003604:	b805883a 	mov	r2,r23
 8003608:	0007883a 	mov	r3,zero
 800360c:	d8012585 	stb	zero,1174(sp)
 8003610:	003c8f06 	br	8002850 <__alt_data_end+0xf8002850>
 8003614:	8088703a 	and	r4,r16,r2
 8003618:	203efe1e 	bne	r4,zero,8003214 <__alt_data_end+0xf8003214>
 800361c:	48800115 	stw	r2,4(r9)
 8003620:	42000044 	addi	r8,r8,1
 8003624:	18c00044 	addi	r3,r3,1
 8003628:	da011d15 	stw	r8,1140(sp)
 800362c:	d8c11c15 	stw	r3,1136(sp)
 8003630:	008001c4 	movi	r2,7
 8003634:	10c00216 	blt	r2,r3,8003640 <___vfprintf_internal_r+0x13d4>
 8003638:	4c800204 	addi	r18,r9,8
 800363c:	003f1f06 	br	80032bc <__alt_data_end+0xf80032bc>
 8003640:	d9412917 	ldw	r5,1188(sp)
 8003644:	8809883a 	mov	r4,r17
 8003648:	d9811b04 	addi	r6,sp,1132
 800364c:	80022380 	call	8002238 <__sprint_r>
 8003650:	103c4c1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003654:	dc800404 	addi	r18,sp,16
 8003658:	da011d17 	ldw	r8,1140(sp)
 800365c:	d8c11c17 	ldw	r3,1136(sp)
 8003660:	003f1606 	br	80032bc <__alt_data_end+0xf80032bc>
 8003664:	d9412917 	ldw	r5,1188(sp)
 8003668:	8809883a 	mov	r4,r17
 800366c:	d9811b04 	addi	r6,sp,1132
 8003670:	80022380 	call	8002238 <__sprint_r>
 8003674:	103c431e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003678:	da011d17 	ldw	r8,1140(sp)
 800367c:	d8c11c17 	ldw	r3,1136(sp)
 8003680:	da400404 	addi	r9,sp,16
 8003684:	003eec06 	br	8003238 <__alt_data_end+0xf8003238>
 8003688:	d9412917 	ldw	r5,1188(sp)
 800368c:	8809883a 	mov	r4,r17
 8003690:	d9811b04 	addi	r6,sp,1132
 8003694:	80022380 	call	8002238 <__sprint_r>
 8003698:	103c3a1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 800369c:	da011d17 	ldw	r8,1140(sp)
 80036a0:	d8c11c17 	ldw	r3,1136(sp)
 80036a4:	dc800404 	addi	r18,sp,16
 80036a8:	003eee06 	br	8003264 <__alt_data_end+0xf8003264>
 80036ac:	95000015 	stw	r20,0(r18)
 80036b0:	94c00115 	stw	r19,4(r18)
 80036b4:	44d1883a 	add	r8,r8,r19
 80036b8:	003efa06 	br	80032a4 <__alt_data_end+0xf80032a4>
 80036bc:	d9412917 	ldw	r5,1188(sp)
 80036c0:	8809883a 	mov	r4,r17
 80036c4:	d9811b04 	addi	r6,sp,1132
 80036c8:	80022380 	call	8002238 <__sprint_r>
 80036cc:	103c2d1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 80036d0:	da011d17 	ldw	r8,1140(sp)
 80036d4:	d8c11c17 	ldw	r3,1136(sp)
 80036d8:	da400404 	addi	r9,sp,16
 80036dc:	003d9806 	br	8002d40 <__alt_data_end+0xf8002d40>
 80036e0:	8080100c 	andi	r2,r16,64
 80036e4:	10011626 	beq	r2,zero,8003b40 <___vfprintf_internal_r+0x18d4>
 80036e8:	d8c12d17 	ldw	r3,1204(sp)
 80036ec:	002d883a 	mov	r22,zero
 80036f0:	1dc0000b 	ldhu	r23,0(r3)
 80036f4:	18c00104 	addi	r3,r3,4
 80036f8:	d8c12d15 	stw	r3,1204(sp)
 80036fc:	003cc106 	br	8002a04 <__alt_data_end+0xf8002a04>
 8003700:	4d000015 	stw	r20,0(r9)
 8003704:	4c800115 	stw	r18,4(r9)
 8003708:	4491883a 	add	r8,r8,r18
 800370c:	003dc006 	br	8002e10 <__alt_data_end+0xf8002e10>
 8003710:	8080100c 	andi	r2,r16,64
 8003714:	10010126 	beq	r2,zero,8003b1c <___vfprintf_internal_r+0x18b0>
 8003718:	d8c12d17 	ldw	r3,1204(sp)
 800371c:	002d883a 	mov	r22,zero
 8003720:	1dc0000b 	ldhu	r23,0(r3)
 8003724:	18c00104 	addi	r3,r3,4
 8003728:	d8c12d15 	stw	r3,1204(sp)
 800372c:	b805883a 	mov	r2,r23
 8003730:	00c00044 	movi	r3,1
 8003734:	d8012585 	stb	zero,1174(sp)
 8003738:	003c4506 	br	8002850 <__alt_data_end+0xf8002850>
 800373c:	8080100c 	andi	r2,r16,64
 8003740:	10010526 	beq	r2,zero,8003b58 <___vfprintf_internal_r+0x18ec>
 8003744:	d9012d17 	ldw	r4,1204(sp)
 8003748:	002d883a 	mov	r22,zero
 800374c:	0007883a 	mov	r3,zero
 8003750:	25c0000b 	ldhu	r23,0(r4)
 8003754:	21000104 	addi	r4,r4,4
 8003758:	d9012d15 	stw	r4,1204(sp)
 800375c:	b805883a 	mov	r2,r23
 8003760:	d8012585 	stb	zero,1174(sp)
 8003764:	003c3a06 	br	8002850 <__alt_data_end+0xf8002850>
 8003768:	d8812d17 	ldw	r2,1204(sp)
 800376c:	15800017 	ldw	r22,0(r2)
 8003770:	15000117 	ldw	r20,4(r2)
 8003774:	10800204 	addi	r2,r2,8
 8003778:	d8812d15 	stw	r2,1204(sp)
 800377c:	dd813315 	stw	r22,1228(sp)
 8003780:	dd013415 	stw	r20,1232(sp)
 8003784:	003c5906 	br	80028ec <__alt_data_end+0xf80028ec>
 8003788:	00c00084 	movi	r3,2
 800378c:	d8012585 	stb	zero,1174(sp)
 8003790:	003c2f06 	br	8002850 <__alt_data_end+0xf8002850>
 8003794:	ac800007 	ldb	r18,0(r21)
 8003798:	003b1006 	br	80023dc <__alt_data_end+0xf80023dc>
 800379c:	8080040c 	andi	r2,r16,16
 80037a0:	1000091e 	bne	r2,zero,80037c8 <___vfprintf_internal_r+0x155c>
 80037a4:	8400100c 	andi	r16,r16,64
 80037a8:	80000726 	beq	r16,zero,80037c8 <___vfprintf_internal_r+0x155c>
 80037ac:	d8c12d17 	ldw	r3,1204(sp)
 80037b0:	d9012c17 	ldw	r4,1200(sp)
 80037b4:	18800017 	ldw	r2,0(r3)
 80037b8:	18c00104 	addi	r3,r3,4
 80037bc:	d8c12d15 	stw	r3,1204(sp)
 80037c0:	1100000d 	sth	r4,0(r2)
 80037c4:	003adf06 	br	8002344 <__alt_data_end+0xf8002344>
 80037c8:	d8c12d17 	ldw	r3,1204(sp)
 80037cc:	d9012c17 	ldw	r4,1200(sp)
 80037d0:	18800017 	ldw	r2,0(r3)
 80037d4:	18c00104 	addi	r3,r3,4
 80037d8:	d8c12d15 	stw	r3,1204(sp)
 80037dc:	11000015 	stw	r4,0(r2)
 80037e0:	003ad806 	br	8002344 <__alt_data_end+0xf8002344>
 80037e4:	8080100c 	andi	r2,r16,64
 80037e8:	1000c526 	beq	r2,zero,8003b00 <___vfprintf_internal_r+0x1894>
 80037ec:	d8812d17 	ldw	r2,1204(sp)
 80037f0:	15c0000f 	ldh	r23,0(r2)
 80037f4:	10800104 	addi	r2,r2,4
 80037f8:	d8812d15 	stw	r2,1204(sp)
 80037fc:	b82dd7fa 	srai	r22,r23,31
 8003800:	b005883a 	mov	r2,r22
 8003804:	003c0906 	br	800282c <__alt_data_end+0xf800282c>
 8003808:	4c800115 	stw	r18,4(r9)
 800380c:	9211883a 	add	r8,r18,r8
 8003810:	18c00044 	addi	r3,r3,1
 8003814:	da011d15 	stw	r8,1140(sp)
 8003818:	d8c11c15 	stw	r3,1136(sp)
 800381c:	008001c4 	movi	r2,7
 8003820:	10c14016 	blt	r2,r3,8003d24 <___vfprintf_internal_r+0x1ab8>
 8003824:	4a400204 	addi	r9,r9,8
 8003828:	d8813717 	ldw	r2,1244(sp)
 800382c:	9ca7883a 	add	r19,r19,r18
 8003830:	48800015 	stw	r2,0(r9)
 8003834:	00800044 	movi	r2,1
 8003838:	48800115 	stw	r2,4(r9)
 800383c:	4091883a 	add	r8,r8,r2
 8003840:	1887883a 	add	r3,r3,r2
 8003844:	da011d15 	stw	r8,1140(sp)
 8003848:	d8c11c15 	stw	r3,1136(sp)
 800384c:	008001c4 	movi	r2,7
 8003850:	10c12c16 	blt	r2,r3,8003d04 <___vfprintf_internal_r+0x1a98>
 8003854:	4a400204 	addi	r9,r9,8
 8003858:	d9013217 	ldw	r4,1224(sp)
 800385c:	da011d17 	ldw	r8,1140(sp)
 8003860:	d8c11c17 	ldw	r3,1136(sp)
 8003864:	24a5c83a 	sub	r18,r4,r18
 8003868:	4cc00015 	stw	r19,0(r9)
 800386c:	003fa506 	br	8003704 <__alt_data_end+0xf8003704>
 8003870:	04c20074 	movhi	r19,2049
 8003874:	9cf9d004 	addi	r19,r19,-6336
 8003878:	003c2e06 	br	8002934 <__alt_data_end+0xf8002934>
 800387c:	d9412917 	ldw	r5,1188(sp)
 8003880:	8809883a 	mov	r4,r17
 8003884:	d9811b04 	addi	r6,sp,1132
 8003888:	80022380 	call	8002238 <__sprint_r>
 800388c:	103bbd1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003890:	da011d17 	ldw	r8,1140(sp)
 8003894:	da400404 	addi	r9,sp,16
 8003898:	003df606 	br	8003074 <__alt_data_end+0xf8003074>
 800389c:	00820074 	movhi	r2,2049
 80038a0:	10b9df04 	addi	r2,r2,-6276
 80038a4:	48800015 	stw	r2,0(r9)
 80038a8:	00800044 	movi	r2,1
 80038ac:	48800115 	stw	r2,4(r9)
 80038b0:	4091883a 	add	r8,r8,r2
 80038b4:	1887883a 	add	r3,r3,r2
 80038b8:	da011d15 	stw	r8,1140(sp)
 80038bc:	d8c11c15 	stw	r3,1136(sp)
 80038c0:	008001c4 	movi	r2,7
 80038c4:	10c0bc16 	blt	r2,r3,8003bb8 <___vfprintf_internal_r+0x194c>
 80038c8:	4a400204 	addi	r9,r9,8
 80038cc:	9000041e 	bne	r18,zero,80038e0 <___vfprintf_internal_r+0x1674>
 80038d0:	d8c13217 	ldw	r3,1224(sp)
 80038d4:	1800021e 	bne	r3,zero,80038e0 <___vfprintf_internal_r+0x1674>
 80038d8:	8080004c 	andi	r2,r16,1
 80038dc:	103d5226 	beq	r2,zero,8002e28 <__alt_data_end+0xf8002e28>
 80038e0:	d8c11c17 	ldw	r3,1136(sp)
 80038e4:	d9013717 	ldw	r4,1244(sp)
 80038e8:	00800044 	movi	r2,1
 80038ec:	48800115 	stw	r2,4(r9)
 80038f0:	49000015 	stw	r4,0(r9)
 80038f4:	4091883a 	add	r8,r8,r2
 80038f8:	1887883a 	add	r3,r3,r2
 80038fc:	da011d15 	stw	r8,1140(sp)
 8003900:	d8c11c15 	stw	r3,1136(sp)
 8003904:	008001c4 	movi	r2,7
 8003908:	10c14516 	blt	r2,r3,8003e20 <___vfprintf_internal_r+0x1bb4>
 800390c:	4a400204 	addi	r9,r9,8
 8003910:	04a5c83a 	sub	r18,zero,r18
 8003914:	0480d70e 	bge	zero,r18,8003c74 <___vfprintf_internal_r+0x1a08>
 8003918:	05800404 	movi	r22,16
 800391c:	05020074 	movhi	r20,2049
 8003920:	a539e384 	addi	r20,r20,-6258
 8003924:	b480db0e 	bge	r22,r18,8003c94 <___vfprintf_internal_r+0x1a28>
 8003928:	05c001c4 	movi	r23,7
 800392c:	df012917 	ldw	fp,1188(sp)
 8003930:	00000306 	br	8003940 <___vfprintf_internal_r+0x16d4>
 8003934:	4a400204 	addi	r9,r9,8
 8003938:	94bffc04 	addi	r18,r18,-16
 800393c:	b480d50e 	bge	r22,r18,8003c94 <___vfprintf_internal_r+0x1a28>
 8003940:	4d000015 	stw	r20,0(r9)
 8003944:	4d800115 	stw	r22,4(r9)
 8003948:	42000404 	addi	r8,r8,16
 800394c:	18c00044 	addi	r3,r3,1
 8003950:	da011d15 	stw	r8,1140(sp)
 8003954:	d8c11c15 	stw	r3,1136(sp)
 8003958:	b8fff60e 	bge	r23,r3,8003934 <__alt_data_end+0xf8003934>
 800395c:	8809883a 	mov	r4,r17
 8003960:	e00b883a 	mov	r5,fp
 8003964:	d9811b04 	addi	r6,sp,1132
 8003968:	80022380 	call	8002238 <__sprint_r>
 800396c:	103b851e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003970:	da011d17 	ldw	r8,1140(sp)
 8003974:	d8c11c17 	ldw	r3,1136(sp)
 8003978:	da400404 	addi	r9,sp,16
 800397c:	003fee06 	br	8003938 <__alt_data_end+0xf8003938>
 8003980:	da413c15 	stw	r9,1264(sp)
 8003984:	8008f580 	call	8008f58 <__isnand>
 8003988:	da413c17 	ldw	r9,1264(sp)
 800398c:	10007e1e 	bne	r2,zero,8003b88 <___vfprintf_internal_r+0x191c>
 8003990:	00bfffc4 	movi	r2,-1
 8003994:	e0816a26 	beq	fp,r2,8003f40 <___vfprintf_internal_r+0x1cd4>
 8003998:	008019c4 	movi	r2,103
 800399c:	90816526 	beq	r18,r2,8003f34 <___vfprintf_internal_r+0x1cc8>
 80039a0:	008011c4 	movi	r2,71
 80039a4:	90816326 	beq	r18,r2,8003f34 <___vfprintf_internal_r+0x1cc8>
 80039a8:	80c04014 	ori	r3,r16,256
 80039ac:	d8c12a15 	stw	r3,1192(sp)
 80039b0:	a0016516 	blt	r20,zero,8003f48 <___vfprintf_internal_r+0x1cdc>
 80039b4:	d8012f05 	stb	zero,1212(sp)
 80039b8:	00801984 	movi	r2,102
 80039bc:	9080f226 	beq	r18,r2,8003d88 <___vfprintf_internal_r+0x1b1c>
 80039c0:	00801184 	movi	r2,70
 80039c4:	9080f026 	beq	r18,r2,8003d88 <___vfprintf_internal_r+0x1b1c>
 80039c8:	00801944 	movi	r2,101
 80039cc:	90818d26 	beq	r18,r2,8004004 <___vfprintf_internal_r+0x1d98>
 80039d0:	00801144 	movi	r2,69
 80039d4:	90818b26 	beq	r18,r2,8004004 <___vfprintf_internal_r+0x1d98>
 80039d8:	e02f883a 	mov	r23,fp
 80039dc:	d8812404 	addi	r2,sp,1168
 80039e0:	d8800115 	stw	r2,4(sp)
 80039e4:	d8812304 	addi	r2,sp,1164
 80039e8:	d8800215 	stw	r2,8(sp)
 80039ec:	d8812204 	addi	r2,sp,1160
 80039f0:	ddc00015 	stw	r23,0(sp)
 80039f4:	d8800315 	stw	r2,12(sp)
 80039f8:	8809883a 	mov	r4,r17
 80039fc:	b00b883a 	mov	r5,r22
 8003a00:	a00d883a 	mov	r6,r20
 8003a04:	01c00084 	movi	r7,2
 8003a08:	da413c15 	stw	r9,1264(sp)
 8003a0c:	80044bc0 	call	80044bc <_dtoa_r>
 8003a10:	1027883a 	mov	r19,r2
 8003a14:	008019c4 	movi	r2,103
 8003a18:	da413c17 	ldw	r9,1264(sp)
 8003a1c:	9081951e 	bne	r18,r2,8004074 <___vfprintf_internal_r+0x1e08>
 8003a20:	8080004c 	andi	r2,r16,1
 8003a24:	10017926 	beq	r2,zero,800400c <___vfprintf_internal_r+0x1da0>
 8003a28:	00801184 	movi	r2,70
 8003a2c:	9dc7883a 	add	r3,r19,r23
 8003a30:	9080e626 	beq	r18,r2,8003dcc <___vfprintf_internal_r+0x1b60>
 8003a34:	b009883a 	mov	r4,r22
 8003a38:	a00b883a 	mov	r5,r20
 8003a3c:	000d883a 	mov	r6,zero
 8003a40:	000f883a 	mov	r7,zero
 8003a44:	d8c13b15 	stw	r3,1260(sp)
 8003a48:	da413c15 	stw	r9,1264(sp)
 8003a4c:	800ab740 	call	800ab74 <__eqdf2>
 8003a50:	d8c13b17 	ldw	r3,1260(sp)
 8003a54:	da413c17 	ldw	r9,1264(sp)
 8003a58:	10000726 	beq	r2,zero,8003a78 <___vfprintf_internal_r+0x180c>
 8003a5c:	d8812217 	ldw	r2,1160(sp)
 8003a60:	10c18a2e 	bgeu	r2,r3,800408c <___vfprintf_internal_r+0x1e20>
 8003a64:	01000c04 	movi	r4,48
 8003a68:	11000005 	stb	r4,0(r2)
 8003a6c:	10800044 	addi	r2,r2,1
 8003a70:	d8812215 	stw	r2,1160(sp)
 8003a74:	10fffc1e 	bne	r2,r3,8003a68 <__alt_data_end+0xf8003a68>
 8003a78:	1cc7c83a 	sub	r3,r3,r19
 8003a7c:	d8c13215 	stw	r3,1224(sp)
 8003a80:	008019c4 	movi	r2,103
 8003a84:	9080fa26 	beq	r18,r2,8003e70 <___vfprintf_internal_r+0x1c04>
 8003a88:	008011c4 	movi	r2,71
 8003a8c:	9080f826 	beq	r18,r2,8003e70 <___vfprintf_internal_r+0x1c04>
 8003a90:	00801984 	movi	r2,102
 8003a94:	90818e1e 	bne	r18,r2,80040d0 <___vfprintf_internal_r+0x1e64>
 8003a98:	d8812417 	ldw	r2,1168(sp)
 8003a9c:	d8812b15 	stw	r2,1196(sp)
 8003aa0:	00817c0e 	bge	zero,r2,8004094 <___vfprintf_internal_r+0x1e28>
 8003aa4:	e000021e 	bne	fp,zero,8003ab0 <___vfprintf_internal_r+0x1844>
 8003aa8:	8400004c 	andi	r16,r16,1
 8003aac:	80000426 	beq	r16,zero,8003ac0 <___vfprintf_internal_r+0x1854>
 8003ab0:	d8812b17 	ldw	r2,1196(sp)
 8003ab4:	e2000044 	addi	r8,fp,1
 8003ab8:	1205883a 	add	r2,r2,r8
 8003abc:	d8812b15 	stw	r2,1196(sp)
 8003ac0:	d8812815 	stw	r2,1184(sp)
 8003ac4:	10010b16 	blt	r2,zero,8003ef4 <___vfprintf_internal_r+0x1c88>
 8003ac8:	ddc12f07 	ldb	r23,1212(sp)
 8003acc:	b800e426 	beq	r23,zero,8003e60 <___vfprintf_internal_r+0x1bf4>
 8003ad0:	00800b44 	movi	r2,45
 8003ad4:	d8812585 	stb	r2,1174(sp)
 8003ad8:	dc012a17 	ldw	r16,1192(sp)
 8003adc:	d8013115 	stw	zero,1220(sp)
 8003ae0:	003b7306 	br	80028b0 <__alt_data_end+0xf80028b0>
 8003ae4:	d8812b17 	ldw	r2,1196(sp)
 8003ae8:	d8812815 	stw	r2,1184(sp)
 8003aec:	10005716 	blt	r2,zero,8003c4c <___vfprintf_internal_r+0x19e0>
 8003af0:	d8812583 	ldbu	r2,1174(sp)
 8003af4:	ddc12d15 	stw	r23,1204(sp)
 8003af8:	d8013115 	stw	zero,1220(sp)
 8003afc:	003b6806 	br	80028a0 <__alt_data_end+0xf80028a0>
 8003b00:	d8c12d17 	ldw	r3,1204(sp)
 8003b04:	1dc00017 	ldw	r23,0(r3)
 8003b08:	18c00104 	addi	r3,r3,4
 8003b0c:	d8c12d15 	stw	r3,1204(sp)
 8003b10:	b82dd7fa 	srai	r22,r23,31
 8003b14:	b005883a 	mov	r2,r22
 8003b18:	003b4406 	br	800282c <__alt_data_end+0xf800282c>
 8003b1c:	d9012d17 	ldw	r4,1204(sp)
 8003b20:	002d883a 	mov	r22,zero
 8003b24:	00c00044 	movi	r3,1
 8003b28:	25c00017 	ldw	r23,0(r4)
 8003b2c:	21000104 	addi	r4,r4,4
 8003b30:	d9012d15 	stw	r4,1204(sp)
 8003b34:	b805883a 	mov	r2,r23
 8003b38:	d8012585 	stb	zero,1174(sp)
 8003b3c:	003b4406 	br	8002850 <__alt_data_end+0xf8002850>
 8003b40:	d9012d17 	ldw	r4,1204(sp)
 8003b44:	002d883a 	mov	r22,zero
 8003b48:	25c00017 	ldw	r23,0(r4)
 8003b4c:	21000104 	addi	r4,r4,4
 8003b50:	d9012d15 	stw	r4,1204(sp)
 8003b54:	003bab06 	br	8002a04 <__alt_data_end+0xf8002a04>
 8003b58:	d8812d17 	ldw	r2,1204(sp)
 8003b5c:	002d883a 	mov	r22,zero
 8003b60:	0007883a 	mov	r3,zero
 8003b64:	15c00017 	ldw	r23,0(r2)
 8003b68:	10800104 	addi	r2,r2,4
 8003b6c:	d8812d15 	stw	r2,1204(sp)
 8003b70:	d8012585 	stb	zero,1174(sp)
 8003b74:	b805883a 	mov	r2,r23
 8003b78:	003b3506 	br	8002850 <__alt_data_end+0xf8002850>
 8003b7c:	00ffffc4 	movi	r3,-1
 8003b80:	b82b883a 	mov	r21,r23
 8003b84:	003a1606 	br	80023e0 <__alt_data_end+0xf80023e0>
 8003b88:	008011c4 	movi	r2,71
 8003b8c:	1480b116 	blt	r2,r18,8003e54 <___vfprintf_internal_r+0x1be8>
 8003b90:	04c20074 	movhi	r19,2049
 8003b94:	9cf9d104 	addi	r19,r19,-6332
 8003b98:	00c000c4 	movi	r3,3
 8003b9c:	00bfdfc4 	movi	r2,-129
 8003ba0:	80a0703a 	and	r16,r16,r2
 8003ba4:	d8c12815 	stw	r3,1184(sp)
 8003ba8:	d8812583 	ldbu	r2,1174(sp)
 8003bac:	d8c12b15 	stw	r3,1196(sp)
 8003bb0:	d8013115 	stw	zero,1220(sp)
 8003bb4:	003b3a06 	br	80028a0 <__alt_data_end+0xf80028a0>
 8003bb8:	d9412917 	ldw	r5,1188(sp)
 8003bbc:	8809883a 	mov	r4,r17
 8003bc0:	d9811b04 	addi	r6,sp,1132
 8003bc4:	80022380 	call	8002238 <__sprint_r>
 8003bc8:	103aee1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003bcc:	dc812417 	ldw	r18,1168(sp)
 8003bd0:	da011d17 	ldw	r8,1140(sp)
 8003bd4:	da400404 	addi	r9,sp,16
 8003bd8:	003f3c06 	br	80038cc <__alt_data_end+0xf80038cc>
 8003bdc:	ad400044 	addi	r21,r21,1
 8003be0:	84000814 	ori	r16,r16,32
 8003be4:	14800047 	ldb	r18,1(r2)
 8003be8:	0039fc06 	br	80023dc <__alt_data_end+0xf80023dc>
 8003bec:	d9412917 	ldw	r5,1188(sp)
 8003bf0:	8809883a 	mov	r4,r17
 8003bf4:	d9811b04 	addi	r6,sp,1132
 8003bf8:	80022380 	call	8002238 <__sprint_r>
 8003bfc:	103ae11e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003c00:	da011d17 	ldw	r8,1140(sp)
 8003c04:	da400404 	addi	r9,sp,16
 8003c08:	003d2b06 	br	80030b8 <__alt_data_end+0xf80030b8>
 8003c0c:	4d000015 	stw	r20,0(r9)
 8003c10:	4c800115 	stw	r18,4(r9)
 8003c14:	4491883a 	add	r8,r8,r18
 8003c18:	18c00044 	addi	r3,r3,1
 8003c1c:	da011d15 	stw	r8,1140(sp)
 8003c20:	d8c11c15 	stw	r3,1136(sp)
 8003c24:	008001c4 	movi	r2,7
 8003c28:	10fcbd16 	blt	r2,r3,8002f20 <__alt_data_end+0xf8002f20>
 8003c2c:	4a400204 	addi	r9,r9,8
 8003c30:	003cc206 	br	8002f3c <__alt_data_end+0xf8002f3c>
 8003c34:	da413c15 	stw	r9,1264(sp)
 8003c38:	80021ac0 	call	80021ac <strlen>
 8003c3c:	d8812b15 	stw	r2,1196(sp)
 8003c40:	d8812815 	stw	r2,1184(sp)
 8003c44:	da413c17 	ldw	r9,1264(sp)
 8003c48:	103fa90e 	bge	r2,zero,8003af0 <__alt_data_end+0xf8003af0>
 8003c4c:	d8012815 	stw	zero,1184(sp)
 8003c50:	003fa706 	br	8003af0 <__alt_data_end+0xf8003af0>
 8003c54:	d9412917 	ldw	r5,1188(sp)
 8003c58:	8809883a 	mov	r4,r17
 8003c5c:	d9811b04 	addi	r6,sp,1132
 8003c60:	80022380 	call	8002238 <__sprint_r>
 8003c64:	103ac71e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003c68:	da011d17 	ldw	r8,1140(sp)
 8003c6c:	d8c11c17 	ldw	r3,1136(sp)
 8003c70:	da400404 	addi	r9,sp,16
 8003c74:	d8813217 	ldw	r2,1224(sp)
 8003c78:	4cc00015 	stw	r19,0(r9)
 8003c7c:	48800115 	stw	r2,4(r9)
 8003c80:	4091883a 	add	r8,r8,r2
 8003c84:	003c6206 	br	8002e10 <__alt_data_end+0xf8002e10>
 8003c88:	00800b44 	movi	r2,45
 8003c8c:	d8812585 	stb	r2,1174(sp)
 8003c90:	003b2406 	br	8002924 <__alt_data_end+0xf8002924>
 8003c94:	4d000015 	stw	r20,0(r9)
 8003c98:	4c800115 	stw	r18,4(r9)
 8003c9c:	4491883a 	add	r8,r8,r18
 8003ca0:	18c00044 	addi	r3,r3,1
 8003ca4:	da011d15 	stw	r8,1140(sp)
 8003ca8:	d8c11c15 	stw	r3,1136(sp)
 8003cac:	008001c4 	movi	r2,7
 8003cb0:	10ffe816 	blt	r2,r3,8003c54 <__alt_data_end+0xf8003c54>
 8003cb4:	4a400204 	addi	r9,r9,8
 8003cb8:	003fee06 	br	8003c74 <__alt_data_end+0xf8003c74>
 8003cbc:	d8c12b15 	stw	r3,1196(sp)
 8003cc0:	00800184 	movi	r2,6
 8003cc4:	10c0062e 	bgeu	r2,r3,8003ce0 <___vfprintf_internal_r+0x1a74>
 8003cc8:	d8812b15 	stw	r2,1196(sp)
 8003ccc:	d8812815 	stw	r2,1184(sp)
 8003cd0:	ddc12d15 	stw	r23,1204(sp)
 8003cd4:	04c20074 	movhi	r19,2049
 8003cd8:	9cf9dd04 	addi	r19,r19,-6284
 8003cdc:	0039ca06 	br	8002408 <__alt_data_end+0xf8002408>
 8003ce0:	d8812b17 	ldw	r2,1196(sp)
 8003ce4:	d8812815 	stw	r2,1184(sp)
 8003ce8:	103ff90e 	bge	r2,zero,8003cd0 <__alt_data_end+0xf8003cd0>
 8003cec:	d8012815 	stw	zero,1184(sp)
 8003cf0:	003ff706 	br	8003cd0 <__alt_data_end+0xf8003cd0>
 8003cf4:	00800244 	movi	r2,9
 8003cf8:	15fdaa36 	bltu	r2,r23,80033a4 <__alt_data_end+0xf80033a4>
 8003cfc:	dd010e04 	addi	r20,sp,1080
 8003d00:	003dc606 	br	800341c <__alt_data_end+0xf800341c>
 8003d04:	d9412917 	ldw	r5,1188(sp)
 8003d08:	8809883a 	mov	r4,r17
 8003d0c:	d9811b04 	addi	r6,sp,1132
 8003d10:	80022380 	call	8002238 <__sprint_r>
 8003d14:	103a9b1e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003d18:	dc812417 	ldw	r18,1168(sp)
 8003d1c:	da400404 	addi	r9,sp,16
 8003d20:	003ecd06 	br	8003858 <__alt_data_end+0xf8003858>
 8003d24:	d9412917 	ldw	r5,1188(sp)
 8003d28:	8809883a 	mov	r4,r17
 8003d2c:	d9811b04 	addi	r6,sp,1132
 8003d30:	80022380 	call	8002238 <__sprint_r>
 8003d34:	103a931e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003d38:	dc812417 	ldw	r18,1168(sp)
 8003d3c:	da011d17 	ldw	r8,1140(sp)
 8003d40:	d8c11c17 	ldw	r3,1136(sp)
 8003d44:	da400404 	addi	r9,sp,16
 8003d48:	003eb706 	br	8003828 <__alt_data_end+0xf8003828>
 8003d4c:	d9412917 	ldw	r5,1188(sp)
 8003d50:	8809883a 	mov	r4,r17
 8003d54:	d9811b04 	addi	r6,sp,1132
 8003d58:	80022380 	call	8002238 <__sprint_r>
 8003d5c:	103a891e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003d60:	dc812417 	ldw	r18,1168(sp)
 8003d64:	da011d17 	ldw	r8,1140(sp)
 8003d68:	da400404 	addi	r9,sp,16
 8003d6c:	003dc206 	br	8003478 <__alt_data_end+0xf8003478>
 8003d70:	df012815 	stw	fp,1184(sp)
 8003d74:	d8812583 	ldbu	r2,1174(sp)
 8003d78:	df012b15 	stw	fp,1196(sp)
 8003d7c:	ddc12d15 	stw	r23,1204(sp)
 8003d80:	d8013115 	stw	zero,1220(sp)
 8003d84:	003ac606 	br	80028a0 <__alt_data_end+0xf80028a0>
 8003d88:	d8812404 	addi	r2,sp,1168
 8003d8c:	d8800115 	stw	r2,4(sp)
 8003d90:	d8812304 	addi	r2,sp,1164
 8003d94:	d8800215 	stw	r2,8(sp)
 8003d98:	d8812204 	addi	r2,sp,1160
 8003d9c:	df000015 	stw	fp,0(sp)
 8003da0:	d8800315 	stw	r2,12(sp)
 8003da4:	8809883a 	mov	r4,r17
 8003da8:	b00b883a 	mov	r5,r22
 8003dac:	a00d883a 	mov	r6,r20
 8003db0:	01c000c4 	movi	r7,3
 8003db4:	da413c15 	stw	r9,1264(sp)
 8003db8:	80044bc0 	call	80044bc <_dtoa_r>
 8003dbc:	da413c17 	ldw	r9,1264(sp)
 8003dc0:	1027883a 	mov	r19,r2
 8003dc4:	1707883a 	add	r3,r2,fp
 8003dc8:	e02f883a 	mov	r23,fp
 8003dcc:	99000007 	ldb	r4,0(r19)
 8003dd0:	00800c04 	movi	r2,48
 8003dd4:	20800326 	beq	r4,r2,8003de4 <___vfprintf_internal_r+0x1b78>
 8003dd8:	da812417 	ldw	r10,1168(sp)
 8003ddc:	1a87883a 	add	r3,r3,r10
 8003de0:	003f1406 	br	8003a34 <__alt_data_end+0xf8003a34>
 8003de4:	b009883a 	mov	r4,r22
 8003de8:	a00b883a 	mov	r5,r20
 8003dec:	000d883a 	mov	r6,zero
 8003df0:	000f883a 	mov	r7,zero
 8003df4:	d8c13b15 	stw	r3,1260(sp)
 8003df8:	da413c15 	stw	r9,1264(sp)
 8003dfc:	800abd00 	call	800abd0 <__nedf2>
 8003e00:	d8c13b17 	ldw	r3,1260(sp)
 8003e04:	da413c17 	ldw	r9,1264(sp)
 8003e08:	103ff326 	beq	r2,zero,8003dd8 <__alt_data_end+0xf8003dd8>
 8003e0c:	00800044 	movi	r2,1
 8003e10:	15d5c83a 	sub	r10,r2,r23
 8003e14:	da812415 	stw	r10,1168(sp)
 8003e18:	1a87883a 	add	r3,r3,r10
 8003e1c:	003f0506 	br	8003a34 <__alt_data_end+0xf8003a34>
 8003e20:	d9412917 	ldw	r5,1188(sp)
 8003e24:	8809883a 	mov	r4,r17
 8003e28:	d9811b04 	addi	r6,sp,1132
 8003e2c:	80022380 	call	8002238 <__sprint_r>
 8003e30:	103a541e 	bne	r2,zero,8002784 <__alt_data_end+0xf8002784>
 8003e34:	dc812417 	ldw	r18,1168(sp)
 8003e38:	da011d17 	ldw	r8,1140(sp)
 8003e3c:	d8c11c17 	ldw	r3,1136(sp)
 8003e40:	da400404 	addi	r9,sp,16
 8003e44:	003eb206 	br	8003910 <__alt_data_end+0xf8003910>
 8003e48:	b82b883a 	mov	r21,r23
 8003e4c:	0007883a 	mov	r3,zero
 8003e50:	00396306 	br	80023e0 <__alt_data_end+0xf80023e0>
 8003e54:	04c20074 	movhi	r19,2049
 8003e58:	9cf9d204 	addi	r19,r19,-6328
 8003e5c:	003f4e06 	br	8003b98 <__alt_data_end+0xf8003b98>
 8003e60:	d8812583 	ldbu	r2,1174(sp)
 8003e64:	dc012a17 	ldw	r16,1192(sp)
 8003e68:	d8013115 	stw	zero,1220(sp)
 8003e6c:	003a8c06 	br	80028a0 <__alt_data_end+0xf80028a0>
 8003e70:	d8812417 	ldw	r2,1168(sp)
 8003e74:	d8812b15 	stw	r2,1196(sp)
 8003e78:	1029883a 	mov	r20,r2
 8003e7c:	00bfff44 	movi	r2,-3
 8003e80:	a0800116 	blt	r20,r2,8003e88 <___vfprintf_internal_r+0x1c1c>
 8003e84:	e5001d0e 	bge	fp,r20,8003efc <___vfprintf_internal_r+0x1c90>
 8003e88:	94bfff84 	addi	r18,r18,-2
 8003e8c:	a53fffc4 	addi	r20,r20,-1
 8003e90:	dd012415 	stw	r20,1168(sp)
 8003e94:	dc811fc5 	stb	r18,1151(sp)
 8003e98:	a0007216 	blt	r20,zero,8004064 <___vfprintf_internal_r+0x1df8>
 8003e9c:	00800ac4 	movi	r2,43
 8003ea0:	d8812005 	stb	r2,1152(sp)
 8003ea4:	00800244 	movi	r2,9
 8003ea8:	15003516 	blt	r2,r20,8003f80 <___vfprintf_internal_r+0x1d14>
 8003eac:	00800c04 	movi	r2,48
 8003eb0:	a5000c04 	addi	r20,r20,48
 8003eb4:	d8812045 	stb	r2,1153(sp)
 8003eb8:	dd012085 	stb	r20,1154(sp)
 8003ebc:	d8c120c4 	addi	r3,sp,1155
 8003ec0:	d8811fc4 	addi	r2,sp,1151
 8003ec4:	1885c83a 	sub	r2,r3,r2
 8003ec8:	d8c13217 	ldw	r3,1224(sp)
 8003ecc:	d8813515 	stw	r2,1236(sp)
 8003ed0:	1885883a 	add	r2,r3,r2
 8003ed4:	d8812b15 	stw	r2,1196(sp)
 8003ed8:	00800044 	movi	r2,1
 8003edc:	10c0580e 	bge	r2,r3,8004040 <___vfprintf_internal_r+0x1dd4>
 8003ee0:	d8812b17 	ldw	r2,1196(sp)
 8003ee4:	10800044 	addi	r2,r2,1
 8003ee8:	d8812b15 	stw	r2,1196(sp)
 8003eec:	d8812815 	stw	r2,1184(sp)
 8003ef0:	103ef50e 	bge	r2,zero,8003ac8 <__alt_data_end+0xf8003ac8>
 8003ef4:	d8012815 	stw	zero,1184(sp)
 8003ef8:	003ef306 	br	8003ac8 <__alt_data_end+0xf8003ac8>
 8003efc:	d8812b17 	ldw	r2,1196(sp)
 8003f00:	d8c13217 	ldw	r3,1224(sp)
 8003f04:	10c01416 	blt	r2,r3,8003f58 <___vfprintf_internal_r+0x1cec>
 8003f08:	8400004c 	andi	r16,r16,1
 8003f0c:	80000326 	beq	r16,zero,8003f1c <___vfprintf_internal_r+0x1cb0>
 8003f10:	d8812b17 	ldw	r2,1196(sp)
 8003f14:	10800044 	addi	r2,r2,1
 8003f18:	d8812b15 	stw	r2,1196(sp)
 8003f1c:	d8812815 	stw	r2,1184(sp)
 8003f20:	10001416 	blt	r2,zero,8003f74 <___vfprintf_internal_r+0x1d08>
 8003f24:	048019c4 	movi	r18,103
 8003f28:	003ee706 	br	8003ac8 <__alt_data_end+0xf8003ac8>
 8003f2c:	d8012815 	stw	zero,1184(sp)
 8003f30:	003b1a06 	br	8002b9c <__alt_data_end+0xf8002b9c>
 8003f34:	e03e9c1e 	bne	fp,zero,80039a8 <__alt_data_end+0xf80039a8>
 8003f38:	07000044 	movi	fp,1
 8003f3c:	003e9a06 	br	80039a8 <__alt_data_end+0xf80039a8>
 8003f40:	07000184 	movi	fp,6
 8003f44:	003e9806 	br	80039a8 <__alt_data_end+0xf80039a8>
 8003f48:	00c00b44 	movi	r3,45
 8003f4c:	a520003c 	xorhi	r20,r20,32768
 8003f50:	d8c12f05 	stb	r3,1212(sp)
 8003f54:	003e9806 	br	80039b8 <__alt_data_end+0xf80039b8>
 8003f58:	05003f0e 	bge	zero,r20,8004058 <___vfprintf_internal_r+0x1dec>
 8003f5c:	05000044 	movi	r20,1
 8003f60:	d8c13217 	ldw	r3,1224(sp)
 8003f64:	a0e9883a 	add	r20,r20,r3
 8003f68:	dd012b15 	stw	r20,1196(sp)
 8003f6c:	dd012815 	stw	r20,1184(sp)
 8003f70:	a03fec0e 	bge	r20,zero,8003f24 <__alt_data_end+0xf8003f24>
 8003f74:	d8012815 	stw	zero,1184(sp)
 8003f78:	048019c4 	movi	r18,103
 8003f7c:	003ed206 	br	8003ac8 <__alt_data_end+0xf8003ac8>
 8003f80:	d8c11f84 	addi	r3,sp,1150
 8003f84:	102f883a 	mov	r23,r2
 8003f88:	4839883a 	mov	fp,r9
 8003f8c:	a009883a 	mov	r4,r20
 8003f90:	01400284 	movi	r5,10
 8003f94:	182d883a 	mov	r22,r3
 8003f98:	800b0c80 	call	800b0c8 <__modsi3>
 8003f9c:	10800c04 	addi	r2,r2,48
 8003fa0:	a009883a 	mov	r4,r20
 8003fa4:	b0800005 	stb	r2,0(r22)
 8003fa8:	01400284 	movi	r5,10
 8003fac:	800b0780 	call	800b078 <__divsi3>
 8003fb0:	1029883a 	mov	r20,r2
 8003fb4:	b0ffffc4 	addi	r3,r22,-1
 8003fb8:	b8bff416 	blt	r23,r2,8003f8c <__alt_data_end+0xf8003f8c>
 8003fbc:	11400c04 	addi	r5,r2,48
 8003fc0:	b17fffc5 	stb	r5,-1(r22)
 8003fc4:	d8811fc4 	addi	r2,sp,1151
 8003fc8:	e013883a 	mov	r9,fp
 8003fcc:	18803e2e 	bgeu	r3,r2,80040c8 <___vfprintf_internal_r+0x1e5c>
 8003fd0:	b007883a 	mov	r3,r22
 8003fd4:	d9012044 	addi	r4,sp,1153
 8003fd8:	00000206 	br	8003fe4 <___vfprintf_internal_r+0x1d78>
 8003fdc:	19400003 	ldbu	r5,0(r3)
 8003fe0:	18c00044 	addi	r3,r3,1
 8003fe4:	21400005 	stb	r5,0(r4)
 8003fe8:	21000044 	addi	r4,r4,1
 8003fec:	10fffb1e 	bne	r2,r3,8003fdc <__alt_data_end+0xf8003fdc>
 8003ff0:	d8c12004 	addi	r3,sp,1152
 8003ff4:	1d87c83a 	sub	r3,r3,r22
 8003ff8:	d9012044 	addi	r4,sp,1153
 8003ffc:	20c7883a 	add	r3,r4,r3
 8004000:	003fb006 	br	8003ec4 <__alt_data_end+0xf8003ec4>
 8004004:	e5c00044 	addi	r23,fp,1
 8004008:	003e7406 	br	80039dc <__alt_data_end+0xf80039dc>
 800400c:	d8c12217 	ldw	r3,1160(sp)
 8004010:	003e9906 	br	8003a78 <__alt_data_end+0xf8003a78>
 8004014:	d9012d17 	ldw	r4,1204(sp)
 8004018:	ac800043 	ldbu	r18,1(r21)
 800401c:	b82b883a 	mov	r21,r23
 8004020:	20c00017 	ldw	r3,0(r4)
 8004024:	20800104 	addi	r2,r4,4
 8004028:	d8812d15 	stw	r2,1204(sp)
 800402c:	18002116 	blt	r3,zero,80040b4 <___vfprintf_internal_r+0x1e48>
 8004030:	94803fcc 	andi	r18,r18,255
 8004034:	9480201c 	xori	r18,r18,128
 8004038:	94bfe004 	addi	r18,r18,-128
 800403c:	0038e706 	br	80023dc <__alt_data_end+0xf80023dc>
 8004040:	80a0703a 	and	r16,r16,r2
 8004044:	803fa61e 	bne	r16,zero,8003ee0 <__alt_data_end+0xf8003ee0>
 8004048:	d8812b17 	ldw	r2,1196(sp)
 800404c:	d8812815 	stw	r2,1184(sp)
 8004050:	103e9d0e 	bge	r2,zero,8003ac8 <__alt_data_end+0xf8003ac8>
 8004054:	003fa706 	br	8003ef4 <__alt_data_end+0xf8003ef4>
 8004058:	00800084 	movi	r2,2
 800405c:	1529c83a 	sub	r20,r2,r20
 8004060:	003fbf06 	br	8003f60 <__alt_data_end+0xf8003f60>
 8004064:	00800b44 	movi	r2,45
 8004068:	0529c83a 	sub	r20,zero,r20
 800406c:	d8812005 	stb	r2,1152(sp)
 8004070:	003f8c06 	br	8003ea4 <__alt_data_end+0xf8003ea4>
 8004074:	008011c4 	movi	r2,71
 8004078:	90be6926 	beq	r18,r2,8003a20 <__alt_data_end+0xf8003a20>
 800407c:	003e6a06 	br	8003a28 <__alt_data_end+0xf8003a28>
 8004080:	00bfffc4 	movi	r2,-1
 8004084:	d8812c15 	stw	r2,1200(sp)
 8004088:	0039ad06 	br	8002740 <__alt_data_end+0xf8002740>
 800408c:	1007883a 	mov	r3,r2
 8004090:	003e7906 	br	8003a78 <__alt_data_end+0xf8003a78>
 8004094:	e000021e 	bne	fp,zero,80040a0 <___vfprintf_internal_r+0x1e34>
 8004098:	8400004c 	andi	r16,r16,1
 800409c:	80000e26 	beq	r16,zero,80040d8 <___vfprintf_internal_r+0x1e6c>
 80040a0:	e7000084 	addi	fp,fp,2
 80040a4:	df012b15 	stw	fp,1196(sp)
 80040a8:	df012815 	stw	fp,1184(sp)
 80040ac:	e03e860e 	bge	fp,zero,8003ac8 <__alt_data_end+0xf8003ac8>
 80040b0:	003f9006 	br	8003ef4 <__alt_data_end+0xf8003ef4>
 80040b4:	94803fcc 	andi	r18,r18,255
 80040b8:	9480201c 	xori	r18,r18,128
 80040bc:	00ffffc4 	movi	r3,-1
 80040c0:	94bfe004 	addi	r18,r18,-128
 80040c4:	0038c506 	br	80023dc <__alt_data_end+0xf80023dc>
 80040c8:	d8c12044 	addi	r3,sp,1153
 80040cc:	003f7d06 	br	8003ec4 <__alt_data_end+0xf8003ec4>
 80040d0:	dd012417 	ldw	r20,1168(sp)
 80040d4:	003f6d06 	br	8003e8c <__alt_data_end+0xf8003e8c>
 80040d8:	00c00044 	movi	r3,1
 80040dc:	d8c12815 	stw	r3,1184(sp)
 80040e0:	d8c12b15 	stw	r3,1196(sp)
 80040e4:	003e7806 	br	8003ac8 <__alt_data_end+0xf8003ac8>

080040e8 <__vfprintf_internal>:
 80040e8:	00820074 	movhi	r2,2049
 80040ec:	10811e04 	addi	r2,r2,1144
 80040f0:	2007883a 	mov	r3,r4
 80040f4:	11000017 	ldw	r4,0(r2)
 80040f8:	2805883a 	mov	r2,r5
 80040fc:	300f883a 	mov	r7,r6
 8004100:	180b883a 	mov	r5,r3
 8004104:	100d883a 	mov	r6,r2
 8004108:	800226c1 	jmpi	800226c <___vfprintf_internal_r>

0800410c <__swsetup_r>:
 800410c:	00820074 	movhi	r2,2049
 8004110:	10811e04 	addi	r2,r2,1144
 8004114:	10800017 	ldw	r2,0(r2)
 8004118:	defffd04 	addi	sp,sp,-12
 800411c:	dc400115 	stw	r17,4(sp)
 8004120:	dc000015 	stw	r16,0(sp)
 8004124:	dfc00215 	stw	ra,8(sp)
 8004128:	2023883a 	mov	r17,r4
 800412c:	2821883a 	mov	r16,r5
 8004130:	10000226 	beq	r2,zero,800413c <__swsetup_r+0x30>
 8004134:	10c00e17 	ldw	r3,56(r2)
 8004138:	18003d26 	beq	r3,zero,8004230 <__swsetup_r+0x124>
 800413c:	8080030b 	ldhu	r2,12(r16)
 8004140:	10c0020c 	andi	r3,r2,8
 8004144:	18ffffcc 	andi	r3,r3,65535
 8004148:	18e0001c 	xori	r3,r3,32768
 800414c:	18e00004 	addi	r3,r3,-32768
 8004150:	18001226 	beq	r3,zero,800419c <__swsetup_r+0x90>
 8004154:	80c00417 	ldw	r3,16(r16)
 8004158:	18001f26 	beq	r3,zero,80041d8 <__swsetup_r+0xcc>
 800415c:	1100004c 	andi	r4,r2,1
 8004160:	2000261e 	bne	r4,zero,80041fc <__swsetup_r+0xf0>
 8004164:	1080008c 	andi	r2,r2,2
 8004168:	10bfffcc 	andi	r2,r2,65535
 800416c:	10a0001c 	xori	r2,r2,32768
 8004170:	10a00004 	addi	r2,r2,-32768
 8004174:	1000311e 	bne	r2,zero,800423c <__swsetup_r+0x130>
 8004178:	80800517 	ldw	r2,20(r16)
 800417c:	80800215 	stw	r2,8(r16)
 8004180:	18002326 	beq	r3,zero,8004210 <__swsetup_r+0x104>
 8004184:	0005883a 	mov	r2,zero
 8004188:	dfc00217 	ldw	ra,8(sp)
 800418c:	dc400117 	ldw	r17,4(sp)
 8004190:	dc000017 	ldw	r16,0(sp)
 8004194:	dec00304 	addi	sp,sp,12
 8004198:	f800283a 	ret
 800419c:	10c0040c 	andi	r3,r2,16
 80041a0:	18ffffcc 	andi	r3,r3,65535
 80041a4:	18e0001c 	xori	r3,r3,32768
 80041a8:	18e00004 	addi	r3,r3,-32768
 80041ac:	18001e26 	beq	r3,zero,8004228 <__swsetup_r+0x11c>
 80041b0:	10c0010c 	andi	r3,r2,4
 80041b4:	18ffffcc 	andi	r3,r3,65535
 80041b8:	18e0001c 	xori	r3,r3,32768
 80041bc:	18e00004 	addi	r3,r3,-32768
 80041c0:	1800211e 	bne	r3,zero,8004248 <__swsetup_r+0x13c>
 80041c4:	80c00417 	ldw	r3,16(r16)
 80041c8:	11400214 	ori	r5,r2,8
 80041cc:	8140030d 	sth	r5,12(r16)
 80041d0:	2805883a 	mov	r2,r5
 80041d4:	183fe11e 	bne	r3,zero,800415c <__alt_data_end+0xf800415c>
 80041d8:	1140a00c 	andi	r5,r2,640
 80041dc:	01008004 	movi	r4,512
 80041e0:	293fde26 	beq	r5,r4,800415c <__alt_data_end+0xf800415c>
 80041e4:	8809883a 	mov	r4,r17
 80041e8:	800b883a 	mov	r5,r16
 80041ec:	8006b080 	call	8006b08 <__smakebuf_r>
 80041f0:	8080030b 	ldhu	r2,12(r16)
 80041f4:	80c00417 	ldw	r3,16(r16)
 80041f8:	003fd806 	br	800415c <__alt_data_end+0xf800415c>
 80041fc:	80800517 	ldw	r2,20(r16)
 8004200:	80000215 	stw	zero,8(r16)
 8004204:	0085c83a 	sub	r2,zero,r2
 8004208:	80800615 	stw	r2,24(r16)
 800420c:	183fdd1e 	bne	r3,zero,8004184 <__alt_data_end+0xf8004184>
 8004210:	8080030b 	ldhu	r2,12(r16)
 8004214:	1080200c 	andi	r2,r2,128
 8004218:	10bfffcc 	andi	r2,r2,65535
 800421c:	10a0001c 	xori	r2,r2,32768
 8004220:	10a00004 	addi	r2,r2,-32768
 8004224:	103fd826 	beq	r2,zero,8004188 <__alt_data_end+0xf8004188>
 8004228:	00bfffc4 	movi	r2,-1
 800422c:	003fd606 	br	8004188 <__alt_data_end+0xf8004188>
 8004230:	1009883a 	mov	r4,r2
 8004234:	8005d940 	call	8005d94 <__sinit>
 8004238:	003fc006 	br	800413c <__alt_data_end+0xf800413c>
 800423c:	0005883a 	mov	r2,zero
 8004240:	80800215 	stw	r2,8(r16)
 8004244:	003fce06 	br	8004180 <__alt_data_end+0xf8004180>
 8004248:	81400c17 	ldw	r5,48(r16)
 800424c:	28000626 	beq	r5,zero,8004268 <__swsetup_r+0x15c>
 8004250:	80c01004 	addi	r3,r16,64
 8004254:	28c00326 	beq	r5,r3,8004264 <__swsetup_r+0x158>
 8004258:	8809883a 	mov	r4,r17
 800425c:	80061180 	call	8006118 <_free_r>
 8004260:	8080030b 	ldhu	r2,12(r16)
 8004264:	80000c15 	stw	zero,48(r16)
 8004268:	80c00417 	ldw	r3,16(r16)
 800426c:	013ff6c4 	movi	r4,-37
 8004270:	2084703a 	and	r2,r4,r2
 8004274:	80000115 	stw	zero,4(r16)
 8004278:	80c00015 	stw	r3,0(r16)
 800427c:	003fd206 	br	80041c8 <__alt_data_end+0xf80041c8>

08004280 <quorem>:
 8004280:	defff204 	addi	sp,sp,-56
 8004284:	dd000815 	stw	r20,32(sp)
 8004288:	20800417 	ldw	r2,16(r4)
 800428c:	2d000417 	ldw	r20,16(r5)
 8004290:	dcc00715 	stw	r19,28(sp)
 8004294:	dfc00d15 	stw	ra,52(sp)
 8004298:	df000c15 	stw	fp,48(sp)
 800429c:	ddc00b15 	stw	r23,44(sp)
 80042a0:	dd800a15 	stw	r22,40(sp)
 80042a4:	dd400915 	stw	r21,36(sp)
 80042a8:	dc800615 	stw	r18,24(sp)
 80042ac:	dc400515 	stw	r17,20(sp)
 80042b0:	dc000415 	stw	r16,16(sp)
 80042b4:	d9400015 	stw	r5,0(sp)
 80042b8:	2027883a 	mov	r19,r4
 80042bc:	15007d16 	blt	r2,r20,80044b4 <quorem+0x234>
 80042c0:	a0800104 	addi	r2,r20,4
 80042c4:	1085883a 	add	r2,r2,r2
 80042c8:	1085883a 	add	r2,r2,r2
 80042cc:	28ad883a 	add	r22,r5,r2
 80042d0:	2085883a 	add	r2,r4,r2
 80042d4:	10800017 	ldw	r2,0(r2)
 80042d8:	b1400017 	ldw	r5,0(r22)
 80042dc:	a53fffc4 	addi	r20,r20,-1
 80042e0:	1009883a 	mov	r4,r2
 80042e4:	29400044 	addi	r5,r5,1
 80042e8:	d8800115 	stw	r2,4(sp)
 80042ec:	800b1240 	call	800b124 <__udivsi3>
 80042f0:	1025883a 	mov	r18,r2
 80042f4:	d8800017 	ldw	r2,0(sp)
 80042f8:	9f000504 	addi	fp,r19,20
 80042fc:	14000504 	addi	r16,r2,20
 8004300:	90003626 	beq	r18,zero,80043dc <quorem+0x15c>
 8004304:	802b883a 	mov	r21,r16
 8004308:	e023883a 	mov	r17,fp
 800430c:	0007883a 	mov	r3,zero
 8004310:	002f883a 	mov	r23,zero
 8004314:	a9800017 	ldw	r6,0(r21)
 8004318:	900b883a 	mov	r5,r18
 800431c:	d8c00315 	stw	r3,12(sp)
 8004320:	313fffcc 	andi	r4,r6,65535
 8004324:	d9800215 	stw	r6,8(sp)
 8004328:	800b1340 	call	800b134 <__mulsi3>
 800432c:	d9800217 	ldw	r6,8(sp)
 8004330:	d8c00317 	ldw	r3,12(sp)
 8004334:	900b883a 	mov	r5,r18
 8004338:	3008d43a 	srli	r4,r6,16
 800433c:	1887883a 	add	r3,r3,r2
 8004340:	d8c00315 	stw	r3,12(sp)
 8004344:	800b1340 	call	800b134 <__mulsi3>
 8004348:	89400017 	ldw	r5,0(r17)
 800434c:	d8c00317 	ldw	r3,12(sp)
 8004350:	ad400104 	addi	r21,r21,4
 8004354:	293fffcc 	andi	r4,r5,65535
 8004358:	1810d43a 	srli	r8,r3,16
 800435c:	25c9883a 	add	r4,r4,r23
 8004360:	18ffffcc 	andi	r3,r3,65535
 8004364:	20c9c83a 	sub	r4,r4,r3
 8004368:	280cd43a 	srli	r6,r5,16
 800436c:	4085883a 	add	r2,r8,r2
 8004370:	2007d43a 	srai	r3,r4,16
 8004374:	117fffcc 	andi	r5,r2,65535
 8004378:	314bc83a 	sub	r5,r6,r5
 800437c:	28cb883a 	add	r5,r5,r3
 8004380:	8940008d 	sth	r5,2(r17)
 8004384:	8900000d 	sth	r4,0(r17)
 8004388:	1006d43a 	srli	r3,r2,16
 800438c:	282fd43a 	srai	r23,r5,16
 8004390:	8c400104 	addi	r17,r17,4
 8004394:	b57fdf2e 	bgeu	r22,r21,8004314 <__alt_data_end+0xf8004314>
 8004398:	d8c00117 	ldw	r3,4(sp)
 800439c:	18000f1e 	bne	r3,zero,80043dc <quorem+0x15c>
 80043a0:	a0800144 	addi	r2,r20,5
 80043a4:	1085883a 	add	r2,r2,r2
 80043a8:	1085883a 	add	r2,r2,r2
 80043ac:	9887883a 	add	r3,r19,r2
 80043b0:	18bfff04 	addi	r2,r3,-4
 80043b4:	e080082e 	bgeu	fp,r2,80043d8 <quorem+0x158>
 80043b8:	18ffff17 	ldw	r3,-4(r3)
 80043bc:	18000326 	beq	r3,zero,80043cc <quorem+0x14c>
 80043c0:	00000506 	br	80043d8 <quorem+0x158>
 80043c4:	10c00017 	ldw	r3,0(r2)
 80043c8:	1800031e 	bne	r3,zero,80043d8 <quorem+0x158>
 80043cc:	10bfff04 	addi	r2,r2,-4
 80043d0:	a53fffc4 	addi	r20,r20,-1
 80043d4:	e0bffb36 	bltu	fp,r2,80043c4 <__alt_data_end+0xf80043c4>
 80043d8:	9d000415 	stw	r20,16(r19)
 80043dc:	d9400017 	ldw	r5,0(sp)
 80043e0:	9809883a 	mov	r4,r19
 80043e4:	80082200 	call	8008220 <__mcmp>
 80043e8:	10002516 	blt	r2,zero,8004480 <quorem+0x200>
 80043ec:	94800044 	addi	r18,r18,1
 80043f0:	e007883a 	mov	r3,fp
 80043f4:	000d883a 	mov	r6,zero
 80043f8:	18800017 	ldw	r2,0(r3)
 80043fc:	82000017 	ldw	r8,0(r16)
 8004400:	84000104 	addi	r16,r16,4
 8004404:	11ffffcc 	andi	r7,r2,65535
 8004408:	413fffcc 	andi	r4,r8,65535
 800440c:	398d883a 	add	r6,r7,r6
 8004410:	310fc83a 	sub	r7,r6,r4
 8004414:	4010d43a 	srli	r8,r8,16
 8004418:	100cd43a 	srli	r6,r2,16
 800441c:	3809d43a 	srai	r4,r7,16
 8004420:	19c0000d 	sth	r7,0(r3)
 8004424:	320dc83a 	sub	r6,r6,r8
 8004428:	310d883a 	add	r6,r6,r4
 800442c:	1980008d 	sth	r6,2(r3)
 8004430:	300dd43a 	srai	r6,r6,16
 8004434:	18c00104 	addi	r3,r3,4
 8004438:	b43fef2e 	bgeu	r22,r16,80043f8 <__alt_data_end+0xf80043f8>
 800443c:	a0800144 	addi	r2,r20,5
 8004440:	1085883a 	add	r2,r2,r2
 8004444:	1085883a 	add	r2,r2,r2
 8004448:	9885883a 	add	r2,r19,r2
 800444c:	10c00017 	ldw	r3,0(r2)
 8004450:	18000b1e 	bne	r3,zero,8004480 <quorem+0x200>
 8004454:	10ffff04 	addi	r3,r2,-4
 8004458:	e0c0082e 	bgeu	fp,r3,800447c <quorem+0x1fc>
 800445c:	10bfff17 	ldw	r2,-4(r2)
 8004460:	10000326 	beq	r2,zero,8004470 <quorem+0x1f0>
 8004464:	00000506 	br	800447c <quorem+0x1fc>
 8004468:	18800017 	ldw	r2,0(r3)
 800446c:	1000031e 	bne	r2,zero,800447c <quorem+0x1fc>
 8004470:	18ffff04 	addi	r3,r3,-4
 8004474:	a53fffc4 	addi	r20,r20,-1
 8004478:	e0fffb36 	bltu	fp,r3,8004468 <__alt_data_end+0xf8004468>
 800447c:	9d000415 	stw	r20,16(r19)
 8004480:	9005883a 	mov	r2,r18
 8004484:	dfc00d17 	ldw	ra,52(sp)
 8004488:	df000c17 	ldw	fp,48(sp)
 800448c:	ddc00b17 	ldw	r23,44(sp)
 8004490:	dd800a17 	ldw	r22,40(sp)
 8004494:	dd400917 	ldw	r21,36(sp)
 8004498:	dd000817 	ldw	r20,32(sp)
 800449c:	dcc00717 	ldw	r19,28(sp)
 80044a0:	dc800617 	ldw	r18,24(sp)
 80044a4:	dc400517 	ldw	r17,20(sp)
 80044a8:	dc000417 	ldw	r16,16(sp)
 80044ac:	dec00e04 	addi	sp,sp,56
 80044b0:	f800283a 	ret
 80044b4:	0005883a 	mov	r2,zero
 80044b8:	003ff206 	br	8004484 <__alt_data_end+0xf8004484>

080044bc <_dtoa_r>:
 80044bc:	20801017 	ldw	r2,64(r4)
 80044c0:	deffdf04 	addi	sp,sp,-132
 80044c4:	dcc01a15 	stw	r19,104(sp)
 80044c8:	dc801915 	stw	r18,100(sp)
 80044cc:	dc401815 	stw	r17,96(sp)
 80044d0:	dc001715 	stw	r16,92(sp)
 80044d4:	dfc02015 	stw	ra,128(sp)
 80044d8:	df001f15 	stw	fp,124(sp)
 80044dc:	ddc01e15 	stw	r23,120(sp)
 80044e0:	dd801d15 	stw	r22,116(sp)
 80044e4:	dd401c15 	stw	r21,112(sp)
 80044e8:	dd001b15 	stw	r20,108(sp)
 80044ec:	d9400315 	stw	r5,12(sp)
 80044f0:	d9c00415 	stw	r7,16(sp)
 80044f4:	2021883a 	mov	r16,r4
 80044f8:	3025883a 	mov	r18,r6
 80044fc:	dcc02317 	ldw	r19,140(sp)
 8004500:	3023883a 	mov	r17,r6
 8004504:	10000826 	beq	r2,zero,8004528 <_dtoa_r+0x6c>
 8004508:	20c01117 	ldw	r3,68(r4)
 800450c:	01800044 	movi	r6,1
 8004510:	100b883a 	mov	r5,r2
 8004514:	30cc983a 	sll	r6,r6,r3
 8004518:	10c00115 	stw	r3,4(r2)
 800451c:	11800215 	stw	r6,8(r2)
 8004520:	800797c0 	call	800797c <_Bfree>
 8004524:	80001015 	stw	zero,64(r16)
 8004528:	90002f16 	blt	r18,zero,80045e8 <_dtoa_r+0x12c>
 800452c:	98000015 	stw	zero,0(r19)
 8004530:	90dffc2c 	andhi	r3,r18,32752
 8004534:	009ffc34 	movhi	r2,32752
 8004538:	18801c26 	beq	r3,r2,80045ac <_dtoa_r+0xf0>
 800453c:	d9000317 	ldw	r4,12(sp)
 8004540:	880b883a 	mov	r5,r17
 8004544:	000d883a 	mov	r6,zero
 8004548:	000f883a 	mov	r7,zero
 800454c:	800abd00 	call	800abd0 <__nedf2>
 8004550:	10002c1e 	bne	r2,zero,8004604 <_dtoa_r+0x148>
 8004554:	d9002217 	ldw	r4,136(sp)
 8004558:	d9c02417 	ldw	r7,144(sp)
 800455c:	00800044 	movi	r2,1
 8004560:	20800015 	stw	r2,0(r4)
 8004564:	38019426 	beq	r7,zero,8004bb8 <_dtoa_r+0x6fc>
 8004568:	00820074 	movhi	r2,2049
 800456c:	10b9df44 	addi	r2,r2,-6275
 8004570:	38800015 	stw	r2,0(r7)
 8004574:	15ffffc4 	addi	r23,r2,-1
 8004578:	b805883a 	mov	r2,r23
 800457c:	dfc02017 	ldw	ra,128(sp)
 8004580:	df001f17 	ldw	fp,124(sp)
 8004584:	ddc01e17 	ldw	r23,120(sp)
 8004588:	dd801d17 	ldw	r22,116(sp)
 800458c:	dd401c17 	ldw	r21,112(sp)
 8004590:	dd001b17 	ldw	r20,108(sp)
 8004594:	dcc01a17 	ldw	r19,104(sp)
 8004598:	dc801917 	ldw	r18,100(sp)
 800459c:	dc401817 	ldw	r17,96(sp)
 80045a0:	dc001717 	ldw	r16,92(sp)
 80045a4:	dec02104 	addi	sp,sp,132
 80045a8:	f800283a 	ret
 80045ac:	d8c02217 	ldw	r3,136(sp)
 80045b0:	d9000317 	ldw	r4,12(sp)
 80045b4:	0089c3c4 	movi	r2,9999
 80045b8:	18800015 	stw	r2,0(r3)
 80045bc:	20016c26 	beq	r4,zero,8004b70 <_dtoa_r+0x6b4>
 80045c0:	05c20074 	movhi	r23,2049
 80045c4:	bdf9eb04 	addi	r23,r23,-6228
 80045c8:	d9c02417 	ldw	r7,144(sp)
 80045cc:	383fea26 	beq	r7,zero,8004578 <__alt_data_end+0xf8004578>
 80045d0:	b88000c7 	ldb	r2,3(r23)
 80045d4:	10016d1e 	bne	r2,zero,8004b8c <_dtoa_r+0x6d0>
 80045d8:	b88000c4 	addi	r2,r23,3
 80045dc:	d8c02417 	ldw	r3,144(sp)
 80045e0:	18800015 	stw	r2,0(r3)
 80045e4:	003fe406 	br	8004578 <__alt_data_end+0xf8004578>
 80045e8:	04600034 	movhi	r17,32768
 80045ec:	8c7fffc4 	addi	r17,r17,-1
 80045f0:	9462703a 	and	r17,r18,r17
 80045f4:	00800044 	movi	r2,1
 80045f8:	98800015 	stw	r2,0(r19)
 80045fc:	8825883a 	mov	r18,r17
 8004600:	003fcb06 	br	8004530 <__alt_data_end+0xf8004530>
 8004604:	d9400317 	ldw	r5,12(sp)
 8004608:	9028d53a 	srli	r20,r18,20
 800460c:	d8800204 	addi	r2,sp,8
 8004610:	d8800015 	stw	r2,0(sp)
 8004614:	8009883a 	mov	r4,r16
 8004618:	880d883a 	mov	r6,r17
 800461c:	d9c00104 	addi	r7,sp,4
 8004620:	80085c80 	call	80085c8 <__d2b>
 8004624:	a501ffcc 	andi	r20,r20,2047
 8004628:	1039883a 	mov	fp,r2
 800462c:	a001591e 	bne	r20,zero,8004b94 <_dtoa_r+0x6d8>
 8004630:	dd400217 	ldw	r21,8(sp)
 8004634:	dd000117 	ldw	r20,4(sp)
 8004638:	00befbc4 	movi	r2,-1041
 800463c:	ad29883a 	add	r20,r21,r20
 8004640:	a082d216 	blt	r20,r2,800518c <_dtoa_r+0xcd0>
 8004644:	d8c00317 	ldw	r3,12(sp)
 8004648:	013f0384 	movi	r4,-1010
 800464c:	2509c83a 	sub	r4,r4,r20
 8004650:	a0810484 	addi	r2,r20,1042
 8004654:	9124983a 	sll	r18,r18,r4
 8004658:	1884d83a 	srl	r2,r3,r2
 800465c:	9088b03a 	or	r4,r18,r2
 8004660:	800aee80 	call	800aee8 <__floatunsidf>
 8004664:	1009883a 	mov	r4,r2
 8004668:	017f8434 	movhi	r5,65040
 800466c:	00800044 	movi	r2,1
 8004670:	194b883a 	add	r5,r3,r5
 8004674:	a53fffc4 	addi	r20,r20,-1
 8004678:	d8800f15 	stw	r2,60(sp)
 800467c:	000d883a 	mov	r6,zero
 8004680:	01cffe34 	movhi	r7,16376
 8004684:	800a67c0 	call	800a67c <__subdf3>
 8004688:	1009883a 	mov	r4,r2
 800468c:	180b883a 	mov	r5,r3
 8004690:	0198dbf4 	movhi	r6,25455
 8004694:	3190d844 	addi	r6,r6,17249
 8004698:	01cff4f4 	movhi	r7,16339
 800469c:	39e1e9c4 	addi	r7,r7,-30809
 80046a0:	800a6dc0 	call	800a6dc <__muldf3>
 80046a4:	180b883a 	mov	r5,r3
 80046a8:	01a2d874 	movhi	r6,35681
 80046ac:	31b22cc4 	addi	r6,r6,-14157
 80046b0:	01cff1f4 	movhi	r7,16327
 80046b4:	39e28a04 	addi	r7,r7,-30168
 80046b8:	1009883a 	mov	r4,r2
 80046bc:	800a6280 	call	800a628 <__adddf3>
 80046c0:	a009883a 	mov	r4,r20
 80046c4:	1027883a 	mov	r19,r2
 80046c8:	1825883a 	mov	r18,r3
 80046cc:	800ad500 	call	800ad50 <__floatsidf>
 80046d0:	1009883a 	mov	r4,r2
 80046d4:	180b883a 	mov	r5,r3
 80046d8:	019427f4 	movhi	r6,20639
 80046dc:	319e7ec4 	addi	r6,r6,31227
 80046e0:	01cff4f4 	movhi	r7,16339
 80046e4:	39d104c4 	addi	r7,r7,17427
 80046e8:	800a6dc0 	call	800a6dc <__muldf3>
 80046ec:	9809883a 	mov	r4,r19
 80046f0:	900b883a 	mov	r5,r18
 80046f4:	100d883a 	mov	r6,r2
 80046f8:	180f883a 	mov	r7,r3
 80046fc:	800a6280 	call	800a628 <__adddf3>
 8004700:	1009883a 	mov	r4,r2
 8004704:	180b883a 	mov	r5,r3
 8004708:	1027883a 	mov	r19,r2
 800470c:	1825883a 	mov	r18,r3
 8004710:	800ae240 	call	800ae24 <__fixdfsi>
 8004714:	9809883a 	mov	r4,r19
 8004718:	900b883a 	mov	r5,r18
 800471c:	000d883a 	mov	r6,zero
 8004720:	000f883a 	mov	r7,zero
 8004724:	d8800615 	stw	r2,24(sp)
 8004728:	800acf40 	call	800acf4 <__ltdf2>
 800472c:	10027e16 	blt	r2,zero,8005128 <_dtoa_r+0xc6c>
 8004730:	d8c00617 	ldw	r3,24(sp)
 8004734:	00800584 	movi	r2,22
 8004738:	10c26c36 	bltu	r2,r3,80050ec <_dtoa_r+0xc30>
 800473c:	180490fa 	slli	r2,r3,3
 8004740:	00c20074 	movhi	r3,2049
 8004744:	18fa1104 	addi	r3,r3,-6076
 8004748:	d9800317 	ldw	r6,12(sp)
 800474c:	1885883a 	add	r2,r3,r2
 8004750:	11000017 	ldw	r4,0(r2)
 8004754:	11400117 	ldw	r5,4(r2)
 8004758:	880f883a 	mov	r7,r17
 800475c:	800ac2c0 	call	800ac2c <__gtdf2>
 8004760:	00828f0e 	bge	zero,r2,80051a0 <_dtoa_r+0xce4>
 8004764:	d8800617 	ldw	r2,24(sp)
 8004768:	d8000d15 	stw	zero,52(sp)
 800476c:	10bfffc4 	addi	r2,r2,-1
 8004770:	d8800615 	stw	r2,24(sp)
 8004774:	ad29c83a 	sub	r20,r21,r20
 8004778:	a53fffc4 	addi	r20,r20,-1
 800477c:	a0026616 	blt	r20,zero,8005118 <_dtoa_r+0xc5c>
 8004780:	dd000715 	stw	r20,28(sp)
 8004784:	d8000815 	stw	zero,32(sp)
 8004788:	d8800617 	ldw	r2,24(sp)
 800478c:	10025a16 	blt	r2,zero,80050f8 <_dtoa_r+0xc3c>
 8004790:	d8c00717 	ldw	r3,28(sp)
 8004794:	d8800b15 	stw	r2,44(sp)
 8004798:	d8000a15 	stw	zero,40(sp)
 800479c:	1887883a 	add	r3,r3,r2
 80047a0:	d8c00715 	stw	r3,28(sp)
 80047a4:	d9c00417 	ldw	r7,16(sp)
 80047a8:	00800244 	movi	r2,9
 80047ac:	11c10536 	bltu	r2,r7,8004bc4 <_dtoa_r+0x708>
 80047b0:	00800144 	movi	r2,5
 80047b4:	11c4c60e 	bge	r2,r7,8005ad0 <_dtoa_r+0x1614>
 80047b8:	39ffff04 	addi	r7,r7,-4
 80047bc:	d9c00415 	stw	r7,16(sp)
 80047c0:	0027883a 	mov	r19,zero
 80047c4:	d9c00417 	ldw	r7,16(sp)
 80047c8:	008000c4 	movi	r2,3
 80047cc:	3883a226 	beq	r7,r2,8005658 <_dtoa_r+0x119c>
 80047d0:	11c2bc16 	blt	r2,r7,80052c4 <_dtoa_r+0xe08>
 80047d4:	00800084 	movi	r2,2
 80047d8:	3880fb1e 	bne	r7,r2,8004bc8 <_dtoa_r+0x70c>
 80047dc:	d8000c15 	stw	zero,48(sp)
 80047e0:	d9002117 	ldw	r4,132(sp)
 80047e4:	0103ae0e 	bge	zero,r4,80056a0 <_dtoa_r+0x11e4>
 80047e8:	2025883a 	mov	r18,r4
 80047ec:	d9000e15 	stw	r4,56(sp)
 80047f0:	d9000915 	stw	r4,36(sp)
 80047f4:	80001115 	stw	zero,68(r16)
 80047f8:	008005c4 	movi	r2,23
 80047fc:	1484b22e 	bgeu	r2,r18,8005ac8 <_dtoa_r+0x160c>
 8004800:	00c00044 	movi	r3,1
 8004804:	00800104 	movi	r2,4
 8004808:	1085883a 	add	r2,r2,r2
 800480c:	11000504 	addi	r4,r2,20
 8004810:	180b883a 	mov	r5,r3
 8004814:	18c00044 	addi	r3,r3,1
 8004818:	913ffb2e 	bgeu	r18,r4,8004808 <__alt_data_end+0xf8004808>
 800481c:	81401115 	stw	r5,68(r16)
 8004820:	8009883a 	mov	r4,r16
 8004824:	80078d40 	call	80078d4 <_Balloc>
 8004828:	102f883a 	mov	r23,r2
 800482c:	80801015 	stw	r2,64(r16)
 8004830:	00800384 	movi	r2,14
 8004834:	1480f036 	bltu	r2,r18,8004bf8 <_dtoa_r+0x73c>
 8004838:	9800ef26 	beq	r19,zero,8004bf8 <_dtoa_r+0x73c>
 800483c:	d8800617 	ldw	r2,24(sp)
 8004840:	00839c0e 	bge	zero,r2,80056b4 <_dtoa_r+0x11f8>
 8004844:	d8c00617 	ldw	r3,24(sp)
 8004848:	108003cc 	andi	r2,r2,15
 800484c:	100490fa 	slli	r2,r2,3
 8004850:	182bd13a 	srai	r21,r3,4
 8004854:	00c20074 	movhi	r3,2049
 8004858:	18fa1104 	addi	r3,r3,-6076
 800485c:	1885883a 	add	r2,r3,r2
 8004860:	a8c0040c 	andi	r3,r21,16
 8004864:	12800017 	ldw	r10,0(r2)
 8004868:	15800117 	ldw	r22,4(r2)
 800486c:	18038726 	beq	r3,zero,800568c <_dtoa_r+0x11d0>
 8004870:	00820074 	movhi	r2,2049
 8004874:	10ba0704 	addi	r2,r2,-6116
 8004878:	11800817 	ldw	r6,32(r2)
 800487c:	11c00917 	ldw	r7,36(r2)
 8004880:	d9000317 	ldw	r4,12(sp)
 8004884:	880b883a 	mov	r5,r17
 8004888:	da801515 	stw	r10,84(sp)
 800488c:	800a9c00 	call	800a9c0 <__divdf3>
 8004890:	da801517 	ldw	r10,84(sp)
 8004894:	d8801015 	stw	r2,64(sp)
 8004898:	1829883a 	mov	r20,r3
 800489c:	ad4003cc 	andi	r21,r21,15
 80048a0:	048000c4 	movi	r18,3
 80048a4:	a8001126 	beq	r21,zero,80048ec <_dtoa_r+0x430>
 80048a8:	04c20074 	movhi	r19,2049
 80048ac:	9cfa0704 	addi	r19,r19,-6116
 80048b0:	5005883a 	mov	r2,r10
 80048b4:	b007883a 	mov	r3,r22
 80048b8:	a980004c 	andi	r6,r21,1
 80048bc:	1009883a 	mov	r4,r2
 80048c0:	a82bd07a 	srai	r21,r21,1
 80048c4:	180b883a 	mov	r5,r3
 80048c8:	30000426 	beq	r6,zero,80048dc <_dtoa_r+0x420>
 80048cc:	99800017 	ldw	r6,0(r19)
 80048d0:	99c00117 	ldw	r7,4(r19)
 80048d4:	94800044 	addi	r18,r18,1
 80048d8:	800a6dc0 	call	800a6dc <__muldf3>
 80048dc:	9cc00204 	addi	r19,r19,8
 80048e0:	a83ff51e 	bne	r21,zero,80048b8 <__alt_data_end+0xf80048b8>
 80048e4:	1015883a 	mov	r10,r2
 80048e8:	182d883a 	mov	r22,r3
 80048ec:	d9001017 	ldw	r4,64(sp)
 80048f0:	a00b883a 	mov	r5,r20
 80048f4:	500d883a 	mov	r6,r10
 80048f8:	b00f883a 	mov	r7,r22
 80048fc:	800a9c00 	call	800a9c0 <__divdf3>
 8004900:	1027883a 	mov	r19,r2
 8004904:	1829883a 	mov	r20,r3
 8004908:	d8c00d17 	ldw	r3,52(sp)
 800490c:	18000626 	beq	r3,zero,8004928 <_dtoa_r+0x46c>
 8004910:	9809883a 	mov	r4,r19
 8004914:	a00b883a 	mov	r5,r20
 8004918:	000d883a 	mov	r6,zero
 800491c:	01cffc34 	movhi	r7,16368
 8004920:	800acf40 	call	800acf4 <__ltdf2>
 8004924:	10040e16 	blt	r2,zero,8005960 <_dtoa_r+0x14a4>
 8004928:	9009883a 	mov	r4,r18
 800492c:	800ad500 	call	800ad50 <__floatsidf>
 8004930:	1009883a 	mov	r4,r2
 8004934:	180b883a 	mov	r5,r3
 8004938:	980d883a 	mov	r6,r19
 800493c:	a00f883a 	mov	r7,r20
 8004940:	800a6dc0 	call	800a6dc <__muldf3>
 8004944:	1009883a 	mov	r4,r2
 8004948:	180b883a 	mov	r5,r3
 800494c:	000d883a 	mov	r6,zero
 8004950:	01d00734 	movhi	r7,16412
 8004954:	800a6280 	call	800a628 <__adddf3>
 8004958:	057f3034 	movhi	r21,64704
 800495c:	1d6b883a 	add	r21,r3,r21
 8004960:	d8c00917 	ldw	r3,36(sp)
 8004964:	1025883a 	mov	r18,r2
 8004968:	18031f26 	beq	r3,zero,80055e8 <_dtoa_r+0x112c>
 800496c:	d8800617 	ldw	r2,24(sp)
 8004970:	dac00917 	ldw	r11,36(sp)
 8004974:	d8801315 	stw	r2,76(sp)
 8004978:	d8c00c17 	ldw	r3,48(sp)
 800497c:	18039026 	beq	r3,zero,80057c0 <_dtoa_r+0x1304>
 8004980:	58bfffc4 	addi	r2,r11,-1
 8004984:	100490fa 	slli	r2,r2,3
 8004988:	00c20074 	movhi	r3,2049
 800498c:	18fa1104 	addi	r3,r3,-6076
 8004990:	0009883a 	mov	r4,zero
 8004994:	1885883a 	add	r2,r3,r2
 8004998:	11800017 	ldw	r6,0(r2)
 800499c:	11c00117 	ldw	r7,4(r2)
 80049a0:	014ff834 	movhi	r5,16352
 80049a4:	dac01615 	stw	r11,88(sp)
 80049a8:	800a9c00 	call	800a9c0 <__divdf3>
 80049ac:	900d883a 	mov	r6,r18
 80049b0:	a80f883a 	mov	r7,r21
 80049b4:	1009883a 	mov	r4,r2
 80049b8:	180b883a 	mov	r5,r3
 80049bc:	800a67c0 	call	800a67c <__subdf3>
 80049c0:	a00b883a 	mov	r5,r20
 80049c4:	9809883a 	mov	r4,r19
 80049c8:	182b883a 	mov	r21,r3
 80049cc:	d8801015 	stw	r2,64(sp)
 80049d0:	800ae240 	call	800ae24 <__fixdfsi>
 80049d4:	1009883a 	mov	r4,r2
 80049d8:	d8801515 	stw	r2,84(sp)
 80049dc:	800ad500 	call	800ad50 <__floatsidf>
 80049e0:	9809883a 	mov	r4,r19
 80049e4:	a00b883a 	mov	r5,r20
 80049e8:	100d883a 	mov	r6,r2
 80049ec:	180f883a 	mov	r7,r3
 80049f0:	800a67c0 	call	800a67c <__subdf3>
 80049f4:	da401517 	ldw	r9,84(sp)
 80049f8:	d9001017 	ldw	r4,64(sp)
 80049fc:	a80b883a 	mov	r5,r21
 8004a00:	4d000c04 	addi	r20,r9,48
 8004a04:	bd000005 	stb	r20,0(r23)
 8004a08:	100d883a 	mov	r6,r2
 8004a0c:	180f883a 	mov	r7,r3
 8004a10:	bd800044 	addi	r22,r23,1
 8004a14:	1025883a 	mov	r18,r2
 8004a18:	1827883a 	mov	r19,r3
 8004a1c:	800ac2c0 	call	800ac2c <__gtdf2>
 8004a20:	00842216 	blt	zero,r2,8005aac <_dtoa_r+0x15f0>
 8004a24:	0009883a 	mov	r4,zero
 8004a28:	014ffc34 	movhi	r5,16368
 8004a2c:	900d883a 	mov	r6,r18
 8004a30:	980f883a 	mov	r7,r19
 8004a34:	800a67c0 	call	800a67c <__subdf3>
 8004a38:	d9001017 	ldw	r4,64(sp)
 8004a3c:	a80b883a 	mov	r5,r21
 8004a40:	100d883a 	mov	r6,r2
 8004a44:	180f883a 	mov	r7,r3
 8004a48:	800ac2c0 	call	800ac2c <__gtdf2>
 8004a4c:	dac01617 	ldw	r11,88(sp)
 8004a50:	00841316 	blt	zero,r2,8005aa0 <_dtoa_r+0x15e4>
 8004a54:	00800044 	movi	r2,1
 8004a58:	12c0670e 	bge	r2,r11,8004bf8 <_dtoa_r+0x73c>
 8004a5c:	bad7883a 	add	r11,r23,r11
 8004a60:	df001115 	stw	fp,68(sp)
 8004a64:	dc401215 	stw	r17,72(sp)
 8004a68:	5839883a 	mov	fp,r11
 8004a6c:	dc401017 	ldw	r17,64(sp)
 8004a70:	00000806 	br	8004a94 <_dtoa_r+0x5d8>
 8004a74:	800a67c0 	call	800a67c <__subdf3>
 8004a78:	1009883a 	mov	r4,r2
 8004a7c:	180b883a 	mov	r5,r3
 8004a80:	880d883a 	mov	r6,r17
 8004a84:	a80f883a 	mov	r7,r21
 8004a88:	800acf40 	call	800acf4 <__ltdf2>
 8004a8c:	1003ee16 	blt	r2,zero,8005a48 <_dtoa_r+0x158c>
 8004a90:	b703f126 	beq	r22,fp,8005a58 <_dtoa_r+0x159c>
 8004a94:	8809883a 	mov	r4,r17
 8004a98:	a80b883a 	mov	r5,r21
 8004a9c:	000d883a 	mov	r6,zero
 8004aa0:	01d00934 	movhi	r7,16420
 8004aa4:	800a6dc0 	call	800a6dc <__muldf3>
 8004aa8:	000d883a 	mov	r6,zero
 8004aac:	01d00934 	movhi	r7,16420
 8004ab0:	9009883a 	mov	r4,r18
 8004ab4:	980b883a 	mov	r5,r19
 8004ab8:	1023883a 	mov	r17,r2
 8004abc:	182b883a 	mov	r21,r3
 8004ac0:	800a6dc0 	call	800a6dc <__muldf3>
 8004ac4:	180b883a 	mov	r5,r3
 8004ac8:	1009883a 	mov	r4,r2
 8004acc:	1825883a 	mov	r18,r3
 8004ad0:	1027883a 	mov	r19,r2
 8004ad4:	800ae240 	call	800ae24 <__fixdfsi>
 8004ad8:	1009883a 	mov	r4,r2
 8004adc:	1029883a 	mov	r20,r2
 8004ae0:	800ad500 	call	800ad50 <__floatsidf>
 8004ae4:	9809883a 	mov	r4,r19
 8004ae8:	900b883a 	mov	r5,r18
 8004aec:	100d883a 	mov	r6,r2
 8004af0:	180f883a 	mov	r7,r3
 8004af4:	800a67c0 	call	800a67c <__subdf3>
 8004af8:	a5000c04 	addi	r20,r20,48
 8004afc:	b5000005 	stb	r20,0(r22)
 8004b00:	1009883a 	mov	r4,r2
 8004b04:	180b883a 	mov	r5,r3
 8004b08:	880d883a 	mov	r6,r17
 8004b0c:	a80f883a 	mov	r7,r21
 8004b10:	1025883a 	mov	r18,r2
 8004b14:	1827883a 	mov	r19,r3
 8004b18:	800acf40 	call	800acf4 <__ltdf2>
 8004b1c:	b5800044 	addi	r22,r22,1
 8004b20:	0009883a 	mov	r4,zero
 8004b24:	014ffc34 	movhi	r5,16368
 8004b28:	900d883a 	mov	r6,r18
 8004b2c:	980f883a 	mov	r7,r19
 8004b30:	103fd00e 	bge	r2,zero,8004a74 <__alt_data_end+0xf8004a74>
 8004b34:	d9001317 	ldw	r4,76(sp)
 8004b38:	df001117 	ldw	fp,68(sp)
 8004b3c:	d9000615 	stw	r4,24(sp)
 8004b40:	8009883a 	mov	r4,r16
 8004b44:	e00b883a 	mov	r5,fp
 8004b48:	800797c0 	call	800797c <_Bfree>
 8004b4c:	d9c00617 	ldw	r7,24(sp)
 8004b50:	d8c02217 	ldw	r3,136(sp)
 8004b54:	d9002417 	ldw	r4,144(sp)
 8004b58:	b0000005 	stb	zero,0(r22)
 8004b5c:	38800044 	addi	r2,r7,1
 8004b60:	18800015 	stw	r2,0(r3)
 8004b64:	203e8426 	beq	r4,zero,8004578 <__alt_data_end+0xf8004578>
 8004b68:	25800015 	stw	r22,0(r4)
 8004b6c:	003e8206 	br	8004578 <__alt_data_end+0xf8004578>
 8004b70:	00800434 	movhi	r2,16
 8004b74:	10bfffc4 	addi	r2,r2,-1
 8004b78:	90a4703a 	and	r18,r18,r2
 8004b7c:	903e901e 	bne	r18,zero,80045c0 <__alt_data_end+0xf80045c0>
 8004b80:	05c20074 	movhi	r23,2049
 8004b84:	bdf9e804 	addi	r23,r23,-6240
 8004b88:	003e8f06 	br	80045c8 <__alt_data_end+0xf80045c8>
 8004b8c:	b8800204 	addi	r2,r23,8
 8004b90:	003e9206 	br	80045dc <__alt_data_end+0xf80045dc>
 8004b94:	01400434 	movhi	r5,16
 8004b98:	297fffc4 	addi	r5,r5,-1
 8004b9c:	894a703a 	and	r5,r17,r5
 8004ba0:	d9000317 	ldw	r4,12(sp)
 8004ba4:	294ffc34 	orhi	r5,r5,16368
 8004ba8:	a53f0044 	addi	r20,r20,-1023
 8004bac:	dd400217 	ldw	r21,8(sp)
 8004bb0:	d8000f15 	stw	zero,60(sp)
 8004bb4:	003eb106 	br	800467c <__alt_data_end+0xf800467c>
 8004bb8:	05c20074 	movhi	r23,2049
 8004bbc:	bdf9df04 	addi	r23,r23,-6276
 8004bc0:	003e6d06 	br	8004578 <__alt_data_end+0xf8004578>
 8004bc4:	d8000415 	stw	zero,16(sp)
 8004bc8:	80001115 	stw	zero,68(r16)
 8004bcc:	8009883a 	mov	r4,r16
 8004bd0:	000b883a 	mov	r5,zero
 8004bd4:	80078d40 	call	80078d4 <_Balloc>
 8004bd8:	01ffffc4 	movi	r7,-1
 8004bdc:	102f883a 	mov	r23,r2
 8004be0:	80801015 	stw	r2,64(r16)
 8004be4:	00800044 	movi	r2,1
 8004be8:	d9c00915 	stw	r7,36(sp)
 8004bec:	d8002115 	stw	zero,132(sp)
 8004bf0:	d9c00e15 	stw	r7,56(sp)
 8004bf4:	d8800c15 	stw	r2,48(sp)
 8004bf8:	d8800117 	ldw	r2,4(sp)
 8004bfc:	10008b16 	blt	r2,zero,8004e2c <_dtoa_r+0x970>
 8004c00:	d9000617 	ldw	r4,24(sp)
 8004c04:	00c00384 	movi	r3,14
 8004c08:	19008816 	blt	r3,r4,8004e2c <_dtoa_r+0x970>
 8004c0c:	200490fa 	slli	r2,r4,3
 8004c10:	d9c02117 	ldw	r7,132(sp)
 8004c14:	00c20074 	movhi	r3,2049
 8004c18:	18fa1104 	addi	r3,r3,-6076
 8004c1c:	1885883a 	add	r2,r3,r2
 8004c20:	14800017 	ldw	r18,0(r2)
 8004c24:	14c00117 	ldw	r19,4(r2)
 8004c28:	3801c916 	blt	r7,zero,8005350 <_dtoa_r+0xe94>
 8004c2c:	d9000317 	ldw	r4,12(sp)
 8004c30:	900d883a 	mov	r6,r18
 8004c34:	980f883a 	mov	r7,r19
 8004c38:	880b883a 	mov	r5,r17
 8004c3c:	800a9c00 	call	800a9c0 <__divdf3>
 8004c40:	180b883a 	mov	r5,r3
 8004c44:	1009883a 	mov	r4,r2
 8004c48:	800ae240 	call	800ae24 <__fixdfsi>
 8004c4c:	1009883a 	mov	r4,r2
 8004c50:	102b883a 	mov	r21,r2
 8004c54:	800ad500 	call	800ad50 <__floatsidf>
 8004c58:	1009883a 	mov	r4,r2
 8004c5c:	180b883a 	mov	r5,r3
 8004c60:	900d883a 	mov	r6,r18
 8004c64:	980f883a 	mov	r7,r19
 8004c68:	800a6dc0 	call	800a6dc <__muldf3>
 8004c6c:	d9000317 	ldw	r4,12(sp)
 8004c70:	880b883a 	mov	r5,r17
 8004c74:	100d883a 	mov	r6,r2
 8004c78:	180f883a 	mov	r7,r3
 8004c7c:	800a67c0 	call	800a67c <__subdf3>
 8004c80:	d9c00917 	ldw	r7,36(sp)
 8004c84:	1009883a 	mov	r4,r2
 8004c88:	a8800c04 	addi	r2,r21,48
 8004c8c:	b8800005 	stb	r2,0(r23)
 8004c90:	01800044 	movi	r6,1
 8004c94:	180b883a 	mov	r5,r3
 8004c98:	2005883a 	mov	r2,r4
 8004c9c:	bd800044 	addi	r22,r23,1
 8004ca0:	39803726 	beq	r7,r6,8004d80 <_dtoa_r+0x8c4>
 8004ca4:	000d883a 	mov	r6,zero
 8004ca8:	01d00934 	movhi	r7,16420
 8004cac:	800a6dc0 	call	800a6dc <__muldf3>
 8004cb0:	1009883a 	mov	r4,r2
 8004cb4:	180b883a 	mov	r5,r3
 8004cb8:	000d883a 	mov	r6,zero
 8004cbc:	000f883a 	mov	r7,zero
 8004cc0:	1029883a 	mov	r20,r2
 8004cc4:	1823883a 	mov	r17,r3
 8004cc8:	800ab740 	call	800ab74 <__eqdf2>
 8004ccc:	103f9c26 	beq	r2,zero,8004b40 <__alt_data_end+0xf8004b40>
 8004cd0:	dd400917 	ldw	r21,36(sp)
 8004cd4:	dc000415 	stw	r16,16(sp)
 8004cd8:	00000906 	br	8004d00 <_dtoa_r+0x844>
 8004cdc:	800a6dc0 	call	800a6dc <__muldf3>
 8004ce0:	1009883a 	mov	r4,r2
 8004ce4:	180b883a 	mov	r5,r3
 8004ce8:	000d883a 	mov	r6,zero
 8004cec:	000f883a 	mov	r7,zero
 8004cf0:	1029883a 	mov	r20,r2
 8004cf4:	1823883a 	mov	r17,r3
 8004cf8:	800ab740 	call	800ab74 <__eqdf2>
 8004cfc:	10022926 	beq	r2,zero,80055a4 <_dtoa_r+0x10e8>
 8004d00:	900d883a 	mov	r6,r18
 8004d04:	980f883a 	mov	r7,r19
 8004d08:	a009883a 	mov	r4,r20
 8004d0c:	880b883a 	mov	r5,r17
 8004d10:	800a9c00 	call	800a9c0 <__divdf3>
 8004d14:	180b883a 	mov	r5,r3
 8004d18:	1009883a 	mov	r4,r2
 8004d1c:	800ae240 	call	800ae24 <__fixdfsi>
 8004d20:	1009883a 	mov	r4,r2
 8004d24:	1021883a 	mov	r16,r2
 8004d28:	800ad500 	call	800ad50 <__floatsidf>
 8004d2c:	1009883a 	mov	r4,r2
 8004d30:	180b883a 	mov	r5,r3
 8004d34:	900d883a 	mov	r6,r18
 8004d38:	980f883a 	mov	r7,r19
 8004d3c:	800a6dc0 	call	800a6dc <__muldf3>
 8004d40:	a009883a 	mov	r4,r20
 8004d44:	880b883a 	mov	r5,r17
 8004d48:	100d883a 	mov	r6,r2
 8004d4c:	180f883a 	mov	r7,r3
 8004d50:	800a67c0 	call	800a67c <__subdf3>
 8004d54:	82400c04 	addi	r9,r16,48
 8004d58:	b2400005 	stb	r9,0(r22)
 8004d5c:	b5800044 	addi	r22,r22,1
 8004d60:	b5d3c83a 	sub	r9,r22,r23
 8004d64:	000d883a 	mov	r6,zero
 8004d68:	01d00934 	movhi	r7,16420
 8004d6c:	1009883a 	mov	r4,r2
 8004d70:	180b883a 	mov	r5,r3
 8004d74:	aa7fd91e 	bne	r21,r9,8004cdc <__alt_data_end+0xf8004cdc>
 8004d78:	802b883a 	mov	r21,r16
 8004d7c:	dc000417 	ldw	r16,16(sp)
 8004d80:	1009883a 	mov	r4,r2
 8004d84:	180b883a 	mov	r5,r3
 8004d88:	100d883a 	mov	r6,r2
 8004d8c:	180f883a 	mov	r7,r3
 8004d90:	800a6280 	call	800a628 <__adddf3>
 8004d94:	9009883a 	mov	r4,r18
 8004d98:	980b883a 	mov	r5,r19
 8004d9c:	100d883a 	mov	r6,r2
 8004da0:	180f883a 	mov	r7,r3
 8004da4:	1023883a 	mov	r17,r2
 8004da8:	1829883a 	mov	r20,r3
 8004dac:	800acf40 	call	800acf4 <__ltdf2>
 8004db0:	10000816 	blt	r2,zero,8004dd4 <_dtoa_r+0x918>
 8004db4:	9009883a 	mov	r4,r18
 8004db8:	980b883a 	mov	r5,r19
 8004dbc:	880d883a 	mov	r6,r17
 8004dc0:	a00f883a 	mov	r7,r20
 8004dc4:	800abd00 	call	800abd0 <__nedf2>
 8004dc8:	103f5d1e 	bne	r2,zero,8004b40 <__alt_data_end+0xf8004b40>
 8004dcc:	ad40004c 	andi	r21,r21,1
 8004dd0:	a83f5b26 	beq	r21,zero,8004b40 <__alt_data_end+0xf8004b40>
 8004dd4:	b53fffc3 	ldbu	r20,-1(r22)
 8004dd8:	b0ffff84 	addi	r3,r22,-2
 8004ddc:	01400e44 	movi	r5,57
 8004de0:	00000306 	br	8004df0 <_dtoa_r+0x934>
 8004de4:	1d000003 	ldbu	r20,0(r3)
 8004de8:	102d883a 	mov	r22,r2
 8004dec:	18ffffc4 	addi	r3,r3,-1
 8004df0:	a1003fcc 	andi	r4,r20,255
 8004df4:	2100201c 	xori	r4,r4,128
 8004df8:	213fe004 	addi	r4,r4,-128
 8004dfc:	b0bfffc4 	addi	r2,r22,-1
 8004e00:	2142ca1e 	bne	r4,r5,800592c <_dtoa_r+0x1470>
 8004e04:	b8bff71e 	bne	r23,r2,8004de4 <__alt_data_end+0xf8004de4>
 8004e08:	d8800617 	ldw	r2,24(sp)
 8004e0c:	05000c44 	movi	r20,49
 8004e10:	10800044 	addi	r2,r2,1
 8004e14:	d8800615 	stw	r2,24(sp)
 8004e18:	00800c04 	movi	r2,48
 8004e1c:	b8800005 	stb	r2,0(r23)
 8004e20:	b805883a 	mov	r2,r23
 8004e24:	15000005 	stb	r20,0(r2)
 8004e28:	003f4506 	br	8004b40 <__alt_data_end+0xf8004b40>
 8004e2c:	d9c00c17 	ldw	r7,48(sp)
 8004e30:	3800c926 	beq	r7,zero,8005158 <_dtoa_r+0xc9c>
 8004e34:	d9c00417 	ldw	r7,16(sp)
 8004e38:	00c00044 	movi	r3,1
 8004e3c:	19c16c0e 	bge	r3,r7,80053f0 <_dtoa_r+0xf34>
 8004e40:	d9000917 	ldw	r4,36(sp)
 8004e44:	d9c00a17 	ldw	r7,40(sp)
 8004e48:	24ffffc4 	addi	r19,r4,-1
 8004e4c:	3cc20716 	blt	r7,r19,800566c <_dtoa_r+0x11b0>
 8004e50:	3ce7c83a 	sub	r19,r7,r19
 8004e54:	d9c00917 	ldw	r7,36(sp)
 8004e58:	3802ae16 	blt	r7,zero,8005914 <_dtoa_r+0x1458>
 8004e5c:	dc800817 	ldw	r18,32(sp)
 8004e60:	d8800917 	ldw	r2,36(sp)
 8004e64:	d8c00817 	ldw	r3,32(sp)
 8004e68:	d9c00717 	ldw	r7,28(sp)
 8004e6c:	8009883a 	mov	r4,r16
 8004e70:	1887883a 	add	r3,r3,r2
 8004e74:	388f883a 	add	r7,r7,r2
 8004e78:	01400044 	movi	r5,1
 8004e7c:	d8c00815 	stw	r3,32(sp)
 8004e80:	d9c00715 	stw	r7,28(sp)
 8004e84:	8007d040 	call	8007d04 <__i2b>
 8004e88:	102b883a 	mov	r21,r2
 8004e8c:	90000a26 	beq	r18,zero,8004eb8 <_dtoa_r+0x9fc>
 8004e90:	d8800717 	ldw	r2,28(sp)
 8004e94:	0080080e 	bge	zero,r2,8004eb8 <_dtoa_r+0x9fc>
 8004e98:	90812b16 	blt	r18,r2,8005348 <_dtoa_r+0xe8c>
 8004e9c:	d8c00817 	ldw	r3,32(sp)
 8004ea0:	d9000717 	ldw	r4,28(sp)
 8004ea4:	90a5c83a 	sub	r18,r18,r2
 8004ea8:	1887c83a 	sub	r3,r3,r2
 8004eac:	2089c83a 	sub	r4,r4,r2
 8004eb0:	d8c00815 	stw	r3,32(sp)
 8004eb4:	d9000715 	stw	r4,28(sp)
 8004eb8:	d9c00a17 	ldw	r7,40(sp)
 8004ebc:	01c0140e 	bge	zero,r7,8004f10 <_dtoa_r+0xa54>
 8004ec0:	d8800c17 	ldw	r2,48(sp)
 8004ec4:	1001de26 	beq	r2,zero,8005640 <_dtoa_r+0x1184>
 8004ec8:	04c00e0e 	bge	zero,r19,8004f04 <_dtoa_r+0xa48>
 8004ecc:	a80b883a 	mov	r5,r21
 8004ed0:	8009883a 	mov	r4,r16
 8004ed4:	980d883a 	mov	r6,r19
 8004ed8:	8007f980 	call	8007f98 <__pow5mult>
 8004edc:	e00d883a 	mov	r6,fp
 8004ee0:	8009883a 	mov	r4,r16
 8004ee4:	100b883a 	mov	r5,r2
 8004ee8:	102b883a 	mov	r21,r2
 8004eec:	8007d400 	call	8007d40 <__multiply>
 8004ef0:	1029883a 	mov	r20,r2
 8004ef4:	e00b883a 	mov	r5,fp
 8004ef8:	8009883a 	mov	r4,r16
 8004efc:	800797c0 	call	800797c <_Bfree>
 8004f00:	a039883a 	mov	fp,r20
 8004f04:	d8c00a17 	ldw	r3,40(sp)
 8004f08:	1ccdc83a 	sub	r6,r3,r19
 8004f0c:	3001291e 	bne	r6,zero,80053b4 <_dtoa_r+0xef8>
 8004f10:	8009883a 	mov	r4,r16
 8004f14:	01400044 	movi	r5,1
 8004f18:	8007d040 	call	8007d04 <__i2b>
 8004f1c:	d9000b17 	ldw	r4,44(sp)
 8004f20:	1029883a 	mov	r20,r2
 8004f24:	0100050e 	bge	zero,r4,8004f3c <_dtoa_r+0xa80>
 8004f28:	d9800b17 	ldw	r6,44(sp)
 8004f2c:	8009883a 	mov	r4,r16
 8004f30:	100b883a 	mov	r5,r2
 8004f34:	8007f980 	call	8007f98 <__pow5mult>
 8004f38:	1029883a 	mov	r20,r2
 8004f3c:	d9c00417 	ldw	r7,16(sp)
 8004f40:	00800044 	movi	r2,1
 8004f44:	11c0f00e 	bge	r2,r7,8005308 <_dtoa_r+0xe4c>
 8004f48:	0023883a 	mov	r17,zero
 8004f4c:	d8800b17 	ldw	r2,44(sp)
 8004f50:	1001741e 	bne	r2,zero,8005524 <_dtoa_r+0x1068>
 8004f54:	00800044 	movi	r2,1
 8004f58:	d8c00717 	ldw	r3,28(sp)
 8004f5c:	10c5883a 	add	r2,r2,r3
 8004f60:	108007cc 	andi	r2,r2,31
 8004f64:	10008026 	beq	r2,zero,8005168 <_dtoa_r+0xcac>
 8004f68:	01000804 	movi	r4,32
 8004f6c:	2089c83a 	sub	r4,r4,r2
 8004f70:	00c00104 	movi	r3,4
 8004f74:	1902d00e 	bge	r3,r4,8005ab8 <_dtoa_r+0x15fc>
 8004f78:	d9000817 	ldw	r4,32(sp)
 8004f7c:	d9c00717 	ldw	r7,28(sp)
 8004f80:	00c00704 	movi	r3,28
 8004f84:	1885c83a 	sub	r2,r3,r2
 8004f88:	2089883a 	add	r4,r4,r2
 8004f8c:	388f883a 	add	r7,r7,r2
 8004f90:	d9000815 	stw	r4,32(sp)
 8004f94:	90a5883a 	add	r18,r18,r2
 8004f98:	d9c00715 	stw	r7,28(sp)
 8004f9c:	d9c00817 	ldw	r7,32(sp)
 8004fa0:	01c0050e 	bge	zero,r7,8004fb8 <_dtoa_r+0xafc>
 8004fa4:	e00b883a 	mov	r5,fp
 8004fa8:	8009883a 	mov	r4,r16
 8004fac:	380d883a 	mov	r6,r7
 8004fb0:	80080c40 	call	80080c4 <__lshift>
 8004fb4:	1039883a 	mov	fp,r2
 8004fb8:	d8800717 	ldw	r2,28(sp)
 8004fbc:	0080050e 	bge	zero,r2,8004fd4 <_dtoa_r+0xb18>
 8004fc0:	a00b883a 	mov	r5,r20
 8004fc4:	8009883a 	mov	r4,r16
 8004fc8:	100d883a 	mov	r6,r2
 8004fcc:	80080c40 	call	80080c4 <__lshift>
 8004fd0:	1029883a 	mov	r20,r2
 8004fd4:	d8c00d17 	ldw	r3,52(sp)
 8004fd8:	1801401e 	bne	r3,zero,80054dc <_dtoa_r+0x1020>
 8004fdc:	d8800917 	ldw	r2,36(sp)
 8004fe0:	00815a0e 	bge	zero,r2,800554c <_dtoa_r+0x1090>
 8004fe4:	d8c00c17 	ldw	r3,48(sp)
 8004fe8:	18006f1e 	bne	r3,zero,80051a8 <_dtoa_r+0xcec>
 8004fec:	b823883a 	mov	r17,r23
 8004ff0:	dc800917 	ldw	r18,36(sp)
 8004ff4:	00000206 	br	8005000 <_dtoa_r+0xb44>
 8004ff8:	80079a40 	call	80079a4 <__multadd>
 8004ffc:	1039883a 	mov	fp,r2
 8005000:	e009883a 	mov	r4,fp
 8005004:	a00b883a 	mov	r5,r20
 8005008:	80042800 	call	8004280 <quorem>
 800500c:	10800c04 	addi	r2,r2,48
 8005010:	88800005 	stb	r2,0(r17)
 8005014:	8c400044 	addi	r17,r17,1
 8005018:	8dc7c83a 	sub	r3,r17,r23
 800501c:	8009883a 	mov	r4,r16
 8005020:	e00b883a 	mov	r5,fp
 8005024:	01800284 	movi	r6,10
 8005028:	000f883a 	mov	r7,zero
 800502c:	1cbff216 	blt	r3,r18,8004ff8 <__alt_data_end+0xf8004ff8>
 8005030:	dd800917 	ldw	r22,36(sp)
 8005034:	1007883a 	mov	r3,r2
 8005038:	05823a0e 	bge	zero,r22,8005924 <_dtoa_r+0x1468>
 800503c:	bdad883a 	add	r22,r23,r22
 8005040:	0023883a 	mov	r17,zero
 8005044:	e00b883a 	mov	r5,fp
 8005048:	01800044 	movi	r6,1
 800504c:	8009883a 	mov	r4,r16
 8005050:	d8c01515 	stw	r3,84(sp)
 8005054:	80080c40 	call	80080c4 <__lshift>
 8005058:	1009883a 	mov	r4,r2
 800505c:	a00b883a 	mov	r5,r20
 8005060:	1039883a 	mov	fp,r2
 8005064:	80082200 	call	8008220 <__mcmp>
 8005068:	d8c01517 	ldw	r3,84(sp)
 800506c:	0080d60e 	bge	zero,r2,80053c8 <_dtoa_r+0xf0c>
 8005070:	b13fffc3 	ldbu	r4,-1(r22)
 8005074:	b0ffff84 	addi	r3,r22,-2
 8005078:	01800e44 	movi	r6,57
 800507c:	00000306 	br	800508c <_dtoa_r+0xbd0>
 8005080:	19000003 	ldbu	r4,0(r3)
 8005084:	102d883a 	mov	r22,r2
 8005088:	18ffffc4 	addi	r3,r3,-1
 800508c:	21403fcc 	andi	r5,r4,255
 8005090:	2940201c 	xori	r5,r5,128
 8005094:	297fe004 	addi	r5,r5,-128
 8005098:	b0bfffc4 	addi	r2,r22,-1
 800509c:	2981a71e 	bne	r5,r6,800573c <_dtoa_r+0x1280>
 80050a0:	b8bff71e 	bne	r23,r2,8005080 <__alt_data_end+0xf8005080>
 80050a4:	d8800617 	ldw	r2,24(sp)
 80050a8:	10800044 	addi	r2,r2,1
 80050ac:	d8800615 	stw	r2,24(sp)
 80050b0:	00800c44 	movi	r2,49
 80050b4:	b8800005 	stb	r2,0(r23)
 80050b8:	8009883a 	mov	r4,r16
 80050bc:	a00b883a 	mov	r5,r20
 80050c0:	800797c0 	call	800797c <_Bfree>
 80050c4:	a83e9e26 	beq	r21,zero,8004b40 <__alt_data_end+0xf8004b40>
 80050c8:	88000426 	beq	r17,zero,80050dc <_dtoa_r+0xc20>
 80050cc:	8d400326 	beq	r17,r21,80050dc <_dtoa_r+0xc20>
 80050d0:	8009883a 	mov	r4,r16
 80050d4:	880b883a 	mov	r5,r17
 80050d8:	800797c0 	call	800797c <_Bfree>
 80050dc:	8009883a 	mov	r4,r16
 80050e0:	a80b883a 	mov	r5,r21
 80050e4:	800797c0 	call	800797c <_Bfree>
 80050e8:	003e9506 	br	8004b40 <__alt_data_end+0xf8004b40>
 80050ec:	00c00044 	movi	r3,1
 80050f0:	d8c00d15 	stw	r3,52(sp)
 80050f4:	003d9f06 	br	8004774 <__alt_data_end+0xf8004774>
 80050f8:	d9000817 	ldw	r4,32(sp)
 80050fc:	d8800617 	ldw	r2,24(sp)
 8005100:	d8000b15 	stw	zero,44(sp)
 8005104:	2089c83a 	sub	r4,r4,r2
 8005108:	0087c83a 	sub	r3,zero,r2
 800510c:	d9000815 	stw	r4,32(sp)
 8005110:	d8c00a15 	stw	r3,40(sp)
 8005114:	003da306 	br	80047a4 <__alt_data_end+0xf80047a4>
 8005118:	0529c83a 	sub	r20,zero,r20
 800511c:	dd000815 	stw	r20,32(sp)
 8005120:	d8000715 	stw	zero,28(sp)
 8005124:	003d9806 	br	8004788 <__alt_data_end+0xf8004788>
 8005128:	d9000617 	ldw	r4,24(sp)
 800512c:	800ad500 	call	800ad50 <__floatsidf>
 8005130:	1009883a 	mov	r4,r2
 8005134:	180b883a 	mov	r5,r3
 8005138:	980d883a 	mov	r6,r19
 800513c:	900f883a 	mov	r7,r18
 8005140:	800ab740 	call	800ab74 <__eqdf2>
 8005144:	103d7a26 	beq	r2,zero,8004730 <__alt_data_end+0xf8004730>
 8005148:	d8800617 	ldw	r2,24(sp)
 800514c:	10bfffc4 	addi	r2,r2,-1
 8005150:	d8800615 	stw	r2,24(sp)
 8005154:	003d7606 	br	8004730 <__alt_data_end+0xf8004730>
 8005158:	dcc00a17 	ldw	r19,40(sp)
 800515c:	dc800817 	ldw	r18,32(sp)
 8005160:	002b883a 	mov	r21,zero
 8005164:	003f4906 	br	8004e8c <__alt_data_end+0xf8004e8c>
 8005168:	00800704 	movi	r2,28
 800516c:	d8c00817 	ldw	r3,32(sp)
 8005170:	d9000717 	ldw	r4,28(sp)
 8005174:	90a5883a 	add	r18,r18,r2
 8005178:	1887883a 	add	r3,r3,r2
 800517c:	2089883a 	add	r4,r4,r2
 8005180:	d8c00815 	stw	r3,32(sp)
 8005184:	d9000715 	stw	r4,28(sp)
 8005188:	003f8406 	br	8004f9c <__alt_data_end+0xf8004f9c>
 800518c:	d9c00317 	ldw	r7,12(sp)
 8005190:	013efb84 	movi	r4,-1042
 8005194:	2509c83a 	sub	r4,r4,r20
 8005198:	3908983a 	sll	r4,r7,r4
 800519c:	003d3006 	br	8004660 <__alt_data_end+0xf8004660>
 80051a0:	d8000d15 	stw	zero,52(sp)
 80051a4:	003d7306 	br	8004774 <__alt_data_end+0xf8004774>
 80051a8:	0480050e 	bge	zero,r18,80051c0 <_dtoa_r+0xd04>
 80051ac:	a80b883a 	mov	r5,r21
 80051b0:	8009883a 	mov	r4,r16
 80051b4:	900d883a 	mov	r6,r18
 80051b8:	80080c40 	call	80080c4 <__lshift>
 80051bc:	102b883a 	mov	r21,r2
 80051c0:	8801611e 	bne	r17,zero,8005748 <_dtoa_r+0x128c>
 80051c4:	a827883a 	mov	r19,r21
 80051c8:	d8c00317 	ldw	r3,12(sp)
 80051cc:	d9000917 	ldw	r4,36(sp)
 80051d0:	b8bfffc4 	addi	r2,r23,-1
 80051d4:	18c0004c 	andi	r3,r3,1
 80051d8:	1105883a 	add	r2,r2,r4
 80051dc:	b825883a 	mov	r18,r23
 80051e0:	d8800515 	stw	r2,20(sp)
 80051e4:	a823883a 	mov	r17,r21
 80051e8:	d8c00315 	stw	r3,12(sp)
 80051ec:	ddc00715 	stw	r23,28(sp)
 80051f0:	e009883a 	mov	r4,fp
 80051f4:	a00b883a 	mov	r5,r20
 80051f8:	80042800 	call	8004280 <quorem>
 80051fc:	e009883a 	mov	r4,fp
 8005200:	880b883a 	mov	r5,r17
 8005204:	102d883a 	mov	r22,r2
 8005208:	80082200 	call	8008220 <__mcmp>
 800520c:	980d883a 	mov	r6,r19
 8005210:	8009883a 	mov	r4,r16
 8005214:	a00b883a 	mov	r5,r20
 8005218:	102b883a 	mov	r21,r2
 800521c:	80082780 	call	8008278 <__mdiff>
 8005220:	100d883a 	mov	r6,r2
 8005224:	10800317 	ldw	r2,12(r2)
 8005228:	b5c00c04 	addi	r23,r22,48
 800522c:	10008c26 	beq	r2,zero,8005460 <_dtoa_r+0xfa4>
 8005230:	8009883a 	mov	r4,r16
 8005234:	300b883a 	mov	r5,r6
 8005238:	800797c0 	call	800797c <_Bfree>
 800523c:	00800044 	movi	r2,1
 8005240:	a8007116 	blt	r21,zero,8005408 <_dtoa_r+0xf4c>
 8005244:	a800041e 	bne	r21,zero,8005258 <_dtoa_r+0xd9c>
 8005248:	d9c00417 	ldw	r7,16(sp)
 800524c:	3800021e 	bne	r7,zero,8005258 <_dtoa_r+0xd9c>
 8005250:	d8c00317 	ldw	r3,12(sp)
 8005254:	18006c26 	beq	r3,zero,8005408 <_dtoa_r+0xf4c>
 8005258:	00814c16 	blt	zero,r2,800578c <_dtoa_r+0x12d0>
 800525c:	d8c00517 	ldw	r3,20(sp)
 8005260:	95400044 	addi	r21,r18,1
 8005264:	95c00005 	stb	r23,0(r18)
 8005268:	a82d883a 	mov	r22,r21
 800526c:	90c14d26 	beq	r18,r3,80057a4 <_dtoa_r+0x12e8>
 8005270:	e00b883a 	mov	r5,fp
 8005274:	8009883a 	mov	r4,r16
 8005278:	01800284 	movi	r6,10
 800527c:	000f883a 	mov	r7,zero
 8005280:	80079a40 	call	80079a4 <__multadd>
 8005284:	1039883a 	mov	fp,r2
 8005288:	8cc08b26 	beq	r17,r19,80054b8 <_dtoa_r+0xffc>
 800528c:	880b883a 	mov	r5,r17
 8005290:	01800284 	movi	r6,10
 8005294:	000f883a 	mov	r7,zero
 8005298:	8009883a 	mov	r4,r16
 800529c:	80079a40 	call	80079a4 <__multadd>
 80052a0:	980b883a 	mov	r5,r19
 80052a4:	8009883a 	mov	r4,r16
 80052a8:	01800284 	movi	r6,10
 80052ac:	000f883a 	mov	r7,zero
 80052b0:	1023883a 	mov	r17,r2
 80052b4:	80079a40 	call	80079a4 <__multadd>
 80052b8:	1027883a 	mov	r19,r2
 80052bc:	a825883a 	mov	r18,r21
 80052c0:	003fcb06 	br	80051f0 <__alt_data_end+0xf80051f0>
 80052c4:	d9c00417 	ldw	r7,16(sp)
 80052c8:	00800104 	movi	r2,4
 80052cc:	3880e426 	beq	r7,r2,8005660 <_dtoa_r+0x11a4>
 80052d0:	00800144 	movi	r2,5
 80052d4:	38be3c1e 	bne	r7,r2,8004bc8 <__alt_data_end+0xf8004bc8>
 80052d8:	00c00044 	movi	r3,1
 80052dc:	d8c00c15 	stw	r3,48(sp)
 80052e0:	d9c02117 	ldw	r7,132(sp)
 80052e4:	d8800617 	ldw	r2,24(sp)
 80052e8:	388f883a 	add	r7,r7,r2
 80052ec:	3c800044 	addi	r18,r7,1
 80052f0:	d9c00e15 	stw	r7,56(sp)
 80052f4:	dc800915 	stw	r18,36(sp)
 80052f8:	04bd3e16 	blt	zero,r18,80047f4 <__alt_data_end+0xf80047f4>
 80052fc:	80001115 	stw	zero,68(r16)
 8005300:	000b883a 	mov	r5,zero
 8005304:	003d4606 	br	8004820 <__alt_data_end+0xf8004820>
 8005308:	d8c00317 	ldw	r3,12(sp)
 800530c:	183f0e1e 	bne	r3,zero,8004f48 <__alt_data_end+0xf8004f48>
 8005310:	00c00434 	movhi	r3,16
 8005314:	18ffffc4 	addi	r3,r3,-1
 8005318:	88c6703a 	and	r3,r17,r3
 800531c:	183f0a1e 	bne	r3,zero,8004f48 <__alt_data_end+0xf8004f48>
 8005320:	8c5ffc2c 	andhi	r17,r17,32752
 8005324:	883f0826 	beq	r17,zero,8004f48 <__alt_data_end+0xf8004f48>
 8005328:	d9000817 	ldw	r4,32(sp)
 800532c:	d9c00717 	ldw	r7,28(sp)
 8005330:	1023883a 	mov	r17,r2
 8005334:	2089883a 	add	r4,r4,r2
 8005338:	388f883a 	add	r7,r7,r2
 800533c:	d9000815 	stw	r4,32(sp)
 8005340:	d9c00715 	stw	r7,28(sp)
 8005344:	003f0106 	br	8004f4c <__alt_data_end+0xf8004f4c>
 8005348:	9005883a 	mov	r2,r18
 800534c:	003ed306 	br	8004e9c <__alt_data_end+0xf8004e9c>
 8005350:	d8800917 	ldw	r2,36(sp)
 8005354:	00be3516 	blt	zero,r2,8004c2c <__alt_data_end+0xf8004c2c>
 8005358:	1000b61e 	bne	r2,zero,8005634 <_dtoa_r+0x1178>
 800535c:	9009883a 	mov	r4,r18
 8005360:	980b883a 	mov	r5,r19
 8005364:	000d883a 	mov	r6,zero
 8005368:	01d00534 	movhi	r7,16404
 800536c:	800a6dc0 	call	800a6dc <__muldf3>
 8005370:	d9800317 	ldw	r6,12(sp)
 8005374:	1009883a 	mov	r4,r2
 8005378:	180b883a 	mov	r5,r3
 800537c:	880f883a 	mov	r7,r17
 8005380:	800ac900 	call	800ac90 <__gedf2>
 8005384:	0029883a 	mov	r20,zero
 8005388:	002b883a 	mov	r21,zero
 800538c:	10007e16 	blt	r2,zero,8005588 <_dtoa_r+0x10cc>
 8005390:	d8802117 	ldw	r2,132(sp)
 8005394:	b82d883a 	mov	r22,r23
 8005398:	0084303a 	nor	r2,zero,r2
 800539c:	d8800615 	stw	r2,24(sp)
 80053a0:	8009883a 	mov	r4,r16
 80053a4:	a00b883a 	mov	r5,r20
 80053a8:	800797c0 	call	800797c <_Bfree>
 80053ac:	a83f4b1e 	bne	r21,zero,80050dc <__alt_data_end+0xf80050dc>
 80053b0:	003de306 	br	8004b40 <__alt_data_end+0xf8004b40>
 80053b4:	e00b883a 	mov	r5,fp
 80053b8:	8009883a 	mov	r4,r16
 80053bc:	8007f980 	call	8007f98 <__pow5mult>
 80053c0:	1039883a 	mov	fp,r2
 80053c4:	003ed206 	br	8004f10 <__alt_data_end+0xf8004f10>
 80053c8:	1000021e 	bne	r2,zero,80053d4 <_dtoa_r+0xf18>
 80053cc:	18c0004c 	andi	r3,r3,1
 80053d0:	183f271e 	bne	r3,zero,8005070 <__alt_data_end+0xf8005070>
 80053d4:	01000c04 	movi	r4,48
 80053d8:	00000106 	br	80053e0 <_dtoa_r+0xf24>
 80053dc:	102d883a 	mov	r22,r2
 80053e0:	b0bfffc4 	addi	r2,r22,-1
 80053e4:	10c00007 	ldb	r3,0(r2)
 80053e8:	193ffc26 	beq	r3,r4,80053dc <__alt_data_end+0xf80053dc>
 80053ec:	003f3206 	br	80050b8 <__alt_data_end+0xf80050b8>
 80053f0:	d8c00f17 	ldw	r3,60(sp)
 80053f4:	18015026 	beq	r3,zero,8005938 <_dtoa_r+0x147c>
 80053f8:	10810cc4 	addi	r2,r2,1075
 80053fc:	dcc00a17 	ldw	r19,40(sp)
 8005400:	dc800817 	ldw	r18,32(sp)
 8005404:	003e9706 	br	8004e64 <__alt_data_end+0xf8004e64>
 8005408:	b807883a 	mov	r3,r23
 800540c:	182b883a 	mov	r21,r3
 8005410:	ddc00717 	ldw	r23,28(sp)
 8005414:	00800e0e 	bge	zero,r2,8005450 <_dtoa_r+0xf94>
 8005418:	e00b883a 	mov	r5,fp
 800541c:	01800044 	movi	r6,1
 8005420:	8009883a 	mov	r4,r16
 8005424:	d8c01515 	stw	r3,84(sp)
 8005428:	80080c40 	call	80080c4 <__lshift>
 800542c:	1009883a 	mov	r4,r2
 8005430:	a00b883a 	mov	r5,r20
 8005434:	1039883a 	mov	fp,r2
 8005438:	80082200 	call	8008220 <__mcmp>
 800543c:	d8c01517 	ldw	r3,84(sp)
 8005440:	0081880e 	bge	zero,r2,8005a64 <_dtoa_r+0x15a8>
 8005444:	00800e44 	movi	r2,57
 8005448:	b0c00c44 	addi	r3,r22,49
 800544c:	a8816326 	beq	r21,r2,80059dc <_dtoa_r+0x1520>
 8005450:	90c00005 	stb	r3,0(r18)
 8005454:	95800044 	addi	r22,r18,1
 8005458:	982b883a 	mov	r21,r19
 800545c:	003f1606 	br	80050b8 <__alt_data_end+0xf80050b8>
 8005460:	300b883a 	mov	r5,r6
 8005464:	e009883a 	mov	r4,fp
 8005468:	d9801515 	stw	r6,84(sp)
 800546c:	80082200 	call	8008220 <__mcmp>
 8005470:	d9801517 	ldw	r6,84(sp)
 8005474:	8009883a 	mov	r4,r16
 8005478:	d8801515 	stw	r2,84(sp)
 800547c:	300b883a 	mov	r5,r6
 8005480:	800797c0 	call	800797c <_Bfree>
 8005484:	d8801517 	ldw	r2,84(sp)
 8005488:	103f6d1e 	bne	r2,zero,8005240 <__alt_data_end+0xf8005240>
 800548c:	d9c00417 	ldw	r7,16(sp)
 8005490:	383f6b1e 	bne	r7,zero,8005240 <__alt_data_end+0xf8005240>
 8005494:	d8c00317 	ldw	r3,12(sp)
 8005498:	183f691e 	bne	r3,zero,8005240 <__alt_data_end+0xf8005240>
 800549c:	b807883a 	mov	r3,r23
 80054a0:	00800e44 	movi	r2,57
 80054a4:	ddc00717 	ldw	r23,28(sp)
 80054a8:	18814c26 	beq	r3,r2,80059dc <_dtoa_r+0x1520>
 80054ac:	057fe80e 	bge	zero,r21,8005450 <__alt_data_end+0xf8005450>
 80054b0:	b0c00c44 	addi	r3,r22,49
 80054b4:	003fe606 	br	8005450 <__alt_data_end+0xf8005450>
 80054b8:	880b883a 	mov	r5,r17
 80054bc:	8009883a 	mov	r4,r16
 80054c0:	01800284 	movi	r6,10
 80054c4:	000f883a 	mov	r7,zero
 80054c8:	80079a40 	call	80079a4 <__multadd>
 80054cc:	1023883a 	mov	r17,r2
 80054d0:	1027883a 	mov	r19,r2
 80054d4:	a825883a 	mov	r18,r21
 80054d8:	003f4506 	br	80051f0 <__alt_data_end+0xf80051f0>
 80054dc:	e009883a 	mov	r4,fp
 80054e0:	a00b883a 	mov	r5,r20
 80054e4:	80082200 	call	8008220 <__mcmp>
 80054e8:	103ebc0e 	bge	r2,zero,8004fdc <__alt_data_end+0xf8004fdc>
 80054ec:	e00b883a 	mov	r5,fp
 80054f0:	8009883a 	mov	r4,r16
 80054f4:	01800284 	movi	r6,10
 80054f8:	000f883a 	mov	r7,zero
 80054fc:	80079a40 	call	80079a4 <__multadd>
 8005500:	1039883a 	mov	fp,r2
 8005504:	d8800617 	ldw	r2,24(sp)
 8005508:	d8c00c17 	ldw	r3,48(sp)
 800550c:	10bfffc4 	addi	r2,r2,-1
 8005510:	d8800615 	stw	r2,24(sp)
 8005514:	1801571e 	bne	r3,zero,8005a74 <_dtoa_r+0x15b8>
 8005518:	d9c00e17 	ldw	r7,56(sp)
 800551c:	d9c00915 	stw	r7,36(sp)
 8005520:	003eae06 	br	8004fdc <__alt_data_end+0xf8004fdc>
 8005524:	a0800417 	ldw	r2,16(r20)
 8005528:	10800104 	addi	r2,r2,4
 800552c:	1085883a 	add	r2,r2,r2
 8005530:	1085883a 	add	r2,r2,r2
 8005534:	a085883a 	add	r2,r20,r2
 8005538:	11000017 	ldw	r4,0(r2)
 800553c:	8007bec0 	call	8007bec <__hi0bits>
 8005540:	00c00804 	movi	r3,32
 8005544:	1885c83a 	sub	r2,r3,r2
 8005548:	003e8306 	br	8004f58 <__alt_data_end+0xf8004f58>
 800554c:	d9c00417 	ldw	r7,16(sp)
 8005550:	00800084 	movi	r2,2
 8005554:	11fea30e 	bge	r2,r7,8004fe4 <__alt_data_end+0xf8004fe4>
 8005558:	d8800917 	ldw	r2,36(sp)
 800555c:	103f8c1e 	bne	r2,zero,8005390 <__alt_data_end+0xf8005390>
 8005560:	a00b883a 	mov	r5,r20
 8005564:	8009883a 	mov	r4,r16
 8005568:	01800144 	movi	r6,5
 800556c:	000f883a 	mov	r7,zero
 8005570:	80079a40 	call	80079a4 <__multadd>
 8005574:	e009883a 	mov	r4,fp
 8005578:	100b883a 	mov	r5,r2
 800557c:	1029883a 	mov	r20,r2
 8005580:	80082200 	call	8008220 <__mcmp>
 8005584:	00bf820e 	bge	zero,r2,8005390 <__alt_data_end+0xf8005390>
 8005588:	00800c44 	movi	r2,49
 800558c:	b8800005 	stb	r2,0(r23)
 8005590:	d8800617 	ldw	r2,24(sp)
 8005594:	bd800044 	addi	r22,r23,1
 8005598:	10800044 	addi	r2,r2,1
 800559c:	d8800615 	stw	r2,24(sp)
 80055a0:	003f7f06 	br	80053a0 <__alt_data_end+0xf80053a0>
 80055a4:	dc000417 	ldw	r16,16(sp)
 80055a8:	003d6506 	br	8004b40 <__alt_data_end+0xf8004b40>
 80055ac:	9009883a 	mov	r4,r18
 80055b0:	800ad500 	call	800ad50 <__floatsidf>
 80055b4:	1009883a 	mov	r4,r2
 80055b8:	180b883a 	mov	r5,r3
 80055bc:	980d883a 	mov	r6,r19
 80055c0:	a00f883a 	mov	r7,r20
 80055c4:	800a6dc0 	call	800a6dc <__muldf3>
 80055c8:	1009883a 	mov	r4,r2
 80055cc:	180b883a 	mov	r5,r3
 80055d0:	000d883a 	mov	r6,zero
 80055d4:	01d00734 	movhi	r7,16412
 80055d8:	800a6280 	call	800a628 <__adddf3>
 80055dc:	057f3034 	movhi	r21,64704
 80055e0:	1025883a 	mov	r18,r2
 80055e4:	1d6b883a 	add	r21,r3,r21
 80055e8:	9809883a 	mov	r4,r19
 80055ec:	a00b883a 	mov	r5,r20
 80055f0:	000d883a 	mov	r6,zero
 80055f4:	01d00534 	movhi	r7,16404
 80055f8:	800a67c0 	call	800a67c <__subdf3>
 80055fc:	1009883a 	mov	r4,r2
 8005600:	180b883a 	mov	r5,r3
 8005604:	900d883a 	mov	r6,r18
 8005608:	a80f883a 	mov	r7,r21
 800560c:	1027883a 	mov	r19,r2
 8005610:	1829883a 	mov	r20,r3
 8005614:	800ac2c0 	call	800ac2c <__gtdf2>
 8005618:	00806616 	blt	zero,r2,80057b4 <_dtoa_r+0x12f8>
 800561c:	a9e0003c 	xorhi	r7,r21,32768
 8005620:	9809883a 	mov	r4,r19
 8005624:	a00b883a 	mov	r5,r20
 8005628:	900d883a 	mov	r6,r18
 800562c:	800acf40 	call	800acf4 <__ltdf2>
 8005630:	103d710e 	bge	r2,zero,8004bf8 <__alt_data_end+0xf8004bf8>
 8005634:	0029883a 	mov	r20,zero
 8005638:	002b883a 	mov	r21,zero
 800563c:	003f5406 	br	8005390 <__alt_data_end+0xf8005390>
 8005640:	d9800a17 	ldw	r6,40(sp)
 8005644:	e00b883a 	mov	r5,fp
 8005648:	8009883a 	mov	r4,r16
 800564c:	8007f980 	call	8007f98 <__pow5mult>
 8005650:	1039883a 	mov	fp,r2
 8005654:	003e2e06 	br	8004f10 <__alt_data_end+0xf8004f10>
 8005658:	d8000c15 	stw	zero,48(sp)
 800565c:	003f2006 	br	80052e0 <__alt_data_end+0xf80052e0>
 8005660:	00800044 	movi	r2,1
 8005664:	d8800c15 	stw	r2,48(sp)
 8005668:	003c5d06 	br	80047e0 <__alt_data_end+0xf80047e0>
 800566c:	d8c00a17 	ldw	r3,40(sp)
 8005670:	d9000b17 	ldw	r4,44(sp)
 8005674:	dcc00a15 	stw	r19,40(sp)
 8005678:	98c5c83a 	sub	r2,r19,r3
 800567c:	2089883a 	add	r4,r4,r2
 8005680:	d9000b15 	stw	r4,44(sp)
 8005684:	0027883a 	mov	r19,zero
 8005688:	003df206 	br	8004e54 <__alt_data_end+0xf8004e54>
 800568c:	d9000317 	ldw	r4,12(sp)
 8005690:	8829883a 	mov	r20,r17
 8005694:	04800084 	movi	r18,2
 8005698:	d9001015 	stw	r4,64(sp)
 800569c:	003c8106 	br	80048a4 <__alt_data_end+0xf80048a4>
 80056a0:	04800044 	movi	r18,1
 80056a4:	dc800e15 	stw	r18,56(sp)
 80056a8:	dc800915 	stw	r18,36(sp)
 80056ac:	dc802115 	stw	r18,132(sp)
 80056b0:	003f1206 	br	80052fc <__alt_data_end+0xf80052fc>
 80056b4:	d8800617 	ldw	r2,24(sp)
 80056b8:	00abc83a 	sub	r21,zero,r2
 80056bc:	a800a426 	beq	r21,zero,8005950 <_dtoa_r+0x1494>
 80056c0:	a88003cc 	andi	r2,r21,15
 80056c4:	100490fa 	slli	r2,r2,3
 80056c8:	00c20074 	movhi	r3,2049
 80056cc:	18fa1104 	addi	r3,r3,-6076
 80056d0:	d9000317 	ldw	r4,12(sp)
 80056d4:	1885883a 	add	r2,r3,r2
 80056d8:	11800017 	ldw	r6,0(r2)
 80056dc:	11c00117 	ldw	r7,4(r2)
 80056e0:	a82bd13a 	srai	r21,r21,4
 80056e4:	880b883a 	mov	r5,r17
 80056e8:	800a6dc0 	call	800a6dc <__muldf3>
 80056ec:	1027883a 	mov	r19,r2
 80056f0:	1829883a 	mov	r20,r3
 80056f4:	a800e826 	beq	r21,zero,8005a98 <_dtoa_r+0x15dc>
 80056f8:	05820074 	movhi	r22,2049
 80056fc:	b5ba0704 	addi	r22,r22,-6116
 8005700:	04800084 	movi	r18,2
 8005704:	a980004c 	andi	r6,r21,1
 8005708:	1009883a 	mov	r4,r2
 800570c:	a82bd07a 	srai	r21,r21,1
 8005710:	180b883a 	mov	r5,r3
 8005714:	30000426 	beq	r6,zero,8005728 <_dtoa_r+0x126c>
 8005718:	b1800017 	ldw	r6,0(r22)
 800571c:	b1c00117 	ldw	r7,4(r22)
 8005720:	94800044 	addi	r18,r18,1
 8005724:	800a6dc0 	call	800a6dc <__muldf3>
 8005728:	b5800204 	addi	r22,r22,8
 800572c:	a83ff51e 	bne	r21,zero,8005704 <__alt_data_end+0xf8005704>
 8005730:	1027883a 	mov	r19,r2
 8005734:	1829883a 	mov	r20,r3
 8005738:	003c7306 	br	8004908 <__alt_data_end+0xf8004908>
 800573c:	21000044 	addi	r4,r4,1
 8005740:	11000005 	stb	r4,0(r2)
 8005744:	003e5c06 	br	80050b8 <__alt_data_end+0xf80050b8>
 8005748:	a9400117 	ldw	r5,4(r21)
 800574c:	8009883a 	mov	r4,r16
 8005750:	80078d40 	call	80078d4 <_Balloc>
 8005754:	a9800417 	ldw	r6,16(r21)
 8005758:	11000304 	addi	r4,r2,12
 800575c:	a9400304 	addi	r5,r21,12
 8005760:	31800084 	addi	r6,r6,2
 8005764:	318d883a 	add	r6,r6,r6
 8005768:	318d883a 	add	r6,r6,r6
 800576c:	1023883a 	mov	r17,r2
 8005770:	800752c0 	call	800752c <memcpy>
 8005774:	8009883a 	mov	r4,r16
 8005778:	880b883a 	mov	r5,r17
 800577c:	01800044 	movi	r6,1
 8005780:	80080c40 	call	80080c4 <__lshift>
 8005784:	1027883a 	mov	r19,r2
 8005788:	003e8f06 	br	80051c8 <__alt_data_end+0xf80051c8>
 800578c:	b807883a 	mov	r3,r23
 8005790:	00800e44 	movi	r2,57
 8005794:	ddc00717 	ldw	r23,28(sp)
 8005798:	18809026 	beq	r3,r2,80059dc <_dtoa_r+0x1520>
 800579c:	18c00044 	addi	r3,r3,1
 80057a0:	003f2b06 	br	8005450 <__alt_data_end+0xf8005450>
 80057a4:	b807883a 	mov	r3,r23
 80057a8:	982b883a 	mov	r21,r19
 80057ac:	ddc00717 	ldw	r23,28(sp)
 80057b0:	003e2406 	br	8005044 <__alt_data_end+0xf8005044>
 80057b4:	0029883a 	mov	r20,zero
 80057b8:	002b883a 	mov	r21,zero
 80057bc:	003f7206 	br	8005588 <__alt_data_end+0xf8005588>
 80057c0:	593fffc4 	addi	r4,r11,-1
 80057c4:	200490fa 	slli	r2,r4,3
 80057c8:	00c20074 	movhi	r3,2049
 80057cc:	18fa1104 	addi	r3,r3,-6076
 80057d0:	d9001015 	stw	r4,64(sp)
 80057d4:	1885883a 	add	r2,r3,r2
 80057d8:	11000017 	ldw	r4,0(r2)
 80057dc:	11400117 	ldw	r5,4(r2)
 80057e0:	900d883a 	mov	r6,r18
 80057e4:	a80f883a 	mov	r7,r21
 80057e8:	dac01615 	stw	r11,88(sp)
 80057ec:	800a6dc0 	call	800a6dc <__muldf3>
 80057f0:	a00b883a 	mov	r5,r20
 80057f4:	9809883a 	mov	r4,r19
 80057f8:	d8c01215 	stw	r3,72(sp)
 80057fc:	d8801115 	stw	r2,68(sp)
 8005800:	800ae240 	call	800ae24 <__fixdfsi>
 8005804:	1009883a 	mov	r4,r2
 8005808:	1025883a 	mov	r18,r2
 800580c:	800ad500 	call	800ad50 <__floatsidf>
 8005810:	9809883a 	mov	r4,r19
 8005814:	a00b883a 	mov	r5,r20
 8005818:	100d883a 	mov	r6,r2
 800581c:	180f883a 	mov	r7,r3
 8005820:	94800c04 	addi	r18,r18,48
 8005824:	800a67c0 	call	800a67c <__subdf3>
 8005828:	bc800005 	stb	r18,0(r23)
 800582c:	dac01617 	ldw	r11,88(sp)
 8005830:	102b883a 	mov	r21,r2
 8005834:	00800044 	movi	r2,1
 8005838:	bd800044 	addi	r22,r23,1
 800583c:	1815883a 	mov	r10,r3
 8005840:	58802226 	beq	r11,r2,80058cc <_dtoa_r+0x1410>
 8005844:	bad7883a 	add	r11,r23,r11
 8005848:	dc001415 	stw	r16,80(sp)
 800584c:	a805883a 	mov	r2,r21
 8005850:	b027883a 	mov	r19,r22
 8005854:	5821883a 	mov	r16,r11
 8005858:	882b883a 	mov	r21,r17
 800585c:	000d883a 	mov	r6,zero
 8005860:	01d00934 	movhi	r7,16420
 8005864:	1009883a 	mov	r4,r2
 8005868:	180b883a 	mov	r5,r3
 800586c:	800a6dc0 	call	800a6dc <__muldf3>
 8005870:	180b883a 	mov	r5,r3
 8005874:	1009883a 	mov	r4,r2
 8005878:	1829883a 	mov	r20,r3
 800587c:	1023883a 	mov	r17,r2
 8005880:	800ae240 	call	800ae24 <__fixdfsi>
 8005884:	1009883a 	mov	r4,r2
 8005888:	1025883a 	mov	r18,r2
 800588c:	800ad500 	call	800ad50 <__floatsidf>
 8005890:	8809883a 	mov	r4,r17
 8005894:	a00b883a 	mov	r5,r20
 8005898:	100d883a 	mov	r6,r2
 800589c:	180f883a 	mov	r7,r3
 80058a0:	94800c04 	addi	r18,r18,48
 80058a4:	800a67c0 	call	800a67c <__subdf3>
 80058a8:	9cc00044 	addi	r19,r19,1
 80058ac:	9cbfffc5 	stb	r18,-1(r19)
 80058b0:	9c3fea1e 	bne	r19,r16,800585c <__alt_data_end+0xf800585c>
 80058b4:	1815883a 	mov	r10,r3
 80058b8:	d8c01017 	ldw	r3,64(sp)
 80058bc:	dc001417 	ldw	r16,80(sp)
 80058c0:	a823883a 	mov	r17,r21
 80058c4:	b0ed883a 	add	r22,r22,r3
 80058c8:	102b883a 	mov	r21,r2
 80058cc:	d9001117 	ldw	r4,68(sp)
 80058d0:	d9401217 	ldw	r5,72(sp)
 80058d4:	000d883a 	mov	r6,zero
 80058d8:	01cff834 	movhi	r7,16352
 80058dc:	da801515 	stw	r10,84(sp)
 80058e0:	800a6280 	call	800a628 <__adddf3>
 80058e4:	da801517 	ldw	r10,84(sp)
 80058e8:	1009883a 	mov	r4,r2
 80058ec:	180b883a 	mov	r5,r3
 80058f0:	500f883a 	mov	r7,r10
 80058f4:	a80d883a 	mov	r6,r21
 80058f8:	800acf40 	call	800acf4 <__ltdf2>
 80058fc:	da801517 	ldw	r10,84(sp)
 8005900:	10003b0e 	bge	r2,zero,80059f0 <_dtoa_r+0x1534>
 8005904:	d9c01317 	ldw	r7,76(sp)
 8005908:	b53fffc3 	ldbu	r20,-1(r22)
 800590c:	d9c00615 	stw	r7,24(sp)
 8005910:	003d3106 	br	8004dd8 <__alt_data_end+0xf8004dd8>
 8005914:	d8800817 	ldw	r2,32(sp)
 8005918:	11e5c83a 	sub	r18,r2,r7
 800591c:	0005883a 	mov	r2,zero
 8005920:	003d5006 	br	8004e64 <__alt_data_end+0xf8004e64>
 8005924:	05800044 	movi	r22,1
 8005928:	003dc406 	br	800503c <__alt_data_end+0xf800503c>
 800592c:	a5000044 	addi	r20,r20,1
 8005930:	15000005 	stb	r20,0(r2)
 8005934:	003c8206 	br	8004b40 <__alt_data_end+0xf8004b40>
 8005938:	d8800217 	ldw	r2,8(sp)
 800593c:	00c00d84 	movi	r3,54
 8005940:	dcc00a17 	ldw	r19,40(sp)
 8005944:	1885c83a 	sub	r2,r3,r2
 8005948:	dc800817 	ldw	r18,32(sp)
 800594c:	003d4506 	br	8004e64 <__alt_data_end+0xf8004e64>
 8005950:	dcc00317 	ldw	r19,12(sp)
 8005954:	8829883a 	mov	r20,r17
 8005958:	04800084 	movi	r18,2
 800595c:	003bea06 	br	8004908 <__alt_data_end+0xf8004908>
 8005960:	d9000917 	ldw	r4,36(sp)
 8005964:	203f1126 	beq	r4,zero,80055ac <__alt_data_end+0xf80055ac>
 8005968:	d9c00e17 	ldw	r7,56(sp)
 800596c:	01fca20e 	bge	zero,r7,8004bf8 <__alt_data_end+0xf8004bf8>
 8005970:	a00b883a 	mov	r5,r20
 8005974:	9809883a 	mov	r4,r19
 8005978:	000d883a 	mov	r6,zero
 800597c:	01d00934 	movhi	r7,16420
 8005980:	800a6dc0 	call	800a6dc <__muldf3>
 8005984:	91000044 	addi	r4,r18,1
 8005988:	1027883a 	mov	r19,r2
 800598c:	1829883a 	mov	r20,r3
 8005990:	800ad500 	call	800ad50 <__floatsidf>
 8005994:	9809883a 	mov	r4,r19
 8005998:	a00b883a 	mov	r5,r20
 800599c:	100d883a 	mov	r6,r2
 80059a0:	180f883a 	mov	r7,r3
 80059a4:	800a6dc0 	call	800a6dc <__muldf3>
 80059a8:	1009883a 	mov	r4,r2
 80059ac:	180b883a 	mov	r5,r3
 80059b0:	000d883a 	mov	r6,zero
 80059b4:	01d00734 	movhi	r7,16412
 80059b8:	800a6280 	call	800a628 <__adddf3>
 80059bc:	1025883a 	mov	r18,r2
 80059c0:	d8800617 	ldw	r2,24(sp)
 80059c4:	057f3034 	movhi	r21,64704
 80059c8:	1d6b883a 	add	r21,r3,r21
 80059cc:	10bfffc4 	addi	r2,r2,-1
 80059d0:	d8801315 	stw	r2,76(sp)
 80059d4:	dac00e17 	ldw	r11,56(sp)
 80059d8:	003be706 	br	8004978 <__alt_data_end+0xf8004978>
 80059dc:	01000e44 	movi	r4,57
 80059e0:	91000005 	stb	r4,0(r18)
 80059e4:	95800044 	addi	r22,r18,1
 80059e8:	982b883a 	mov	r21,r19
 80059ec:	003da106 	br	8005074 <__alt_data_end+0xf8005074>
 80059f0:	d9801117 	ldw	r6,68(sp)
 80059f4:	d9c01217 	ldw	r7,72(sp)
 80059f8:	0009883a 	mov	r4,zero
 80059fc:	014ff834 	movhi	r5,16352
 8005a00:	da801515 	stw	r10,84(sp)
 8005a04:	800a67c0 	call	800a67c <__subdf3>
 8005a08:	da801517 	ldw	r10,84(sp)
 8005a0c:	1009883a 	mov	r4,r2
 8005a10:	180b883a 	mov	r5,r3
 8005a14:	a80d883a 	mov	r6,r21
 8005a18:	500f883a 	mov	r7,r10
 8005a1c:	800ac2c0 	call	800ac2c <__gtdf2>
 8005a20:	00bc750e 	bge	zero,r2,8004bf8 <__alt_data_end+0xf8004bf8>
 8005a24:	01000c04 	movi	r4,48
 8005a28:	00000106 	br	8005a30 <_dtoa_r+0x1574>
 8005a2c:	102d883a 	mov	r22,r2
 8005a30:	b0bfffc4 	addi	r2,r22,-1
 8005a34:	10c00007 	ldb	r3,0(r2)
 8005a38:	193ffc26 	beq	r3,r4,8005a2c <__alt_data_end+0xf8005a2c>
 8005a3c:	d8801317 	ldw	r2,76(sp)
 8005a40:	d8800615 	stw	r2,24(sp)
 8005a44:	003c3e06 	br	8004b40 <__alt_data_end+0xf8004b40>
 8005a48:	d9001317 	ldw	r4,76(sp)
 8005a4c:	df001117 	ldw	fp,68(sp)
 8005a50:	d9000615 	stw	r4,24(sp)
 8005a54:	003ce006 	br	8004dd8 <__alt_data_end+0xf8004dd8>
 8005a58:	df001117 	ldw	fp,68(sp)
 8005a5c:	dc401217 	ldw	r17,72(sp)
 8005a60:	003c6506 	br	8004bf8 <__alt_data_end+0xf8004bf8>
 8005a64:	103e7a1e 	bne	r2,zero,8005450 <__alt_data_end+0xf8005450>
 8005a68:	1880004c 	andi	r2,r3,1
 8005a6c:	103e7826 	beq	r2,zero,8005450 <__alt_data_end+0xf8005450>
 8005a70:	003e7406 	br	8005444 <__alt_data_end+0xf8005444>
 8005a74:	8009883a 	mov	r4,r16
 8005a78:	a80b883a 	mov	r5,r21
 8005a7c:	01800284 	movi	r6,10
 8005a80:	000f883a 	mov	r7,zero
 8005a84:	80079a40 	call	80079a4 <__multadd>
 8005a88:	d9000e17 	ldw	r4,56(sp)
 8005a8c:	102b883a 	mov	r21,r2
 8005a90:	d9000915 	stw	r4,36(sp)
 8005a94:	003d5106 	br	8004fdc <__alt_data_end+0xf8004fdc>
 8005a98:	04800084 	movi	r18,2
 8005a9c:	003b9a06 	br	8004908 <__alt_data_end+0xf8004908>
 8005aa0:	d8c01317 	ldw	r3,76(sp)
 8005aa4:	d8c00615 	stw	r3,24(sp)
 8005aa8:	003ccb06 	br	8004dd8 <__alt_data_end+0xf8004dd8>
 8005aac:	d8c01317 	ldw	r3,76(sp)
 8005ab0:	d8c00615 	stw	r3,24(sp)
 8005ab4:	003c2206 	br	8004b40 <__alt_data_end+0xf8004b40>
 8005ab8:	20fd3826 	beq	r4,r3,8004f9c <__alt_data_end+0xf8004f9c>
 8005abc:	00c00f04 	movi	r3,60
 8005ac0:	1885c83a 	sub	r2,r3,r2
 8005ac4:	003da906 	br	800516c <__alt_data_end+0xf800516c>
 8005ac8:	000b883a 	mov	r5,zero
 8005acc:	003b5406 	br	8004820 <__alt_data_end+0xf8004820>
 8005ad0:	04c00044 	movi	r19,1
 8005ad4:	003b3b06 	br	80047c4 <__alt_data_end+0xf80047c4>

08005ad8 <_fflush_r>:
 8005ad8:	defffb04 	addi	sp,sp,-20
 8005adc:	dcc00315 	stw	r19,12(sp)
 8005ae0:	dc400115 	stw	r17,4(sp)
 8005ae4:	dfc00415 	stw	ra,16(sp)
 8005ae8:	dc800215 	stw	r18,8(sp)
 8005aec:	dc000015 	stw	r16,0(sp)
 8005af0:	2027883a 	mov	r19,r4
 8005af4:	2823883a 	mov	r17,r5
 8005af8:	20000226 	beq	r4,zero,8005b04 <_fflush_r+0x2c>
 8005afc:	20800e17 	ldw	r2,56(r4)
 8005b00:	10005726 	beq	r2,zero,8005c60 <_fflush_r+0x188>
 8005b04:	8880030b 	ldhu	r2,12(r17)
 8005b08:	10c0020c 	andi	r3,r2,8
 8005b0c:	18ffffcc 	andi	r3,r3,65535
 8005b10:	18e0001c 	xori	r3,r3,32768
 8005b14:	18e00004 	addi	r3,r3,-32768
 8005b18:	1800311e 	bne	r3,zero,8005be0 <_fflush_r+0x108>
 8005b1c:	89000117 	ldw	r4,4(r17)
 8005b20:	10c20014 	ori	r3,r2,2048
 8005b24:	88c0030d 	sth	r3,12(r17)
 8005b28:	180b883a 	mov	r5,r3
 8005b2c:	0100520e 	bge	zero,r4,8005c78 <_fflush_r+0x1a0>
 8005b30:	88c00a17 	ldw	r3,40(r17)
 8005b34:	18002226 	beq	r3,zero,8005bc0 <_fflush_r+0xe8>
 8005b38:	1084000c 	andi	r2,r2,4096
 8005b3c:	10bfffcc 	andi	r2,r2,65535
 8005b40:	10a0001c 	xori	r2,r2,32768
 8005b44:	10a00004 	addi	r2,r2,-32768
 8005b48:	10004e26 	beq	r2,zero,8005c84 <_fflush_r+0x1ac>
 8005b4c:	8c001417 	ldw	r16,80(r17)
 8005b50:	2940010c 	andi	r5,r5,4
 8005b54:	297fffcc 	andi	r5,r5,65535
 8005b58:	2960001c 	xori	r5,r5,32768
 8005b5c:	29600004 	addi	r5,r5,-32768
 8005b60:	28000626 	beq	r5,zero,8005b7c <_fflush_r+0xa4>
 8005b64:	89000117 	ldw	r4,4(r17)
 8005b68:	88800c17 	ldw	r2,48(r17)
 8005b6c:	8121c83a 	sub	r16,r16,r4
 8005b70:	10000226 	beq	r2,zero,8005b7c <_fflush_r+0xa4>
 8005b74:	88800f17 	ldw	r2,60(r17)
 8005b78:	80a1c83a 	sub	r16,r16,r2
 8005b7c:	89400717 	ldw	r5,28(r17)
 8005b80:	9809883a 	mov	r4,r19
 8005b84:	800d883a 	mov	r6,r16
 8005b88:	000f883a 	mov	r7,zero
 8005b8c:	183ee83a 	callr	r3
 8005b90:	8080281e 	bne	r16,r2,8005c34 <_fflush_r+0x15c>
 8005b94:	8880030b 	ldhu	r2,12(r17)
 8005b98:	88c00417 	ldw	r3,16(r17)
 8005b9c:	88000115 	stw	zero,4(r17)
 8005ba0:	113dffcc 	andi	r4,r2,63487
 8005ba4:	1084000c 	andi	r2,r2,4096
 8005ba8:	10bfffcc 	andi	r2,r2,65535
 8005bac:	10a0001c 	xori	r2,r2,32768
 8005bb0:	8900030d 	sth	r4,12(r17)
 8005bb4:	88c00015 	stw	r3,0(r17)
 8005bb8:	10a00004 	addi	r2,r2,-32768
 8005bbc:	10002c1e 	bne	r2,zero,8005c70 <_fflush_r+0x198>
 8005bc0:	0005883a 	mov	r2,zero
 8005bc4:	dfc00417 	ldw	ra,16(sp)
 8005bc8:	dcc00317 	ldw	r19,12(sp)
 8005bcc:	dc800217 	ldw	r18,8(sp)
 8005bd0:	dc400117 	ldw	r17,4(sp)
 8005bd4:	dc000017 	ldw	r16,0(sp)
 8005bd8:	dec00504 	addi	sp,sp,20
 8005bdc:	f800283a 	ret
 8005be0:	8c800417 	ldw	r18,16(r17)
 8005be4:	903ff626 	beq	r18,zero,8005bc0 <__alt_data_end+0xf8005bc0>
 8005be8:	8c000017 	ldw	r16,0(r17)
 8005bec:	108000cc 	andi	r2,r2,3
 8005bf0:	8c800015 	stw	r18,0(r17)
 8005bf4:	84a1c83a 	sub	r16,r16,r18
 8005bf8:	10001b1e 	bne	r2,zero,8005c68 <_fflush_r+0x190>
 8005bfc:	88800517 	ldw	r2,20(r17)
 8005c00:	88800215 	stw	r2,8(r17)
 8005c04:	04000316 	blt	zero,r16,8005c14 <_fflush_r+0x13c>
 8005c08:	003fed06 	br	8005bc0 <__alt_data_end+0xf8005bc0>
 8005c0c:	90a5883a 	add	r18,r18,r2
 8005c10:	043feb0e 	bge	zero,r16,8005bc0 <__alt_data_end+0xf8005bc0>
 8005c14:	88800917 	ldw	r2,36(r17)
 8005c18:	89400717 	ldw	r5,28(r17)
 8005c1c:	800f883a 	mov	r7,r16
 8005c20:	900d883a 	mov	r6,r18
 8005c24:	9809883a 	mov	r4,r19
 8005c28:	103ee83a 	callr	r2
 8005c2c:	80a1c83a 	sub	r16,r16,r2
 8005c30:	00bff616 	blt	zero,r2,8005c0c <__alt_data_end+0xf8005c0c>
 8005c34:	88c0030b 	ldhu	r3,12(r17)
 8005c38:	00bfffc4 	movi	r2,-1
 8005c3c:	18c01014 	ori	r3,r3,64
 8005c40:	88c0030d 	sth	r3,12(r17)
 8005c44:	dfc00417 	ldw	ra,16(sp)
 8005c48:	dcc00317 	ldw	r19,12(sp)
 8005c4c:	dc800217 	ldw	r18,8(sp)
 8005c50:	dc400117 	ldw	r17,4(sp)
 8005c54:	dc000017 	ldw	r16,0(sp)
 8005c58:	dec00504 	addi	sp,sp,20
 8005c5c:	f800283a 	ret
 8005c60:	8005d940 	call	8005d94 <__sinit>
 8005c64:	003fa706 	br	8005b04 <__alt_data_end+0xf8005b04>
 8005c68:	0005883a 	mov	r2,zero
 8005c6c:	003fe406 	br	8005c00 <__alt_data_end+0xf8005c00>
 8005c70:	8c001415 	stw	r16,80(r17)
 8005c74:	003fd206 	br	8005bc0 <__alt_data_end+0xf8005bc0>
 8005c78:	88c00f17 	ldw	r3,60(r17)
 8005c7c:	00ffac16 	blt	zero,r3,8005b30 <__alt_data_end+0xf8005b30>
 8005c80:	003fcf06 	br	8005bc0 <__alt_data_end+0xf8005bc0>
 8005c84:	89400717 	ldw	r5,28(r17)
 8005c88:	9809883a 	mov	r4,r19
 8005c8c:	000d883a 	mov	r6,zero
 8005c90:	01c00044 	movi	r7,1
 8005c94:	183ee83a 	callr	r3
 8005c98:	1021883a 	mov	r16,r2
 8005c9c:	00bfffc4 	movi	r2,-1
 8005ca0:	80800326 	beq	r16,r2,8005cb0 <_fflush_r+0x1d8>
 8005ca4:	8940030b 	ldhu	r5,12(r17)
 8005ca8:	88c00a17 	ldw	r3,40(r17)
 8005cac:	003fa806 	br	8005b50 <__alt_data_end+0xf8005b50>
 8005cb0:	98c00017 	ldw	r3,0(r19)
 8005cb4:	00800744 	movi	r2,29
 8005cb8:	18bfde1e 	bne	r3,r2,8005c34 <__alt_data_end+0xf8005c34>
 8005cbc:	003fc006 	br	8005bc0 <__alt_data_end+0xf8005bc0>

08005cc0 <fflush>:
 8005cc0:	200b883a 	mov	r5,r4
 8005cc4:	20000426 	beq	r4,zero,8005cd8 <fflush+0x18>
 8005cc8:	00820074 	movhi	r2,2049
 8005ccc:	10811e04 	addi	r2,r2,1144
 8005cd0:	11000017 	ldw	r4,0(r2)
 8005cd4:	8005ad81 	jmpi	8005ad8 <_fflush_r>
 8005cd8:	00820074 	movhi	r2,2049
 8005cdc:	10811d04 	addi	r2,r2,1140
 8005ce0:	11000017 	ldw	r4,0(r2)
 8005ce4:	01420034 	movhi	r5,2048
 8005ce8:	2956b604 	addi	r5,r5,23256
 8005cec:	80069741 	jmpi	8006974 <_fwalk_reent>

08005cf0 <__fp_lock>:
 8005cf0:	0005883a 	mov	r2,zero
 8005cf4:	f800283a 	ret

08005cf8 <__fp_unlock>:
 8005cf8:	0005883a 	mov	r2,zero
 8005cfc:	f800283a 	ret

08005d00 <_cleanup_r>:
 8005d00:	01420074 	movhi	r5,2049
 8005d04:	29652904 	addi	r5,r5,-27484
 8005d08:	80068cc1 	jmpi	80068cc <_fwalk>

08005d0c <__sfmoreglue>:
 8005d0c:	defffc04 	addi	sp,sp,-16
 8005d10:	dc800215 	stw	r18,8(sp)
 8005d14:	2825883a 	mov	r18,r5
 8005d18:	dc000015 	stw	r16,0(sp)
 8005d1c:	01401704 	movi	r5,92
 8005d20:	2021883a 	mov	r16,r4
 8005d24:	9009883a 	mov	r4,r18
 8005d28:	dfc00315 	stw	ra,12(sp)
 8005d2c:	dc400115 	stw	r17,4(sp)
 8005d30:	800b1340 	call	800b134 <__mulsi3>
 8005d34:	8009883a 	mov	r4,r16
 8005d38:	11400304 	addi	r5,r2,12
 8005d3c:	1023883a 	mov	r17,r2
 8005d40:	8006cb00 	call	8006cb0 <_malloc_r>
 8005d44:	1021883a 	mov	r16,r2
 8005d48:	10000726 	beq	r2,zero,8005d68 <__sfmoreglue+0x5c>
 8005d4c:	11000304 	addi	r4,r2,12
 8005d50:	10000015 	stw	zero,0(r2)
 8005d54:	14800115 	stw	r18,4(r2)
 8005d58:	11000215 	stw	r4,8(r2)
 8005d5c:	000b883a 	mov	r5,zero
 8005d60:	880d883a 	mov	r6,r17
 8005d64:	80077f80 	call	80077f8 <memset>
 8005d68:	8005883a 	mov	r2,r16
 8005d6c:	dfc00317 	ldw	ra,12(sp)
 8005d70:	dc800217 	ldw	r18,8(sp)
 8005d74:	dc400117 	ldw	r17,4(sp)
 8005d78:	dc000017 	ldw	r16,0(sp)
 8005d7c:	dec00404 	addi	sp,sp,16
 8005d80:	f800283a 	ret

08005d84 <_cleanup>:
 8005d84:	00820074 	movhi	r2,2049
 8005d88:	10811d04 	addi	r2,r2,1140
 8005d8c:	11000017 	ldw	r4,0(r2)
 8005d90:	8005d001 	jmpi	8005d00 <_cleanup_r>

08005d94 <__sinit>:
 8005d94:	20800e17 	ldw	r2,56(r4)
 8005d98:	1000401e 	bne	r2,zero,8005e9c <__sinit+0x108>
 8005d9c:	21400117 	ldw	r5,4(r4)
 8005da0:	01820034 	movhi	r6,2048
 8005da4:	31974004 	addi	r6,r6,23808
 8005da8:	20c00217 	ldw	r3,8(r4)
 8005dac:	21800f15 	stw	r6,60(r4)
 8005db0:	2080bb04 	addi	r2,r4,748
 8005db4:	02400044 	movi	r9,1
 8005db8:	018000c4 	movi	r6,3
 8005dbc:	2180b915 	stw	r6,740(r4)
 8005dc0:	2080ba15 	stw	r2,744(r4)
 8005dc4:	22400e15 	stw	r9,56(r4)
 8005dc8:	20800317 	ldw	r2,12(r4)
 8005dcc:	2000b815 	stw	zero,736(r4)
 8005dd0:	02020074 	movhi	r8,2049
 8005dd4:	4223fa04 	addi	r8,r8,-28696
 8005dd8:	01c20074 	movhi	r7,2049
 8005ddc:	39e40f04 	addi	r7,r7,-28612
 8005de0:	01820074 	movhi	r6,2049
 8005de4:	31a43104 	addi	r6,r6,-28476
 8005de8:	01020074 	movhi	r4,2049
 8005dec:	21244804 	addi	r4,r4,-28384
 8005df0:	02800104 	movi	r10,4
 8005df4:	28000015 	stw	zero,0(r5)
 8005df8:	28000115 	stw	zero,4(r5)
 8005dfc:	28000215 	stw	zero,8(r5)
 8005e00:	2a80030d 	sth	r10,12(r5)
 8005e04:	2800038d 	sth	zero,14(r5)
 8005e08:	28000415 	stw	zero,16(r5)
 8005e0c:	28000515 	stw	zero,20(r5)
 8005e10:	28000615 	stw	zero,24(r5)
 8005e14:	29400715 	stw	r5,28(r5)
 8005e18:	2a000815 	stw	r8,32(r5)
 8005e1c:	29c00915 	stw	r7,36(r5)
 8005e20:	29800a15 	stw	r6,40(r5)
 8005e24:	29000b15 	stw	r4,44(r5)
 8005e28:	01400284 	movi	r5,10
 8005e2c:	18000015 	stw	zero,0(r3)
 8005e30:	18000115 	stw	zero,4(r3)
 8005e34:	18000215 	stw	zero,8(r3)
 8005e38:	1940030d 	sth	r5,12(r3)
 8005e3c:	1a40038d 	sth	r9,14(r3)
 8005e40:	18000415 	stw	zero,16(r3)
 8005e44:	18000515 	stw	zero,20(r3)
 8005e48:	18000615 	stw	zero,24(r3)
 8005e4c:	18c00715 	stw	r3,28(r3)
 8005e50:	1a000815 	stw	r8,32(r3)
 8005e54:	19c00915 	stw	r7,36(r3)
 8005e58:	19800a15 	stw	r6,40(r3)
 8005e5c:	19000b15 	stw	r4,44(r3)
 8005e60:	00c00484 	movi	r3,18
 8005e64:	10c0030d 	sth	r3,12(r2)
 8005e68:	00c00084 	movi	r3,2
 8005e6c:	10000015 	stw	zero,0(r2)
 8005e70:	10000115 	stw	zero,4(r2)
 8005e74:	10000215 	stw	zero,8(r2)
 8005e78:	10c0038d 	sth	r3,14(r2)
 8005e7c:	10000415 	stw	zero,16(r2)
 8005e80:	10000515 	stw	zero,20(r2)
 8005e84:	10000615 	stw	zero,24(r2)
 8005e88:	10800715 	stw	r2,28(r2)
 8005e8c:	12000815 	stw	r8,32(r2)
 8005e90:	11c00915 	stw	r7,36(r2)
 8005e94:	11800a15 	stw	r6,40(r2)
 8005e98:	11000b15 	stw	r4,44(r2)
 8005e9c:	f800283a 	ret

08005ea0 <__sfp>:
 8005ea0:	defffc04 	addi	sp,sp,-16
 8005ea4:	00820074 	movhi	r2,2049
 8005ea8:	10811d04 	addi	r2,r2,1140
 8005eac:	dc400115 	stw	r17,4(sp)
 8005eb0:	14400017 	ldw	r17,0(r2)
 8005eb4:	dc800215 	stw	r18,8(sp)
 8005eb8:	dfc00315 	stw	ra,12(sp)
 8005ebc:	88800e17 	ldw	r2,56(r17)
 8005ec0:	dc000015 	stw	r16,0(sp)
 8005ec4:	2025883a 	mov	r18,r4
 8005ec8:	10002826 	beq	r2,zero,8005f6c <__sfp+0xcc>
 8005ecc:	8c40b804 	addi	r17,r17,736
 8005ed0:	043fffc4 	movi	r16,-1
 8005ed4:	89400117 	ldw	r5,4(r17)
 8005ed8:	88800217 	ldw	r2,8(r17)
 8005edc:	297fffc4 	addi	r5,r5,-1
 8005ee0:	28000a16 	blt	r5,zero,8005f0c <__sfp+0x6c>
 8005ee4:	10c0030f 	ldh	r3,12(r2)
 8005ee8:	18000c26 	beq	r3,zero,8005f1c <__sfp+0x7c>
 8005eec:	10c01a04 	addi	r3,r2,104
 8005ef0:	00000206 	br	8005efc <__sfp+0x5c>
 8005ef4:	19bfe90f 	ldh	r6,-92(r3)
 8005ef8:	30000826 	beq	r6,zero,8005f1c <__sfp+0x7c>
 8005efc:	297fffc4 	addi	r5,r5,-1
 8005f00:	18bffd04 	addi	r2,r3,-12
 8005f04:	18c01704 	addi	r3,r3,92
 8005f08:	2c3ffa1e 	bne	r5,r16,8005ef4 <__alt_data_end+0xf8005ef4>
 8005f0c:	88800017 	ldw	r2,0(r17)
 8005f10:	10001926 	beq	r2,zero,8005f78 <__sfp+0xd8>
 8005f14:	1023883a 	mov	r17,r2
 8005f18:	003fee06 	br	8005ed4 <__alt_data_end+0xf8005ed4>
 8005f1c:	00ffffc4 	movi	r3,-1
 8005f20:	10c0038d 	sth	r3,14(r2)
 8005f24:	00c00044 	movi	r3,1
 8005f28:	10c0030d 	sth	r3,12(r2)
 8005f2c:	10000015 	stw	zero,0(r2)
 8005f30:	10000215 	stw	zero,8(r2)
 8005f34:	10000115 	stw	zero,4(r2)
 8005f38:	10000415 	stw	zero,16(r2)
 8005f3c:	10000515 	stw	zero,20(r2)
 8005f40:	10000615 	stw	zero,24(r2)
 8005f44:	10000c15 	stw	zero,48(r2)
 8005f48:	10000d15 	stw	zero,52(r2)
 8005f4c:	10001115 	stw	zero,68(r2)
 8005f50:	10001215 	stw	zero,72(r2)
 8005f54:	dfc00317 	ldw	ra,12(sp)
 8005f58:	dc800217 	ldw	r18,8(sp)
 8005f5c:	dc400117 	ldw	r17,4(sp)
 8005f60:	dc000017 	ldw	r16,0(sp)
 8005f64:	dec00404 	addi	sp,sp,16
 8005f68:	f800283a 	ret
 8005f6c:	8809883a 	mov	r4,r17
 8005f70:	8005d940 	call	8005d94 <__sinit>
 8005f74:	003fd506 	br	8005ecc <__alt_data_end+0xf8005ecc>
 8005f78:	9009883a 	mov	r4,r18
 8005f7c:	01400104 	movi	r5,4
 8005f80:	8005d0c0 	call	8005d0c <__sfmoreglue>
 8005f84:	88800015 	stw	r2,0(r17)
 8005f88:	103fe21e 	bne	r2,zero,8005f14 <__alt_data_end+0xf8005f14>
 8005f8c:	00800304 	movi	r2,12
 8005f90:	90800015 	stw	r2,0(r18)
 8005f94:	0005883a 	mov	r2,zero
 8005f98:	003fee06 	br	8005f54 <__alt_data_end+0xf8005f54>

08005f9c <__sfp_lock_acquire>:
 8005f9c:	f800283a 	ret

08005fa0 <__sfp_lock_release>:
 8005fa0:	f800283a 	ret

08005fa4 <__sinit_lock_acquire>:
 8005fa4:	f800283a 	ret

08005fa8 <__sinit_lock_release>:
 8005fa8:	f800283a 	ret

08005fac <__fp_lock_all>:
 8005fac:	00820074 	movhi	r2,2049
 8005fb0:	10811e04 	addi	r2,r2,1144
 8005fb4:	11000017 	ldw	r4,0(r2)
 8005fb8:	01420034 	movhi	r5,2048
 8005fbc:	29573c04 	addi	r5,r5,23792
 8005fc0:	80068cc1 	jmpi	80068cc <_fwalk>

08005fc4 <__fp_unlock_all>:
 8005fc4:	00820074 	movhi	r2,2049
 8005fc8:	10811e04 	addi	r2,r2,1144
 8005fcc:	11000017 	ldw	r4,0(r2)
 8005fd0:	01420034 	movhi	r5,2048
 8005fd4:	29573e04 	addi	r5,r5,23800
 8005fd8:	80068cc1 	jmpi	80068cc <_fwalk>

08005fdc <_malloc_trim_r>:
 8005fdc:	defffb04 	addi	sp,sp,-20
 8005fe0:	dcc00315 	stw	r19,12(sp)
 8005fe4:	dc800215 	stw	r18,8(sp)
 8005fe8:	dc400115 	stw	r17,4(sp)
 8005fec:	dc000015 	stw	r16,0(sp)
 8005ff0:	2827883a 	mov	r19,r5
 8005ff4:	dfc00415 	stw	ra,16(sp)
 8005ff8:	04420074 	movhi	r17,2049
 8005ffc:	8c7b9904 	addi	r17,r17,-4508
 8006000:	2021883a 	mov	r16,r4
 8006004:	800bd5c0 	call	800bd5c <__malloc_lock>
 8006008:	88800217 	ldw	r2,8(r17)
 800600c:	14800117 	ldw	r18,4(r2)
 8006010:	00bfff04 	movi	r2,-4
 8006014:	90a4703a 	and	r18,r18,r2
 8006018:	9083fbc4 	addi	r2,r18,4079
 800601c:	14e7c83a 	sub	r19,r2,r19
 8006020:	9826d33a 	srli	r19,r19,12
 8006024:	0083ffc4 	movi	r2,4095
 8006028:	9cffffc4 	addi	r19,r19,-1
 800602c:	9826933a 	slli	r19,r19,12
 8006030:	14c0060e 	bge	r2,r19,800604c <_malloc_trim_r+0x70>
 8006034:	8009883a 	mov	r4,r16
 8006038:	000b883a 	mov	r5,zero
 800603c:	8008f840 	call	8008f84 <_sbrk_r>
 8006040:	88c00217 	ldw	r3,8(r17)
 8006044:	1c87883a 	add	r3,r3,r18
 8006048:	10c00a26 	beq	r2,r3,8006074 <_malloc_trim_r+0x98>
 800604c:	8009883a 	mov	r4,r16
 8006050:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8006054:	0005883a 	mov	r2,zero
 8006058:	dfc00417 	ldw	ra,16(sp)
 800605c:	dcc00317 	ldw	r19,12(sp)
 8006060:	dc800217 	ldw	r18,8(sp)
 8006064:	dc400117 	ldw	r17,4(sp)
 8006068:	dc000017 	ldw	r16,0(sp)
 800606c:	dec00504 	addi	sp,sp,20
 8006070:	f800283a 	ret
 8006074:	8009883a 	mov	r4,r16
 8006078:	04cbc83a 	sub	r5,zero,r19
 800607c:	8008f840 	call	8008f84 <_sbrk_r>
 8006080:	00ffffc4 	movi	r3,-1
 8006084:	10c01326 	beq	r2,r3,80060d4 <_malloc_trim_r+0xf8>
 8006088:	00820074 	movhi	r2,2049
 800608c:	1087d004 	addi	r2,r2,8000
 8006090:	11000017 	ldw	r4,0(r2)
 8006094:	88c00217 	ldw	r3,8(r17)
 8006098:	94e5c83a 	sub	r18,r18,r19
 800609c:	94800054 	ori	r18,r18,1
 80060a0:	24e7c83a 	sub	r19,r4,r19
 80060a4:	1c800115 	stw	r18,4(r3)
 80060a8:	8009883a 	mov	r4,r16
 80060ac:	14c00015 	stw	r19,0(r2)
 80060b0:	800bd7c0 	call	800bd7c <__malloc_unlock>
 80060b4:	00800044 	movi	r2,1
 80060b8:	dfc00417 	ldw	ra,16(sp)
 80060bc:	dcc00317 	ldw	r19,12(sp)
 80060c0:	dc800217 	ldw	r18,8(sp)
 80060c4:	dc400117 	ldw	r17,4(sp)
 80060c8:	dc000017 	ldw	r16,0(sp)
 80060cc:	dec00504 	addi	sp,sp,20
 80060d0:	f800283a 	ret
 80060d4:	8009883a 	mov	r4,r16
 80060d8:	000b883a 	mov	r5,zero
 80060dc:	8008f840 	call	8008f84 <_sbrk_r>
 80060e0:	88c00217 	ldw	r3,8(r17)
 80060e4:	014003c4 	movi	r5,15
 80060e8:	10c9c83a 	sub	r4,r2,r3
 80060ec:	293fd70e 	bge	r5,r4,800604c <__alt_data_end+0xf800604c>
 80060f0:	01420074 	movhi	r5,2049
 80060f4:	29412004 	addi	r5,r5,1152
 80060f8:	29400017 	ldw	r5,0(r5)
 80060fc:	21000054 	ori	r4,r4,1
 8006100:	19000115 	stw	r4,4(r3)
 8006104:	1145c83a 	sub	r2,r2,r5
 8006108:	01420074 	movhi	r5,2049
 800610c:	2947d004 	addi	r5,r5,8000
 8006110:	28800015 	stw	r2,0(r5)
 8006114:	003fcd06 	br	800604c <__alt_data_end+0xf800604c>

08006118 <_free_r>:
 8006118:	defffd04 	addi	sp,sp,-12
 800611c:	dc400115 	stw	r17,4(sp)
 8006120:	dc000015 	stw	r16,0(sp)
 8006124:	dfc00215 	stw	ra,8(sp)
 8006128:	2821883a 	mov	r16,r5
 800612c:	2023883a 	mov	r17,r4
 8006130:	28004b26 	beq	r5,zero,8006260 <_free_r+0x148>
 8006134:	800bd5c0 	call	800bd5c <__malloc_lock>
 8006138:	823fff17 	ldw	r8,-4(r16)
 800613c:	00bfff84 	movi	r2,-2
 8006140:	81bffe04 	addi	r6,r16,-8
 8006144:	4084703a 	and	r2,r8,r2
 8006148:	3087883a 	add	r3,r6,r2
 800614c:	01420074 	movhi	r5,2049
 8006150:	297b9904 	addi	r5,r5,-4508
 8006154:	1a400117 	ldw	r9,4(r3)
 8006158:	29000217 	ldw	r4,8(r5)
 800615c:	01ffff04 	movi	r7,-4
 8006160:	49ce703a 	and	r7,r9,r7
 8006164:	20c06526 	beq	r4,r3,80062fc <_free_r+0x1e4>
 8006168:	19c00115 	stw	r7,4(r3)
 800616c:	4200004c 	andi	r8,r8,1
 8006170:	40003026 	beq	r8,zero,8006234 <_free_r+0x11c>
 8006174:	0009883a 	mov	r4,zero
 8006178:	19d1883a 	add	r8,r3,r7
 800617c:	42000117 	ldw	r8,4(r8)
 8006180:	4200004c 	andi	r8,r8,1
 8006184:	4000061e 	bne	r8,zero,80061a0 <_free_r+0x88>
 8006188:	11c5883a 	add	r2,r2,r7
 800618c:	19c00217 	ldw	r7,8(r3)
 8006190:	20004e26 	beq	r4,zero,80062cc <_free_r+0x1b4>
 8006194:	18c00317 	ldw	r3,12(r3)
 8006198:	38c00315 	stw	r3,12(r7)
 800619c:	19c00215 	stw	r7,8(r3)
 80061a0:	11c00054 	ori	r7,r2,1
 80061a4:	3087883a 	add	r3,r6,r2
 80061a8:	31c00115 	stw	r7,4(r6)
 80061ac:	18800015 	stw	r2,0(r3)
 80061b0:	20001a1e 	bne	r4,zero,800621c <_free_r+0x104>
 80061b4:	00c07fc4 	movi	r3,511
 80061b8:	18802e2e 	bgeu	r3,r2,8006274 <_free_r+0x15c>
 80061bc:	1006d27a 	srli	r3,r2,9
 80061c0:	01000104 	movi	r4,4
 80061c4:	20c06636 	bltu	r4,r3,8006360 <_free_r+0x248>
 80061c8:	1008d1ba 	srli	r4,r2,6
 80061cc:	21000e04 	addi	r4,r4,56
 80061d0:	210f883a 	add	r7,r4,r4
 80061d4:	39cf883a 	add	r7,r7,r7
 80061d8:	39cf883a 	add	r7,r7,r7
 80061dc:	29cf883a 	add	r7,r5,r7
 80061e0:	38c00217 	ldw	r3,8(r7)
 80061e4:	01420074 	movhi	r5,2049
 80061e8:	297b9904 	addi	r5,r5,-4508
 80061ec:	19c06126 	beq	r3,r7,8006374 <_free_r+0x25c>
 80061f0:	013fff04 	movi	r4,-4
 80061f4:	19400117 	ldw	r5,4(r3)
 80061f8:	290a703a 	and	r5,r5,r4
 80061fc:	1140022e 	bgeu	r2,r5,8006208 <_free_r+0xf0>
 8006200:	18c00217 	ldw	r3,8(r3)
 8006204:	38fffb1e 	bne	r7,r3,80061f4 <__alt_data_end+0xf80061f4>
 8006208:	18800317 	ldw	r2,12(r3)
 800620c:	30800315 	stw	r2,12(r6)
 8006210:	30c00215 	stw	r3,8(r6)
 8006214:	11800215 	stw	r6,8(r2)
 8006218:	19800315 	stw	r6,12(r3)
 800621c:	8809883a 	mov	r4,r17
 8006220:	dfc00217 	ldw	ra,8(sp)
 8006224:	dc400117 	ldw	r17,4(sp)
 8006228:	dc000017 	ldw	r16,0(sp)
 800622c:	dec00304 	addi	sp,sp,12
 8006230:	800bd7c1 	jmpi	800bd7c <__malloc_unlock>
 8006234:	813ffe17 	ldw	r4,-8(r16)
 8006238:	2a400204 	addi	r9,r5,8
 800623c:	310dc83a 	sub	r6,r6,r4
 8006240:	32000217 	ldw	r8,8(r6)
 8006244:	1105883a 	add	r2,r2,r4
 8006248:	42404326 	beq	r8,r9,8006358 <_free_r+0x240>
 800624c:	32400317 	ldw	r9,12(r6)
 8006250:	0009883a 	mov	r4,zero
 8006254:	42400315 	stw	r9,12(r8)
 8006258:	4a000215 	stw	r8,8(r9)
 800625c:	003fc606 	br	8006178 <__alt_data_end+0xf8006178>
 8006260:	dfc00217 	ldw	ra,8(sp)
 8006264:	dc400117 	ldw	r17,4(sp)
 8006268:	dc000017 	ldw	r16,0(sp)
 800626c:	dec00304 	addi	sp,sp,12
 8006270:	f800283a 	ret
 8006274:	1004d0fa 	srli	r2,r2,3
 8006278:	02000044 	movi	r8,1
 800627c:	29c00117 	ldw	r7,4(r5)
 8006280:	1087883a 	add	r3,r2,r2
 8006284:	18c7883a 	add	r3,r3,r3
 8006288:	1005d0ba 	srai	r2,r2,2
 800628c:	18c7883a 	add	r3,r3,r3
 8006290:	28c7883a 	add	r3,r5,r3
 8006294:	19000217 	ldw	r4,8(r3)
 8006298:	4084983a 	sll	r2,r8,r2
 800629c:	30c00315 	stw	r3,12(r6)
 80062a0:	31000215 	stw	r4,8(r6)
 80062a4:	11c4b03a 	or	r2,r2,r7
 80062a8:	21800315 	stw	r6,12(r4)
 80062ac:	8809883a 	mov	r4,r17
 80062b0:	28800115 	stw	r2,4(r5)
 80062b4:	19800215 	stw	r6,8(r3)
 80062b8:	dfc00217 	ldw	ra,8(sp)
 80062bc:	dc400117 	ldw	r17,4(sp)
 80062c0:	dc000017 	ldw	r16,0(sp)
 80062c4:	dec00304 	addi	sp,sp,12
 80062c8:	800bd7c1 	jmpi	800bd7c <__malloc_unlock>
 80062cc:	02020074 	movhi	r8,2049
 80062d0:	423b9b04 	addi	r8,r8,-4500
 80062d4:	3a3faf1e 	bne	r7,r8,8006194 <__alt_data_end+0xf8006194>
 80062d8:	29800515 	stw	r6,20(r5)
 80062dc:	29800415 	stw	r6,16(r5)
 80062e0:	11000054 	ori	r4,r2,1
 80062e4:	3087883a 	add	r3,r6,r2
 80062e8:	31c00315 	stw	r7,12(r6)
 80062ec:	31c00215 	stw	r7,8(r6)
 80062f0:	31000115 	stw	r4,4(r6)
 80062f4:	18800015 	stw	r2,0(r3)
 80062f8:	003fc806 	br	800621c <__alt_data_end+0xf800621c>
 80062fc:	4200004c 	andi	r8,r8,1
 8006300:	3885883a 	add	r2,r7,r2
 8006304:	4000071e 	bne	r8,zero,8006324 <_free_r+0x20c>
 8006308:	81fffe17 	ldw	r7,-8(r16)
 800630c:	31cdc83a 	sub	r6,r6,r7
 8006310:	30c00317 	ldw	r3,12(r6)
 8006314:	31000217 	ldw	r4,8(r6)
 8006318:	11c5883a 	add	r2,r2,r7
 800631c:	20c00315 	stw	r3,12(r4)
 8006320:	19000215 	stw	r4,8(r3)
 8006324:	00c20074 	movhi	r3,2049
 8006328:	18c12104 	addi	r3,r3,1156
 800632c:	18c00017 	ldw	r3,0(r3)
 8006330:	11000054 	ori	r4,r2,1
 8006334:	31000115 	stw	r4,4(r6)
 8006338:	29800215 	stw	r6,8(r5)
 800633c:	10ffb736 	bltu	r2,r3,800621c <__alt_data_end+0xf800621c>
 8006340:	00820074 	movhi	r2,2049
 8006344:	1087c804 	addi	r2,r2,7968
 8006348:	11400017 	ldw	r5,0(r2)
 800634c:	8809883a 	mov	r4,r17
 8006350:	8005fdc0 	call	8005fdc <_malloc_trim_r>
 8006354:	003fb106 	br	800621c <__alt_data_end+0xf800621c>
 8006358:	01000044 	movi	r4,1
 800635c:	003f8606 	br	8006178 <__alt_data_end+0xf8006178>
 8006360:	01000504 	movi	r4,20
 8006364:	20c00b36 	bltu	r4,r3,8006394 <_free_r+0x27c>
 8006368:	190016c4 	addi	r4,r3,91
 800636c:	210f883a 	add	r7,r4,r4
 8006370:	003f9806 	br	80061d4 <__alt_data_end+0xf80061d4>
 8006374:	2009d0ba 	srai	r4,r4,2
 8006378:	00800044 	movi	r2,1
 800637c:	29c00117 	ldw	r7,4(r5)
 8006380:	1108983a 	sll	r4,r2,r4
 8006384:	1805883a 	mov	r2,r3
 8006388:	21c8b03a 	or	r4,r4,r7
 800638c:	29000115 	stw	r4,4(r5)
 8006390:	003f9e06 	br	800620c <__alt_data_end+0xf800620c>
 8006394:	01001504 	movi	r4,84
 8006398:	20c00436 	bltu	r4,r3,80063ac <_free_r+0x294>
 800639c:	1008d33a 	srli	r4,r2,12
 80063a0:	21001b84 	addi	r4,r4,110
 80063a4:	210f883a 	add	r7,r4,r4
 80063a8:	003f8a06 	br	80061d4 <__alt_data_end+0xf80061d4>
 80063ac:	01005504 	movi	r4,340
 80063b0:	20c00436 	bltu	r4,r3,80063c4 <_free_r+0x2ac>
 80063b4:	1008d3fa 	srli	r4,r2,15
 80063b8:	21001dc4 	addi	r4,r4,119
 80063bc:	210f883a 	add	r7,r4,r4
 80063c0:	003f8406 	br	80061d4 <__alt_data_end+0xf80061d4>
 80063c4:	01015504 	movi	r4,1364
 80063c8:	20c00436 	bltu	r4,r3,80063dc <_free_r+0x2c4>
 80063cc:	1008d4ba 	srli	r4,r2,18
 80063d0:	21001f04 	addi	r4,r4,124
 80063d4:	210f883a 	add	r7,r4,r4
 80063d8:	003f7e06 	br	80061d4 <__alt_data_end+0xf80061d4>
 80063dc:	01c03f04 	movi	r7,252
 80063e0:	01001f84 	movi	r4,126
 80063e4:	003f7b06 	br	80061d4 <__alt_data_end+0xf80061d4>

080063e8 <__sfvwrite_r>:
 80063e8:	30800217 	ldw	r2,8(r6)
 80063ec:	defff504 	addi	sp,sp,-44
 80063f0:	dd400615 	stw	r21,24(sp)
 80063f4:	dd000515 	stw	r20,20(sp)
 80063f8:	dc000115 	stw	r16,4(sp)
 80063fc:	dfc00a15 	stw	ra,40(sp)
 8006400:	df000915 	stw	fp,36(sp)
 8006404:	ddc00815 	stw	r23,32(sp)
 8006408:	dd800715 	stw	r22,28(sp)
 800640c:	dcc00415 	stw	r19,16(sp)
 8006410:	dc800315 	stw	r18,12(sp)
 8006414:	dc400215 	stw	r17,8(sp)
 8006418:	3029883a 	mov	r20,r6
 800641c:	202b883a 	mov	r21,r4
 8006420:	2821883a 	mov	r16,r5
 8006424:	10002126 	beq	r2,zero,80064ac <__sfvwrite_r+0xc4>
 8006428:	2880030b 	ldhu	r2,12(r5)
 800642c:	10c0020c 	andi	r3,r2,8
 8006430:	18ffffcc 	andi	r3,r3,65535
 8006434:	18e0001c 	xori	r3,r3,32768
 8006438:	18e00004 	addi	r3,r3,-32768
 800643c:	18002826 	beq	r3,zero,80064e0 <__sfvwrite_r+0xf8>
 8006440:	28c00417 	ldw	r3,16(r5)
 8006444:	18002626 	beq	r3,zero,80064e0 <__sfvwrite_r+0xf8>
 8006448:	10c0008c 	andi	r3,r2,2
 800644c:	18ffffcc 	andi	r3,r3,65535
 8006450:	18e0001c 	xori	r3,r3,32768
 8006454:	18e00004 	addi	r3,r3,-32768
 8006458:	a4400017 	ldw	r17,0(r20)
 800645c:	18002b26 	beq	r3,zero,800650c <__sfvwrite_r+0x124>
 8006460:	0027883a 	mov	r19,zero
 8006464:	0025883a 	mov	r18,zero
 8006468:	05810004 	movi	r22,1024
 800646c:	980d883a 	mov	r6,r19
 8006470:	a809883a 	mov	r4,r21
 8006474:	90004f26 	beq	r18,zero,80065b4 <__sfvwrite_r+0x1cc>
 8006478:	900f883a 	mov	r7,r18
 800647c:	81400717 	ldw	r5,28(r16)
 8006480:	b480012e 	bgeu	r22,r18,8006488 <__sfvwrite_r+0xa0>
 8006484:	01c10004 	movi	r7,1024
 8006488:	80800917 	ldw	r2,36(r16)
 800648c:	103ee83a 	callr	r2
 8006490:	0080540e 	bge	zero,r2,80065e4 <__sfvwrite_r+0x1fc>
 8006494:	a0c00217 	ldw	r3,8(r20)
 8006498:	98a7883a 	add	r19,r19,r2
 800649c:	90a5c83a 	sub	r18,r18,r2
 80064a0:	1885c83a 	sub	r2,r3,r2
 80064a4:	a0800215 	stw	r2,8(r20)
 80064a8:	103ff01e 	bne	r2,zero,800646c <__alt_data_end+0xf800646c>
 80064ac:	0005883a 	mov	r2,zero
 80064b0:	dfc00a17 	ldw	ra,40(sp)
 80064b4:	df000917 	ldw	fp,36(sp)
 80064b8:	ddc00817 	ldw	r23,32(sp)
 80064bc:	dd800717 	ldw	r22,28(sp)
 80064c0:	dd400617 	ldw	r21,24(sp)
 80064c4:	dd000517 	ldw	r20,20(sp)
 80064c8:	dcc00417 	ldw	r19,16(sp)
 80064cc:	dc800317 	ldw	r18,12(sp)
 80064d0:	dc400217 	ldw	r17,8(sp)
 80064d4:	dc000117 	ldw	r16,4(sp)
 80064d8:	dec00b04 	addi	sp,sp,44
 80064dc:	f800283a 	ret
 80064e0:	a809883a 	mov	r4,r21
 80064e4:	800b883a 	mov	r5,r16
 80064e8:	800410c0 	call	800410c <__swsetup_r>
 80064ec:	1000f01e 	bne	r2,zero,80068b0 <__sfvwrite_r+0x4c8>
 80064f0:	8080030b 	ldhu	r2,12(r16)
 80064f4:	a4400017 	ldw	r17,0(r20)
 80064f8:	10c0008c 	andi	r3,r2,2
 80064fc:	18ffffcc 	andi	r3,r3,65535
 8006500:	18e0001c 	xori	r3,r3,32768
 8006504:	18e00004 	addi	r3,r3,-32768
 8006508:	183fd51e 	bne	r3,zero,8006460 <__alt_data_end+0xf8006460>
 800650c:	10c0004c 	andi	r3,r2,1
 8006510:	002d883a 	mov	r22,zero
 8006514:	1800381e 	bne	r3,zero,80065f8 <__sfvwrite_r+0x210>
 8006518:	0025883a 	mov	r18,zero
 800651c:	90002126 	beq	r18,zero,80065a4 <__sfvwrite_r+0x1bc>
 8006520:	10c0800c 	andi	r3,r2,512
 8006524:	18ffffcc 	andi	r3,r3,65535
 8006528:	18e0001c 	xori	r3,r3,32768
 800652c:	18e00004 	addi	r3,r3,-32768
 8006530:	84c00217 	ldw	r19,8(r16)
 8006534:	18006b26 	beq	r3,zero,80066e4 <__sfvwrite_r+0x2fc>
 8006538:	980f883a 	mov	r7,r19
 800653c:	94c08636 	bltu	r18,r19,8006758 <__sfvwrite_r+0x370>
 8006540:	10c1200c 	andi	r3,r2,1152
 8006544:	18009f1e 	bne	r3,zero,80067c4 <__sfvwrite_r+0x3dc>
 8006548:	81000017 	ldw	r4,0(r16)
 800654c:	982f883a 	mov	r23,r19
 8006550:	9039883a 	mov	fp,r18
 8006554:	9027883a 	mov	r19,r18
 8006558:	380d883a 	mov	r6,r7
 800655c:	b00b883a 	mov	r5,r22
 8006560:	d9c00015 	stw	r7,0(sp)
 8006564:	800766c0 	call	800766c <memmove>
 8006568:	d9c00017 	ldw	r7,0(sp)
 800656c:	81000217 	ldw	r4,8(r16)
 8006570:	80800017 	ldw	r2,0(r16)
 8006574:	25efc83a 	sub	r23,r4,r23
 8006578:	11cf883a 	add	r7,r2,r7
 800657c:	85c00215 	stw	r23,8(r16)
 8006580:	81c00015 	stw	r7,0(r16)
 8006584:	a0800217 	ldw	r2,8(r20)
 8006588:	b72d883a 	add	r22,r22,fp
 800658c:	9725c83a 	sub	r18,r18,fp
 8006590:	14e7c83a 	sub	r19,r2,r19
 8006594:	a4c00215 	stw	r19,8(r20)
 8006598:	983fc426 	beq	r19,zero,80064ac <__alt_data_end+0xf80064ac>
 800659c:	8080030b 	ldhu	r2,12(r16)
 80065a0:	903fdf1e 	bne	r18,zero,8006520 <__alt_data_end+0xf8006520>
 80065a4:	8d800017 	ldw	r22,0(r17)
 80065a8:	8c800117 	ldw	r18,4(r17)
 80065ac:	8c400204 	addi	r17,r17,8
 80065b0:	003fda06 	br	800651c <__alt_data_end+0xf800651c>
 80065b4:	8cc00017 	ldw	r19,0(r17)
 80065b8:	8c800117 	ldw	r18,4(r17)
 80065bc:	8c400204 	addi	r17,r17,8
 80065c0:	003faa06 	br	800646c <__alt_data_end+0xf800646c>
 80065c4:	80089240 	call	8008924 <_realloc_r>
 80065c8:	102f883a 	mov	r23,r2
 80065cc:	10009f1e 	bne	r2,zero,800684c <__sfvwrite_r+0x464>
 80065d0:	81400417 	ldw	r5,16(r16)
 80065d4:	a809883a 	mov	r4,r21
 80065d8:	80061180 	call	8006118 <_free_r>
 80065dc:	00800304 	movi	r2,12
 80065e0:	a8800015 	stw	r2,0(r21)
 80065e4:	80c0030b 	ldhu	r3,12(r16)
 80065e8:	00bfffc4 	movi	r2,-1
 80065ec:	18c01014 	ori	r3,r3,64
 80065f0:	80c0030d 	sth	r3,12(r16)
 80065f4:	003fae06 	br	80064b0 <__alt_data_end+0xf80064b0>
 80065f8:	0007883a 	mov	r3,zero
 80065fc:	0039883a 	mov	fp,zero
 8006600:	0025883a 	mov	r18,zero
 8006604:	90001e26 	beq	r18,zero,8006680 <__sfvwrite_r+0x298>
 8006608:	18006526 	beq	r3,zero,80067a0 <__sfvwrite_r+0x3b8>
 800660c:	b02f883a 	mov	r23,r22
 8006610:	9580012e 	bgeu	r18,r22,8006618 <__sfvwrite_r+0x230>
 8006614:	902f883a 	mov	r23,r18
 8006618:	81000017 	ldw	r4,0(r16)
 800661c:	80800417 	ldw	r2,16(r16)
 8006620:	84c00217 	ldw	r19,8(r16)
 8006624:	81c00517 	ldw	r7,20(r16)
 8006628:	1100022e 	bgeu	r2,r4,8006634 <__sfvwrite_r+0x24c>
 800662c:	99e7883a 	add	r19,r19,r7
 8006630:	9dc01816 	blt	r19,r23,8006694 <__sfvwrite_r+0x2ac>
 8006634:	b9c03b16 	blt	r23,r7,8006724 <__sfvwrite_r+0x33c>
 8006638:	80800917 	ldw	r2,36(r16)
 800663c:	81400717 	ldw	r5,28(r16)
 8006640:	a809883a 	mov	r4,r21
 8006644:	d8c00015 	stw	r3,0(sp)
 8006648:	e00d883a 	mov	r6,fp
 800664c:	103ee83a 	callr	r2
 8006650:	1027883a 	mov	r19,r2
 8006654:	d8c00017 	ldw	r3,0(sp)
 8006658:	00bfe20e 	bge	zero,r2,80065e4 <__alt_data_end+0xf80065e4>
 800665c:	b4edc83a 	sub	r22,r22,r19
 8006660:	b0001a26 	beq	r22,zero,80066cc <__sfvwrite_r+0x2e4>
 8006664:	a0800217 	ldw	r2,8(r20)
 8006668:	e4f9883a 	add	fp,fp,r19
 800666c:	94e5c83a 	sub	r18,r18,r19
 8006670:	14e7c83a 	sub	r19,r2,r19
 8006674:	a4c00215 	stw	r19,8(r20)
 8006678:	983f8c26 	beq	r19,zero,80064ac <__alt_data_end+0xf80064ac>
 800667c:	903fe21e 	bne	r18,zero,8006608 <__alt_data_end+0xf8006608>
 8006680:	8f000017 	ldw	fp,0(r17)
 8006684:	8c800117 	ldw	r18,4(r17)
 8006688:	0007883a 	mov	r3,zero
 800668c:	8c400204 	addi	r17,r17,8
 8006690:	003fdc06 	br	8006604 <__alt_data_end+0xf8006604>
 8006694:	e00b883a 	mov	r5,fp
 8006698:	980d883a 	mov	r6,r19
 800669c:	d8c00015 	stw	r3,0(sp)
 80066a0:	800766c0 	call	800766c <memmove>
 80066a4:	80800017 	ldw	r2,0(r16)
 80066a8:	a809883a 	mov	r4,r21
 80066ac:	800b883a 	mov	r5,r16
 80066b0:	14c5883a 	add	r2,r2,r19
 80066b4:	80800015 	stw	r2,0(r16)
 80066b8:	8005ad80 	call	8005ad8 <_fflush_r>
 80066bc:	d8c00017 	ldw	r3,0(sp)
 80066c0:	103fc81e 	bne	r2,zero,80065e4 <__alt_data_end+0xf80065e4>
 80066c4:	b4edc83a 	sub	r22,r22,r19
 80066c8:	b03fe61e 	bne	r22,zero,8006664 <__alt_data_end+0xf8006664>
 80066cc:	a809883a 	mov	r4,r21
 80066d0:	800b883a 	mov	r5,r16
 80066d4:	8005ad80 	call	8005ad8 <_fflush_r>
 80066d8:	103fc21e 	bne	r2,zero,80065e4 <__alt_data_end+0xf80065e4>
 80066dc:	0007883a 	mov	r3,zero
 80066e0:	003fe006 	br	8006664 <__alt_data_end+0xf8006664>
 80066e4:	81000017 	ldw	r4,0(r16)
 80066e8:	80800417 	ldw	r2,16(r16)
 80066ec:	1100022e 	bgeu	r2,r4,80066f8 <__sfvwrite_r+0x310>
 80066f0:	9839883a 	mov	fp,r19
 80066f4:	9c806036 	bltu	r19,r18,8006878 <__sfvwrite_r+0x490>
 80066f8:	81c00517 	ldw	r7,20(r16)
 80066fc:	91c01c36 	bltu	r18,r7,8006770 <__sfvwrite_r+0x388>
 8006700:	80800917 	ldw	r2,36(r16)
 8006704:	81400717 	ldw	r5,28(r16)
 8006708:	a809883a 	mov	r4,r21
 800670c:	b00d883a 	mov	r6,r22
 8006710:	103ee83a 	callr	r2
 8006714:	1027883a 	mov	r19,r2
 8006718:	00bfb20e 	bge	zero,r2,80065e4 <__alt_data_end+0xf80065e4>
 800671c:	1039883a 	mov	fp,r2
 8006720:	003f9806 	br	8006584 <__alt_data_end+0xf8006584>
 8006724:	b80d883a 	mov	r6,r23
 8006728:	e00b883a 	mov	r5,fp
 800672c:	d8c00015 	stw	r3,0(sp)
 8006730:	800766c0 	call	800766c <memmove>
 8006734:	80800217 	ldw	r2,8(r16)
 8006738:	81000017 	ldw	r4,0(r16)
 800673c:	b827883a 	mov	r19,r23
 8006740:	15c5c83a 	sub	r2,r2,r23
 8006744:	25ef883a 	add	r23,r4,r23
 8006748:	80800215 	stw	r2,8(r16)
 800674c:	85c00015 	stw	r23,0(r16)
 8006750:	d8c00017 	ldw	r3,0(sp)
 8006754:	003fc106 	br	800665c <__alt_data_end+0xf800665c>
 8006758:	81000017 	ldw	r4,0(r16)
 800675c:	902f883a 	mov	r23,r18
 8006760:	9039883a 	mov	fp,r18
 8006764:	9027883a 	mov	r19,r18
 8006768:	900f883a 	mov	r7,r18
 800676c:	003f7a06 	br	8006558 <__alt_data_end+0xf8006558>
 8006770:	b00b883a 	mov	r5,r22
 8006774:	900d883a 	mov	r6,r18
 8006778:	800766c0 	call	800766c <memmove>
 800677c:	80c00217 	ldw	r3,8(r16)
 8006780:	80800017 	ldw	r2,0(r16)
 8006784:	9027883a 	mov	r19,r18
 8006788:	1c87c83a 	sub	r3,r3,r18
 800678c:	1485883a 	add	r2,r2,r18
 8006790:	80c00215 	stw	r3,8(r16)
 8006794:	80800015 	stw	r2,0(r16)
 8006798:	9039883a 	mov	fp,r18
 800679c:	003f7906 	br	8006584 <__alt_data_end+0xf8006584>
 80067a0:	e009883a 	mov	r4,fp
 80067a4:	01400284 	movi	r5,10
 80067a8:	900d883a 	mov	r6,r18
 80067ac:	80074340 	call	8007434 <memchr>
 80067b0:	10003c26 	beq	r2,zero,80068a4 <__sfvwrite_r+0x4bc>
 80067b4:	15800044 	addi	r22,r2,1
 80067b8:	b72dc83a 	sub	r22,r22,fp
 80067bc:	00c00044 	movi	r3,1
 80067c0:	003f9206 	br	800660c <__alt_data_end+0xf800660c>
 80067c4:	81000517 	ldw	r4,20(r16)
 80067c8:	81400417 	ldw	r5,16(r16)
 80067cc:	80c00017 	ldw	r3,0(r16)
 80067d0:	210d883a 	add	r6,r4,r4
 80067d4:	3109883a 	add	r4,r6,r4
 80067d8:	2026d7fa 	srli	r19,r4,31
 80067dc:	1979c83a 	sub	fp,r3,r5
 80067e0:	e1800044 	addi	r6,fp,1
 80067e4:	9909883a 	add	r4,r19,r4
 80067e8:	2027d07a 	srai	r19,r4,1
 80067ec:	3489883a 	add	r4,r6,r18
 80067f0:	980d883a 	mov	r6,r19
 80067f4:	9900022e 	bgeu	r19,r4,8006800 <__sfvwrite_r+0x418>
 80067f8:	2027883a 	mov	r19,r4
 80067fc:	200d883a 	mov	r6,r4
 8006800:	1081000c 	andi	r2,r2,1024
 8006804:	10bfffcc 	andi	r2,r2,65535
 8006808:	10a0001c 	xori	r2,r2,32768
 800680c:	10a00004 	addi	r2,r2,-32768
 8006810:	a809883a 	mov	r4,r21
 8006814:	103f6b26 	beq	r2,zero,80065c4 <__alt_data_end+0xf80065c4>
 8006818:	300b883a 	mov	r5,r6
 800681c:	8006cb00 	call	8006cb0 <_malloc_r>
 8006820:	102f883a 	mov	r23,r2
 8006824:	103f6d26 	beq	r2,zero,80065dc <__alt_data_end+0xf80065dc>
 8006828:	81400417 	ldw	r5,16(r16)
 800682c:	1009883a 	mov	r4,r2
 8006830:	e00d883a 	mov	r6,fp
 8006834:	800752c0 	call	800752c <memcpy>
 8006838:	8080030b 	ldhu	r2,12(r16)
 800683c:	00fedfc4 	movi	r3,-1153
 8006840:	10c4703a 	and	r2,r2,r3
 8006844:	10802014 	ori	r2,r2,128
 8006848:	8080030d 	sth	r2,12(r16)
 800684c:	bf09883a 	add	r4,r23,fp
 8006850:	9f07c83a 	sub	r3,r19,fp
 8006854:	85c00415 	stw	r23,16(r16)
 8006858:	84c00515 	stw	r19,20(r16)
 800685c:	81000015 	stw	r4,0(r16)
 8006860:	902f883a 	mov	r23,r18
 8006864:	80c00215 	stw	r3,8(r16)
 8006868:	9039883a 	mov	fp,r18
 800686c:	9027883a 	mov	r19,r18
 8006870:	900f883a 	mov	r7,r18
 8006874:	003f3806 	br	8006558 <__alt_data_end+0xf8006558>
 8006878:	b00b883a 	mov	r5,r22
 800687c:	980d883a 	mov	r6,r19
 8006880:	800766c0 	call	800766c <memmove>
 8006884:	80800017 	ldw	r2,0(r16)
 8006888:	a809883a 	mov	r4,r21
 800688c:	800b883a 	mov	r5,r16
 8006890:	14c5883a 	add	r2,r2,r19
 8006894:	80800015 	stw	r2,0(r16)
 8006898:	8005ad80 	call	8005ad8 <_fflush_r>
 800689c:	103f3926 	beq	r2,zero,8006584 <__alt_data_end+0xf8006584>
 80068a0:	003f5006 	br	80065e4 <__alt_data_end+0xf80065e4>
 80068a4:	95800044 	addi	r22,r18,1
 80068a8:	00c00044 	movi	r3,1
 80068ac:	003f5706 	br	800660c <__alt_data_end+0xf800660c>
 80068b0:	80c0030b 	ldhu	r3,12(r16)
 80068b4:	00bfffc4 	movi	r2,-1
 80068b8:	18c01014 	ori	r3,r3,64
 80068bc:	80c0030d 	sth	r3,12(r16)
 80068c0:	00c00244 	movi	r3,9
 80068c4:	a8c00015 	stw	r3,0(r21)
 80068c8:	003ef906 	br	80064b0 <__alt_data_end+0xf80064b0>

080068cc <_fwalk>:
 80068cc:	defff904 	addi	sp,sp,-28
 80068d0:	dcc00315 	stw	r19,12(sp)
 80068d4:	24c0b804 	addi	r19,r4,736
 80068d8:	dd400515 	stw	r21,20(sp)
 80068dc:	dd000415 	stw	r20,16(sp)
 80068e0:	dfc00615 	stw	ra,24(sp)
 80068e4:	dc800215 	stw	r18,8(sp)
 80068e8:	dc400115 	stw	r17,4(sp)
 80068ec:	dc000015 	stw	r16,0(sp)
 80068f0:	282b883a 	mov	r21,r5
 80068f4:	0029883a 	mov	r20,zero
 80068f8:	8005f9c0 	call	8005f9c <__sfp_lock_acquire>
 80068fc:	98001226 	beq	r19,zero,8006948 <_fwalk+0x7c>
 8006900:	04bfffc4 	movi	r18,-1
 8006904:	9c400117 	ldw	r17,4(r19)
 8006908:	9c000217 	ldw	r16,8(r19)
 800690c:	8c7fffc4 	addi	r17,r17,-1
 8006910:	88000b16 	blt	r17,zero,8006940 <_fwalk+0x74>
 8006914:	84000304 	addi	r16,r16,12
 8006918:	80c0000f 	ldh	r3,0(r16)
 800691c:	8c7fffc4 	addi	r17,r17,-1
 8006920:	813ffd04 	addi	r4,r16,-12
 8006924:	18000426 	beq	r3,zero,8006938 <_fwalk+0x6c>
 8006928:	80c0008f 	ldh	r3,2(r16)
 800692c:	1c800226 	beq	r3,r18,8006938 <_fwalk+0x6c>
 8006930:	a83ee83a 	callr	r21
 8006934:	a0a8b03a 	or	r20,r20,r2
 8006938:	84001704 	addi	r16,r16,92
 800693c:	8cbff61e 	bne	r17,r18,8006918 <__alt_data_end+0xf8006918>
 8006940:	9cc00017 	ldw	r19,0(r19)
 8006944:	983fef1e 	bne	r19,zero,8006904 <__alt_data_end+0xf8006904>
 8006948:	8005fa00 	call	8005fa0 <__sfp_lock_release>
 800694c:	a005883a 	mov	r2,r20
 8006950:	dfc00617 	ldw	ra,24(sp)
 8006954:	dd400517 	ldw	r21,20(sp)
 8006958:	dd000417 	ldw	r20,16(sp)
 800695c:	dcc00317 	ldw	r19,12(sp)
 8006960:	dc800217 	ldw	r18,8(sp)
 8006964:	dc400117 	ldw	r17,4(sp)
 8006968:	dc000017 	ldw	r16,0(sp)
 800696c:	dec00704 	addi	sp,sp,28
 8006970:	f800283a 	ret

08006974 <_fwalk_reent>:
 8006974:	defff804 	addi	sp,sp,-32
 8006978:	dcc00315 	stw	r19,12(sp)
 800697c:	24c0b804 	addi	r19,r4,736
 8006980:	dd800615 	stw	r22,24(sp)
 8006984:	dd400515 	stw	r21,20(sp)
 8006988:	dd000415 	stw	r20,16(sp)
 800698c:	dfc00715 	stw	ra,28(sp)
 8006990:	dc800215 	stw	r18,8(sp)
 8006994:	dc400115 	stw	r17,4(sp)
 8006998:	dc000015 	stw	r16,0(sp)
 800699c:	2029883a 	mov	r20,r4
 80069a0:	282b883a 	mov	r21,r5
 80069a4:	002d883a 	mov	r22,zero
 80069a8:	8005f9c0 	call	8005f9c <__sfp_lock_acquire>
 80069ac:	98001326 	beq	r19,zero,80069fc <_fwalk_reent+0x88>
 80069b0:	04bfffc4 	movi	r18,-1
 80069b4:	9c400117 	ldw	r17,4(r19)
 80069b8:	9c000217 	ldw	r16,8(r19)
 80069bc:	8c7fffc4 	addi	r17,r17,-1
 80069c0:	88000c16 	blt	r17,zero,80069f4 <_fwalk_reent+0x80>
 80069c4:	84000304 	addi	r16,r16,12
 80069c8:	80c0000f 	ldh	r3,0(r16)
 80069cc:	8c7fffc4 	addi	r17,r17,-1
 80069d0:	817ffd04 	addi	r5,r16,-12
 80069d4:	18000526 	beq	r3,zero,80069ec <_fwalk_reent+0x78>
 80069d8:	80c0008f 	ldh	r3,2(r16)
 80069dc:	a009883a 	mov	r4,r20
 80069e0:	1c800226 	beq	r3,r18,80069ec <_fwalk_reent+0x78>
 80069e4:	a83ee83a 	callr	r21
 80069e8:	b0acb03a 	or	r22,r22,r2
 80069ec:	84001704 	addi	r16,r16,92
 80069f0:	8cbff51e 	bne	r17,r18,80069c8 <__alt_data_end+0xf80069c8>
 80069f4:	9cc00017 	ldw	r19,0(r19)
 80069f8:	983fee1e 	bne	r19,zero,80069b4 <__alt_data_end+0xf80069b4>
 80069fc:	8005fa00 	call	8005fa0 <__sfp_lock_release>
 8006a00:	b005883a 	mov	r2,r22
 8006a04:	dfc00717 	ldw	ra,28(sp)
 8006a08:	dd800617 	ldw	r22,24(sp)
 8006a0c:	dd400517 	ldw	r21,20(sp)
 8006a10:	dd000417 	ldw	r20,16(sp)
 8006a14:	dcc00317 	ldw	r19,12(sp)
 8006a18:	dc800217 	ldw	r18,8(sp)
 8006a1c:	dc400117 	ldw	r17,4(sp)
 8006a20:	dc000017 	ldw	r16,0(sp)
 8006a24:	dec00804 	addi	sp,sp,32
 8006a28:	f800283a 	ret

08006a2c <_setlocale_r>:
 8006a2c:	defffc04 	addi	sp,sp,-16
 8006a30:	dc800215 	stw	r18,8(sp)
 8006a34:	dc400115 	stw	r17,4(sp)
 8006a38:	dc000015 	stw	r16,0(sp)
 8006a3c:	dfc00315 	stw	ra,12(sp)
 8006a40:	3021883a 	mov	r16,r6
 8006a44:	2023883a 	mov	r17,r4
 8006a48:	2825883a 	mov	r18,r5
 8006a4c:	30001626 	beq	r6,zero,8006aa8 <_setlocale_r+0x7c>
 8006a50:	3009883a 	mov	r4,r6
 8006a54:	01420074 	movhi	r5,2049
 8006a58:	2979ec04 	addi	r5,r5,-6224
 8006a5c:	80091280 	call	8009128 <strcmp>
 8006a60:	10000a1e 	bne	r2,zero,8006a8c <_setlocale_r+0x60>
 8006a64:	8c800c15 	stw	r18,48(r17)
 8006a68:	8c000d15 	stw	r16,52(r17)
 8006a6c:	00820074 	movhi	r2,2049
 8006a70:	10b9ec04 	addi	r2,r2,-6224
 8006a74:	dfc00317 	ldw	ra,12(sp)
 8006a78:	dc800217 	ldw	r18,8(sp)
 8006a7c:	dc400117 	ldw	r17,4(sp)
 8006a80:	dc000017 	ldw	r16,0(sp)
 8006a84:	dec00404 	addi	sp,sp,16
 8006a88:	f800283a 	ret
 8006a8c:	8009883a 	mov	r4,r16
 8006a90:	01420074 	movhi	r5,2049
 8006a94:	2979d704 	addi	r5,r5,-6308
 8006a98:	80091280 	call	8009128 <strcmp>
 8006a9c:	103ff126 	beq	r2,zero,8006a64 <__alt_data_end+0xf8006a64>
 8006aa0:	0005883a 	mov	r2,zero
 8006aa4:	003ff306 	br	8006a74 <__alt_data_end+0xf8006a74>
 8006aa8:	00820074 	movhi	r2,2049
 8006aac:	10b9ec04 	addi	r2,r2,-6224
 8006ab0:	dfc00317 	ldw	ra,12(sp)
 8006ab4:	dc800217 	ldw	r18,8(sp)
 8006ab8:	dc400117 	ldw	r17,4(sp)
 8006abc:	dc000017 	ldw	r16,0(sp)
 8006ac0:	dec00404 	addi	sp,sp,16
 8006ac4:	f800283a 	ret

08006ac8 <__locale_charset>:
 8006ac8:	00820074 	movhi	r2,2049
 8006acc:	10b9ed04 	addi	r2,r2,-6220
 8006ad0:	f800283a 	ret

08006ad4 <_localeconv_r>:
 8006ad4:	00820074 	movhi	r2,2049
 8006ad8:	10b9f104 	addi	r2,r2,-6204
 8006adc:	f800283a 	ret

08006ae0 <setlocale>:
 8006ae0:	00c20074 	movhi	r3,2049
 8006ae4:	18c11e04 	addi	r3,r3,1144
 8006ae8:	2005883a 	mov	r2,r4
 8006aec:	19000017 	ldw	r4,0(r3)
 8006af0:	280d883a 	mov	r6,r5
 8006af4:	100b883a 	mov	r5,r2
 8006af8:	8006a2c1 	jmpi	8006a2c <_setlocale_r>

08006afc <localeconv>:
 8006afc:	00820074 	movhi	r2,2049
 8006b00:	10b9f104 	addi	r2,r2,-6204
 8006b04:	f800283a 	ret

08006b08 <__smakebuf_r>:
 8006b08:	2880030b 	ldhu	r2,12(r5)
 8006b0c:	deffed04 	addi	sp,sp,-76
 8006b10:	dc401015 	stw	r17,64(sp)
 8006b14:	10c0008c 	andi	r3,r2,2
 8006b18:	18ffffcc 	andi	r3,r3,65535
 8006b1c:	18e0001c 	xori	r3,r3,32768
 8006b20:	dc000f15 	stw	r16,60(sp)
 8006b24:	dfc01215 	stw	ra,72(sp)
 8006b28:	dc801115 	stw	r18,68(sp)
 8006b2c:	18e00004 	addi	r3,r3,-32768
 8006b30:	2821883a 	mov	r16,r5
 8006b34:	2023883a 	mov	r17,r4
 8006b38:	1800381e 	bne	r3,zero,8006c1c <__smakebuf_r+0x114>
 8006b3c:	2940038f 	ldh	r5,14(r5)
 8006b40:	28002d16 	blt	r5,zero,8006bf8 <__smakebuf_r+0xf0>
 8006b44:	d80d883a 	mov	r6,sp
 8006b48:	80094b80 	call	80094b8 <_fstat_r>
 8006b4c:	10002916 	blt	r2,zero,8006bf4 <__smakebuf_r+0xec>
 8006b50:	d8800117 	ldw	r2,4(sp)
 8006b54:	00e00014 	movui	r3,32768
 8006b58:	10bc000c 	andi	r2,r2,61440
 8006b5c:	10c03c26 	beq	r2,r3,8006c50 <__smakebuf_r+0x148>
 8006b60:	80c0030b 	ldhu	r3,12(r16)
 8006b64:	18c20014 	ori	r3,r3,2048
 8006b68:	80c0030d 	sth	r3,12(r16)
 8006b6c:	00c80004 	movi	r3,8192
 8006b70:	10c00c1e 	bne	r2,r3,8006ba4 <__smakebuf_r+0x9c>
 8006b74:	8140038f 	ldh	r5,14(r16)
 8006b78:	8809883a 	mov	r4,r17
 8006b7c:	80095200 	call	8009520 <_isatty_r>
 8006b80:	10000826 	beq	r2,zero,8006ba4 <__smakebuf_r+0x9c>
 8006b84:	80c0030b 	ldhu	r3,12(r16)
 8006b88:	808010c4 	addi	r2,r16,67
 8006b8c:	80800015 	stw	r2,0(r16)
 8006b90:	18c00054 	ori	r3,r3,1
 8006b94:	80800415 	stw	r2,16(r16)
 8006b98:	00800044 	movi	r2,1
 8006b9c:	80c0030d 	sth	r3,12(r16)
 8006ba0:	80800515 	stw	r2,20(r16)
 8006ba4:	04810004 	movi	r18,1024
 8006ba8:	8809883a 	mov	r4,r17
 8006bac:	900b883a 	mov	r5,r18
 8006bb0:	8006cb00 	call	8006cb0 <_malloc_r>
 8006bb4:	10003026 	beq	r2,zero,8006c78 <__smakebuf_r+0x170>
 8006bb8:	80c0030b 	ldhu	r3,12(r16)
 8006bbc:	01020034 	movhi	r4,2048
 8006bc0:	21174004 	addi	r4,r4,23808
 8006bc4:	89000f15 	stw	r4,60(r17)
 8006bc8:	18c02014 	ori	r3,r3,128
 8006bcc:	80c0030d 	sth	r3,12(r16)
 8006bd0:	80800015 	stw	r2,0(r16)
 8006bd4:	80800415 	stw	r2,16(r16)
 8006bd8:	84800515 	stw	r18,20(r16)
 8006bdc:	dfc01217 	ldw	ra,72(sp)
 8006be0:	dc801117 	ldw	r18,68(sp)
 8006be4:	dc401017 	ldw	r17,64(sp)
 8006be8:	dc000f17 	ldw	r16,60(sp)
 8006bec:	dec01304 	addi	sp,sp,76
 8006bf0:	f800283a 	ret
 8006bf4:	8080030b 	ldhu	r2,12(r16)
 8006bf8:	10c0200c 	andi	r3,r2,128
 8006bfc:	18ffffcc 	andi	r3,r3,65535
 8006c00:	18e0001c 	xori	r3,r3,32768
 8006c04:	18e00004 	addi	r3,r3,-32768
 8006c08:	18000f1e 	bne	r3,zero,8006c48 <__smakebuf_r+0x140>
 8006c0c:	04810004 	movi	r18,1024
 8006c10:	10820014 	ori	r2,r2,2048
 8006c14:	8080030d 	sth	r2,12(r16)
 8006c18:	003fe306 	br	8006ba8 <__alt_data_end+0xf8006ba8>
 8006c1c:	288010c4 	addi	r2,r5,67
 8006c20:	28800015 	stw	r2,0(r5)
 8006c24:	28800415 	stw	r2,16(r5)
 8006c28:	00800044 	movi	r2,1
 8006c2c:	28800515 	stw	r2,20(r5)
 8006c30:	dfc01217 	ldw	ra,72(sp)
 8006c34:	dc801117 	ldw	r18,68(sp)
 8006c38:	dc401017 	ldw	r17,64(sp)
 8006c3c:	dc000f17 	ldw	r16,60(sp)
 8006c40:	dec01304 	addi	sp,sp,76
 8006c44:	f800283a 	ret
 8006c48:	04801004 	movi	r18,64
 8006c4c:	003ff006 	br	8006c10 <__alt_data_end+0xf8006c10>
 8006c50:	81000a17 	ldw	r4,40(r16)
 8006c54:	00c20074 	movhi	r3,2049
 8006c58:	18e43104 	addi	r3,r3,-28476
 8006c5c:	20ffc01e 	bne	r4,r3,8006b60 <__alt_data_end+0xf8006b60>
 8006c60:	8080030b 	ldhu	r2,12(r16)
 8006c64:	00c10004 	movi	r3,1024
 8006c68:	80c01315 	stw	r3,76(r16)
 8006c6c:	10c4b03a 	or	r2,r2,r3
 8006c70:	8080030d 	sth	r2,12(r16)
 8006c74:	003fcb06 	br	8006ba4 <__alt_data_end+0xf8006ba4>
 8006c78:	8080030b 	ldhu	r2,12(r16)
 8006c7c:	10c0800c 	andi	r3,r2,512
 8006c80:	18ffffcc 	andi	r3,r3,65535
 8006c84:	18e0001c 	xori	r3,r3,32768
 8006c88:	18e00004 	addi	r3,r3,-32768
 8006c8c:	183fd31e 	bne	r3,zero,8006bdc <__alt_data_end+0xf8006bdc>
 8006c90:	10800094 	ori	r2,r2,2
 8006c94:	80c010c4 	addi	r3,r16,67
 8006c98:	8080030d 	sth	r2,12(r16)
 8006c9c:	00800044 	movi	r2,1
 8006ca0:	80c00015 	stw	r3,0(r16)
 8006ca4:	80c00415 	stw	r3,16(r16)
 8006ca8:	80800515 	stw	r2,20(r16)
 8006cac:	003fcb06 	br	8006bdc <__alt_data_end+0xf8006bdc>

08006cb0 <_malloc_r>:
 8006cb0:	defff604 	addi	sp,sp,-40
 8006cb4:	dc800215 	stw	r18,8(sp)
 8006cb8:	dfc00915 	stw	ra,36(sp)
 8006cbc:	df000815 	stw	fp,32(sp)
 8006cc0:	ddc00715 	stw	r23,28(sp)
 8006cc4:	dd800615 	stw	r22,24(sp)
 8006cc8:	dd400515 	stw	r21,20(sp)
 8006ccc:	dd000415 	stw	r20,16(sp)
 8006cd0:	dcc00315 	stw	r19,12(sp)
 8006cd4:	dc400115 	stw	r17,4(sp)
 8006cd8:	dc000015 	stw	r16,0(sp)
 8006cdc:	288002c4 	addi	r2,r5,11
 8006ce0:	00c00584 	movi	r3,22
 8006ce4:	2025883a 	mov	r18,r4
 8006ce8:	18802b2e 	bgeu	r3,r2,8006d98 <_malloc_r+0xe8>
 8006cec:	047ffe04 	movi	r17,-8
 8006cf0:	1462703a 	and	r17,r2,r17
 8006cf4:	88002a16 	blt	r17,zero,8006da0 <_malloc_r+0xf0>
 8006cf8:	89402936 	bltu	r17,r5,8006da0 <_malloc_r+0xf0>
 8006cfc:	9009883a 	mov	r4,r18
 8006d00:	800bd5c0 	call	800bd5c <__malloc_lock>
 8006d04:	00807dc4 	movi	r2,503
 8006d08:	14402936 	bltu	r2,r17,8006db0 <_malloc_r+0x100>
 8006d0c:	8808d0fa 	srli	r4,r17,3
 8006d10:	04c20074 	movhi	r19,2049
 8006d14:	9cfb9904 	addi	r19,r19,-4508
 8006d18:	2105883a 	add	r2,r4,r4
 8006d1c:	1085883a 	add	r2,r2,r2
 8006d20:	1085883a 	add	r2,r2,r2
 8006d24:	9885883a 	add	r2,r19,r2
 8006d28:	14000317 	ldw	r16,12(r2)
 8006d2c:	80815526 	beq	r16,r2,8007284 <_malloc_r+0x5d4>
 8006d30:	81000117 	ldw	r4,4(r16)
 8006d34:	00bfff04 	movi	r2,-4
 8006d38:	80c00317 	ldw	r3,12(r16)
 8006d3c:	2084703a 	and	r2,r4,r2
 8006d40:	8085883a 	add	r2,r16,r2
 8006d44:	11800117 	ldw	r6,4(r2)
 8006d48:	81400217 	ldw	r5,8(r16)
 8006d4c:	9009883a 	mov	r4,r18
 8006d50:	31800054 	ori	r6,r6,1
 8006d54:	11800115 	stw	r6,4(r2)
 8006d58:	28c00315 	stw	r3,12(r5)
 8006d5c:	19400215 	stw	r5,8(r3)
 8006d60:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8006d64:	80800204 	addi	r2,r16,8
 8006d68:	dfc00917 	ldw	ra,36(sp)
 8006d6c:	df000817 	ldw	fp,32(sp)
 8006d70:	ddc00717 	ldw	r23,28(sp)
 8006d74:	dd800617 	ldw	r22,24(sp)
 8006d78:	dd400517 	ldw	r21,20(sp)
 8006d7c:	dd000417 	ldw	r20,16(sp)
 8006d80:	dcc00317 	ldw	r19,12(sp)
 8006d84:	dc800217 	ldw	r18,8(sp)
 8006d88:	dc400117 	ldw	r17,4(sp)
 8006d8c:	dc000017 	ldw	r16,0(sp)
 8006d90:	dec00a04 	addi	sp,sp,40
 8006d94:	f800283a 	ret
 8006d98:	04400404 	movi	r17,16
 8006d9c:	897fd72e 	bgeu	r17,r5,8006cfc <__alt_data_end+0xf8006cfc>
 8006da0:	00800304 	movi	r2,12
 8006da4:	90800015 	stw	r2,0(r18)
 8006da8:	0005883a 	mov	r2,zero
 8006dac:	003fee06 	br	8006d68 <__alt_data_end+0xf8006d68>
 8006db0:	8808d27a 	srli	r4,r17,9
 8006db4:	20007126 	beq	r4,zero,8006f7c <_malloc_r+0x2cc>
 8006db8:	00800104 	movi	r2,4
 8006dbc:	1100eb36 	bltu	r2,r4,800716c <_malloc_r+0x4bc>
 8006dc0:	8808d1ba 	srli	r4,r17,6
 8006dc4:	21000e04 	addi	r4,r4,56
 8006dc8:	210b883a 	add	r5,r4,r4
 8006dcc:	294b883a 	add	r5,r5,r5
 8006dd0:	294b883a 	add	r5,r5,r5
 8006dd4:	04c20074 	movhi	r19,2049
 8006dd8:	9cfb9904 	addi	r19,r19,-4508
 8006ddc:	994b883a 	add	r5,r19,r5
 8006de0:	2c000317 	ldw	r16,12(r5)
 8006de4:	2c000e26 	beq	r5,r16,8006e20 <_malloc_r+0x170>
 8006de8:	80c00117 	ldw	r3,4(r16)
 8006dec:	01ffff04 	movi	r7,-4
 8006df0:	018003c4 	movi	r6,15
 8006df4:	19c6703a 	and	r3,r3,r7
 8006df8:	1c45c83a 	sub	r2,r3,r17
 8006dfc:	30800716 	blt	r6,r2,8006e1c <_malloc_r+0x16c>
 8006e00:	1000610e 	bge	r2,zero,8006f88 <_malloc_r+0x2d8>
 8006e04:	84000317 	ldw	r16,12(r16)
 8006e08:	2c000526 	beq	r5,r16,8006e20 <_malloc_r+0x170>
 8006e0c:	80c00117 	ldw	r3,4(r16)
 8006e10:	19c6703a 	and	r3,r3,r7
 8006e14:	1c45c83a 	sub	r2,r3,r17
 8006e18:	30bff90e 	bge	r6,r2,8006e00 <__alt_data_end+0xf8006e00>
 8006e1c:	213fffc4 	addi	r4,r4,-1
 8006e20:	21000044 	addi	r4,r4,1
 8006e24:	9c000417 	ldw	r16,16(r19)
 8006e28:	00c20074 	movhi	r3,2049
 8006e2c:	18fb9904 	addi	r3,r3,-4508
 8006e30:	1a400204 	addi	r9,r3,8
 8006e34:	8240ff26 	beq	r16,r9,8007234 <_malloc_r+0x584>
 8006e38:	81400117 	ldw	r5,4(r16)
 8006e3c:	00bfff04 	movi	r2,-4
 8006e40:	018003c4 	movi	r6,15
 8006e44:	2884703a 	and	r2,r5,r2
 8006e48:	144bc83a 	sub	r5,r2,r17
 8006e4c:	3140ea16 	blt	r6,r5,80071f8 <_malloc_r+0x548>
 8006e50:	1a400515 	stw	r9,20(r3)
 8006e54:	1a400415 	stw	r9,16(r3)
 8006e58:	2800570e 	bge	r5,zero,8006fb8 <_malloc_r+0x308>
 8006e5c:	01407fc4 	movi	r5,511
 8006e60:	2880ca36 	bltu	r5,r2,800718c <_malloc_r+0x4dc>
 8006e64:	1004d0fa 	srli	r2,r2,3
 8006e68:	02000044 	movi	r8,1
 8006e6c:	19c00117 	ldw	r7,4(r3)
 8006e70:	108b883a 	add	r5,r2,r2
 8006e74:	294b883a 	add	r5,r5,r5
 8006e78:	1005d0ba 	srai	r2,r2,2
 8006e7c:	294b883a 	add	r5,r5,r5
 8006e80:	28cb883a 	add	r5,r5,r3
 8006e84:	29800217 	ldw	r6,8(r5)
 8006e88:	4084983a 	sll	r2,r8,r2
 8006e8c:	81400315 	stw	r5,12(r16)
 8006e90:	81800215 	stw	r6,8(r16)
 8006e94:	11c4b03a 	or	r2,r2,r7
 8006e98:	18800115 	stw	r2,4(r3)
 8006e9c:	2c000215 	stw	r16,8(r5)
 8006ea0:	34000315 	stw	r16,12(r6)
 8006ea4:	200bd0ba 	srai	r5,r4,2
 8006ea8:	00c00044 	movi	r3,1
 8006eac:	194a983a 	sll	r5,r3,r5
 8006eb0:	11404936 	bltu	r2,r5,8006fd8 <_malloc_r+0x328>
 8006eb4:	1146703a 	and	r3,r2,r5
 8006eb8:	18000a1e 	bne	r3,zero,8006ee4 <_malloc_r+0x234>
 8006ebc:	00ffff04 	movi	r3,-4
 8006ec0:	294b883a 	add	r5,r5,r5
 8006ec4:	20c8703a 	and	r4,r4,r3
 8006ec8:	1146703a 	and	r3,r2,r5
 8006ecc:	21000104 	addi	r4,r4,4
 8006ed0:	1800041e 	bne	r3,zero,8006ee4 <_malloc_r+0x234>
 8006ed4:	294b883a 	add	r5,r5,r5
 8006ed8:	1146703a 	and	r3,r2,r5
 8006edc:	21000104 	addi	r4,r4,4
 8006ee0:	183ffc26 	beq	r3,zero,8006ed4 <__alt_data_end+0xf8006ed4>
 8006ee4:	023fff04 	movi	r8,-4
 8006ee8:	01c003c4 	movi	r7,15
 8006eec:	2105883a 	add	r2,r4,r4
 8006ef0:	1085883a 	add	r2,r2,r2
 8006ef4:	1085883a 	add	r2,r2,r2
 8006ef8:	9899883a 	add	r12,r19,r2
 8006efc:	62800304 	addi	r10,r12,12
 8006f00:	2017883a 	mov	r11,r4
 8006f04:	54000017 	ldw	r16,0(r10)
 8006f08:	51bffd04 	addi	r6,r10,-12
 8006f0c:	8180041e 	bne	r16,r6,8006f20 <_malloc_r+0x270>
 8006f10:	0000ca06 	br	800723c <_malloc_r+0x58c>
 8006f14:	10001c0e 	bge	r2,zero,8006f88 <_malloc_r+0x2d8>
 8006f18:	84000317 	ldw	r16,12(r16)
 8006f1c:	8180c726 	beq	r16,r6,800723c <_malloc_r+0x58c>
 8006f20:	80c00117 	ldw	r3,4(r16)
 8006f24:	1a06703a 	and	r3,r3,r8
 8006f28:	1c45c83a 	sub	r2,r3,r17
 8006f2c:	38bff90e 	bge	r7,r2,8006f14 <__alt_data_end+0xf8006f14>
 8006f30:	81000317 	ldw	r4,12(r16)
 8006f34:	81400217 	ldw	r5,8(r16)
 8006f38:	8447883a 	add	r3,r16,r17
 8006f3c:	8c400054 	ori	r17,r17,1
 8006f40:	29000315 	stw	r4,12(r5)
 8006f44:	21400215 	stw	r5,8(r4)
 8006f48:	84400115 	stw	r17,4(r16)
 8006f4c:	1889883a 	add	r4,r3,r2
 8006f50:	11400054 	ori	r5,r2,1
 8006f54:	98c00515 	stw	r3,20(r19)
 8006f58:	98c00415 	stw	r3,16(r19)
 8006f5c:	20800015 	stw	r2,0(r4)
 8006f60:	1a400315 	stw	r9,12(r3)
 8006f64:	1a400215 	stw	r9,8(r3)
 8006f68:	19400115 	stw	r5,4(r3)
 8006f6c:	9009883a 	mov	r4,r18
 8006f70:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8006f74:	80800204 	addi	r2,r16,8
 8006f78:	003f7b06 	br	8006d68 <__alt_data_end+0xf8006d68>
 8006f7c:	8808d0fa 	srli	r4,r17,3
 8006f80:	210b883a 	add	r5,r4,r4
 8006f84:	003f9106 	br	8006dcc <__alt_data_end+0xf8006dcc>
 8006f88:	80c7883a 	add	r3,r16,r3
 8006f8c:	19400117 	ldw	r5,4(r3)
 8006f90:	80800317 	ldw	r2,12(r16)
 8006f94:	81000217 	ldw	r4,8(r16)
 8006f98:	29400054 	ori	r5,r5,1
 8006f9c:	19400115 	stw	r5,4(r3)
 8006fa0:	20800315 	stw	r2,12(r4)
 8006fa4:	11000215 	stw	r4,8(r2)
 8006fa8:	9009883a 	mov	r4,r18
 8006fac:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8006fb0:	80800204 	addi	r2,r16,8
 8006fb4:	003f6c06 	br	8006d68 <__alt_data_end+0xf8006d68>
 8006fb8:	8085883a 	add	r2,r16,r2
 8006fbc:	10c00117 	ldw	r3,4(r2)
 8006fc0:	9009883a 	mov	r4,r18
 8006fc4:	18c00054 	ori	r3,r3,1
 8006fc8:	10c00115 	stw	r3,4(r2)
 8006fcc:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8006fd0:	80800204 	addi	r2,r16,8
 8006fd4:	003f6406 	br	8006d68 <__alt_data_end+0xf8006d68>
 8006fd8:	9c000217 	ldw	r16,8(r19)
 8006fdc:	00bfff04 	movi	r2,-4
 8006fe0:	85400117 	ldw	r21,4(r16)
 8006fe4:	a8aa703a 	and	r21,r21,r2
 8006fe8:	ac400336 	bltu	r21,r17,8006ff8 <_malloc_r+0x348>
 8006fec:	ac45c83a 	sub	r2,r21,r17
 8006ff0:	00c003c4 	movi	r3,15
 8006ff4:	18805316 	blt	r3,r2,8007144 <_malloc_r+0x494>
 8006ff8:	d5e6ab17 	ldw	r23,-25940(gp)
 8006ffc:	d0e00317 	ldw	r3,-32756(gp)
 8007000:	00bfffc4 	movi	r2,-1
 8007004:	8579883a 	add	fp,r16,r21
 8007008:	8def883a 	add	r23,r17,r23
 800700c:	1880d226 	beq	r3,r2,8007358 <_malloc_r+0x6a8>
 8007010:	bdc403c4 	addi	r23,r23,4111
 8007014:	00bc0004 	movi	r2,-4096
 8007018:	b8ae703a 	and	r23,r23,r2
 800701c:	9009883a 	mov	r4,r18
 8007020:	b80b883a 	mov	r5,r23
 8007024:	8008f840 	call	8008f84 <_sbrk_r>
 8007028:	1029883a 	mov	r20,r2
 800702c:	00bfffc4 	movi	r2,-1
 8007030:	a080d126 	beq	r20,r2,8007378 <_malloc_r+0x6c8>
 8007034:	a7009f36 	bltu	r20,fp,80072b4 <_malloc_r+0x604>
 8007038:	05820074 	movhi	r22,2049
 800703c:	b587d004 	addi	r22,r22,8000
 8007040:	b0800017 	ldw	r2,0(r22)
 8007044:	b885883a 	add	r2,r23,r2
 8007048:	b0800015 	stw	r2,0(r22)
 800704c:	e500cf26 	beq	fp,r20,800738c <_malloc_r+0x6dc>
 8007050:	d1200317 	ldw	r4,-32756(gp)
 8007054:	00ffffc4 	movi	r3,-1
 8007058:	20c0e026 	beq	r4,r3,80073dc <_malloc_r+0x72c>
 800705c:	a739c83a 	sub	fp,r20,fp
 8007060:	1705883a 	add	r2,r2,fp
 8007064:	b0800015 	stw	r2,0(r22)
 8007068:	a08001cc 	andi	r2,r20,7
 800706c:	1000a526 	beq	r2,zero,8007304 <_malloc_r+0x654>
 8007070:	a0a9c83a 	sub	r20,r20,r2
 8007074:	00c40204 	movi	r3,4104
 8007078:	a5000204 	addi	r20,r20,8
 800707c:	1885c83a 	sub	r2,r3,r2
 8007080:	a5c7883a 	add	r3,r20,r23
 8007084:	18c3ffcc 	andi	r3,r3,4095
 8007088:	10efc83a 	sub	r23,r2,r3
 800708c:	9009883a 	mov	r4,r18
 8007090:	b80b883a 	mov	r5,r23
 8007094:	8008f840 	call	8008f84 <_sbrk_r>
 8007098:	00ffffc4 	movi	r3,-1
 800709c:	10c0cc26 	beq	r2,r3,80073d0 <_malloc_r+0x720>
 80070a0:	1505c83a 	sub	r2,r2,r20
 80070a4:	b887883a 	add	r3,r23,r2
 80070a8:	18c00054 	ori	r3,r3,1
 80070ac:	b0800017 	ldw	r2,0(r22)
 80070b0:	9d000215 	stw	r20,8(r19)
 80070b4:	a0c00115 	stw	r3,4(r20)
 80070b8:	b885883a 	add	r2,r23,r2
 80070bc:	b0800015 	stw	r2,0(r22)
 80070c0:	84c00e26 	beq	r16,r19,80070fc <_malloc_r+0x44c>
 80070c4:	00c003c4 	movi	r3,15
 80070c8:	1d40902e 	bgeu	r3,r21,800730c <_malloc_r+0x65c>
 80070cc:	ad7ffd04 	addi	r21,r21,-12
 80070d0:	013ffe04 	movi	r4,-8
 80070d4:	a908703a 	and	r4,r21,r4
 80070d8:	810b883a 	add	r5,r16,r4
 80070dc:	01800144 	movi	r6,5
 80070e0:	29800115 	stw	r6,4(r5)
 80070e4:	29800215 	stw	r6,8(r5)
 80070e8:	81400117 	ldw	r5,4(r16)
 80070ec:	2940004c 	andi	r5,r5,1
 80070f0:	214ab03a 	or	r5,r4,r5
 80070f4:	81400115 	stw	r5,4(r16)
 80070f8:	1900ae36 	bltu	r3,r4,80073b4 <_malloc_r+0x704>
 80070fc:	d0e6aa17 	ldw	r3,-25944(gp)
 8007100:	1880012e 	bgeu	r3,r2,8007108 <_malloc_r+0x458>
 8007104:	d0a6aa15 	stw	r2,-25944(gp)
 8007108:	d0e6a917 	ldw	r3,-25948(gp)
 800710c:	9c000217 	ldw	r16,8(r19)
 8007110:	1880012e 	bgeu	r3,r2,8007118 <_malloc_r+0x468>
 8007114:	d0a6a915 	stw	r2,-25948(gp)
 8007118:	80c00117 	ldw	r3,4(r16)
 800711c:	00bfff04 	movi	r2,-4
 8007120:	1886703a 	and	r3,r3,r2
 8007124:	1c45c83a 	sub	r2,r3,r17
 8007128:	1c400236 	bltu	r3,r17,8007134 <_malloc_r+0x484>
 800712c:	00c003c4 	movi	r3,15
 8007130:	18800416 	blt	r3,r2,8007144 <_malloc_r+0x494>
 8007134:	9009883a 	mov	r4,r18
 8007138:	800bd7c0 	call	800bd7c <__malloc_unlock>
 800713c:	0005883a 	mov	r2,zero
 8007140:	003f0906 	br	8006d68 <__alt_data_end+0xf8006d68>
 8007144:	88c00054 	ori	r3,r17,1
 8007148:	10800054 	ori	r2,r2,1
 800714c:	80c00115 	stw	r3,4(r16)
 8007150:	8463883a 	add	r17,r16,r17
 8007154:	88800115 	stw	r2,4(r17)
 8007158:	9009883a 	mov	r4,r18
 800715c:	9c400215 	stw	r17,8(r19)
 8007160:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8007164:	80800204 	addi	r2,r16,8
 8007168:	003eff06 	br	8006d68 <__alt_data_end+0xf8006d68>
 800716c:	00800504 	movi	r2,20
 8007170:	1100492e 	bgeu	r2,r4,8007298 <_malloc_r+0x5e8>
 8007174:	00801504 	movi	r2,84
 8007178:	11005c36 	bltu	r2,r4,80072ec <_malloc_r+0x63c>
 800717c:	8808d33a 	srli	r4,r17,12
 8007180:	21001b84 	addi	r4,r4,110
 8007184:	210b883a 	add	r5,r4,r4
 8007188:	003f1006 	br	8006dcc <__alt_data_end+0xf8006dcc>
 800718c:	1006d27a 	srli	r3,r2,9
 8007190:	01400104 	movi	r5,4
 8007194:	28c0432e 	bgeu	r5,r3,80072a4 <_malloc_r+0x5f4>
 8007198:	01400504 	movi	r5,20
 800719c:	28c07036 	bltu	r5,r3,8007360 <_malloc_r+0x6b0>
 80071a0:	194016c4 	addi	r5,r3,91
 80071a4:	294d883a 	add	r6,r5,r5
 80071a8:	318d883a 	add	r6,r6,r6
 80071ac:	318d883a 	add	r6,r6,r6
 80071b0:	998d883a 	add	r6,r19,r6
 80071b4:	30c00217 	ldw	r3,8(r6)
 80071b8:	01c20074 	movhi	r7,2049
 80071bc:	39fb9904 	addi	r7,r7,-4508
 80071c0:	19805726 	beq	r3,r6,8007320 <_malloc_r+0x670>
 80071c4:	01ffff04 	movi	r7,-4
 80071c8:	19400117 	ldw	r5,4(r3)
 80071cc:	29ca703a 	and	r5,r5,r7
 80071d0:	1140022e 	bgeu	r2,r5,80071dc <_malloc_r+0x52c>
 80071d4:	18c00217 	ldw	r3,8(r3)
 80071d8:	30fffb1e 	bne	r6,r3,80071c8 <__alt_data_end+0xf80071c8>
 80071dc:	19400317 	ldw	r5,12(r3)
 80071e0:	98800117 	ldw	r2,4(r19)
 80071e4:	81400315 	stw	r5,12(r16)
 80071e8:	80c00215 	stw	r3,8(r16)
 80071ec:	2c000215 	stw	r16,8(r5)
 80071f0:	1c000315 	stw	r16,12(r3)
 80071f4:	003f2b06 	br	8006ea4 <__alt_data_end+0xf8006ea4>
 80071f8:	8445883a 	add	r2,r16,r17
 80071fc:	8c400054 	ori	r17,r17,1
 8007200:	18800515 	stw	r2,20(r3)
 8007204:	18800415 	stw	r2,16(r3)
 8007208:	29000054 	ori	r4,r5,1
 800720c:	1147883a 	add	r3,r2,r5
 8007210:	84400115 	stw	r17,4(r16)
 8007214:	11000115 	stw	r4,4(r2)
 8007218:	12400315 	stw	r9,12(r2)
 800721c:	12400215 	stw	r9,8(r2)
 8007220:	19400015 	stw	r5,0(r3)
 8007224:	9009883a 	mov	r4,r18
 8007228:	800bd7c0 	call	800bd7c <__malloc_unlock>
 800722c:	80800204 	addi	r2,r16,8
 8007230:	003ecd06 	br	8006d68 <__alt_data_end+0xf8006d68>
 8007234:	18800117 	ldw	r2,4(r3)
 8007238:	003f1a06 	br	8006ea4 <__alt_data_end+0xf8006ea4>
 800723c:	5ac00044 	addi	r11,r11,1
 8007240:	588000cc 	andi	r2,r11,3
 8007244:	52800204 	addi	r10,r10,8
 8007248:	103f2e1e 	bne	r2,zero,8006f04 <__alt_data_end+0xf8006f04>
 800724c:	20c000cc 	andi	r3,r4,3
 8007250:	60bffe04 	addi	r2,r12,-8
 8007254:	18006f26 	beq	r3,zero,8007414 <_malloc_r+0x764>
 8007258:	63000017 	ldw	r12,0(r12)
 800725c:	213fffc4 	addi	r4,r4,-1
 8007260:	60bffa26 	beq	r12,r2,800724c <__alt_data_end+0xf800724c>
 8007264:	98800117 	ldw	r2,4(r19)
 8007268:	294b883a 	add	r5,r5,r5
 800726c:	117f5a36 	bltu	r2,r5,8006fd8 <__alt_data_end+0xf8006fd8>
 8007270:	283f5926 	beq	r5,zero,8006fd8 <__alt_data_end+0xf8006fd8>
 8007274:	1146703a 	and	r3,r2,r5
 8007278:	18001626 	beq	r3,zero,80072d4 <_malloc_r+0x624>
 800727c:	5809883a 	mov	r4,r11
 8007280:	003f1a06 	br	8006eec <__alt_data_end+0xf8006eec>
 8007284:	80800204 	addi	r2,r16,8
 8007288:	84000517 	ldw	r16,20(r16)
 800728c:	143ea81e 	bne	r2,r16,8006d30 <__alt_data_end+0xf8006d30>
 8007290:	21000084 	addi	r4,r4,2
 8007294:	003ee306 	br	8006e24 <__alt_data_end+0xf8006e24>
 8007298:	210016c4 	addi	r4,r4,91
 800729c:	210b883a 	add	r5,r4,r4
 80072a0:	003eca06 	br	8006dcc <__alt_data_end+0xf8006dcc>
 80072a4:	100ad1ba 	srli	r5,r2,6
 80072a8:	29400e04 	addi	r5,r5,56
 80072ac:	294d883a 	add	r6,r5,r5
 80072b0:	003fbd06 	br	80071a8 <__alt_data_end+0xf80071a8>
 80072b4:	84ff6026 	beq	r16,r19,8007038 <__alt_data_end+0xf8007038>
 80072b8:	00820074 	movhi	r2,2049
 80072bc:	10bb9904 	addi	r2,r2,-4508
 80072c0:	14000217 	ldw	r16,8(r2)
 80072c4:	00bfff04 	movi	r2,-4
 80072c8:	80c00117 	ldw	r3,4(r16)
 80072cc:	1886703a 	and	r3,r3,r2
 80072d0:	003f9406 	br	8007124 <__alt_data_end+0xf8007124>
 80072d4:	294b883a 	add	r5,r5,r5
 80072d8:	1146703a 	and	r3,r2,r5
 80072dc:	5ac00104 	addi	r11,r11,4
 80072e0:	183ffc26 	beq	r3,zero,80072d4 <__alt_data_end+0xf80072d4>
 80072e4:	5809883a 	mov	r4,r11
 80072e8:	003f0006 	br	8006eec <__alt_data_end+0xf8006eec>
 80072ec:	00805504 	movi	r2,340
 80072f0:	11001336 	bltu	r2,r4,8007340 <_malloc_r+0x690>
 80072f4:	8808d3fa 	srli	r4,r17,15
 80072f8:	21001dc4 	addi	r4,r4,119
 80072fc:	210b883a 	add	r5,r4,r4
 8007300:	003eb206 	br	8006dcc <__alt_data_end+0xf8006dcc>
 8007304:	00840004 	movi	r2,4096
 8007308:	003f5d06 	br	8007080 <__alt_data_end+0xf8007080>
 800730c:	00800044 	movi	r2,1
 8007310:	a0800115 	stw	r2,4(r20)
 8007314:	a021883a 	mov	r16,r20
 8007318:	0007883a 	mov	r3,zero
 800731c:	003f8106 	br	8007124 <__alt_data_end+0xf8007124>
 8007320:	280bd0ba 	srai	r5,r5,2
 8007324:	01800044 	movi	r6,1
 8007328:	38800117 	ldw	r2,4(r7)
 800732c:	314c983a 	sll	r6,r6,r5
 8007330:	180b883a 	mov	r5,r3
 8007334:	3084b03a 	or	r2,r6,r2
 8007338:	38800115 	stw	r2,4(r7)
 800733c:	003fa906 	br	80071e4 <__alt_data_end+0xf80071e4>
 8007340:	00815504 	movi	r2,1364
 8007344:	11001836 	bltu	r2,r4,80073a8 <_malloc_r+0x6f8>
 8007348:	8808d4ba 	srli	r4,r17,18
 800734c:	21001f04 	addi	r4,r4,124
 8007350:	210b883a 	add	r5,r4,r4
 8007354:	003e9d06 	br	8006dcc <__alt_data_end+0xf8006dcc>
 8007358:	bdc00404 	addi	r23,r23,16
 800735c:	003f2f06 	br	800701c <__alt_data_end+0xf800701c>
 8007360:	01401504 	movi	r5,84
 8007364:	28c01f36 	bltu	r5,r3,80073e4 <_malloc_r+0x734>
 8007368:	100ad33a 	srli	r5,r2,12
 800736c:	29401b84 	addi	r5,r5,110
 8007370:	294d883a 	add	r6,r5,r5
 8007374:	003f8c06 	br	80071a8 <__alt_data_end+0xf80071a8>
 8007378:	9c000217 	ldw	r16,8(r19)
 800737c:	00bfff04 	movi	r2,-4
 8007380:	80c00117 	ldw	r3,4(r16)
 8007384:	1886703a 	and	r3,r3,r2
 8007388:	003f6606 	br	8007124 <__alt_data_end+0xf8007124>
 800738c:	e0c3ffcc 	andi	r3,fp,4095
 8007390:	183f2f1e 	bne	r3,zero,8007050 <__alt_data_end+0xf8007050>
 8007394:	98c00217 	ldw	r3,8(r19)
 8007398:	bd49883a 	add	r4,r23,r21
 800739c:	21000054 	ori	r4,r4,1
 80073a0:	19000115 	stw	r4,4(r3)
 80073a4:	003f5506 	br	80070fc <__alt_data_end+0xf80070fc>
 80073a8:	01403f04 	movi	r5,252
 80073ac:	01001f84 	movi	r4,126
 80073b0:	003e8606 	br	8006dcc <__alt_data_end+0xf8006dcc>
 80073b4:	9009883a 	mov	r4,r18
 80073b8:	81400204 	addi	r5,r16,8
 80073bc:	80061180 	call	8006118 <_free_r>
 80073c0:	00820074 	movhi	r2,2049
 80073c4:	1087d004 	addi	r2,r2,8000
 80073c8:	10800017 	ldw	r2,0(r2)
 80073cc:	003f4b06 	br	80070fc <__alt_data_end+0xf80070fc>
 80073d0:	00c00044 	movi	r3,1
 80073d4:	002f883a 	mov	r23,zero
 80073d8:	003f3406 	br	80070ac <__alt_data_end+0xf80070ac>
 80073dc:	d5200315 	stw	r20,-32756(gp)
 80073e0:	003f2106 	br	8007068 <__alt_data_end+0xf8007068>
 80073e4:	01405504 	movi	r5,340
 80073e8:	28c00436 	bltu	r5,r3,80073fc <_malloc_r+0x74c>
 80073ec:	100ad3fa 	srli	r5,r2,15
 80073f0:	29401dc4 	addi	r5,r5,119
 80073f4:	294d883a 	add	r6,r5,r5
 80073f8:	003f6b06 	br	80071a8 <__alt_data_end+0xf80071a8>
 80073fc:	01415504 	movi	r5,1364
 8007400:	28c00936 	bltu	r5,r3,8007428 <_malloc_r+0x778>
 8007404:	100ad4ba 	srli	r5,r2,18
 8007408:	29401f04 	addi	r5,r5,124
 800740c:	294d883a 	add	r6,r5,r5
 8007410:	003f6506 	br	80071a8 <__alt_data_end+0xf80071a8>
 8007414:	98800117 	ldw	r2,4(r19)
 8007418:	0146303a 	nor	r3,zero,r5
 800741c:	1884703a 	and	r2,r3,r2
 8007420:	98800115 	stw	r2,4(r19)
 8007424:	003f9006 	br	8007268 <__alt_data_end+0xf8007268>
 8007428:	01803f04 	movi	r6,252
 800742c:	01401f84 	movi	r5,126
 8007430:	003f5d06 	br	80071a8 <__alt_data_end+0xf80071a8>

08007434 <memchr>:
 8007434:	008000c4 	movi	r2,3
 8007438:	29403fcc 	andi	r5,r5,255
 800743c:	1180282e 	bgeu	r2,r6,80074e0 <memchr+0xac>
 8007440:	2086703a 	and	r3,r4,r2
 8007444:	1800351e 	bne	r3,zero,800751c <memchr+0xe8>
 8007448:	2816923a 	slli	r11,r5,8
 800744c:	2093883a 	add	r9,r4,r2
 8007450:	22000084 	addi	r8,r4,2
 8007454:	5957883a 	add	r11,r11,r5
 8007458:	5816923a 	slli	r11,r11,8
 800745c:	20c00044 	addi	r3,r4,1
 8007460:	037fbff4 	movhi	r13,65279
 8007464:	6b7fbfc4 	addi	r13,r13,-257
 8007468:	5957883a 	add	r11,r11,r5
 800746c:	5816923a 	slli	r11,r11,8
 8007470:	03202074 	movhi	r12,32897
 8007474:	63202004 	addi	r12,r12,-32640
 8007478:	101d883a 	mov	r14,r2
 800747c:	5957883a 	add	r11,r11,r5
 8007480:	21c00017 	ldw	r7,0(r4)
 8007484:	31bfff04 	addi	r6,r6,-4
 8007488:	1805883a 	mov	r2,r3
 800748c:	3acef03a 	xor	r7,r7,r11
 8007490:	3b55883a 	add	r10,r7,r13
 8007494:	01ce303a 	nor	r7,zero,r7
 8007498:	51ce703a 	and	r7,r10,r7
 800749c:	3b0e703a 	and	r7,r7,r12
 80074a0:	38000a26 	beq	r7,zero,80074cc <memchr+0x98>
 80074a4:	21c00003 	ldbu	r7,0(r4)
 80074a8:	39401e26 	beq	r7,r5,8007524 <memchr+0xf0>
 80074ac:	19c00003 	ldbu	r7,0(r3)
 80074b0:	39401926 	beq	r7,r5,8007518 <memchr+0xe4>
 80074b4:	41c00003 	ldbu	r7,0(r8)
 80074b8:	4005883a 	mov	r2,r8
 80074bc:	39401626 	beq	r7,r5,8007518 <memchr+0xe4>
 80074c0:	49c00003 	ldbu	r7,0(r9)
 80074c4:	4805883a 	mov	r2,r9
 80074c8:	39401326 	beq	r7,r5,8007518 <memchr+0xe4>
 80074cc:	21000104 	addi	r4,r4,4
 80074d0:	4a400104 	addi	r9,r9,4
 80074d4:	42000104 	addi	r8,r8,4
 80074d8:	18c00104 	addi	r3,r3,4
 80074dc:	71bfe836 	bltu	r14,r6,8007480 <__alt_data_end+0xf8007480>
 80074e0:	2005883a 	mov	r2,r4
 80074e4:	30000a26 	beq	r6,zero,8007510 <memchr+0xdc>
 80074e8:	10c00003 	ldbu	r3,0(r2)
 80074ec:	19400a26 	beq	r3,r5,8007518 <memchr+0xe4>
 80074f0:	10c00044 	addi	r3,r2,1
 80074f4:	118d883a 	add	r6,r2,r6
 80074f8:	00000306 	br	8007508 <memchr+0xd4>
 80074fc:	11000003 	ldbu	r4,0(r2)
 8007500:	18c00044 	addi	r3,r3,1
 8007504:	21400426 	beq	r4,r5,8007518 <memchr+0xe4>
 8007508:	1805883a 	mov	r2,r3
 800750c:	19bffb1e 	bne	r3,r6,80074fc <__alt_data_end+0xf80074fc>
 8007510:	0005883a 	mov	r2,zero
 8007514:	f800283a 	ret
 8007518:	f800283a 	ret
 800751c:	2005883a 	mov	r2,r4
 8007520:	003ff106 	br	80074e8 <__alt_data_end+0xf80074e8>
 8007524:	2005883a 	mov	r2,r4
 8007528:	f800283a 	ret

0800752c <memcpy>:
 800752c:	defffb04 	addi	sp,sp,-20
 8007530:	dc000015 	stw	r16,0(sp)
 8007534:	dfc00415 	stw	ra,16(sp)
 8007538:	dcc00315 	stw	r19,12(sp)
 800753c:	dc800215 	stw	r18,8(sp)
 8007540:	dc400115 	stw	r17,4(sp)
 8007544:	00c003c4 	movi	r3,15
 8007548:	2021883a 	mov	r16,r4
 800754c:	3005883a 	mov	r2,r6
 8007550:	1980032e 	bgeu	r3,r6,8007560 <memcpy+0x34>
 8007554:	2906b03a 	or	r3,r5,r4
 8007558:	18c000cc 	andi	r3,r3,3
 800755c:	18001026 	beq	r3,zero,80075a0 <memcpy+0x74>
 8007560:	8007883a 	mov	r3,r16
 8007564:	288f883a 	add	r7,r5,r2
 8007568:	10000526 	beq	r2,zero,8007580 <memcpy+0x54>
 800756c:	29800003 	ldbu	r6,0(r5)
 8007570:	18c00044 	addi	r3,r3,1
 8007574:	29400044 	addi	r5,r5,1
 8007578:	19bfffc5 	stb	r6,-1(r3)
 800757c:	29fffb1e 	bne	r5,r7,800756c <__alt_data_end+0xf800756c>
 8007580:	8005883a 	mov	r2,r16
 8007584:	dfc00417 	ldw	ra,16(sp)
 8007588:	dcc00317 	ldw	r19,12(sp)
 800758c:	dc800217 	ldw	r18,8(sp)
 8007590:	dc400117 	ldw	r17,4(sp)
 8007594:	dc000017 	ldw	r16,0(sp)
 8007598:	dec00504 	addi	sp,sp,20
 800759c:	f800283a 	ret
 80075a0:	32bffc04 	addi	r10,r6,-16
 80075a4:	5014d13a 	srli	r10,r10,4
 80075a8:	20800404 	addi	r2,r4,16
 80075ac:	2007883a 	mov	r3,r4
 80075b0:	5008913a 	slli	r4,r10,4
 80075b4:	280f883a 	mov	r7,r5
 80075b8:	1105883a 	add	r2,r2,r4
 80075bc:	3a000017 	ldw	r8,0(r7)
 80075c0:	18c00404 	addi	r3,r3,16
 80075c4:	39c00404 	addi	r7,r7,16
 80075c8:	1a3ffc15 	stw	r8,-16(r3)
 80075cc:	3a3ffd17 	ldw	r8,-12(r7)
 80075d0:	1a3ffd15 	stw	r8,-12(r3)
 80075d4:	3a3ffe17 	ldw	r8,-8(r7)
 80075d8:	1a3ffe15 	stw	r8,-8(r3)
 80075dc:	3a3fff17 	ldw	r8,-4(r7)
 80075e0:	1a3fff15 	stw	r8,-4(r3)
 80075e4:	18bff51e 	bne	r3,r2,80075bc <__alt_data_end+0xf80075bc>
 80075e8:	52800044 	addi	r10,r10,1
 80075ec:	5014913a 	slli	r10,r10,4
 80075f0:	308003cc 	andi	r2,r6,15
 80075f4:	010000c4 	movi	r4,3
 80075f8:	8287883a 	add	r3,r16,r10
 80075fc:	2a95883a 	add	r10,r5,r10
 8007600:	2080182e 	bgeu	r4,r2,8007664 <memcpy+0x138>
 8007604:	147fff04 	addi	r17,r2,-4
 8007608:	8808d0ba 	srli	r4,r17,2
 800760c:	1a400104 	addi	r9,r3,4
 8007610:	180d883a 	mov	r6,r3
 8007614:	2105883a 	add	r2,r4,r4
 8007618:	1085883a 	add	r2,r2,r2
 800761c:	4893883a 	add	r9,r9,r2
 8007620:	500f883a 	mov	r7,r10
 8007624:	3a000017 	ldw	r8,0(r7)
 8007628:	31800104 	addi	r6,r6,4
 800762c:	39c00104 	addi	r7,r7,4
 8007630:	323fff15 	stw	r8,-4(r6)
 8007634:	327ffb1e 	bne	r6,r9,8007624 <__alt_data_end+0xf8007624>
 8007638:	20800044 	addi	r2,r4,1
 800763c:	1085883a 	add	r2,r2,r2
 8007640:	1085883a 	add	r2,r2,r2
 8007644:	017fff04 	movi	r5,-4
 8007648:	18a5883a 	add	r18,r3,r2
 800764c:	50a7883a 	add	r19,r10,r2
 8007650:	800b1340 	call	800b134 <__mulsi3>
 8007654:	1445883a 	add	r2,r2,r17
 8007658:	980b883a 	mov	r5,r19
 800765c:	9007883a 	mov	r3,r18
 8007660:	003fc006 	br	8007564 <__alt_data_end+0xf8007564>
 8007664:	500b883a 	mov	r5,r10
 8007668:	003fbe06 	br	8007564 <__alt_data_end+0xf8007564>

0800766c <memmove>:
 800766c:	defffb04 	addi	sp,sp,-20
 8007670:	dc000015 	stw	r16,0(sp)
 8007674:	dfc00415 	stw	ra,16(sp)
 8007678:	dcc00315 	stw	r19,12(sp)
 800767c:	dc800215 	stw	r18,8(sp)
 8007680:	dc400115 	stw	r17,4(sp)
 8007684:	2021883a 	mov	r16,r4
 8007688:	300f883a 	mov	r7,r6
 800768c:	2900122e 	bgeu	r5,r4,80076d8 <memmove+0x6c>
 8007690:	2987883a 	add	r3,r5,r6
 8007694:	20c0102e 	bgeu	r4,r3,80076d8 <memmove+0x6c>
 8007698:	218b883a 	add	r5,r4,r6
 800769c:	1989c83a 	sub	r4,r3,r6
 80076a0:	30000526 	beq	r6,zero,80076b8 <memmove+0x4c>
 80076a4:	18ffffc4 	addi	r3,r3,-1
 80076a8:	18800003 	ldbu	r2,0(r3)
 80076ac:	297fffc4 	addi	r5,r5,-1
 80076b0:	28800005 	stb	r2,0(r5)
 80076b4:	193ffb1e 	bne	r3,r4,80076a4 <__alt_data_end+0xf80076a4>
 80076b8:	8005883a 	mov	r2,r16
 80076bc:	dfc00417 	ldw	ra,16(sp)
 80076c0:	dcc00317 	ldw	r19,12(sp)
 80076c4:	dc800217 	ldw	r18,8(sp)
 80076c8:	dc400117 	ldw	r17,4(sp)
 80076cc:	dc000017 	ldw	r16,0(sp)
 80076d0:	dec00504 	addi	sp,sp,20
 80076d4:	f800283a 	ret
 80076d8:	008003c4 	movi	r2,15
 80076dc:	1180422e 	bgeu	r2,r6,80077e8 <memmove+0x17c>
 80076e0:	2c04b03a 	or	r2,r5,r16
 80076e4:	108000cc 	andi	r2,r2,3
 80076e8:	10003f1e 	bne	r2,zero,80077e8 <memmove+0x17c>
 80076ec:	32bffc04 	addi	r10,r6,-16
 80076f0:	5014d13a 	srli	r10,r10,4
 80076f4:	81000404 	addi	r4,r16,16
 80076f8:	8007883a 	mov	r3,r16
 80076fc:	5004913a 	slli	r2,r10,4
 8007700:	280f883a 	mov	r7,r5
 8007704:	2089883a 	add	r4,r4,r2
 8007708:	38800017 	ldw	r2,0(r7)
 800770c:	18c00404 	addi	r3,r3,16
 8007710:	39c00404 	addi	r7,r7,16
 8007714:	18bffc15 	stw	r2,-16(r3)
 8007718:	38bffd17 	ldw	r2,-12(r7)
 800771c:	18bffd15 	stw	r2,-12(r3)
 8007720:	38bffe17 	ldw	r2,-8(r7)
 8007724:	18bffe15 	stw	r2,-8(r3)
 8007728:	38bfff17 	ldw	r2,-4(r7)
 800772c:	18bfff15 	stw	r2,-4(r3)
 8007730:	193ff51e 	bne	r3,r4,8007708 <__alt_data_end+0xf8007708>
 8007734:	52800044 	addi	r10,r10,1
 8007738:	5014913a 	slli	r10,r10,4
 800773c:	31c003cc 	andi	r7,r6,15
 8007740:	008000c4 	movi	r2,3
 8007744:	8287883a 	add	r3,r16,r10
 8007748:	2a95883a 	add	r10,r5,r10
 800774c:	11c0282e 	bgeu	r2,r7,80077f0 <memmove+0x184>
 8007750:	3c7fff04 	addi	r17,r7,-4
 8007754:	8808d0ba 	srli	r4,r17,2
 8007758:	1a400104 	addi	r9,r3,4
 800775c:	180d883a 	mov	r6,r3
 8007760:	2105883a 	add	r2,r4,r4
 8007764:	1085883a 	add	r2,r2,r2
 8007768:	4893883a 	add	r9,r9,r2
 800776c:	5005883a 	mov	r2,r10
 8007770:	12000017 	ldw	r8,0(r2)
 8007774:	31800104 	addi	r6,r6,4
 8007778:	10800104 	addi	r2,r2,4
 800777c:	323fff15 	stw	r8,-4(r6)
 8007780:	327ffb1e 	bne	r6,r9,8007770 <__alt_data_end+0xf8007770>
 8007784:	20800044 	addi	r2,r4,1
 8007788:	1085883a 	add	r2,r2,r2
 800778c:	1085883a 	add	r2,r2,r2
 8007790:	017fff04 	movi	r5,-4
 8007794:	18a5883a 	add	r18,r3,r2
 8007798:	50a7883a 	add	r19,r10,r2
 800779c:	800b1340 	call	800b134 <__mulsi3>
 80077a0:	144f883a 	add	r7,r2,r17
 80077a4:	980b883a 	mov	r5,r19
 80077a8:	9007883a 	mov	r3,r18
 80077ac:	383fc226 	beq	r7,zero,80076b8 <__alt_data_end+0xf80076b8>
 80077b0:	19cf883a 	add	r7,r3,r7
 80077b4:	29800003 	ldbu	r6,0(r5)
 80077b8:	18c00044 	addi	r3,r3,1
 80077bc:	29400044 	addi	r5,r5,1
 80077c0:	19bfffc5 	stb	r6,-1(r3)
 80077c4:	19fffb1e 	bne	r3,r7,80077b4 <__alt_data_end+0xf80077b4>
 80077c8:	8005883a 	mov	r2,r16
 80077cc:	dfc00417 	ldw	ra,16(sp)
 80077d0:	dcc00317 	ldw	r19,12(sp)
 80077d4:	dc800217 	ldw	r18,8(sp)
 80077d8:	dc400117 	ldw	r17,4(sp)
 80077dc:	dc000017 	ldw	r16,0(sp)
 80077e0:	dec00504 	addi	sp,sp,20
 80077e4:	f800283a 	ret
 80077e8:	8007883a 	mov	r3,r16
 80077ec:	003fef06 	br	80077ac <__alt_data_end+0xf80077ac>
 80077f0:	500b883a 	mov	r5,r10
 80077f4:	003fed06 	br	80077ac <__alt_data_end+0xf80077ac>

080077f8 <memset>:
 80077f8:	00c000c4 	movi	r3,3
 80077fc:	2005883a 	mov	r2,r4
 8007800:	29403fcc 	andi	r5,r5,255
 8007804:	19802d2e 	bgeu	r3,r6,80078bc <memset+0xc4>
 8007808:	20c6703a 	and	r3,r4,r3
 800780c:	18002e1e 	bne	r3,zero,80078c8 <memset+0xd0>
 8007810:	2806923a 	slli	r3,r5,8
 8007814:	010003c4 	movi	r4,15
 8007818:	3011883a 	mov	r8,r6
 800781c:	1946b03a 	or	r3,r3,r5
 8007820:	180e943a 	slli	r7,r3,16
 8007824:	38ceb03a 	or	r7,r7,r3
 8007828:	1007883a 	mov	r3,r2
 800782c:	21800f2e 	bgeu	r4,r6,800786c <memset+0x74>
 8007830:	19c00015 	stw	r7,0(r3)
 8007834:	19c00115 	stw	r7,4(r3)
 8007838:	19c00215 	stw	r7,8(r3)
 800783c:	19c00315 	stw	r7,12(r3)
 8007840:	423ffc04 	addi	r8,r8,-16
 8007844:	18c00404 	addi	r3,r3,16
 8007848:	223ff936 	bltu	r4,r8,8007830 <__alt_data_end+0xf8007830>
 800784c:	30fffc04 	addi	r3,r6,-16
 8007850:	1806d13a 	srli	r3,r3,4
 8007854:	318003cc 	andi	r6,r6,15
 8007858:	010000c4 	movi	r4,3
 800785c:	18c00044 	addi	r3,r3,1
 8007860:	1806913a 	slli	r3,r3,4
 8007864:	10c7883a 	add	r3,r2,r3
 8007868:	21800e2e 	bgeu	r4,r6,80078a4 <memset+0xac>
 800786c:	1813883a 	mov	r9,r3
 8007870:	3011883a 	mov	r8,r6
 8007874:	010000c4 	movi	r4,3
 8007878:	49c00015 	stw	r7,0(r9)
 800787c:	423fff04 	addi	r8,r8,-4
 8007880:	4a400104 	addi	r9,r9,4
 8007884:	223ffc36 	bltu	r4,r8,8007878 <__alt_data_end+0xf8007878>
 8007888:	313fff04 	addi	r4,r6,-4
 800788c:	2008d0ba 	srli	r4,r4,2
 8007890:	318000cc 	andi	r6,r6,3
 8007894:	21000044 	addi	r4,r4,1
 8007898:	2109883a 	add	r4,r4,r4
 800789c:	2109883a 	add	r4,r4,r4
 80078a0:	1907883a 	add	r3,r3,r4
 80078a4:	30000a26 	beq	r6,zero,80078d0 <memset+0xd8>
 80078a8:	198d883a 	add	r6,r3,r6
 80078ac:	19400005 	stb	r5,0(r3)
 80078b0:	18c00044 	addi	r3,r3,1
 80078b4:	19bffd1e 	bne	r3,r6,80078ac <__alt_data_end+0xf80078ac>
 80078b8:	f800283a 	ret
 80078bc:	2007883a 	mov	r3,r4
 80078c0:	303ff91e 	bne	r6,zero,80078a8 <__alt_data_end+0xf80078a8>
 80078c4:	00000206 	br	80078d0 <memset+0xd8>
 80078c8:	2007883a 	mov	r3,r4
 80078cc:	003ff606 	br	80078a8 <__alt_data_end+0xf80078a8>
 80078d0:	f800283a 	ret

080078d4 <_Balloc>:
 80078d4:	20801317 	ldw	r2,76(r4)
 80078d8:	defffc04 	addi	sp,sp,-16
 80078dc:	dc400115 	stw	r17,4(sp)
 80078e0:	dc000015 	stw	r16,0(sp)
 80078e4:	dfc00315 	stw	ra,12(sp)
 80078e8:	dc800215 	stw	r18,8(sp)
 80078ec:	2023883a 	mov	r17,r4
 80078f0:	2821883a 	mov	r16,r5
 80078f4:	10000f26 	beq	r2,zero,8007934 <_Balloc+0x60>
 80078f8:	8407883a 	add	r3,r16,r16
 80078fc:	18c7883a 	add	r3,r3,r3
 8007900:	10c7883a 	add	r3,r2,r3
 8007904:	18800017 	ldw	r2,0(r3)
 8007908:	10001126 	beq	r2,zero,8007950 <_Balloc+0x7c>
 800790c:	11000017 	ldw	r4,0(r2)
 8007910:	19000015 	stw	r4,0(r3)
 8007914:	10000415 	stw	zero,16(r2)
 8007918:	10000315 	stw	zero,12(r2)
 800791c:	dfc00317 	ldw	ra,12(sp)
 8007920:	dc800217 	ldw	r18,8(sp)
 8007924:	dc400117 	ldw	r17,4(sp)
 8007928:	dc000017 	ldw	r16,0(sp)
 800792c:	dec00404 	addi	sp,sp,16
 8007930:	f800283a 	ret
 8007934:	01400104 	movi	r5,4
 8007938:	01800404 	movi	r6,16
 800793c:	80092380 	call	8009238 <_calloc_r>
 8007940:	88801315 	stw	r2,76(r17)
 8007944:	103fec1e 	bne	r2,zero,80078f8 <__alt_data_end+0xf80078f8>
 8007948:	0005883a 	mov	r2,zero
 800794c:	003ff306 	br	800791c <__alt_data_end+0xf800791c>
 8007950:	01400044 	movi	r5,1
 8007954:	2c24983a 	sll	r18,r5,r16
 8007958:	8809883a 	mov	r4,r17
 800795c:	91800144 	addi	r6,r18,5
 8007960:	318d883a 	add	r6,r6,r6
 8007964:	318d883a 	add	r6,r6,r6
 8007968:	80092380 	call	8009238 <_calloc_r>
 800796c:	103ff626 	beq	r2,zero,8007948 <__alt_data_end+0xf8007948>
 8007970:	14000115 	stw	r16,4(r2)
 8007974:	14800215 	stw	r18,8(r2)
 8007978:	003fe606 	br	8007914 <__alt_data_end+0xf8007914>

0800797c <_Bfree>:
 800797c:	28000826 	beq	r5,zero,80079a0 <_Bfree+0x24>
 8007980:	28c00117 	ldw	r3,4(r5)
 8007984:	20801317 	ldw	r2,76(r4)
 8007988:	18c7883a 	add	r3,r3,r3
 800798c:	18c7883a 	add	r3,r3,r3
 8007990:	10c5883a 	add	r2,r2,r3
 8007994:	10c00017 	ldw	r3,0(r2)
 8007998:	28c00015 	stw	r3,0(r5)
 800799c:	11400015 	stw	r5,0(r2)
 80079a0:	f800283a 	ret

080079a4 <__multadd>:
 80079a4:	defff604 	addi	sp,sp,-40
 80079a8:	dd400515 	stw	r21,20(sp)
 80079ac:	2d400417 	ldw	r21,16(r5)
 80079b0:	df000815 	stw	fp,32(sp)
 80079b4:	ddc00715 	stw	r23,28(sp)
 80079b8:	dd800615 	stw	r22,24(sp)
 80079bc:	dd000415 	stw	r20,16(sp)
 80079c0:	dc400115 	stw	r17,4(sp)
 80079c4:	dc000015 	stw	r16,0(sp)
 80079c8:	dfc00915 	stw	ra,36(sp)
 80079cc:	dcc00315 	stw	r19,12(sp)
 80079d0:	dc800215 	stw	r18,8(sp)
 80079d4:	282d883a 	mov	r22,r5
 80079d8:	202f883a 	mov	r23,r4
 80079dc:	3029883a 	mov	r20,r6
 80079e0:	3839883a 	mov	fp,r7
 80079e4:	2c000504 	addi	r16,r5,20
 80079e8:	0023883a 	mov	r17,zero
 80079ec:	84c00017 	ldw	r19,0(r16)
 80079f0:	a00b883a 	mov	r5,r20
 80079f4:	8c400044 	addi	r17,r17,1
 80079f8:	993fffcc 	andi	r4,r19,65535
 80079fc:	800b1340 	call	800b134 <__mulsi3>
 8007a00:	1725883a 	add	r18,r2,fp
 8007a04:	9808d43a 	srli	r4,r19,16
 8007a08:	9026d43a 	srli	r19,r18,16
 8007a0c:	a00b883a 	mov	r5,r20
 8007a10:	800b1340 	call	800b134 <__mulsi3>
 8007a14:	988f883a 	add	r7,r19,r2
 8007a18:	3804943a 	slli	r2,r7,16
 8007a1c:	94bfffcc 	andi	r18,r18,65535
 8007a20:	3838d43a 	srli	fp,r7,16
 8007a24:	14a5883a 	add	r18,r2,r18
 8007a28:	84800015 	stw	r18,0(r16)
 8007a2c:	84000104 	addi	r16,r16,4
 8007a30:	8d7fee16 	blt	r17,r21,80079ec <__alt_data_end+0xf80079ec>
 8007a34:	e0000926 	beq	fp,zero,8007a5c <__multadd+0xb8>
 8007a38:	b0800217 	ldw	r2,8(r22)
 8007a3c:	a880140e 	bge	r21,r2,8007a90 <__multadd+0xec>
 8007a40:	a8800144 	addi	r2,r21,5
 8007a44:	1085883a 	add	r2,r2,r2
 8007a48:	1085883a 	add	r2,r2,r2
 8007a4c:	b085883a 	add	r2,r22,r2
 8007a50:	ad400044 	addi	r21,r21,1
 8007a54:	17000015 	stw	fp,0(r2)
 8007a58:	b5400415 	stw	r21,16(r22)
 8007a5c:	b005883a 	mov	r2,r22
 8007a60:	dfc00917 	ldw	ra,36(sp)
 8007a64:	df000817 	ldw	fp,32(sp)
 8007a68:	ddc00717 	ldw	r23,28(sp)
 8007a6c:	dd800617 	ldw	r22,24(sp)
 8007a70:	dd400517 	ldw	r21,20(sp)
 8007a74:	dd000417 	ldw	r20,16(sp)
 8007a78:	dcc00317 	ldw	r19,12(sp)
 8007a7c:	dc800217 	ldw	r18,8(sp)
 8007a80:	dc400117 	ldw	r17,4(sp)
 8007a84:	dc000017 	ldw	r16,0(sp)
 8007a88:	dec00a04 	addi	sp,sp,40
 8007a8c:	f800283a 	ret
 8007a90:	b1400117 	ldw	r5,4(r22)
 8007a94:	b809883a 	mov	r4,r23
 8007a98:	29400044 	addi	r5,r5,1
 8007a9c:	80078d40 	call	80078d4 <_Balloc>
 8007aa0:	b1800417 	ldw	r6,16(r22)
 8007aa4:	b1400304 	addi	r5,r22,12
 8007aa8:	11000304 	addi	r4,r2,12
 8007aac:	31800084 	addi	r6,r6,2
 8007ab0:	318d883a 	add	r6,r6,r6
 8007ab4:	318d883a 	add	r6,r6,r6
 8007ab8:	1021883a 	mov	r16,r2
 8007abc:	800752c0 	call	800752c <memcpy>
 8007ac0:	b0c00117 	ldw	r3,4(r22)
 8007ac4:	b8801317 	ldw	r2,76(r23)
 8007ac8:	18c7883a 	add	r3,r3,r3
 8007acc:	18c7883a 	add	r3,r3,r3
 8007ad0:	10c5883a 	add	r2,r2,r3
 8007ad4:	10c00017 	ldw	r3,0(r2)
 8007ad8:	b0c00015 	stw	r3,0(r22)
 8007adc:	15800015 	stw	r22,0(r2)
 8007ae0:	802d883a 	mov	r22,r16
 8007ae4:	003fd606 	br	8007a40 <__alt_data_end+0xf8007a40>

08007ae8 <__s2b>:
 8007ae8:	defff904 	addi	sp,sp,-28
 8007aec:	dd000415 	stw	r20,16(sp)
 8007af0:	dc400115 	stw	r17,4(sp)
 8007af4:	2829883a 	mov	r20,r5
 8007af8:	2023883a 	mov	r17,r4
 8007afc:	01400244 	movi	r5,9
 8007b00:	39000204 	addi	r4,r7,8
 8007b04:	dcc00315 	stw	r19,12(sp)
 8007b08:	dc800215 	stw	r18,8(sp)
 8007b0c:	dfc00615 	stw	ra,24(sp)
 8007b10:	dd400515 	stw	r21,20(sp)
 8007b14:	dc000015 	stw	r16,0(sp)
 8007b18:	3825883a 	mov	r18,r7
 8007b1c:	3027883a 	mov	r19,r6
 8007b20:	800b0780 	call	800b078 <__divsi3>
 8007b24:	00c00044 	movi	r3,1
 8007b28:	000b883a 	mov	r5,zero
 8007b2c:	1880030e 	bge	r3,r2,8007b3c <__s2b+0x54>
 8007b30:	18c7883a 	add	r3,r3,r3
 8007b34:	29400044 	addi	r5,r5,1
 8007b38:	18bffd16 	blt	r3,r2,8007b30 <__alt_data_end+0xf8007b30>
 8007b3c:	8809883a 	mov	r4,r17
 8007b40:	80078d40 	call	80078d4 <_Balloc>
 8007b44:	d8c00717 	ldw	r3,28(sp)
 8007b48:	10c00515 	stw	r3,20(r2)
 8007b4c:	00c00044 	movi	r3,1
 8007b50:	10c00415 	stw	r3,16(r2)
 8007b54:	00c00244 	movi	r3,9
 8007b58:	1cc0210e 	bge	r3,r19,8007be0 <__s2b+0xf8>
 8007b5c:	a0eb883a 	add	r21,r20,r3
 8007b60:	a821883a 	mov	r16,r21
 8007b64:	a4e9883a 	add	r20,r20,r19
 8007b68:	81c00007 	ldb	r7,0(r16)
 8007b6c:	8809883a 	mov	r4,r17
 8007b70:	84000044 	addi	r16,r16,1
 8007b74:	100b883a 	mov	r5,r2
 8007b78:	01800284 	movi	r6,10
 8007b7c:	39fff404 	addi	r7,r7,-48
 8007b80:	80079a40 	call	80079a4 <__multadd>
 8007b84:	853ff81e 	bne	r16,r20,8007b68 <__alt_data_end+0xf8007b68>
 8007b88:	ace1883a 	add	r16,r21,r19
 8007b8c:	843ffe04 	addi	r16,r16,-8
 8007b90:	9c800a0e 	bge	r19,r18,8007bbc <__s2b+0xd4>
 8007b94:	94e5c83a 	sub	r18,r18,r19
 8007b98:	84a5883a 	add	r18,r16,r18
 8007b9c:	81c00007 	ldb	r7,0(r16)
 8007ba0:	8809883a 	mov	r4,r17
 8007ba4:	84000044 	addi	r16,r16,1
 8007ba8:	100b883a 	mov	r5,r2
 8007bac:	01800284 	movi	r6,10
 8007bb0:	39fff404 	addi	r7,r7,-48
 8007bb4:	80079a40 	call	80079a4 <__multadd>
 8007bb8:	84bff81e 	bne	r16,r18,8007b9c <__alt_data_end+0xf8007b9c>
 8007bbc:	dfc00617 	ldw	ra,24(sp)
 8007bc0:	dd400517 	ldw	r21,20(sp)
 8007bc4:	dd000417 	ldw	r20,16(sp)
 8007bc8:	dcc00317 	ldw	r19,12(sp)
 8007bcc:	dc800217 	ldw	r18,8(sp)
 8007bd0:	dc400117 	ldw	r17,4(sp)
 8007bd4:	dc000017 	ldw	r16,0(sp)
 8007bd8:	dec00704 	addi	sp,sp,28
 8007bdc:	f800283a 	ret
 8007be0:	a4000284 	addi	r16,r20,10
 8007be4:	1827883a 	mov	r19,r3
 8007be8:	003fe906 	br	8007b90 <__alt_data_end+0xf8007b90>

08007bec <__hi0bits>:
 8007bec:	20bfffec 	andhi	r2,r4,65535
 8007bf0:	1000141e 	bne	r2,zero,8007c44 <__hi0bits+0x58>
 8007bf4:	2008943a 	slli	r4,r4,16
 8007bf8:	00800404 	movi	r2,16
 8007bfc:	20ffc02c 	andhi	r3,r4,65280
 8007c00:	1800021e 	bne	r3,zero,8007c0c <__hi0bits+0x20>
 8007c04:	2008923a 	slli	r4,r4,8
 8007c08:	10800204 	addi	r2,r2,8
 8007c0c:	20fc002c 	andhi	r3,r4,61440
 8007c10:	1800021e 	bne	r3,zero,8007c1c <__hi0bits+0x30>
 8007c14:	2008913a 	slli	r4,r4,4
 8007c18:	10800104 	addi	r2,r2,4
 8007c1c:	20f0002c 	andhi	r3,r4,49152
 8007c20:	1800031e 	bne	r3,zero,8007c30 <__hi0bits+0x44>
 8007c24:	2109883a 	add	r4,r4,r4
 8007c28:	10800084 	addi	r2,r2,2
 8007c2c:	2109883a 	add	r4,r4,r4
 8007c30:	20000316 	blt	r4,zero,8007c40 <__hi0bits+0x54>
 8007c34:	2110002c 	andhi	r4,r4,16384
 8007c38:	2000041e 	bne	r4,zero,8007c4c <__hi0bits+0x60>
 8007c3c:	00800804 	movi	r2,32
 8007c40:	f800283a 	ret
 8007c44:	0005883a 	mov	r2,zero
 8007c48:	003fec06 	br	8007bfc <__alt_data_end+0xf8007bfc>
 8007c4c:	10800044 	addi	r2,r2,1
 8007c50:	f800283a 	ret

08007c54 <__lo0bits>:
 8007c54:	20c00017 	ldw	r3,0(r4)
 8007c58:	188001cc 	andi	r2,r3,7
 8007c5c:	10000826 	beq	r2,zero,8007c80 <__lo0bits+0x2c>
 8007c60:	1880004c 	andi	r2,r3,1
 8007c64:	1000211e 	bne	r2,zero,8007cec <__lo0bits+0x98>
 8007c68:	1880008c 	andi	r2,r3,2
 8007c6c:	1000211e 	bne	r2,zero,8007cf4 <__lo0bits+0xa0>
 8007c70:	1806d0ba 	srli	r3,r3,2
 8007c74:	00800084 	movi	r2,2
 8007c78:	20c00015 	stw	r3,0(r4)
 8007c7c:	f800283a 	ret
 8007c80:	18bfffcc 	andi	r2,r3,65535
 8007c84:	10001326 	beq	r2,zero,8007cd4 <__lo0bits+0x80>
 8007c88:	0005883a 	mov	r2,zero
 8007c8c:	19403fcc 	andi	r5,r3,255
 8007c90:	2800021e 	bne	r5,zero,8007c9c <__lo0bits+0x48>
 8007c94:	1806d23a 	srli	r3,r3,8
 8007c98:	10800204 	addi	r2,r2,8
 8007c9c:	194003cc 	andi	r5,r3,15
 8007ca0:	2800021e 	bne	r5,zero,8007cac <__lo0bits+0x58>
 8007ca4:	1806d13a 	srli	r3,r3,4
 8007ca8:	10800104 	addi	r2,r2,4
 8007cac:	194000cc 	andi	r5,r3,3
 8007cb0:	2800021e 	bne	r5,zero,8007cbc <__lo0bits+0x68>
 8007cb4:	1806d0ba 	srli	r3,r3,2
 8007cb8:	10800084 	addi	r2,r2,2
 8007cbc:	1940004c 	andi	r5,r3,1
 8007cc0:	2800081e 	bne	r5,zero,8007ce4 <__lo0bits+0x90>
 8007cc4:	1806d07a 	srli	r3,r3,1
 8007cc8:	1800051e 	bne	r3,zero,8007ce0 <__lo0bits+0x8c>
 8007ccc:	00800804 	movi	r2,32
 8007cd0:	f800283a 	ret
 8007cd4:	1806d43a 	srli	r3,r3,16
 8007cd8:	00800404 	movi	r2,16
 8007cdc:	003feb06 	br	8007c8c <__alt_data_end+0xf8007c8c>
 8007ce0:	10800044 	addi	r2,r2,1
 8007ce4:	20c00015 	stw	r3,0(r4)
 8007ce8:	f800283a 	ret
 8007cec:	0005883a 	mov	r2,zero
 8007cf0:	f800283a 	ret
 8007cf4:	1806d07a 	srli	r3,r3,1
 8007cf8:	00800044 	movi	r2,1
 8007cfc:	20c00015 	stw	r3,0(r4)
 8007d00:	f800283a 	ret

08007d04 <__i2b>:
 8007d04:	defffd04 	addi	sp,sp,-12
 8007d08:	dc000015 	stw	r16,0(sp)
 8007d0c:	04000044 	movi	r16,1
 8007d10:	dc400115 	stw	r17,4(sp)
 8007d14:	2823883a 	mov	r17,r5
 8007d18:	800b883a 	mov	r5,r16
 8007d1c:	dfc00215 	stw	ra,8(sp)
 8007d20:	80078d40 	call	80078d4 <_Balloc>
 8007d24:	14400515 	stw	r17,20(r2)
 8007d28:	14000415 	stw	r16,16(r2)
 8007d2c:	dfc00217 	ldw	ra,8(sp)
 8007d30:	dc400117 	ldw	r17,4(sp)
 8007d34:	dc000017 	ldw	r16,0(sp)
 8007d38:	dec00304 	addi	sp,sp,12
 8007d3c:	f800283a 	ret

08007d40 <__multiply>:
 8007d40:	defff004 	addi	sp,sp,-64
 8007d44:	dc800815 	stw	r18,32(sp)
 8007d48:	dc400715 	stw	r17,28(sp)
 8007d4c:	34800417 	ldw	r18,16(r6)
 8007d50:	2c400417 	ldw	r17,16(r5)
 8007d54:	ddc00d15 	stw	r23,52(sp)
 8007d58:	dc000615 	stw	r16,24(sp)
 8007d5c:	dfc00f15 	stw	ra,60(sp)
 8007d60:	df000e15 	stw	fp,56(sp)
 8007d64:	dd800c15 	stw	r22,48(sp)
 8007d68:	dd400b15 	stw	r21,44(sp)
 8007d6c:	dd000a15 	stw	r20,40(sp)
 8007d70:	dcc00915 	stw	r19,36(sp)
 8007d74:	2821883a 	mov	r16,r5
 8007d78:	302f883a 	mov	r23,r6
 8007d7c:	8c80050e 	bge	r17,r18,8007d94 <__multiply+0x54>
 8007d80:	8807883a 	mov	r3,r17
 8007d84:	3021883a 	mov	r16,r6
 8007d88:	9023883a 	mov	r17,r18
 8007d8c:	282f883a 	mov	r23,r5
 8007d90:	1825883a 	mov	r18,r3
 8007d94:	80800217 	ldw	r2,8(r16)
 8007d98:	8c87883a 	add	r3,r17,r18
 8007d9c:	d8c00115 	stw	r3,4(sp)
 8007da0:	81400117 	ldw	r5,4(r16)
 8007da4:	10c0010e 	bge	r2,r3,8007dac <__multiply+0x6c>
 8007da8:	29400044 	addi	r5,r5,1
 8007dac:	80078d40 	call	80078d4 <_Balloc>
 8007db0:	d8c00117 	ldw	r3,4(sp)
 8007db4:	d8800515 	stw	r2,20(sp)
 8007db8:	14c00504 	addi	r19,r2,20
 8007dbc:	1d400144 	addi	r21,r3,5
 8007dc0:	ad6b883a 	add	r21,r21,r21
 8007dc4:	ad6b883a 	add	r21,r21,r21
 8007dc8:	156b883a 	add	r21,r2,r21
 8007dcc:	dd400215 	stw	r21,8(sp)
 8007dd0:	9805883a 	mov	r2,r19
 8007dd4:	9d40042e 	bgeu	r19,r21,8007de8 <__multiply+0xa8>
 8007dd8:	d8c00217 	ldw	r3,8(sp)
 8007ddc:	10000015 	stw	zero,0(r2)
 8007de0:	10800104 	addi	r2,r2,4
 8007de4:	10fffc36 	bltu	r2,r3,8007dd8 <__alt_data_end+0xf8007dd8>
 8007de8:	94800144 	addi	r18,r18,5
 8007dec:	94a5883a 	add	r18,r18,r18
 8007df0:	94ad883a 	add	r22,r18,r18
 8007df4:	8c400144 	addi	r17,r17,5
 8007df8:	8c63883a 	add	r17,r17,r17
 8007dfc:	bdad883a 	add	r22,r23,r22
 8007e00:	80c00504 	addi	r3,r16,20
 8007e04:	8c63883a 	add	r17,r17,r17
 8007e08:	bc800504 	addi	r18,r23,20
 8007e0c:	dd800315 	stw	r22,12(sp)
 8007e10:	d8c00415 	stw	r3,16(sp)
 8007e14:	dcc00015 	stw	r19,0(sp)
 8007e18:	8463883a 	add	r17,r16,r17
 8007e1c:	9580412e 	bgeu	r18,r22,8007f24 <__multiply+0x1e4>
 8007e20:	90800017 	ldw	r2,0(r18)
 8007e24:	173fffcc 	andi	fp,r2,65535
 8007e28:	e0001a26 	beq	fp,zero,8007e94 <__multiply+0x154>
 8007e2c:	dd000017 	ldw	r20,0(sp)
 8007e30:	dd800417 	ldw	r22,16(sp)
 8007e34:	002b883a 	mov	r21,zero
 8007e38:	b4c00017 	ldw	r19,0(r22)
 8007e3c:	a4000017 	ldw	r16,0(r20)
 8007e40:	e00b883a 	mov	r5,fp
 8007e44:	993fffcc 	andi	r4,r19,65535
 8007e48:	800b1340 	call	800b134 <__mulsi3>
 8007e4c:	9808d43a 	srli	r4,r19,16
 8007e50:	817fffcc 	andi	r5,r16,65535
 8007e54:	1145883a 	add	r2,r2,r5
 8007e58:	e00b883a 	mov	r5,fp
 8007e5c:	1567883a 	add	r19,r2,r21
 8007e60:	8020d43a 	srli	r16,r16,16
 8007e64:	800b1340 	call	800b134 <__mulsi3>
 8007e68:	9808d43a 	srli	r4,r19,16
 8007e6c:	1405883a 	add	r2,r2,r16
 8007e70:	a4c0000d 	sth	r19,0(r20)
 8007e74:	110f883a 	add	r7,r2,r4
 8007e78:	a1c0008d 	sth	r7,2(r20)
 8007e7c:	b5800104 	addi	r22,r22,4
 8007e80:	382ad43a 	srli	r21,r7,16
 8007e84:	a5000104 	addi	r20,r20,4
 8007e88:	b47feb36 	bltu	r22,r17,8007e38 <__alt_data_end+0xf8007e38>
 8007e8c:	a5400015 	stw	r21,0(r20)
 8007e90:	90800017 	ldw	r2,0(r18)
 8007e94:	1038d43a 	srli	fp,r2,16
 8007e98:	e0001c26 	beq	fp,zero,8007f0c <__multiply+0x1cc>
 8007e9c:	d8c00017 	ldw	r3,0(sp)
 8007ea0:	dd000417 	ldw	r20,16(sp)
 8007ea4:	002b883a 	mov	r21,zero
 8007ea8:	1d800017 	ldw	r22,0(r3)
 8007eac:	182f883a 	mov	r23,r3
 8007eb0:	b021883a 	mov	r16,r22
 8007eb4:	a4c00017 	ldw	r19,0(r20)
 8007eb8:	8020d43a 	srli	r16,r16,16
 8007ebc:	e00b883a 	mov	r5,fp
 8007ec0:	993fffcc 	andi	r4,r19,65535
 8007ec4:	800b1340 	call	800b134 <__mulsi3>
 8007ec8:	1405883a 	add	r2,r2,r16
 8007ecc:	9808d43a 	srli	r4,r19,16
 8007ed0:	156b883a 	add	r21,r2,r21
 8007ed4:	bdc00104 	addi	r23,r23,4
 8007ed8:	bdbfff0d 	sth	r22,-4(r23)
 8007edc:	bd7fff8d 	sth	r21,-2(r23)
 8007ee0:	bc000017 	ldw	r16,0(r23)
 8007ee4:	e00b883a 	mov	r5,fp
 8007ee8:	800b1340 	call	800b134 <__mulsi3>
 8007eec:	a80ed43a 	srli	r7,r21,16
 8007ef0:	813fffcc 	andi	r4,r16,65535
 8007ef4:	2085883a 	add	r2,r4,r2
 8007ef8:	11ed883a 	add	r22,r2,r7
 8007efc:	a5000104 	addi	r20,r20,4
 8007f00:	b02ad43a 	srli	r21,r22,16
 8007f04:	a47feb36 	bltu	r20,r17,8007eb4 <__alt_data_end+0xf8007eb4>
 8007f08:	bd800015 	stw	r22,0(r23)
 8007f0c:	d8c00017 	ldw	r3,0(sp)
 8007f10:	94800104 	addi	r18,r18,4
 8007f14:	18c00104 	addi	r3,r3,4
 8007f18:	d8c00015 	stw	r3,0(sp)
 8007f1c:	d8c00317 	ldw	r3,12(sp)
 8007f20:	90ffbf36 	bltu	r18,r3,8007e20 <__alt_data_end+0xf8007e20>
 8007f24:	d8c00117 	ldw	r3,4(sp)
 8007f28:	00c00c0e 	bge	zero,r3,8007f5c <__multiply+0x21c>
 8007f2c:	d8c00217 	ldw	r3,8(sp)
 8007f30:	18bfff17 	ldw	r2,-4(r3)
 8007f34:	1d7fff04 	addi	r21,r3,-4
 8007f38:	10000326 	beq	r2,zero,8007f48 <__multiply+0x208>
 8007f3c:	00000706 	br	8007f5c <__multiply+0x21c>
 8007f40:	a8800017 	ldw	r2,0(r21)
 8007f44:	1000051e 	bne	r2,zero,8007f5c <__multiply+0x21c>
 8007f48:	d8c00117 	ldw	r3,4(sp)
 8007f4c:	ad7fff04 	addi	r21,r21,-4
 8007f50:	18ffffc4 	addi	r3,r3,-1
 8007f54:	d8c00115 	stw	r3,4(sp)
 8007f58:	183ff91e 	bne	r3,zero,8007f40 <__alt_data_end+0xf8007f40>
 8007f5c:	d8800517 	ldw	r2,20(sp)
 8007f60:	d8c00117 	ldw	r3,4(sp)
 8007f64:	10c00415 	stw	r3,16(r2)
 8007f68:	dfc00f17 	ldw	ra,60(sp)
 8007f6c:	df000e17 	ldw	fp,56(sp)
 8007f70:	ddc00d17 	ldw	r23,52(sp)
 8007f74:	dd800c17 	ldw	r22,48(sp)
 8007f78:	dd400b17 	ldw	r21,44(sp)
 8007f7c:	dd000a17 	ldw	r20,40(sp)
 8007f80:	dcc00917 	ldw	r19,36(sp)
 8007f84:	dc800817 	ldw	r18,32(sp)
 8007f88:	dc400717 	ldw	r17,28(sp)
 8007f8c:	dc000617 	ldw	r16,24(sp)
 8007f90:	dec01004 	addi	sp,sp,64
 8007f94:	f800283a 	ret

08007f98 <__pow5mult>:
 8007f98:	defffb04 	addi	sp,sp,-20
 8007f9c:	dcc00315 	stw	r19,12(sp)
 8007fa0:	dc800215 	stw	r18,8(sp)
 8007fa4:	dc000015 	stw	r16,0(sp)
 8007fa8:	dfc00415 	stw	ra,16(sp)
 8007fac:	dc400115 	stw	r17,4(sp)
 8007fb0:	308000cc 	andi	r2,r6,3
 8007fb4:	3021883a 	mov	r16,r6
 8007fb8:	2027883a 	mov	r19,r4
 8007fbc:	2825883a 	mov	r18,r5
 8007fc0:	10002e1e 	bne	r2,zero,800807c <__pow5mult+0xe4>
 8007fc4:	8021d0ba 	srai	r16,r16,2
 8007fc8:	80001a26 	beq	r16,zero,8008034 <__pow5mult+0x9c>
 8007fcc:	9c401217 	ldw	r17,72(r19)
 8007fd0:	8800061e 	bne	r17,zero,8007fec <__pow5mult+0x54>
 8007fd4:	00003406 	br	80080a8 <__pow5mult+0x110>
 8007fd8:	8021d07a 	srai	r16,r16,1
 8007fdc:	80001526 	beq	r16,zero,8008034 <__pow5mult+0x9c>
 8007fe0:	88c00017 	ldw	r3,0(r17)
 8007fe4:	18001b26 	beq	r3,zero,8008054 <__pow5mult+0xbc>
 8007fe8:	1823883a 	mov	r17,r3
 8007fec:	80c0004c 	andi	r3,r16,1
 8007ff0:	183ff926 	beq	r3,zero,8007fd8 <__alt_data_end+0xf8007fd8>
 8007ff4:	900b883a 	mov	r5,r18
 8007ff8:	880d883a 	mov	r6,r17
 8007ffc:	9809883a 	mov	r4,r19
 8008000:	8007d400 	call	8007d40 <__multiply>
 8008004:	90001b26 	beq	r18,zero,8008074 <__pow5mult+0xdc>
 8008008:	91000117 	ldw	r4,4(r18)
 800800c:	98c01317 	ldw	r3,76(r19)
 8008010:	8021d07a 	srai	r16,r16,1
 8008014:	2109883a 	add	r4,r4,r4
 8008018:	2109883a 	add	r4,r4,r4
 800801c:	1907883a 	add	r3,r3,r4
 8008020:	19000017 	ldw	r4,0(r3)
 8008024:	91000015 	stw	r4,0(r18)
 8008028:	1c800015 	stw	r18,0(r3)
 800802c:	1025883a 	mov	r18,r2
 8008030:	803feb1e 	bne	r16,zero,8007fe0 <__alt_data_end+0xf8007fe0>
 8008034:	9005883a 	mov	r2,r18
 8008038:	dfc00417 	ldw	ra,16(sp)
 800803c:	dcc00317 	ldw	r19,12(sp)
 8008040:	dc800217 	ldw	r18,8(sp)
 8008044:	dc400117 	ldw	r17,4(sp)
 8008048:	dc000017 	ldw	r16,0(sp)
 800804c:	dec00504 	addi	sp,sp,20
 8008050:	f800283a 	ret
 8008054:	880b883a 	mov	r5,r17
 8008058:	880d883a 	mov	r6,r17
 800805c:	9809883a 	mov	r4,r19
 8008060:	8007d400 	call	8007d40 <__multiply>
 8008064:	88800015 	stw	r2,0(r17)
 8008068:	10000015 	stw	zero,0(r2)
 800806c:	1023883a 	mov	r17,r2
 8008070:	003fde06 	br	8007fec <__alt_data_end+0xf8007fec>
 8008074:	1025883a 	mov	r18,r2
 8008078:	003fd706 	br	8007fd8 <__alt_data_end+0xf8007fd8>
 800807c:	10bfffc4 	addi	r2,r2,-1
 8008080:	1085883a 	add	r2,r2,r2
 8008084:	00c20074 	movhi	r3,2049
 8008088:	18fa4304 	addi	r3,r3,-5876
 800808c:	1085883a 	add	r2,r2,r2
 8008090:	1885883a 	add	r2,r3,r2
 8008094:	11800017 	ldw	r6,0(r2)
 8008098:	000f883a 	mov	r7,zero
 800809c:	80079a40 	call	80079a4 <__multadd>
 80080a0:	1025883a 	mov	r18,r2
 80080a4:	003fc706 	br	8007fc4 <__alt_data_end+0xf8007fc4>
 80080a8:	9809883a 	mov	r4,r19
 80080ac:	01409c44 	movi	r5,625
 80080b0:	8007d040 	call	8007d04 <__i2b>
 80080b4:	98801215 	stw	r2,72(r19)
 80080b8:	1023883a 	mov	r17,r2
 80080bc:	10000015 	stw	zero,0(r2)
 80080c0:	003fca06 	br	8007fec <__alt_data_end+0xf8007fec>

080080c4 <__lshift>:
 80080c4:	defff904 	addi	sp,sp,-28
 80080c8:	dd400515 	stw	r21,20(sp)
 80080cc:	dc400115 	stw	r17,4(sp)
 80080d0:	2d400417 	ldw	r21,16(r5)
 80080d4:	3023d17a 	srai	r17,r6,5
 80080d8:	28800217 	ldw	r2,8(r5)
 80080dc:	dd000415 	stw	r20,16(sp)
 80080e0:	8d6b883a 	add	r21,r17,r21
 80080e4:	dcc00315 	stw	r19,12(sp)
 80080e8:	dc800215 	stw	r18,8(sp)
 80080ec:	dc000015 	stw	r16,0(sp)
 80080f0:	dfc00615 	stw	ra,24(sp)
 80080f4:	ac000044 	addi	r16,r21,1
 80080f8:	2825883a 	mov	r18,r5
 80080fc:	3029883a 	mov	r20,r6
 8008100:	2027883a 	mov	r19,r4
 8008104:	29400117 	ldw	r5,4(r5)
 8008108:	1400030e 	bge	r2,r16,8008118 <__lshift+0x54>
 800810c:	1085883a 	add	r2,r2,r2
 8008110:	29400044 	addi	r5,r5,1
 8008114:	143ffd16 	blt	r2,r16,800810c <__alt_data_end+0xf800810c>
 8008118:	9809883a 	mov	r4,r19
 800811c:	80078d40 	call	80078d4 <_Balloc>
 8008120:	10c00504 	addi	r3,r2,20
 8008124:	0440090e 	bge	zero,r17,800814c <__lshift+0x88>
 8008128:	000f883a 	mov	r7,zero
 800812c:	18000015 	stw	zero,0(r3)
 8008130:	39c00044 	addi	r7,r7,1
 8008134:	18c00104 	addi	r3,r3,4
 8008138:	3c7ffc1e 	bne	r7,r17,800812c <__alt_data_end+0xf800812c>
 800813c:	38c00144 	addi	r3,r7,5
 8008140:	18c7883a 	add	r3,r3,r3
 8008144:	18c7883a 	add	r3,r3,r3
 8008148:	10c7883a 	add	r3,r2,r3
 800814c:	92000417 	ldw	r8,16(r18)
 8008150:	a18007cc 	andi	r6,r20,31
 8008154:	91c00504 	addi	r7,r18,20
 8008158:	42000144 	addi	r8,r8,5
 800815c:	4211883a 	add	r8,r8,r8
 8008160:	4211883a 	add	r8,r8,r8
 8008164:	9211883a 	add	r8,r18,r8
 8008168:	30002226 	beq	r6,zero,80081f4 <__lshift+0x130>
 800816c:	02800804 	movi	r10,32
 8008170:	5195c83a 	sub	r10,r10,r6
 8008174:	000b883a 	mov	r5,zero
 8008178:	3a400017 	ldw	r9,0(r7)
 800817c:	18c00104 	addi	r3,r3,4
 8008180:	39c00104 	addi	r7,r7,4
 8008184:	4992983a 	sll	r9,r9,r6
 8008188:	2a4ab03a 	or	r5,r5,r9
 800818c:	197fff15 	stw	r5,-4(r3)
 8008190:	397fff17 	ldw	r5,-4(r7)
 8008194:	2a8ad83a 	srl	r5,r5,r10
 8008198:	3a3ff736 	bltu	r7,r8,8008178 <__alt_data_end+0xf8008178>
 800819c:	19400015 	stw	r5,0(r3)
 80081a0:	28000126 	beq	r5,zero,80081a8 <__lshift+0xe4>
 80081a4:	ac000084 	addi	r16,r21,2
 80081a8:	91000117 	ldw	r4,4(r18)
 80081ac:	98c01317 	ldw	r3,76(r19)
 80081b0:	843fffc4 	addi	r16,r16,-1
 80081b4:	2109883a 	add	r4,r4,r4
 80081b8:	2109883a 	add	r4,r4,r4
 80081bc:	1907883a 	add	r3,r3,r4
 80081c0:	19000017 	ldw	r4,0(r3)
 80081c4:	14000415 	stw	r16,16(r2)
 80081c8:	91000015 	stw	r4,0(r18)
 80081cc:	1c800015 	stw	r18,0(r3)
 80081d0:	dfc00617 	ldw	ra,24(sp)
 80081d4:	dd400517 	ldw	r21,20(sp)
 80081d8:	dd000417 	ldw	r20,16(sp)
 80081dc:	dcc00317 	ldw	r19,12(sp)
 80081e0:	dc800217 	ldw	r18,8(sp)
 80081e4:	dc400117 	ldw	r17,4(sp)
 80081e8:	dc000017 	ldw	r16,0(sp)
 80081ec:	dec00704 	addi	sp,sp,28
 80081f0:	f800283a 	ret
 80081f4:	39400017 	ldw	r5,0(r7)
 80081f8:	18c00104 	addi	r3,r3,4
 80081fc:	39c00104 	addi	r7,r7,4
 8008200:	197fff15 	stw	r5,-4(r3)
 8008204:	3a3fe82e 	bgeu	r7,r8,80081a8 <__alt_data_end+0xf80081a8>
 8008208:	39400017 	ldw	r5,0(r7)
 800820c:	18c00104 	addi	r3,r3,4
 8008210:	39c00104 	addi	r7,r7,4
 8008214:	197fff15 	stw	r5,-4(r3)
 8008218:	3a3ff636 	bltu	r7,r8,80081f4 <__alt_data_end+0xf80081f4>
 800821c:	003fe206 	br	80081a8 <__alt_data_end+0xf80081a8>

08008220 <__mcmp>:
 8008220:	20800417 	ldw	r2,16(r4)
 8008224:	28c00417 	ldw	r3,16(r5)
 8008228:	10c5c83a 	sub	r2,r2,r3
 800822c:	10000f1e 	bne	r2,zero,800826c <__mcmp+0x4c>
 8008230:	18c00144 	addi	r3,r3,5
 8008234:	18c7883a 	add	r3,r3,r3
 8008238:	18c7883a 	add	r3,r3,r3
 800823c:	21c00504 	addi	r7,r4,20
 8008240:	28cb883a 	add	r5,r5,r3
 8008244:	20c9883a 	add	r4,r4,r3
 8008248:	213fff04 	addi	r4,r4,-4
 800824c:	297fff04 	addi	r5,r5,-4
 8008250:	21800017 	ldw	r6,0(r4)
 8008254:	28c00017 	ldw	r3,0(r5)
 8008258:	30c0021e 	bne	r6,r3,8008264 <__mcmp+0x44>
 800825c:	393ffa36 	bltu	r7,r4,8008248 <__alt_data_end+0xf8008248>
 8008260:	f800283a 	ret
 8008264:	30c00236 	bltu	r6,r3,8008270 <__mcmp+0x50>
 8008268:	00800044 	movi	r2,1
 800826c:	f800283a 	ret
 8008270:	00bfffc4 	movi	r2,-1
 8008274:	f800283a 	ret

08008278 <__mdiff>:
 8008278:	defffb04 	addi	sp,sp,-20
 800827c:	dc000015 	stw	r16,0(sp)
 8008280:	2821883a 	mov	r16,r5
 8008284:	dc800215 	stw	r18,8(sp)
 8008288:	300b883a 	mov	r5,r6
 800828c:	2025883a 	mov	r18,r4
 8008290:	8009883a 	mov	r4,r16
 8008294:	dc400115 	stw	r17,4(sp)
 8008298:	dfc00415 	stw	ra,16(sp)
 800829c:	dcc00315 	stw	r19,12(sp)
 80082a0:	3023883a 	mov	r17,r6
 80082a4:	80082200 	call	8008220 <__mcmp>
 80082a8:	10005026 	beq	r2,zero,80083ec <__mdiff+0x174>
 80082ac:	10004a16 	blt	r2,zero,80083d8 <__mdiff+0x160>
 80082b0:	0027883a 	mov	r19,zero
 80082b4:	81400117 	ldw	r5,4(r16)
 80082b8:	9009883a 	mov	r4,r18
 80082bc:	80078d40 	call	80078d4 <_Balloc>
 80082c0:	82400417 	ldw	r9,16(r16)
 80082c4:	89800417 	ldw	r6,16(r17)
 80082c8:	14c00315 	stw	r19,12(r2)
 80082cc:	4b800144 	addi	r14,r9,5
 80082d0:	31800144 	addi	r6,r6,5
 80082d4:	739d883a 	add	r14,r14,r14
 80082d8:	318d883a 	add	r6,r6,r6
 80082dc:	739d883a 	add	r14,r14,r14
 80082e0:	318d883a 	add	r6,r6,r6
 80082e4:	81c00504 	addi	r7,r16,20
 80082e8:	839d883a 	add	r14,r16,r14
 80082ec:	8a000504 	addi	r8,r17,20
 80082f0:	898d883a 	add	r6,r17,r6
 80082f4:	10c00504 	addi	r3,r2,20
 80082f8:	0009883a 	mov	r4,zero
 80082fc:	3b000017 	ldw	r12,0(r7)
 8008300:	42c00017 	ldw	r11,0(r8)
 8008304:	42000104 	addi	r8,r8,4
 8008308:	62bfffcc 	andi	r10,r12,65535
 800830c:	5b7fffcc 	andi	r13,r11,65535
 8008310:	5109883a 	add	r4,r10,r4
 8008314:	2355c83a 	sub	r10,r4,r13
 8008318:	5816d43a 	srli	r11,r11,16
 800831c:	6008d43a 	srli	r4,r12,16
 8008320:	501bd43a 	srai	r13,r10,16
 8008324:	1a80000d 	sth	r10,0(r3)
 8008328:	22c9c83a 	sub	r4,r4,r11
 800832c:	2349883a 	add	r4,r4,r13
 8008330:	1900008d 	sth	r4,2(r3)
 8008334:	39c00104 	addi	r7,r7,4
 8008338:	2009d43a 	srai	r4,r4,16
 800833c:	18c00104 	addi	r3,r3,4
 8008340:	41bfee36 	bltu	r8,r6,80082fc <__alt_data_end+0xf80082fc>
 8008344:	180b883a 	mov	r5,r3
 8008348:	3815883a 	mov	r10,r7
 800834c:	3b80132e 	bgeu	r7,r14,800839c <__mdiff+0x124>
 8008350:	3a000017 	ldw	r8,0(r7)
 8008354:	18c00104 	addi	r3,r3,4
 8008358:	39c00104 	addi	r7,r7,4
 800835c:	41bfffcc 	andi	r6,r8,65535
 8008360:	310d883a 	add	r6,r6,r4
 8008364:	3009d43a 	srai	r4,r6,16
 8008368:	4010d43a 	srli	r8,r8,16
 800836c:	19bfff0d 	sth	r6,-4(r3)
 8008370:	2209883a 	add	r4,r4,r8
 8008374:	193fff8d 	sth	r4,-2(r3)
 8008378:	2009d43a 	srai	r4,r4,16
 800837c:	3bbff436 	bltu	r7,r14,8008350 <__alt_data_end+0xf8008350>
 8008380:	0286303a 	nor	r3,zero,r10
 8008384:	1b87883a 	add	r3,r3,r14
 8008388:	1806d0ba 	srli	r3,r3,2
 800838c:	18c00044 	addi	r3,r3,1
 8008390:	18c7883a 	add	r3,r3,r3
 8008394:	18c7883a 	add	r3,r3,r3
 8008398:	28c7883a 	add	r3,r5,r3
 800839c:	193fff17 	ldw	r4,-4(r3)
 80083a0:	18ffff04 	addi	r3,r3,-4
 80083a4:	2000041e 	bne	r4,zero,80083b8 <__mdiff+0x140>
 80083a8:	18ffff04 	addi	r3,r3,-4
 80083ac:	19000017 	ldw	r4,0(r3)
 80083b0:	4a7fffc4 	addi	r9,r9,-1
 80083b4:	203ffc26 	beq	r4,zero,80083a8 <__alt_data_end+0xf80083a8>
 80083b8:	12400415 	stw	r9,16(r2)
 80083bc:	dfc00417 	ldw	ra,16(sp)
 80083c0:	dcc00317 	ldw	r19,12(sp)
 80083c4:	dc800217 	ldw	r18,8(sp)
 80083c8:	dc400117 	ldw	r17,4(sp)
 80083cc:	dc000017 	ldw	r16,0(sp)
 80083d0:	dec00504 	addi	sp,sp,20
 80083d4:	f800283a 	ret
 80083d8:	8005883a 	mov	r2,r16
 80083dc:	04c00044 	movi	r19,1
 80083e0:	8821883a 	mov	r16,r17
 80083e4:	1023883a 	mov	r17,r2
 80083e8:	003fb206 	br	80082b4 <__alt_data_end+0xf80082b4>
 80083ec:	9009883a 	mov	r4,r18
 80083f0:	000b883a 	mov	r5,zero
 80083f4:	80078d40 	call	80078d4 <_Balloc>
 80083f8:	00c00044 	movi	r3,1
 80083fc:	10c00415 	stw	r3,16(r2)
 8008400:	10000515 	stw	zero,20(r2)
 8008404:	dfc00417 	ldw	ra,16(sp)
 8008408:	dcc00317 	ldw	r19,12(sp)
 800840c:	dc800217 	ldw	r18,8(sp)
 8008410:	dc400117 	ldw	r17,4(sp)
 8008414:	dc000017 	ldw	r16,0(sp)
 8008418:	dec00504 	addi	sp,sp,20
 800841c:	f800283a 	ret

08008420 <__ulp>:
 8008420:	295ffc2c 	andhi	r5,r5,32752
 8008424:	00bf3034 	movhi	r2,64704
 8008428:	2887883a 	add	r3,r5,r2
 800842c:	00c0020e 	bge	zero,r3,8008438 <__ulp+0x18>
 8008430:	0005883a 	mov	r2,zero
 8008434:	f800283a 	ret
 8008438:	00c7c83a 	sub	r3,zero,r3
 800843c:	1805d53a 	srai	r2,r3,20
 8008440:	00c004c4 	movi	r3,19
 8008444:	18800a0e 	bge	r3,r2,8008470 <__ulp+0x50>
 8008448:	01000c84 	movi	r4,50
 800844c:	0007883a 	mov	r3,zero
 8008450:	20800516 	blt	r4,r2,8008468 <__ulp+0x48>
 8008454:	01000cc4 	movi	r4,51
 8008458:	2085c83a 	sub	r2,r4,r2
 800845c:	01000044 	movi	r4,1
 8008460:	2084983a 	sll	r2,r4,r2
 8008464:	f800283a 	ret
 8008468:	00800044 	movi	r2,1
 800846c:	f800283a 	ret
 8008470:	00c00234 	movhi	r3,8
 8008474:	1887d83a 	sra	r3,r3,r2
 8008478:	0005883a 	mov	r2,zero
 800847c:	f800283a 	ret

08008480 <__b2d>:
 8008480:	defffa04 	addi	sp,sp,-24
 8008484:	dc000015 	stw	r16,0(sp)
 8008488:	24000417 	ldw	r16,16(r4)
 800848c:	dc400115 	stw	r17,4(sp)
 8008490:	dcc00315 	stw	r19,12(sp)
 8008494:	84000144 	addi	r16,r16,5
 8008498:	8421883a 	add	r16,r16,r16
 800849c:	8421883a 	add	r16,r16,r16
 80084a0:	2421883a 	add	r16,r4,r16
 80084a4:	847fff17 	ldw	r17,-4(r16)
 80084a8:	24c00504 	addi	r19,r4,20
 80084ac:	dd000415 	stw	r20,16(sp)
 80084b0:	8809883a 	mov	r4,r17
 80084b4:	dc800215 	stw	r18,8(sp)
 80084b8:	2829883a 	mov	r20,r5
 80084bc:	dfc00515 	stw	ra,20(sp)
 80084c0:	8007bec0 	call	8007bec <__hi0bits>
 80084c4:	00c00804 	movi	r3,32
 80084c8:	1887c83a 	sub	r3,r3,r2
 80084cc:	a0c00015 	stw	r3,0(r20)
 80084d0:	00c00284 	movi	r3,10
 80084d4:	84bfff04 	addi	r18,r16,-4
 80084d8:	18801216 	blt	r3,r2,8008524 <__b2d+0xa4>
 80084dc:	010002c4 	movi	r4,11
 80084e0:	2089c83a 	sub	r4,r4,r2
 80084e4:	8906d83a 	srl	r3,r17,r4
 80084e8:	18cffc34 	orhi	r3,r3,16368
 80084ec:	9c80322e 	bgeu	r19,r18,80085b8 <__b2d+0x138>
 80084f0:	817ffe17 	ldw	r5,-8(r16)
 80084f4:	2908d83a 	srl	r4,r5,r4
 80084f8:	10800544 	addi	r2,r2,21
 80084fc:	88a2983a 	sll	r17,r17,r2
 8008500:	2444b03a 	or	r2,r4,r17
 8008504:	dfc00517 	ldw	ra,20(sp)
 8008508:	dd000417 	ldw	r20,16(sp)
 800850c:	dcc00317 	ldw	r19,12(sp)
 8008510:	dc800217 	ldw	r18,8(sp)
 8008514:	dc400117 	ldw	r17,4(sp)
 8008518:	dc000017 	ldw	r16,0(sp)
 800851c:	dec00604 	addi	sp,sp,24
 8008520:	f800283a 	ret
 8008524:	9c801636 	bltu	r19,r18,8008580 <__b2d+0x100>
 8008528:	113ffd44 	addi	r4,r2,-11
 800852c:	000b883a 	mov	r5,zero
 8008530:	20001726 	beq	r4,zero,8008590 <__b2d+0x110>
 8008534:	00c00ac4 	movi	r3,43
 8008538:	1885c83a 	sub	r2,r3,r2
 800853c:	8906983a 	sll	r3,r17,r4
 8008540:	288cd83a 	srl	r6,r5,r2
 8008544:	18cffc34 	orhi	r3,r3,16368
 8008548:	1986b03a 	or	r3,r3,r6
 800854c:	9c801c2e 	bgeu	r19,r18,80085c0 <__b2d+0x140>
 8008550:	91bfff17 	ldw	r6,-4(r18)
 8008554:	3084d83a 	srl	r2,r6,r2
 8008558:	2908983a 	sll	r4,r5,r4
 800855c:	1104b03a 	or	r2,r2,r4
 8008560:	dfc00517 	ldw	ra,20(sp)
 8008564:	dd000417 	ldw	r20,16(sp)
 8008568:	dcc00317 	ldw	r19,12(sp)
 800856c:	dc800217 	ldw	r18,8(sp)
 8008570:	dc400117 	ldw	r17,4(sp)
 8008574:	dc000017 	ldw	r16,0(sp)
 8008578:	dec00604 	addi	sp,sp,24
 800857c:	f800283a 	ret
 8008580:	113ffd44 	addi	r4,r2,-11
 8008584:	84bffe04 	addi	r18,r16,-8
 8008588:	817ffe17 	ldw	r5,-8(r16)
 800858c:	203fe91e 	bne	r4,zero,8008534 <__alt_data_end+0xf8008534>
 8008590:	88cffc34 	orhi	r3,r17,16368
 8008594:	2805883a 	mov	r2,r5
 8008598:	dfc00517 	ldw	ra,20(sp)
 800859c:	dd000417 	ldw	r20,16(sp)
 80085a0:	dcc00317 	ldw	r19,12(sp)
 80085a4:	dc800217 	ldw	r18,8(sp)
 80085a8:	dc400117 	ldw	r17,4(sp)
 80085ac:	dc000017 	ldw	r16,0(sp)
 80085b0:	dec00604 	addi	sp,sp,24
 80085b4:	f800283a 	ret
 80085b8:	0009883a 	mov	r4,zero
 80085bc:	003fce06 	br	80084f8 <__alt_data_end+0xf80084f8>
 80085c0:	0005883a 	mov	r2,zero
 80085c4:	003fe406 	br	8008558 <__alt_data_end+0xf8008558>

080085c8 <__d2b>:
 80085c8:	defff804 	addi	sp,sp,-32
 80085cc:	dc400315 	stw	r17,12(sp)
 80085d0:	3023883a 	mov	r17,r6
 80085d4:	dc800415 	stw	r18,16(sp)
 80085d8:	8824907a 	slli	r18,r17,1
 80085dc:	dcc00515 	stw	r19,20(sp)
 80085e0:	2827883a 	mov	r19,r5
 80085e4:	9024d57a 	srli	r18,r18,21
 80085e8:	01400044 	movi	r5,1
 80085ec:	dd000615 	stw	r20,24(sp)
 80085f0:	dc000215 	stw	r16,8(sp)
 80085f4:	dfc00715 	stw	ra,28(sp)
 80085f8:	3829883a 	mov	r20,r7
 80085fc:	80078d40 	call	80078d4 <_Balloc>
 8008600:	1021883a 	mov	r16,r2
 8008604:	00800434 	movhi	r2,16
 8008608:	10bfffc4 	addi	r2,r2,-1
 800860c:	88a2703a 	and	r17,r17,r2
 8008610:	90000126 	beq	r18,zero,8008618 <__d2b+0x50>
 8008614:	8c400434 	orhi	r17,r17,16
 8008618:	dc400015 	stw	r17,0(sp)
 800861c:	98002226 	beq	r19,zero,80086a8 <__d2b+0xe0>
 8008620:	d9000104 	addi	r4,sp,4
 8008624:	dcc00115 	stw	r19,4(sp)
 8008628:	8007c540 	call	8007c54 <__lo0bits>
 800862c:	d8c00017 	ldw	r3,0(sp)
 8008630:	10002d1e 	bne	r2,zero,80086e8 <__d2b+0x120>
 8008634:	d9000117 	ldw	r4,4(sp)
 8008638:	81000515 	stw	r4,20(r16)
 800863c:	1823003a 	cmpeq	r17,r3,zero
 8008640:	01000084 	movi	r4,2
 8008644:	2463c83a 	sub	r17,r4,r17
 8008648:	80c00615 	stw	r3,24(r16)
 800864c:	84400415 	stw	r17,16(r16)
 8008650:	90001d1e 	bne	r18,zero,80086c8 <__d2b+0x100>
 8008654:	88c00104 	addi	r3,r17,4
 8008658:	18c7883a 	add	r3,r3,r3
 800865c:	18c7883a 	add	r3,r3,r3
 8008660:	80c7883a 	add	r3,r16,r3
 8008664:	19000017 	ldw	r4,0(r3)
 8008668:	10bef384 	addi	r2,r2,-1074
 800866c:	a0800015 	stw	r2,0(r20)
 8008670:	8007bec0 	call	8007bec <__hi0bits>
 8008674:	8822917a 	slli	r17,r17,5
 8008678:	d8c00817 	ldw	r3,32(sp)
 800867c:	8885c83a 	sub	r2,r17,r2
 8008680:	18800015 	stw	r2,0(r3)
 8008684:	8005883a 	mov	r2,r16
 8008688:	dfc00717 	ldw	ra,28(sp)
 800868c:	dd000617 	ldw	r20,24(sp)
 8008690:	dcc00517 	ldw	r19,20(sp)
 8008694:	dc800417 	ldw	r18,16(sp)
 8008698:	dc400317 	ldw	r17,12(sp)
 800869c:	dc000217 	ldw	r16,8(sp)
 80086a0:	dec00804 	addi	sp,sp,32
 80086a4:	f800283a 	ret
 80086a8:	d809883a 	mov	r4,sp
 80086ac:	8007c540 	call	8007c54 <__lo0bits>
 80086b0:	d8c00017 	ldw	r3,0(sp)
 80086b4:	04400044 	movi	r17,1
 80086b8:	84400415 	stw	r17,16(r16)
 80086bc:	80c00515 	stw	r3,20(r16)
 80086c0:	10800804 	addi	r2,r2,32
 80086c4:	903fe326 	beq	r18,zero,8008654 <__alt_data_end+0xf8008654>
 80086c8:	00c00d44 	movi	r3,53
 80086cc:	94bef344 	addi	r18,r18,-1075
 80086d0:	90a5883a 	add	r18,r18,r2
 80086d4:	1885c83a 	sub	r2,r3,r2
 80086d8:	d8c00817 	ldw	r3,32(sp)
 80086dc:	a4800015 	stw	r18,0(r20)
 80086e0:	18800015 	stw	r2,0(r3)
 80086e4:	003fe706 	br	8008684 <__alt_data_end+0xf8008684>
 80086e8:	01000804 	movi	r4,32
 80086ec:	2089c83a 	sub	r4,r4,r2
 80086f0:	1908983a 	sll	r4,r3,r4
 80086f4:	d9400117 	ldw	r5,4(sp)
 80086f8:	1886d83a 	srl	r3,r3,r2
 80086fc:	2148b03a 	or	r4,r4,r5
 8008700:	81000515 	stw	r4,20(r16)
 8008704:	d8c00015 	stw	r3,0(sp)
 8008708:	003fcc06 	br	800863c <__alt_data_end+0xf800863c>

0800870c <__ratio>:
 800870c:	defff904 	addi	sp,sp,-28
 8008710:	dc400315 	stw	r17,12(sp)
 8008714:	2823883a 	mov	r17,r5
 8008718:	d9400104 	addi	r5,sp,4
 800871c:	dfc00615 	stw	ra,24(sp)
 8008720:	dcc00515 	stw	r19,20(sp)
 8008724:	dc800415 	stw	r18,16(sp)
 8008728:	2027883a 	mov	r19,r4
 800872c:	dc000215 	stw	r16,8(sp)
 8008730:	80084800 	call	8008480 <__b2d>
 8008734:	8809883a 	mov	r4,r17
 8008738:	d80b883a 	mov	r5,sp
 800873c:	1025883a 	mov	r18,r2
 8008740:	1821883a 	mov	r16,r3
 8008744:	80084800 	call	8008480 <__b2d>
 8008748:	99400417 	ldw	r5,16(r19)
 800874c:	89000417 	ldw	r4,16(r17)
 8008750:	d9800117 	ldw	r6,4(sp)
 8008754:	2909c83a 	sub	r4,r5,r4
 8008758:	d9400017 	ldw	r5,0(sp)
 800875c:	2008917a 	slli	r4,r4,5
 8008760:	314bc83a 	sub	r5,r6,r5
 8008764:	290b883a 	add	r5,r5,r4
 8008768:	01400e0e 	bge	zero,r5,80087a4 <__ratio+0x98>
 800876c:	280a953a 	slli	r5,r5,20
 8008770:	2c21883a 	add	r16,r5,r16
 8008774:	9009883a 	mov	r4,r18
 8008778:	800b883a 	mov	r5,r16
 800877c:	100d883a 	mov	r6,r2
 8008780:	180f883a 	mov	r7,r3
 8008784:	800a9c00 	call	800a9c0 <__divdf3>
 8008788:	dfc00617 	ldw	ra,24(sp)
 800878c:	dcc00517 	ldw	r19,20(sp)
 8008790:	dc800417 	ldw	r18,16(sp)
 8008794:	dc400317 	ldw	r17,12(sp)
 8008798:	dc000217 	ldw	r16,8(sp)
 800879c:	dec00704 	addi	sp,sp,28
 80087a0:	f800283a 	ret
 80087a4:	280a953a 	slli	r5,r5,20
 80087a8:	1947c83a 	sub	r3,r3,r5
 80087ac:	003ff106 	br	8008774 <__alt_data_end+0xf8008774>

080087b0 <_mprec_log10>:
 80087b0:	defffe04 	addi	sp,sp,-8
 80087b4:	dc000015 	stw	r16,0(sp)
 80087b8:	dfc00115 	stw	ra,4(sp)
 80087bc:	008005c4 	movi	r2,23
 80087c0:	2021883a 	mov	r16,r4
 80087c4:	11000d0e 	bge	r2,r4,80087fc <_mprec_log10+0x4c>
 80087c8:	0005883a 	mov	r2,zero
 80087cc:	00cffc34 	movhi	r3,16368
 80087d0:	843fffc4 	addi	r16,r16,-1
 80087d4:	1009883a 	mov	r4,r2
 80087d8:	180b883a 	mov	r5,r3
 80087dc:	000d883a 	mov	r6,zero
 80087e0:	01d00934 	movhi	r7,16420
 80087e4:	800a6dc0 	call	800a6dc <__muldf3>
 80087e8:	803ff91e 	bne	r16,zero,80087d0 <__alt_data_end+0xf80087d0>
 80087ec:	dfc00117 	ldw	ra,4(sp)
 80087f0:	dc000017 	ldw	r16,0(sp)
 80087f4:	dec00204 	addi	sp,sp,8
 80087f8:	f800283a 	ret
 80087fc:	202090fa 	slli	r16,r4,3
 8008800:	00820074 	movhi	r2,2049
 8008804:	10ba1104 	addi	r2,r2,-6076
 8008808:	1421883a 	add	r16,r2,r16
 800880c:	80800017 	ldw	r2,0(r16)
 8008810:	80c00117 	ldw	r3,4(r16)
 8008814:	dfc00117 	ldw	ra,4(sp)
 8008818:	dc000017 	ldw	r16,0(sp)
 800881c:	dec00204 	addi	sp,sp,8
 8008820:	f800283a 	ret

08008824 <__copybits>:
 8008824:	297fffc4 	addi	r5,r5,-1
 8008828:	31c00417 	ldw	r7,16(r6)
 800882c:	2811d17a 	srai	r8,r5,5
 8008830:	30800504 	addi	r2,r6,20
 8008834:	39c00144 	addi	r7,r7,5
 8008838:	42000044 	addi	r8,r8,1
 800883c:	39cf883a 	add	r7,r7,r7
 8008840:	4211883a 	add	r8,r8,r8
 8008844:	39cf883a 	add	r7,r7,r7
 8008848:	4211883a 	add	r8,r8,r8
 800884c:	31cf883a 	add	r7,r6,r7
 8008850:	2211883a 	add	r8,r4,r8
 8008854:	11c00d2e 	bgeu	r2,r7,800888c <__copybits+0x68>
 8008858:	2007883a 	mov	r3,r4
 800885c:	11400017 	ldw	r5,0(r2)
 8008860:	18c00104 	addi	r3,r3,4
 8008864:	10800104 	addi	r2,r2,4
 8008868:	197fff15 	stw	r5,-4(r3)
 800886c:	11fffb36 	bltu	r2,r7,800885c <__alt_data_end+0xf800885c>
 8008870:	3985c83a 	sub	r2,r7,r6
 8008874:	10bffac4 	addi	r2,r2,-21
 8008878:	1004d0ba 	srli	r2,r2,2
 800887c:	10800044 	addi	r2,r2,1
 8008880:	1085883a 	add	r2,r2,r2
 8008884:	1085883a 	add	r2,r2,r2
 8008888:	2089883a 	add	r4,r4,r2
 800888c:	2200032e 	bgeu	r4,r8,800889c <__copybits+0x78>
 8008890:	20000015 	stw	zero,0(r4)
 8008894:	21000104 	addi	r4,r4,4
 8008898:	223ffd36 	bltu	r4,r8,8008890 <__alt_data_end+0xf8008890>
 800889c:	f800283a 	ret

080088a0 <__any_on>:
 80088a0:	21800417 	ldw	r6,16(r4)
 80088a4:	2805d17a 	srai	r2,r5,5
 80088a8:	20c00504 	addi	r3,r4,20
 80088ac:	30800f0e 	bge	r6,r2,80088ec <__any_on+0x4c>
 80088b0:	3005883a 	mov	r2,r6
 80088b4:	10800144 	addi	r2,r2,5
 80088b8:	1085883a 	add	r2,r2,r2
 80088bc:	1085883a 	add	r2,r2,r2
 80088c0:	2089883a 	add	r4,r4,r2
 80088c4:	1900152e 	bgeu	r3,r4,800891c <__any_on+0x7c>
 80088c8:	20bfff17 	ldw	r2,-4(r4)
 80088cc:	213fff04 	addi	r4,r4,-4
 80088d0:	1000041e 	bne	r2,zero,80088e4 <__any_on+0x44>
 80088d4:	1900112e 	bgeu	r3,r4,800891c <__any_on+0x7c>
 80088d8:	213fff04 	addi	r4,r4,-4
 80088dc:	20800017 	ldw	r2,0(r4)
 80088e0:	103ffc26 	beq	r2,zero,80088d4 <__alt_data_end+0xf80088d4>
 80088e4:	00800044 	movi	r2,1
 80088e8:	f800283a 	ret
 80088ec:	11bff10e 	bge	r2,r6,80088b4 <__alt_data_end+0xf80088b4>
 80088f0:	294007cc 	andi	r5,r5,31
 80088f4:	283fef26 	beq	r5,zero,80088b4 <__alt_data_end+0xf80088b4>
 80088f8:	11800144 	addi	r6,r2,5
 80088fc:	318d883a 	add	r6,r6,r6
 8008900:	318d883a 	add	r6,r6,r6
 8008904:	218d883a 	add	r6,r4,r6
 8008908:	31800017 	ldw	r6,0(r6)
 800890c:	314ed83a 	srl	r7,r6,r5
 8008910:	394a983a 	sll	r5,r7,r5
 8008914:	29bff31e 	bne	r5,r6,80088e4 <__alt_data_end+0xf80088e4>
 8008918:	003fe606 	br	80088b4 <__alt_data_end+0xf80088b4>
 800891c:	0005883a 	mov	r2,zero
 8008920:	f800283a 	ret

08008924 <_realloc_r>:
 8008924:	defff504 	addi	sp,sp,-44
 8008928:	dd400615 	stw	r21,24(sp)
 800892c:	dc800315 	stw	r18,12(sp)
 8008930:	dc000115 	stw	r16,4(sp)
 8008934:	dfc00a15 	stw	ra,40(sp)
 8008938:	df000915 	stw	fp,36(sp)
 800893c:	ddc00815 	stw	r23,32(sp)
 8008940:	dd800715 	stw	r22,28(sp)
 8008944:	dd000515 	stw	r20,20(sp)
 8008948:	dcc00415 	stw	r19,16(sp)
 800894c:	dc400215 	stw	r17,8(sp)
 8008950:	2821883a 	mov	r16,r5
 8008954:	202b883a 	mov	r21,r4
 8008958:	3025883a 	mov	r18,r6
 800895c:	28009626 	beq	r5,zero,8008bb8 <_realloc_r+0x294>
 8008960:	800bd5c0 	call	800bd5c <__malloc_lock>
 8008964:	80bfff17 	ldw	r2,-4(r16)
 8008968:	04ffff04 	movi	r19,-4
 800896c:	90c002c4 	addi	r3,r18,11
 8008970:	01000584 	movi	r4,22
 8008974:	85bffe04 	addi	r22,r16,-8
 8008978:	14e6703a 	and	r19,r2,r19
 800897c:	20c0372e 	bgeu	r4,r3,8008a5c <_realloc_r+0x138>
 8008980:	047ffe04 	movi	r17,-8
 8008984:	1c62703a 	and	r17,r3,r17
 8008988:	8807883a 	mov	r3,r17
 800898c:	88005a16 	blt	r17,zero,8008af8 <_realloc_r+0x1d4>
 8008990:	8c805936 	bltu	r17,r18,8008af8 <_realloc_r+0x1d4>
 8008994:	98c0340e 	bge	r19,r3,8008a68 <_realloc_r+0x144>
 8008998:	07020074 	movhi	fp,2049
 800899c:	e73b9904 	addi	fp,fp,-4508
 80089a0:	e1400217 	ldw	r5,8(fp)
 80089a4:	b4c9883a 	add	r4,r22,r19
 80089a8:	29009026 	beq	r5,r4,8008bec <_realloc_r+0x2c8>
 80089ac:	21800117 	ldw	r6,4(r4)
 80089b0:	01ffff84 	movi	r7,-2
 80089b4:	31ce703a 	and	r7,r6,r7
 80089b8:	21cf883a 	add	r7,r4,r7
 80089bc:	39c00117 	ldw	r7,4(r7)
 80089c0:	39c0004c 	andi	r7,r7,1
 80089c4:	38004326 	beq	r7,zero,8008ad4 <_realloc_r+0x1b0>
 80089c8:	000d883a 	mov	r6,zero
 80089cc:	0009883a 	mov	r4,zero
 80089d0:	1080004c 	andi	r2,r2,1
 80089d4:	10005a1e 	bne	r2,zero,8008b40 <_realloc_r+0x21c>
 80089d8:	85fffe17 	ldw	r23,-8(r16)
 80089dc:	00bfff04 	movi	r2,-4
 80089e0:	b5efc83a 	sub	r23,r22,r23
 80089e4:	b9c00117 	ldw	r7,4(r23)
 80089e8:	388e703a 	and	r7,r7,r2
 80089ec:	3ccf883a 	add	r7,r7,r19
 80089f0:	20005226 	beq	r4,zero,8008b3c <_realloc_r+0x218>
 80089f4:	31e9883a 	add	r20,r6,r7
 80089f8:	2140c726 	beq	r4,r5,8008d18 <_realloc_r+0x3f4>
 80089fc:	a0c04f16 	blt	r20,r3,8008b3c <_realloc_r+0x218>
 8008a00:	20800317 	ldw	r2,12(r4)
 8008a04:	20c00217 	ldw	r3,8(r4)
 8008a08:	99bfff04 	addi	r6,r19,-4
 8008a0c:	01000904 	movi	r4,36
 8008a10:	18800315 	stw	r2,12(r3)
 8008a14:	10c00215 	stw	r3,8(r2)
 8008a18:	b8c00217 	ldw	r3,8(r23)
 8008a1c:	b8800317 	ldw	r2,12(r23)
 8008a20:	bc800204 	addi	r18,r23,8
 8008a24:	18800315 	stw	r2,12(r3)
 8008a28:	10c00215 	stw	r3,8(r2)
 8008a2c:	2180ed36 	bltu	r4,r6,8008de4 <_realloc_r+0x4c0>
 8008a30:	008004c4 	movi	r2,19
 8008a34:	11809b2e 	bgeu	r2,r6,8008ca4 <_realloc_r+0x380>
 8008a38:	80800017 	ldw	r2,0(r16)
 8008a3c:	b8800215 	stw	r2,8(r23)
 8008a40:	80800117 	ldw	r2,4(r16)
 8008a44:	b8800315 	stw	r2,12(r23)
 8008a48:	008006c4 	movi	r2,27
 8008a4c:	1180f936 	bltu	r2,r6,8008e34 <_realloc_r+0x510>
 8008a50:	b8800404 	addi	r2,r23,16
 8008a54:	80c00204 	addi	r3,r16,8
 8008a58:	00009406 	br	8008cac <_realloc_r+0x388>
 8008a5c:	00c00404 	movi	r3,16
 8008a60:	1823883a 	mov	r17,r3
 8008a64:	003fca06 	br	8008990 <__alt_data_end+0xf8008990>
 8008a68:	9829883a 	mov	r20,r19
 8008a6c:	a447c83a 	sub	r3,r20,r17
 8008a70:	010003c4 	movi	r4,15
 8008a74:	1080004c 	andi	r2,r2,1
 8008a78:	20c02336 	bltu	r4,r3,8008b08 <_realloc_r+0x1e4>
 8008a7c:	1504b03a 	or	r2,r2,r20
 8008a80:	b0800115 	stw	r2,4(r22)
 8008a84:	b52d883a 	add	r22,r22,r20
 8008a88:	b0800117 	ldw	r2,4(r22)
 8008a8c:	10800054 	ori	r2,r2,1
 8008a90:	b0800115 	stw	r2,4(r22)
 8008a94:	a809883a 	mov	r4,r21
 8008a98:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8008a9c:	8025883a 	mov	r18,r16
 8008aa0:	9005883a 	mov	r2,r18
 8008aa4:	dfc00a17 	ldw	ra,40(sp)
 8008aa8:	df000917 	ldw	fp,36(sp)
 8008aac:	ddc00817 	ldw	r23,32(sp)
 8008ab0:	dd800717 	ldw	r22,28(sp)
 8008ab4:	dd400617 	ldw	r21,24(sp)
 8008ab8:	dd000517 	ldw	r20,20(sp)
 8008abc:	dcc00417 	ldw	r19,16(sp)
 8008ac0:	dc800317 	ldw	r18,12(sp)
 8008ac4:	dc400217 	ldw	r17,8(sp)
 8008ac8:	dc000117 	ldw	r16,4(sp)
 8008acc:	dec00b04 	addi	sp,sp,44
 8008ad0:	f800283a 	ret
 8008ad4:	01ffff04 	movi	r7,-4
 8008ad8:	31cc703a 	and	r6,r6,r7
 8008adc:	34e9883a 	add	r20,r6,r19
 8008ae0:	a0ffbb16 	blt	r20,r3,80089d0 <__alt_data_end+0xf80089d0>
 8008ae4:	20c00317 	ldw	r3,12(r4)
 8008ae8:	21000217 	ldw	r4,8(r4)
 8008aec:	20c00315 	stw	r3,12(r4)
 8008af0:	19000215 	stw	r4,8(r3)
 8008af4:	003fdd06 	br	8008a6c <__alt_data_end+0xf8008a6c>
 8008af8:	00800304 	movi	r2,12
 8008afc:	a8800015 	stw	r2,0(r21)
 8008b00:	0025883a 	mov	r18,zero
 8008b04:	003fe606 	br	8008aa0 <__alt_data_end+0xf8008aa0>
 8008b08:	1444b03a 	or	r2,r2,r17
 8008b0c:	b0800115 	stw	r2,4(r22)
 8008b10:	b44b883a 	add	r5,r22,r17
 8008b14:	18800054 	ori	r2,r3,1
 8008b18:	28800115 	stw	r2,4(r5)
 8008b1c:	28c7883a 	add	r3,r5,r3
 8008b20:	18800117 	ldw	r2,4(r3)
 8008b24:	a809883a 	mov	r4,r21
 8008b28:	29400204 	addi	r5,r5,8
 8008b2c:	10800054 	ori	r2,r2,1
 8008b30:	18800115 	stw	r2,4(r3)
 8008b34:	80061180 	call	8006118 <_free_r>
 8008b38:	003fd606 	br	8008a94 <__alt_data_end+0xf8008a94>
 8008b3c:	38c0330e 	bge	r7,r3,8008c0c <_realloc_r+0x2e8>
 8008b40:	900b883a 	mov	r5,r18
 8008b44:	a809883a 	mov	r4,r21
 8008b48:	8006cb00 	call	8006cb0 <_malloc_r>
 8008b4c:	1025883a 	mov	r18,r2
 8008b50:	10001626 	beq	r2,zero,8008bac <_realloc_r+0x288>
 8008b54:	80bfff17 	ldw	r2,-4(r16)
 8008b58:	00ffff84 	movi	r3,-2
 8008b5c:	913ffe04 	addi	r4,r18,-8
 8008b60:	10c6703a 	and	r3,r2,r3
 8008b64:	b0c7883a 	add	r3,r22,r3
 8008b68:	20c09926 	beq	r4,r3,8008dd0 <_realloc_r+0x4ac>
 8008b6c:	99bfff04 	addi	r6,r19,-4
 8008b70:	00800904 	movi	r2,36
 8008b74:	11806436 	bltu	r2,r6,8008d08 <_realloc_r+0x3e4>
 8008b78:	00c004c4 	movi	r3,19
 8008b7c:	19804036 	bltu	r3,r6,8008c80 <_realloc_r+0x35c>
 8008b80:	9005883a 	mov	r2,r18
 8008b84:	8007883a 	mov	r3,r16
 8008b88:	19000017 	ldw	r4,0(r3)
 8008b8c:	11000015 	stw	r4,0(r2)
 8008b90:	19000117 	ldw	r4,4(r3)
 8008b94:	11000115 	stw	r4,4(r2)
 8008b98:	18c00217 	ldw	r3,8(r3)
 8008b9c:	10c00215 	stw	r3,8(r2)
 8008ba0:	a809883a 	mov	r4,r21
 8008ba4:	800b883a 	mov	r5,r16
 8008ba8:	80061180 	call	8006118 <_free_r>
 8008bac:	a809883a 	mov	r4,r21
 8008bb0:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8008bb4:	003fba06 	br	8008aa0 <__alt_data_end+0xf8008aa0>
 8008bb8:	300b883a 	mov	r5,r6
 8008bbc:	dfc00a17 	ldw	ra,40(sp)
 8008bc0:	df000917 	ldw	fp,36(sp)
 8008bc4:	ddc00817 	ldw	r23,32(sp)
 8008bc8:	dd800717 	ldw	r22,28(sp)
 8008bcc:	dd400617 	ldw	r21,24(sp)
 8008bd0:	dd000517 	ldw	r20,20(sp)
 8008bd4:	dcc00417 	ldw	r19,16(sp)
 8008bd8:	dc800317 	ldw	r18,12(sp)
 8008bdc:	dc400217 	ldw	r17,8(sp)
 8008be0:	dc000117 	ldw	r16,4(sp)
 8008be4:	dec00b04 	addi	sp,sp,44
 8008be8:	8006cb01 	jmpi	8006cb0 <_malloc_r>
 8008bec:	29800117 	ldw	r6,4(r5)
 8008bf0:	013fff04 	movi	r4,-4
 8008bf4:	89c00404 	addi	r7,r17,16
 8008bf8:	310c703a 	and	r6,r6,r4
 8008bfc:	34c9883a 	add	r4,r6,r19
 8008c00:	21c0340e 	bge	r4,r7,8008cd4 <_realloc_r+0x3b0>
 8008c04:	2809883a 	mov	r4,r5
 8008c08:	003f7106 	br	80089d0 <__alt_data_end+0xf80089d0>
 8008c0c:	b8800317 	ldw	r2,12(r23)
 8008c10:	b8c00217 	ldw	r3,8(r23)
 8008c14:	99bfff04 	addi	r6,r19,-4
 8008c18:	01000904 	movi	r4,36
 8008c1c:	18800315 	stw	r2,12(r3)
 8008c20:	10c00215 	stw	r3,8(r2)
 8008c24:	bc800204 	addi	r18,r23,8
 8008c28:	21807836 	bltu	r4,r6,8008e0c <_realloc_r+0x4e8>
 8008c2c:	008004c4 	movi	r2,19
 8008c30:	1180732e 	bgeu	r2,r6,8008e00 <_realloc_r+0x4dc>
 8008c34:	80800017 	ldw	r2,0(r16)
 8008c38:	b8800215 	stw	r2,8(r23)
 8008c3c:	80800117 	ldw	r2,4(r16)
 8008c40:	b8800315 	stw	r2,12(r23)
 8008c44:	008006c4 	movi	r2,27
 8008c48:	11808936 	bltu	r2,r6,8008e70 <_realloc_r+0x54c>
 8008c4c:	b8800404 	addi	r2,r23,16
 8008c50:	80c00204 	addi	r3,r16,8
 8008c54:	19000017 	ldw	r4,0(r3)
 8008c58:	9021883a 	mov	r16,r18
 8008c5c:	3829883a 	mov	r20,r7
 8008c60:	11000015 	stw	r4,0(r2)
 8008c64:	19000117 	ldw	r4,4(r3)
 8008c68:	b82d883a 	mov	r22,r23
 8008c6c:	11000115 	stw	r4,4(r2)
 8008c70:	18c00217 	ldw	r3,8(r3)
 8008c74:	10c00215 	stw	r3,8(r2)
 8008c78:	b8800117 	ldw	r2,4(r23)
 8008c7c:	003f7b06 	br	8008a6c <__alt_data_end+0xf8008a6c>
 8008c80:	80c00017 	ldw	r3,0(r16)
 8008c84:	90c00015 	stw	r3,0(r18)
 8008c88:	80c00117 	ldw	r3,4(r16)
 8008c8c:	90c00115 	stw	r3,4(r18)
 8008c90:	00c006c4 	movi	r3,27
 8008c94:	19804636 	bltu	r3,r6,8008db0 <_realloc_r+0x48c>
 8008c98:	90800204 	addi	r2,r18,8
 8008c9c:	80c00204 	addi	r3,r16,8
 8008ca0:	003fb906 	br	8008b88 <__alt_data_end+0xf8008b88>
 8008ca4:	9005883a 	mov	r2,r18
 8008ca8:	8007883a 	mov	r3,r16
 8008cac:	19000017 	ldw	r4,0(r3)
 8008cb0:	9021883a 	mov	r16,r18
 8008cb4:	b82d883a 	mov	r22,r23
 8008cb8:	11000015 	stw	r4,0(r2)
 8008cbc:	19000117 	ldw	r4,4(r3)
 8008cc0:	11000115 	stw	r4,4(r2)
 8008cc4:	18c00217 	ldw	r3,8(r3)
 8008cc8:	10c00215 	stw	r3,8(r2)
 8008ccc:	b8800117 	ldw	r2,4(r23)
 8008cd0:	003f6606 	br	8008a6c <__alt_data_end+0xf8008a6c>
 8008cd4:	2445c83a 	sub	r2,r4,r17
 8008cd8:	b46d883a 	add	r22,r22,r17
 8008cdc:	10800054 	ori	r2,r2,1
 8008ce0:	b0800115 	stw	r2,4(r22)
 8008ce4:	80bfff17 	ldw	r2,-4(r16)
 8008ce8:	a809883a 	mov	r4,r21
 8008cec:	e5800215 	stw	r22,8(fp)
 8008cf0:	1080004c 	andi	r2,r2,1
 8008cf4:	88a2b03a 	or	r17,r17,r2
 8008cf8:	847fff15 	stw	r17,-4(r16)
 8008cfc:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8008d00:	8025883a 	mov	r18,r16
 8008d04:	003f6606 	br	8008aa0 <__alt_data_end+0xf8008aa0>
 8008d08:	9009883a 	mov	r4,r18
 8008d0c:	800b883a 	mov	r5,r16
 8008d10:	800766c0 	call	800766c <memmove>
 8008d14:	003fa206 	br	8008ba0 <__alt_data_end+0xf8008ba0>
 8008d18:	88800404 	addi	r2,r17,16
 8008d1c:	a0bf8716 	blt	r20,r2,8008b3c <__alt_data_end+0xf8008b3c>
 8008d20:	b8800317 	ldw	r2,12(r23)
 8008d24:	b8c00217 	ldw	r3,8(r23)
 8008d28:	99bfff04 	addi	r6,r19,-4
 8008d2c:	01000904 	movi	r4,36
 8008d30:	18800315 	stw	r2,12(r3)
 8008d34:	10c00215 	stw	r3,8(r2)
 8008d38:	bc800204 	addi	r18,r23,8
 8008d3c:	21806536 	bltu	r4,r6,8008ed4 <_realloc_r+0x5b0>
 8008d40:	008004c4 	movi	r2,19
 8008d44:	1180592e 	bgeu	r2,r6,8008eac <_realloc_r+0x588>
 8008d48:	80800017 	ldw	r2,0(r16)
 8008d4c:	b8800215 	stw	r2,8(r23)
 8008d50:	80800117 	ldw	r2,4(r16)
 8008d54:	b8800315 	stw	r2,12(r23)
 8008d58:	008006c4 	movi	r2,27
 8008d5c:	11806136 	bltu	r2,r6,8008ee4 <_realloc_r+0x5c0>
 8008d60:	b8800404 	addi	r2,r23,16
 8008d64:	80c00204 	addi	r3,r16,8
 8008d68:	19000017 	ldw	r4,0(r3)
 8008d6c:	11000015 	stw	r4,0(r2)
 8008d70:	19000117 	ldw	r4,4(r3)
 8008d74:	11000115 	stw	r4,4(r2)
 8008d78:	18c00217 	ldw	r3,8(r3)
 8008d7c:	10c00215 	stw	r3,8(r2)
 8008d80:	a447c83a 	sub	r3,r20,r17
 8008d84:	bc45883a 	add	r2,r23,r17
 8008d88:	18c00054 	ori	r3,r3,1
 8008d8c:	10c00115 	stw	r3,4(r2)
 8008d90:	b8c00117 	ldw	r3,4(r23)
 8008d94:	e0800215 	stw	r2,8(fp)
 8008d98:	a809883a 	mov	r4,r21
 8008d9c:	1880004c 	andi	r2,r3,1
 8008da0:	88a2b03a 	or	r17,r17,r2
 8008da4:	bc400115 	stw	r17,4(r23)
 8008da8:	800bd7c0 	call	800bd7c <__malloc_unlock>
 8008dac:	003f3c06 	br	8008aa0 <__alt_data_end+0xf8008aa0>
 8008db0:	80c00217 	ldw	r3,8(r16)
 8008db4:	90c00215 	stw	r3,8(r18)
 8008db8:	80c00317 	ldw	r3,12(r16)
 8008dbc:	90c00315 	stw	r3,12(r18)
 8008dc0:	30802426 	beq	r6,r2,8008e54 <_realloc_r+0x530>
 8008dc4:	90800404 	addi	r2,r18,16
 8008dc8:	80c00404 	addi	r3,r16,16
 8008dcc:	003f6e06 	br	8008b88 <__alt_data_end+0xf8008b88>
 8008dd0:	953fff17 	ldw	r20,-4(r18)
 8008dd4:	00ffff04 	movi	r3,-4
 8008dd8:	a0e8703a 	and	r20,r20,r3
 8008ddc:	a4e9883a 	add	r20,r20,r19
 8008de0:	003f2206 	br	8008a6c <__alt_data_end+0xf8008a6c>
 8008de4:	800b883a 	mov	r5,r16
 8008de8:	9009883a 	mov	r4,r18
 8008dec:	800766c0 	call	800766c <memmove>
 8008df0:	9021883a 	mov	r16,r18
 8008df4:	b8800117 	ldw	r2,4(r23)
 8008df8:	b82d883a 	mov	r22,r23
 8008dfc:	003f1b06 	br	8008a6c <__alt_data_end+0xf8008a6c>
 8008e00:	9005883a 	mov	r2,r18
 8008e04:	8007883a 	mov	r3,r16
 8008e08:	003f9206 	br	8008c54 <__alt_data_end+0xf8008c54>
 8008e0c:	800b883a 	mov	r5,r16
 8008e10:	9009883a 	mov	r4,r18
 8008e14:	d9c00015 	stw	r7,0(sp)
 8008e18:	800766c0 	call	800766c <memmove>
 8008e1c:	d9c00017 	ldw	r7,0(sp)
 8008e20:	9021883a 	mov	r16,r18
 8008e24:	b8800117 	ldw	r2,4(r23)
 8008e28:	3829883a 	mov	r20,r7
 8008e2c:	b82d883a 	mov	r22,r23
 8008e30:	003f0e06 	br	8008a6c <__alt_data_end+0xf8008a6c>
 8008e34:	80800217 	ldw	r2,8(r16)
 8008e38:	b8800415 	stw	r2,16(r23)
 8008e3c:	80800317 	ldw	r2,12(r16)
 8008e40:	b8800515 	stw	r2,20(r23)
 8008e44:	31001226 	beq	r6,r4,8008e90 <_realloc_r+0x56c>
 8008e48:	b8800604 	addi	r2,r23,24
 8008e4c:	80c00404 	addi	r3,r16,16
 8008e50:	003f9606 	br	8008cac <__alt_data_end+0xf8008cac>
 8008e54:	81000417 	ldw	r4,16(r16)
 8008e58:	90800604 	addi	r2,r18,24
 8008e5c:	80c00604 	addi	r3,r16,24
 8008e60:	91000415 	stw	r4,16(r18)
 8008e64:	81000517 	ldw	r4,20(r16)
 8008e68:	91000515 	stw	r4,20(r18)
 8008e6c:	003f4606 	br	8008b88 <__alt_data_end+0xf8008b88>
 8008e70:	80800217 	ldw	r2,8(r16)
 8008e74:	b8800415 	stw	r2,16(r23)
 8008e78:	80800317 	ldw	r2,12(r16)
 8008e7c:	b8800515 	stw	r2,20(r23)
 8008e80:	31000d26 	beq	r6,r4,8008eb8 <_realloc_r+0x594>
 8008e84:	b8800604 	addi	r2,r23,24
 8008e88:	80c00404 	addi	r3,r16,16
 8008e8c:	003f7106 	br	8008c54 <__alt_data_end+0xf8008c54>
 8008e90:	81000417 	ldw	r4,16(r16)
 8008e94:	b8800804 	addi	r2,r23,32
 8008e98:	80c00604 	addi	r3,r16,24
 8008e9c:	b9000615 	stw	r4,24(r23)
 8008ea0:	81000517 	ldw	r4,20(r16)
 8008ea4:	b9000715 	stw	r4,28(r23)
 8008ea8:	003f8006 	br	8008cac <__alt_data_end+0xf8008cac>
 8008eac:	9005883a 	mov	r2,r18
 8008eb0:	8007883a 	mov	r3,r16
 8008eb4:	003fac06 	br	8008d68 <__alt_data_end+0xf8008d68>
 8008eb8:	81000417 	ldw	r4,16(r16)
 8008ebc:	b8800804 	addi	r2,r23,32
 8008ec0:	80c00604 	addi	r3,r16,24
 8008ec4:	b9000615 	stw	r4,24(r23)
 8008ec8:	81000517 	ldw	r4,20(r16)
 8008ecc:	b9000715 	stw	r4,28(r23)
 8008ed0:	003f6006 	br	8008c54 <__alt_data_end+0xf8008c54>
 8008ed4:	9009883a 	mov	r4,r18
 8008ed8:	800b883a 	mov	r5,r16
 8008edc:	800766c0 	call	800766c <memmove>
 8008ee0:	003fa706 	br	8008d80 <__alt_data_end+0xf8008d80>
 8008ee4:	80800217 	ldw	r2,8(r16)
 8008ee8:	b8800415 	stw	r2,16(r23)
 8008eec:	80800317 	ldw	r2,12(r16)
 8008ef0:	b8800515 	stw	r2,20(r23)
 8008ef4:	31000326 	beq	r6,r4,8008f04 <_realloc_r+0x5e0>
 8008ef8:	b8800604 	addi	r2,r23,24
 8008efc:	80c00404 	addi	r3,r16,16
 8008f00:	003f9906 	br	8008d68 <__alt_data_end+0xf8008d68>
 8008f04:	81000417 	ldw	r4,16(r16)
 8008f08:	b8800804 	addi	r2,r23,32
 8008f0c:	80c00604 	addi	r3,r16,24
 8008f10:	b9000615 	stw	r4,24(r23)
 8008f14:	81000517 	ldw	r4,20(r16)
 8008f18:	b9000715 	stw	r4,28(r23)
 8008f1c:	003f9206 	br	8008d68 <__alt_data_end+0xf8008d68>

08008f20 <__isinfd>:
 8008f20:	0105c83a 	sub	r2,zero,r4
 8008f24:	1108b03a 	or	r4,r2,r4
 8008f28:	2004d7fa 	srli	r2,r4,31
 8008f2c:	00e00034 	movhi	r3,32768
 8008f30:	18ffffc4 	addi	r3,r3,-1
 8008f34:	28ca703a 	and	r5,r5,r3
 8008f38:	1144b03a 	or	r2,r2,r5
 8008f3c:	00dffc34 	movhi	r3,32752
 8008f40:	1885c83a 	sub	r2,r3,r2
 8008f44:	0087c83a 	sub	r3,zero,r2
 8008f48:	1884b03a 	or	r2,r3,r2
 8008f4c:	1005d7fa 	srai	r2,r2,31
 8008f50:	10800044 	addi	r2,r2,1
 8008f54:	f800283a 	ret

08008f58 <__isnand>:
 8008f58:	0105c83a 	sub	r2,zero,r4
 8008f5c:	1108b03a 	or	r4,r2,r4
 8008f60:	2004d7fa 	srli	r2,r4,31
 8008f64:	00e00034 	movhi	r3,32768
 8008f68:	18ffffc4 	addi	r3,r3,-1
 8008f6c:	28ca703a 	and	r5,r5,r3
 8008f70:	1144b03a 	or	r2,r2,r5
 8008f74:	00dffc34 	movhi	r3,32752
 8008f78:	1885c83a 	sub	r2,r3,r2
 8008f7c:	1004d7fa 	srli	r2,r2,31
 8008f80:	f800283a 	ret

08008f84 <_sbrk_r>:
 8008f84:	defffd04 	addi	sp,sp,-12
 8008f88:	dc400115 	stw	r17,4(sp)
 8008f8c:	dc000015 	stw	r16,0(sp)
 8008f90:	2023883a 	mov	r17,r4
 8008f94:	04020074 	movhi	r16,2049
 8008f98:	8407c904 	addi	r16,r16,7972
 8008f9c:	2809883a 	mov	r4,r5
 8008fa0:	dfc00215 	stw	ra,8(sp)
 8008fa4:	80000015 	stw	zero,0(r16)
 8008fa8:	800bf600 	call	800bf60 <sbrk>
 8008fac:	00ffffc4 	movi	r3,-1
 8008fb0:	10c00526 	beq	r2,r3,8008fc8 <_sbrk_r+0x44>
 8008fb4:	dfc00217 	ldw	ra,8(sp)
 8008fb8:	dc400117 	ldw	r17,4(sp)
 8008fbc:	dc000017 	ldw	r16,0(sp)
 8008fc0:	dec00304 	addi	sp,sp,12
 8008fc4:	f800283a 	ret
 8008fc8:	80c00017 	ldw	r3,0(r16)
 8008fcc:	183ff926 	beq	r3,zero,8008fb4 <__alt_data_end+0xf8008fb4>
 8008fd0:	88c00015 	stw	r3,0(r17)
 8008fd4:	dfc00217 	ldw	ra,8(sp)
 8008fd8:	dc400117 	ldw	r17,4(sp)
 8008fdc:	dc000017 	ldw	r16,0(sp)
 8008fe0:	dec00304 	addi	sp,sp,12
 8008fe4:	f800283a 	ret

08008fe8 <__sread>:
 8008fe8:	defffe04 	addi	sp,sp,-8
 8008fec:	dc000015 	stw	r16,0(sp)
 8008ff0:	2821883a 	mov	r16,r5
 8008ff4:	2940038f 	ldh	r5,14(r5)
 8008ff8:	dfc00115 	stw	ra,4(sp)
 8008ffc:	80095f00 	call	80095f0 <_read_r>
 8009000:	10000716 	blt	r2,zero,8009020 <__sread+0x38>
 8009004:	80c01417 	ldw	r3,80(r16)
 8009008:	1887883a 	add	r3,r3,r2
 800900c:	80c01415 	stw	r3,80(r16)
 8009010:	dfc00117 	ldw	ra,4(sp)
 8009014:	dc000017 	ldw	r16,0(sp)
 8009018:	dec00204 	addi	sp,sp,8
 800901c:	f800283a 	ret
 8009020:	80c0030b 	ldhu	r3,12(r16)
 8009024:	18fbffcc 	andi	r3,r3,61439
 8009028:	80c0030d 	sth	r3,12(r16)
 800902c:	dfc00117 	ldw	ra,4(sp)
 8009030:	dc000017 	ldw	r16,0(sp)
 8009034:	dec00204 	addi	sp,sp,8
 8009038:	f800283a 	ret

0800903c <__swrite>:
 800903c:	2880030b 	ldhu	r2,12(r5)
 8009040:	defffb04 	addi	sp,sp,-20
 8009044:	dcc00315 	stw	r19,12(sp)
 8009048:	10c0400c 	andi	r3,r2,256
 800904c:	18ffffcc 	andi	r3,r3,65535
 8009050:	18e0001c 	xori	r3,r3,32768
 8009054:	dc800215 	stw	r18,8(sp)
 8009058:	dc400115 	stw	r17,4(sp)
 800905c:	dc000015 	stw	r16,0(sp)
 8009060:	dfc00415 	stw	ra,16(sp)
 8009064:	18e00004 	addi	r3,r3,-32768
 8009068:	2821883a 	mov	r16,r5
 800906c:	2027883a 	mov	r19,r4
 8009070:	3025883a 	mov	r18,r6
 8009074:	3823883a 	mov	r17,r7
 8009078:	18000526 	beq	r3,zero,8009090 <__swrite+0x54>
 800907c:	2940038f 	ldh	r5,14(r5)
 8009080:	000d883a 	mov	r6,zero
 8009084:	01c00084 	movi	r7,2
 8009088:	80095840 	call	8009584 <_lseek_r>
 800908c:	8080030b 	ldhu	r2,12(r16)
 8009090:	8140038f 	ldh	r5,14(r16)
 8009094:	10bbffcc 	andi	r2,r2,61439
 8009098:	9809883a 	mov	r4,r19
 800909c:	900d883a 	mov	r6,r18
 80090a0:	880f883a 	mov	r7,r17
 80090a4:	8080030d 	sth	r2,12(r16)
 80090a8:	dfc00417 	ldw	ra,16(sp)
 80090ac:	dcc00317 	ldw	r19,12(sp)
 80090b0:	dc800217 	ldw	r18,8(sp)
 80090b4:	dc400117 	ldw	r17,4(sp)
 80090b8:	dc000017 	ldw	r16,0(sp)
 80090bc:	dec00504 	addi	sp,sp,20
 80090c0:	80091cc1 	jmpi	80091cc <_write_r>

080090c4 <__sseek>:
 80090c4:	defffe04 	addi	sp,sp,-8
 80090c8:	dc000015 	stw	r16,0(sp)
 80090cc:	2821883a 	mov	r16,r5
 80090d0:	2940038f 	ldh	r5,14(r5)
 80090d4:	dfc00115 	stw	ra,4(sp)
 80090d8:	80095840 	call	8009584 <_lseek_r>
 80090dc:	00ffffc4 	movi	r3,-1
 80090e0:	10c00826 	beq	r2,r3,8009104 <__sseek+0x40>
 80090e4:	80c0030b 	ldhu	r3,12(r16)
 80090e8:	80801415 	stw	r2,80(r16)
 80090ec:	18c40014 	ori	r3,r3,4096
 80090f0:	80c0030d 	sth	r3,12(r16)
 80090f4:	dfc00117 	ldw	ra,4(sp)
 80090f8:	dc000017 	ldw	r16,0(sp)
 80090fc:	dec00204 	addi	sp,sp,8
 8009100:	f800283a 	ret
 8009104:	80c0030b 	ldhu	r3,12(r16)
 8009108:	18fbffcc 	andi	r3,r3,61439
 800910c:	80c0030d 	sth	r3,12(r16)
 8009110:	dfc00117 	ldw	ra,4(sp)
 8009114:	dc000017 	ldw	r16,0(sp)
 8009118:	dec00204 	addi	sp,sp,8
 800911c:	f800283a 	ret

08009120 <__sclose>:
 8009120:	2940038f 	ldh	r5,14(r5)
 8009124:	80093041 	jmpi	8009304 <_close_r>

08009128 <strcmp>:
 8009128:	2904b03a 	or	r2,r5,r4
 800912c:	108000cc 	andi	r2,r2,3
 8009130:	1000171e 	bne	r2,zero,8009190 <strcmp+0x68>
 8009134:	20800017 	ldw	r2,0(r4)
 8009138:	28c00017 	ldw	r3,0(r5)
 800913c:	10c0141e 	bne	r2,r3,8009190 <strcmp+0x68>
 8009140:	027fbff4 	movhi	r9,65279
 8009144:	4a7fbfc4 	addi	r9,r9,-257
 8009148:	1247883a 	add	r3,r2,r9
 800914c:	0084303a 	nor	r2,zero,r2
 8009150:	1884703a 	and	r2,r3,r2
 8009154:	02202074 	movhi	r8,32897
 8009158:	42202004 	addi	r8,r8,-32640
 800915c:	1204703a 	and	r2,r2,r8
 8009160:	10000226 	beq	r2,zero,800916c <strcmp+0x44>
 8009164:	00001706 	br	80091c4 <strcmp+0x9c>
 8009168:	3000161e 	bne	r6,zero,80091c4 <strcmp+0x9c>
 800916c:	21000104 	addi	r4,r4,4
 8009170:	20800017 	ldw	r2,0(r4)
 8009174:	29400104 	addi	r5,r5,4
 8009178:	28c00017 	ldw	r3,0(r5)
 800917c:	124f883a 	add	r7,r2,r9
 8009180:	008c303a 	nor	r6,zero,r2
 8009184:	398c703a 	and	r6,r7,r6
 8009188:	320c703a 	and	r6,r6,r8
 800918c:	10fff626 	beq	r2,r3,8009168 <__alt_data_end+0xf8009168>
 8009190:	20800007 	ldb	r2,0(r4)
 8009194:	1000051e 	bne	r2,zero,80091ac <strcmp+0x84>
 8009198:	00000606 	br	80091b4 <strcmp+0x8c>
 800919c:	21000044 	addi	r4,r4,1
 80091a0:	20800007 	ldb	r2,0(r4)
 80091a4:	29400044 	addi	r5,r5,1
 80091a8:	10000226 	beq	r2,zero,80091b4 <strcmp+0x8c>
 80091ac:	28c00007 	ldb	r3,0(r5)
 80091b0:	10fffa26 	beq	r2,r3,800919c <__alt_data_end+0xf800919c>
 80091b4:	20c00003 	ldbu	r3,0(r4)
 80091b8:	28800003 	ldbu	r2,0(r5)
 80091bc:	1885c83a 	sub	r2,r3,r2
 80091c0:	f800283a 	ret
 80091c4:	0005883a 	mov	r2,zero
 80091c8:	f800283a 	ret

080091cc <_write_r>:
 80091cc:	defffd04 	addi	sp,sp,-12
 80091d0:	dc400115 	stw	r17,4(sp)
 80091d4:	dc000015 	stw	r16,0(sp)
 80091d8:	2023883a 	mov	r17,r4
 80091dc:	04020074 	movhi	r16,2049
 80091e0:	8407c904 	addi	r16,r16,7972
 80091e4:	2809883a 	mov	r4,r5
 80091e8:	300b883a 	mov	r5,r6
 80091ec:	380d883a 	mov	r6,r7
 80091f0:	dfc00215 	stw	ra,8(sp)
 80091f4:	80000015 	stw	zero,0(r16)
 80091f8:	800c0900 	call	800c090 <write>
 80091fc:	00ffffc4 	movi	r3,-1
 8009200:	10c00526 	beq	r2,r3,8009218 <_write_r+0x4c>
 8009204:	dfc00217 	ldw	ra,8(sp)
 8009208:	dc400117 	ldw	r17,4(sp)
 800920c:	dc000017 	ldw	r16,0(sp)
 8009210:	dec00304 	addi	sp,sp,12
 8009214:	f800283a 	ret
 8009218:	80c00017 	ldw	r3,0(r16)
 800921c:	183ff926 	beq	r3,zero,8009204 <__alt_data_end+0xf8009204>
 8009220:	88c00015 	stw	r3,0(r17)
 8009224:	dfc00217 	ldw	ra,8(sp)
 8009228:	dc400117 	ldw	r17,4(sp)
 800922c:	dc000017 	ldw	r16,0(sp)
 8009230:	dec00304 	addi	sp,sp,12
 8009234:	f800283a 	ret

08009238 <_calloc_r>:
 8009238:	defffe04 	addi	sp,sp,-8
 800923c:	dc000015 	stw	r16,0(sp)
 8009240:	2021883a 	mov	r16,r4
 8009244:	3009883a 	mov	r4,r6
 8009248:	dfc00115 	stw	ra,4(sp)
 800924c:	800b1340 	call	800b134 <__mulsi3>
 8009250:	8009883a 	mov	r4,r16
 8009254:	100b883a 	mov	r5,r2
 8009258:	8006cb00 	call	8006cb0 <_malloc_r>
 800925c:	1021883a 	mov	r16,r2
 8009260:	10000c26 	beq	r2,zero,8009294 <_calloc_r+0x5c>
 8009264:	11bfff17 	ldw	r6,-4(r2)
 8009268:	00ffff04 	movi	r3,-4
 800926c:	00800904 	movi	r2,36
 8009270:	30cc703a 	and	r6,r6,r3
 8009274:	30cd883a 	add	r6,r6,r3
 8009278:	11801436 	bltu	r2,r6,80092cc <_calloc_r+0x94>
 800927c:	00c004c4 	movi	r3,19
 8009280:	19800936 	bltu	r3,r6,80092a8 <_calloc_r+0x70>
 8009284:	8005883a 	mov	r2,r16
 8009288:	10000015 	stw	zero,0(r2)
 800928c:	10000115 	stw	zero,4(r2)
 8009290:	10000215 	stw	zero,8(r2)
 8009294:	8005883a 	mov	r2,r16
 8009298:	dfc00117 	ldw	ra,4(sp)
 800929c:	dc000017 	ldw	r16,0(sp)
 80092a0:	dec00204 	addi	sp,sp,8
 80092a4:	f800283a 	ret
 80092a8:	80000015 	stw	zero,0(r16)
 80092ac:	80000115 	stw	zero,4(r16)
 80092b0:	00c006c4 	movi	r3,27
 80092b4:	19800d2e 	bgeu	r3,r6,80092ec <_calloc_r+0xb4>
 80092b8:	80000215 	stw	zero,8(r16)
 80092bc:	80000315 	stw	zero,12(r16)
 80092c0:	30800c26 	beq	r6,r2,80092f4 <_calloc_r+0xbc>
 80092c4:	80800404 	addi	r2,r16,16
 80092c8:	003fef06 	br	8009288 <__alt_data_end+0xf8009288>
 80092cc:	8009883a 	mov	r4,r16
 80092d0:	000b883a 	mov	r5,zero
 80092d4:	80077f80 	call	80077f8 <memset>
 80092d8:	8005883a 	mov	r2,r16
 80092dc:	dfc00117 	ldw	ra,4(sp)
 80092e0:	dc000017 	ldw	r16,0(sp)
 80092e4:	dec00204 	addi	sp,sp,8
 80092e8:	f800283a 	ret
 80092ec:	80800204 	addi	r2,r16,8
 80092f0:	003fe506 	br	8009288 <__alt_data_end+0xf8009288>
 80092f4:	80000415 	stw	zero,16(r16)
 80092f8:	80000515 	stw	zero,20(r16)
 80092fc:	80800604 	addi	r2,r16,24
 8009300:	003fe106 	br	8009288 <__alt_data_end+0xf8009288>

08009304 <_close_r>:
 8009304:	defffd04 	addi	sp,sp,-12
 8009308:	dc400115 	stw	r17,4(sp)
 800930c:	dc000015 	stw	r16,0(sp)
 8009310:	2023883a 	mov	r17,r4
 8009314:	04020074 	movhi	r16,2049
 8009318:	8407c904 	addi	r16,r16,7972
 800931c:	2809883a 	mov	r4,r5
 8009320:	dfc00215 	stw	ra,8(sp)
 8009324:	80000015 	stw	zero,0(r16)
 8009328:	800b7e80 	call	800b7e8 <close>
 800932c:	00ffffc4 	movi	r3,-1
 8009330:	10c00526 	beq	r2,r3,8009348 <_close_r+0x44>
 8009334:	dfc00217 	ldw	ra,8(sp)
 8009338:	dc400117 	ldw	r17,4(sp)
 800933c:	dc000017 	ldw	r16,0(sp)
 8009340:	dec00304 	addi	sp,sp,12
 8009344:	f800283a 	ret
 8009348:	80c00017 	ldw	r3,0(r16)
 800934c:	183ff926 	beq	r3,zero,8009334 <__alt_data_end+0xf8009334>
 8009350:	88c00015 	stw	r3,0(r17)
 8009354:	dfc00217 	ldw	ra,8(sp)
 8009358:	dc400117 	ldw	r17,4(sp)
 800935c:	dc000017 	ldw	r16,0(sp)
 8009360:	dec00304 	addi	sp,sp,12
 8009364:	f800283a 	ret

08009368 <_fclose_r>:
 8009368:	defffc04 	addi	sp,sp,-16
 800936c:	dc400115 	stw	r17,4(sp)
 8009370:	dc000015 	stw	r16,0(sp)
 8009374:	dfc00315 	stw	ra,12(sp)
 8009378:	dc800215 	stw	r18,8(sp)
 800937c:	2821883a 	mov	r16,r5
 8009380:	2023883a 	mov	r17,r4
 8009384:	28003426 	beq	r5,zero,8009458 <_fclose_r+0xf0>
 8009388:	8005f9c0 	call	8005f9c <__sfp_lock_acquire>
 800938c:	88000226 	beq	r17,zero,8009398 <_fclose_r+0x30>
 8009390:	88800e17 	ldw	r2,56(r17)
 8009394:	10003826 	beq	r2,zero,8009478 <_fclose_r+0x110>
 8009398:	8080030f 	ldh	r2,12(r16)
 800939c:	10002526 	beq	r2,zero,8009434 <_fclose_r+0xcc>
 80093a0:	8809883a 	mov	r4,r17
 80093a4:	800b883a 	mov	r5,r16
 80093a8:	8005ad80 	call	8005ad8 <_fflush_r>
 80093ac:	1025883a 	mov	r18,r2
 80093b0:	80800b17 	ldw	r2,44(r16)
 80093b4:	10000426 	beq	r2,zero,80093c8 <_fclose_r+0x60>
 80093b8:	81400717 	ldw	r5,28(r16)
 80093bc:	8809883a 	mov	r4,r17
 80093c0:	103ee83a 	callr	r2
 80093c4:	10003516 	blt	r2,zero,800949c <_fclose_r+0x134>
 80093c8:	8080030b 	ldhu	r2,12(r16)
 80093cc:	1080200c 	andi	r2,r2,128
 80093d0:	10bfffcc 	andi	r2,r2,65535
 80093d4:	10a0001c 	xori	r2,r2,32768
 80093d8:	10a00004 	addi	r2,r2,-32768
 80093dc:	10002b1e 	bne	r2,zero,800948c <_fclose_r+0x124>
 80093e0:	81400c17 	ldw	r5,48(r16)
 80093e4:	28000526 	beq	r5,zero,80093fc <_fclose_r+0x94>
 80093e8:	80801004 	addi	r2,r16,64
 80093ec:	28800226 	beq	r5,r2,80093f8 <_fclose_r+0x90>
 80093f0:	8809883a 	mov	r4,r17
 80093f4:	80061180 	call	8006118 <_free_r>
 80093f8:	80000c15 	stw	zero,48(r16)
 80093fc:	81401117 	ldw	r5,68(r16)
 8009400:	28000326 	beq	r5,zero,8009410 <_fclose_r+0xa8>
 8009404:	8809883a 	mov	r4,r17
 8009408:	80061180 	call	8006118 <_free_r>
 800940c:	80001115 	stw	zero,68(r16)
 8009410:	8000030d 	sth	zero,12(r16)
 8009414:	8005fa00 	call	8005fa0 <__sfp_lock_release>
 8009418:	9005883a 	mov	r2,r18
 800941c:	dfc00317 	ldw	ra,12(sp)
 8009420:	dc800217 	ldw	r18,8(sp)
 8009424:	dc400117 	ldw	r17,4(sp)
 8009428:	dc000017 	ldw	r16,0(sp)
 800942c:	dec00404 	addi	sp,sp,16
 8009430:	f800283a 	ret
 8009434:	8005fa00 	call	8005fa0 <__sfp_lock_release>
 8009438:	0025883a 	mov	r18,zero
 800943c:	9005883a 	mov	r2,r18
 8009440:	dfc00317 	ldw	ra,12(sp)
 8009444:	dc800217 	ldw	r18,8(sp)
 8009448:	dc400117 	ldw	r17,4(sp)
 800944c:	dc000017 	ldw	r16,0(sp)
 8009450:	dec00404 	addi	sp,sp,16
 8009454:	f800283a 	ret
 8009458:	0025883a 	mov	r18,zero
 800945c:	9005883a 	mov	r2,r18
 8009460:	dfc00317 	ldw	ra,12(sp)
 8009464:	dc800217 	ldw	r18,8(sp)
 8009468:	dc400117 	ldw	r17,4(sp)
 800946c:	dc000017 	ldw	r16,0(sp)
 8009470:	dec00404 	addi	sp,sp,16
 8009474:	f800283a 	ret
 8009478:	8809883a 	mov	r4,r17
 800947c:	8005d940 	call	8005d94 <__sinit>
 8009480:	8080030f 	ldh	r2,12(r16)
 8009484:	103fc61e 	bne	r2,zero,80093a0 <__alt_data_end+0xf80093a0>
 8009488:	003fea06 	br	8009434 <__alt_data_end+0xf8009434>
 800948c:	81400417 	ldw	r5,16(r16)
 8009490:	8809883a 	mov	r4,r17
 8009494:	80061180 	call	8006118 <_free_r>
 8009498:	003fd106 	br	80093e0 <__alt_data_end+0xf80093e0>
 800949c:	04bfffc4 	movi	r18,-1
 80094a0:	003fc906 	br	80093c8 <__alt_data_end+0xf80093c8>

080094a4 <fclose>:
 80094a4:	00820074 	movhi	r2,2049
 80094a8:	10811e04 	addi	r2,r2,1144
 80094ac:	200b883a 	mov	r5,r4
 80094b0:	11000017 	ldw	r4,0(r2)
 80094b4:	80093681 	jmpi	8009368 <_fclose_r>

080094b8 <_fstat_r>:
 80094b8:	defffd04 	addi	sp,sp,-12
 80094bc:	dc400115 	stw	r17,4(sp)
 80094c0:	dc000015 	stw	r16,0(sp)
 80094c4:	2023883a 	mov	r17,r4
 80094c8:	04020074 	movhi	r16,2049
 80094cc:	8407c904 	addi	r16,r16,7972
 80094d0:	2809883a 	mov	r4,r5
 80094d4:	300b883a 	mov	r5,r6
 80094d8:	dfc00215 	stw	ra,8(sp)
 80094dc:	80000015 	stw	zero,0(r16)
 80094e0:	800b9300 	call	800b930 <fstat>
 80094e4:	00ffffc4 	movi	r3,-1
 80094e8:	10c00526 	beq	r2,r3,8009500 <_fstat_r+0x48>
 80094ec:	dfc00217 	ldw	ra,8(sp)
 80094f0:	dc400117 	ldw	r17,4(sp)
 80094f4:	dc000017 	ldw	r16,0(sp)
 80094f8:	dec00304 	addi	sp,sp,12
 80094fc:	f800283a 	ret
 8009500:	80c00017 	ldw	r3,0(r16)
 8009504:	183ff926 	beq	r3,zero,80094ec <__alt_data_end+0xf80094ec>
 8009508:	88c00015 	stw	r3,0(r17)
 800950c:	dfc00217 	ldw	ra,8(sp)
 8009510:	dc400117 	ldw	r17,4(sp)
 8009514:	dc000017 	ldw	r16,0(sp)
 8009518:	dec00304 	addi	sp,sp,12
 800951c:	f800283a 	ret

08009520 <_isatty_r>:
 8009520:	defffd04 	addi	sp,sp,-12
 8009524:	dc400115 	stw	r17,4(sp)
 8009528:	dc000015 	stw	r16,0(sp)
 800952c:	2023883a 	mov	r17,r4
 8009530:	04020074 	movhi	r16,2049
 8009534:	8407c904 	addi	r16,r16,7972
 8009538:	2809883a 	mov	r4,r5
 800953c:	dfc00215 	stw	ra,8(sp)
 8009540:	80000015 	stw	zero,0(r16)
 8009544:	800ba300 	call	800ba30 <isatty>
 8009548:	00ffffc4 	movi	r3,-1
 800954c:	10c00526 	beq	r2,r3,8009564 <_isatty_r+0x44>
 8009550:	dfc00217 	ldw	ra,8(sp)
 8009554:	dc400117 	ldw	r17,4(sp)
 8009558:	dc000017 	ldw	r16,0(sp)
 800955c:	dec00304 	addi	sp,sp,12
 8009560:	f800283a 	ret
 8009564:	80c00017 	ldw	r3,0(r16)
 8009568:	183ff926 	beq	r3,zero,8009550 <__alt_data_end+0xf8009550>
 800956c:	88c00015 	stw	r3,0(r17)
 8009570:	dfc00217 	ldw	ra,8(sp)
 8009574:	dc400117 	ldw	r17,4(sp)
 8009578:	dc000017 	ldw	r16,0(sp)
 800957c:	dec00304 	addi	sp,sp,12
 8009580:	f800283a 	ret

08009584 <_lseek_r>:
 8009584:	defffd04 	addi	sp,sp,-12
 8009588:	dc400115 	stw	r17,4(sp)
 800958c:	dc000015 	stw	r16,0(sp)
 8009590:	2023883a 	mov	r17,r4
 8009594:	04020074 	movhi	r16,2049
 8009598:	8407c904 	addi	r16,r16,7972
 800959c:	2809883a 	mov	r4,r5
 80095a0:	300b883a 	mov	r5,r6
 80095a4:	380d883a 	mov	r6,r7
 80095a8:	dfc00215 	stw	ra,8(sp)
 80095ac:	80000015 	stw	zero,0(r16)
 80095b0:	800bc100 	call	800bc10 <lseek>
 80095b4:	00ffffc4 	movi	r3,-1
 80095b8:	10c00526 	beq	r2,r3,80095d0 <_lseek_r+0x4c>
 80095bc:	dfc00217 	ldw	ra,8(sp)
 80095c0:	dc400117 	ldw	r17,4(sp)
 80095c4:	dc000017 	ldw	r16,0(sp)
 80095c8:	dec00304 	addi	sp,sp,12
 80095cc:	f800283a 	ret
 80095d0:	80c00017 	ldw	r3,0(r16)
 80095d4:	183ff926 	beq	r3,zero,80095bc <__alt_data_end+0xf80095bc>
 80095d8:	88c00015 	stw	r3,0(r17)
 80095dc:	dfc00217 	ldw	ra,8(sp)
 80095e0:	dc400117 	ldw	r17,4(sp)
 80095e4:	dc000017 	ldw	r16,0(sp)
 80095e8:	dec00304 	addi	sp,sp,12
 80095ec:	f800283a 	ret

080095f0 <_read_r>:
 80095f0:	defffd04 	addi	sp,sp,-12
 80095f4:	dc400115 	stw	r17,4(sp)
 80095f8:	dc000015 	stw	r16,0(sp)
 80095fc:	2023883a 	mov	r17,r4
 8009600:	04020074 	movhi	r16,2049
 8009604:	8407c904 	addi	r16,r16,7972
 8009608:	2809883a 	mov	r4,r5
 800960c:	300b883a 	mov	r5,r6
 8009610:	380d883a 	mov	r6,r7
 8009614:	dfc00215 	stw	ra,8(sp)
 8009618:	80000015 	stw	zero,0(r16)
 800961c:	800bdec0 	call	800bdec <read>
 8009620:	00ffffc4 	movi	r3,-1
 8009624:	10c00526 	beq	r2,r3,800963c <_read_r+0x4c>
 8009628:	dfc00217 	ldw	ra,8(sp)
 800962c:	dc400117 	ldw	r17,4(sp)
 8009630:	dc000017 	ldw	r16,0(sp)
 8009634:	dec00304 	addi	sp,sp,12
 8009638:	f800283a 	ret
 800963c:	80c00017 	ldw	r3,0(r16)
 8009640:	183ff926 	beq	r3,zero,8009628 <__alt_data_end+0xf8009628>
 8009644:	88c00015 	stw	r3,0(r17)
 8009648:	dfc00217 	ldw	ra,8(sp)
 800964c:	dc400117 	ldw	r17,4(sp)
 8009650:	dc000017 	ldw	r16,0(sp)
 8009654:	dec00304 	addi	sp,sp,12
 8009658:	f800283a 	ret

0800965c <__udivdi3>:
 800965c:	defff504 	addi	sp,sp,-44
 8009660:	dd000515 	stw	r20,20(sp)
 8009664:	dcc00415 	stw	r19,16(sp)
 8009668:	dc800315 	stw	r18,12(sp)
 800966c:	dc400215 	stw	r17,8(sp)
 8009670:	dc000115 	stw	r16,4(sp)
 8009674:	dfc00a15 	stw	ra,40(sp)
 8009678:	df000915 	stw	fp,36(sp)
 800967c:	ddc00815 	stw	r23,32(sp)
 8009680:	dd800715 	stw	r22,28(sp)
 8009684:	dd400615 	stw	r21,24(sp)
 8009688:	2025883a 	mov	r18,r4
 800968c:	2823883a 	mov	r17,r5
 8009690:	3021883a 	mov	r16,r6
 8009694:	2027883a 	mov	r19,r4
 8009698:	2829883a 	mov	r20,r5
 800969c:	3800451e 	bne	r7,zero,80097b4 <__udivdi3+0x158>
 80096a0:	2980652e 	bgeu	r5,r6,8009838 <__udivdi3+0x1dc>
 80096a4:	00bfffd4 	movui	r2,65535
 80096a8:	1180b436 	bltu	r2,r6,800997c <__udivdi3+0x320>
 80096ac:	00803fc4 	movi	r2,255
 80096b0:	11816636 	bltu	r2,r6,8009c4c <__udivdi3+0x5f0>
 80096b4:	0005883a 	mov	r2,zero
 80096b8:	0007883a 	mov	r3,zero
 80096bc:	3084d83a 	srl	r2,r6,r2
 80096c0:	01020074 	movhi	r4,2049
 80096c4:	213a4b04 	addi	r4,r4,-5844
 80096c8:	2085883a 	add	r2,r4,r2
 80096cc:	10800003 	ldbu	r2,0(r2)
 80096d0:	10c7883a 	add	r3,r2,r3
 80096d4:	00800804 	movi	r2,32
 80096d8:	10c5c83a 	sub	r2,r2,r3
 80096dc:	10000526 	beq	r2,zero,80096f4 <__udivdi3+0x98>
 80096e0:	88a2983a 	sll	r17,r17,r2
 80096e4:	90c6d83a 	srl	r3,r18,r3
 80096e8:	30a0983a 	sll	r16,r6,r2
 80096ec:	90a6983a 	sll	r19,r18,r2
 80096f0:	88e8b03a 	or	r20,r17,r3
 80096f4:	8022d43a 	srli	r17,r16,16
 80096f8:	a009883a 	mov	r4,r20
 80096fc:	857fffcc 	andi	r21,r16,65535
 8009700:	880b883a 	mov	r5,r17
 8009704:	800b12c0 	call	800b12c <__umodsi3>
 8009708:	a009883a 	mov	r4,r20
 800970c:	880b883a 	mov	r5,r17
 8009710:	102d883a 	mov	r22,r2
 8009714:	800b1240 	call	800b124 <__udivsi3>
 8009718:	1009883a 	mov	r4,r2
 800971c:	a80b883a 	mov	r5,r21
 8009720:	1025883a 	mov	r18,r2
 8009724:	800b1340 	call	800b134 <__mulsi3>
 8009728:	1009883a 	mov	r4,r2
 800972c:	b006943a 	slli	r3,r22,16
 8009730:	9804d43a 	srli	r2,r19,16
 8009734:	1886b03a 	or	r3,r3,r2
 8009738:	1900052e 	bgeu	r3,r4,8009750 <__udivdi3+0xf4>
 800973c:	1c07883a 	add	r3,r3,r16
 8009740:	90bfffc4 	addi	r2,r18,-1
 8009744:	1c000136 	bltu	r3,r16,800974c <__udivdi3+0xf0>
 8009748:	19015536 	bltu	r3,r4,8009ca0 <__udivdi3+0x644>
 800974c:	1025883a 	mov	r18,r2
 8009750:	1929c83a 	sub	r20,r3,r4
 8009754:	880b883a 	mov	r5,r17
 8009758:	a009883a 	mov	r4,r20
 800975c:	800b12c0 	call	800b12c <__umodsi3>
 8009760:	102d883a 	mov	r22,r2
 8009764:	880b883a 	mov	r5,r17
 8009768:	a009883a 	mov	r4,r20
 800976c:	b02c943a 	slli	r22,r22,16
 8009770:	800b1240 	call	800b124 <__udivsi3>
 8009774:	1009883a 	mov	r4,r2
 8009778:	a80b883a 	mov	r5,r21
 800977c:	9cffffcc 	andi	r19,r19,65535
 8009780:	1023883a 	mov	r17,r2
 8009784:	b4e6b03a 	or	r19,r22,r19
 8009788:	800b1340 	call	800b134 <__mulsi3>
 800978c:	9880052e 	bgeu	r19,r2,80097a4 <__udivdi3+0x148>
 8009790:	9c27883a 	add	r19,r19,r16
 8009794:	88ffffc4 	addi	r3,r17,-1
 8009798:	9c011436 	bltu	r19,r16,8009bec <__udivdi3+0x590>
 800979c:	9881132e 	bgeu	r19,r2,8009bec <__udivdi3+0x590>
 80097a0:	8c7fff84 	addi	r17,r17,-2
 80097a4:	9004943a 	slli	r2,r18,16
 80097a8:	0007883a 	mov	r3,zero
 80097ac:	8884b03a 	or	r2,r17,r2
 80097b0:	00001506 	br	8009808 <__udivdi3+0x1ac>
 80097b4:	29c06a36 	bltu	r5,r7,8009960 <__udivdi3+0x304>
 80097b8:	00bfffd4 	movui	r2,65535
 80097bc:	11c06a2e 	bgeu	r2,r7,8009968 <__udivdi3+0x30c>
 80097c0:	00804034 	movhi	r2,256
 80097c4:	10bfffc4 	addi	r2,r2,-1
 80097c8:	11c11436 	bltu	r2,r7,8009c1c <__udivdi3+0x5c0>
 80097cc:	00c00404 	movi	r3,16
 80097d0:	180b883a 	mov	r5,r3
 80097d4:	38c6d83a 	srl	r3,r7,r3
 80097d8:	01020074 	movhi	r4,2049
 80097dc:	213a4b04 	addi	r4,r4,-5844
 80097e0:	04000804 	movi	r16,32
 80097e4:	20c7883a 	add	r3,r4,r3
 80097e8:	18800003 	ldbu	r2,0(r3)
 80097ec:	1145883a 	add	r2,r2,r5
 80097f0:	80a1c83a 	sub	r16,r16,r2
 80097f4:	80006e1e 	bne	r16,zero,80099b0 <__udivdi3+0x354>
 80097f8:	0007883a 	mov	r3,zero
 80097fc:	3c406a36 	bltu	r7,r17,80099a8 <__udivdi3+0x34c>
 8009800:	9180692e 	bgeu	r18,r6,80099a8 <__udivdi3+0x34c>
 8009804:	0005883a 	mov	r2,zero
 8009808:	dfc00a17 	ldw	ra,40(sp)
 800980c:	df000917 	ldw	fp,36(sp)
 8009810:	ddc00817 	ldw	r23,32(sp)
 8009814:	dd800717 	ldw	r22,28(sp)
 8009818:	dd400617 	ldw	r21,24(sp)
 800981c:	dd000517 	ldw	r20,20(sp)
 8009820:	dcc00417 	ldw	r19,16(sp)
 8009824:	dc800317 	ldw	r18,12(sp)
 8009828:	dc400217 	ldw	r17,8(sp)
 800982c:	dc000117 	ldw	r16,4(sp)
 8009830:	dec00b04 	addi	sp,sp,44
 8009834:	f800283a 	ret
 8009838:	3000041e 	bne	r6,zero,800984c <__udivdi3+0x1f0>
 800983c:	01000044 	movi	r4,1
 8009840:	000b883a 	mov	r5,zero
 8009844:	800b1240 	call	800b124 <__udivsi3>
 8009848:	1021883a 	mov	r16,r2
 800984c:	00bfffd4 	movui	r2,65535
 8009850:	1400502e 	bgeu	r2,r16,8009994 <__udivdi3+0x338>
 8009854:	00804034 	movhi	r2,256
 8009858:	10bfffc4 	addi	r2,r2,-1
 800985c:	1400f536 	bltu	r2,r16,8009c34 <__udivdi3+0x5d8>
 8009860:	00800404 	movi	r2,16
 8009864:	1007883a 	mov	r3,r2
 8009868:	8084d83a 	srl	r2,r16,r2
 800986c:	01020074 	movhi	r4,2049
 8009870:	213a4b04 	addi	r4,r4,-5844
 8009874:	2085883a 	add	r2,r4,r2
 8009878:	10800003 	ldbu	r2,0(r2)
 800987c:	10c7883a 	add	r3,r2,r3
 8009880:	00800804 	movi	r2,32
 8009884:	10c5c83a 	sub	r2,r2,r3
 8009888:	1000a01e 	bne	r2,zero,8009b0c <__udivdi3+0x4b0>
 800988c:	8028d43a 	srli	r20,r16,16
 8009890:	8c23c83a 	sub	r17,r17,r16
 8009894:	857fffcc 	andi	r21,r16,65535
 8009898:	00c00044 	movi	r3,1
 800989c:	8809883a 	mov	r4,r17
 80098a0:	a00b883a 	mov	r5,r20
 80098a4:	d8c00015 	stw	r3,0(sp)
 80098a8:	800b12c0 	call	800b12c <__umodsi3>
 80098ac:	8809883a 	mov	r4,r17
 80098b0:	a00b883a 	mov	r5,r20
 80098b4:	102d883a 	mov	r22,r2
 80098b8:	800b1240 	call	800b124 <__udivsi3>
 80098bc:	1009883a 	mov	r4,r2
 80098c0:	a80b883a 	mov	r5,r21
 80098c4:	1025883a 	mov	r18,r2
 80098c8:	800b1340 	call	800b134 <__mulsi3>
 80098cc:	1009883a 	mov	r4,r2
 80098d0:	b00c943a 	slli	r6,r22,16
 80098d4:	9804d43a 	srli	r2,r19,16
 80098d8:	d8c00017 	ldw	r3,0(sp)
 80098dc:	308cb03a 	or	r6,r6,r2
 80098e0:	3100052e 	bgeu	r6,r4,80098f8 <__udivdi3+0x29c>
 80098e4:	340d883a 	add	r6,r6,r16
 80098e8:	90bfffc4 	addi	r2,r18,-1
 80098ec:	34000136 	bltu	r6,r16,80098f4 <__udivdi3+0x298>
 80098f0:	3100e836 	bltu	r6,r4,8009c94 <__udivdi3+0x638>
 80098f4:	1025883a 	mov	r18,r2
 80098f8:	3123c83a 	sub	r17,r6,r4
 80098fc:	8809883a 	mov	r4,r17
 8009900:	a00b883a 	mov	r5,r20
 8009904:	d8c00015 	stw	r3,0(sp)
 8009908:	800b12c0 	call	800b12c <__umodsi3>
 800990c:	102d883a 	mov	r22,r2
 8009910:	8809883a 	mov	r4,r17
 8009914:	a00b883a 	mov	r5,r20
 8009918:	b02c943a 	slli	r22,r22,16
 800991c:	800b1240 	call	800b124 <__udivsi3>
 8009920:	1009883a 	mov	r4,r2
 8009924:	a80b883a 	mov	r5,r21
 8009928:	9cffffcc 	andi	r19,r19,65535
 800992c:	1023883a 	mov	r17,r2
 8009930:	b4e6b03a 	or	r19,r22,r19
 8009934:	800b1340 	call	800b134 <__mulsi3>
 8009938:	d8c00017 	ldw	r3,0(sp)
 800993c:	9880052e 	bgeu	r19,r2,8009954 <__udivdi3+0x2f8>
 8009940:	9c27883a 	add	r19,r19,r16
 8009944:	893fffc4 	addi	r4,r17,-1
 8009948:	9c00aa36 	bltu	r19,r16,8009bf4 <__udivdi3+0x598>
 800994c:	9880a92e 	bgeu	r19,r2,8009bf4 <__udivdi3+0x598>
 8009950:	8c7fff84 	addi	r17,r17,-2
 8009954:	9004943a 	slli	r2,r18,16
 8009958:	8884b03a 	or	r2,r17,r2
 800995c:	003faa06 	br	8009808 <__alt_data_end+0xf8009808>
 8009960:	0007883a 	mov	r3,zero
 8009964:	003fa706 	br	8009804 <__alt_data_end+0xf8009804>
 8009968:	00803fc4 	movi	r2,255
 800996c:	11c0ae36 	bltu	r2,r7,8009c28 <__udivdi3+0x5cc>
 8009970:	0007883a 	mov	r3,zero
 8009974:	000b883a 	mov	r5,zero
 8009978:	003f9606 	br	80097d4 <__alt_data_end+0xf80097d4>
 800997c:	00804034 	movhi	r2,256
 8009980:	10bfffc4 	addi	r2,r2,-1
 8009984:	1180ae36 	bltu	r2,r6,8009c40 <__udivdi3+0x5e4>
 8009988:	00800404 	movi	r2,16
 800998c:	1007883a 	mov	r3,r2
 8009990:	003f4a06 	br	80096bc <__alt_data_end+0xf80096bc>
 8009994:	00803fc4 	movi	r2,255
 8009998:	1400af36 	bltu	r2,r16,8009c58 <__udivdi3+0x5fc>
 800999c:	0005883a 	mov	r2,zero
 80099a0:	0007883a 	mov	r3,zero
 80099a4:	003fb006 	br	8009868 <__alt_data_end+0xf8009868>
 80099a8:	00800044 	movi	r2,1
 80099ac:	003f9606 	br	8009808 <__alt_data_end+0xf8009808>
 80099b0:	3c0e983a 	sll	r7,r7,r16
 80099b4:	3086d83a 	srl	r3,r6,r2
 80099b8:	88aed83a 	srl	r23,r17,r2
 80099bc:	9084d83a 	srl	r2,r18,r2
 80099c0:	38e6b03a 	or	r19,r7,r3
 80099c4:	9828d43a 	srli	r20,r19,16
 80099c8:	8c22983a 	sll	r17,r17,r16
 80099cc:	b809883a 	mov	r4,r23
 80099d0:	a00b883a 	mov	r5,r20
 80099d4:	342a983a 	sll	r21,r6,r16
 80099d8:	88a2b03a 	or	r17,r17,r2
 80099dc:	800b12c0 	call	800b12c <__umodsi3>
 80099e0:	b809883a 	mov	r4,r23
 80099e4:	a00b883a 	mov	r5,r20
 80099e8:	1039883a 	mov	fp,r2
 80099ec:	9dbfffcc 	andi	r22,r19,65535
 80099f0:	800b1240 	call	800b124 <__udivsi3>
 80099f4:	1009883a 	mov	r4,r2
 80099f8:	b00b883a 	mov	r5,r22
 80099fc:	102f883a 	mov	r23,r2
 8009a00:	800b1340 	call	800b134 <__mulsi3>
 8009a04:	1009883a 	mov	r4,r2
 8009a08:	e00e943a 	slli	r7,fp,16
 8009a0c:	8804d43a 	srli	r2,r17,16
 8009a10:	388eb03a 	or	r7,r7,r2
 8009a14:	3900042e 	bgeu	r7,r4,8009a28 <__udivdi3+0x3cc>
 8009a18:	3ccf883a 	add	r7,r7,r19
 8009a1c:	b8bfffc4 	addi	r2,r23,-1
 8009a20:	3cc0942e 	bgeu	r7,r19,8009c74 <__udivdi3+0x618>
 8009a24:	102f883a 	mov	r23,r2
 8009a28:	3939c83a 	sub	fp,r7,r4
 8009a2c:	a00b883a 	mov	r5,r20
 8009a30:	e009883a 	mov	r4,fp
 8009a34:	800b12c0 	call	800b12c <__umodsi3>
 8009a38:	a00b883a 	mov	r5,r20
 8009a3c:	e009883a 	mov	r4,fp
 8009a40:	d8800015 	stw	r2,0(sp)
 8009a44:	800b1240 	call	800b124 <__udivsi3>
 8009a48:	1009883a 	mov	r4,r2
 8009a4c:	b00b883a 	mov	r5,r22
 8009a50:	1029883a 	mov	r20,r2
 8009a54:	800b1340 	call	800b134 <__mulsi3>
 8009a58:	d8c00017 	ldw	r3,0(sp)
 8009a5c:	8c7fffcc 	andi	r17,r17,65535
 8009a60:	1806943a 	slli	r3,r3,16
 8009a64:	1c46b03a 	or	r3,r3,r17
 8009a68:	1880042e 	bgeu	r3,r2,8009a7c <__udivdi3+0x420>
 8009a6c:	1cc7883a 	add	r3,r3,r19
 8009a70:	a13fffc4 	addi	r4,r20,-1
 8009a74:	1cc07b2e 	bgeu	r3,r19,8009c64 <__udivdi3+0x608>
 8009a78:	2029883a 	mov	r20,r4
 8009a7c:	b82e943a 	slli	r23,r23,16
 8009a80:	a822d43a 	srli	r17,r21,16
 8009a84:	ad7fffcc 	andi	r21,r21,65535
 8009a88:	a5e8b03a 	or	r20,r20,r23
 8009a8c:	a5bfffcc 	andi	r22,r20,65535
 8009a90:	b009883a 	mov	r4,r22
 8009a94:	a80b883a 	mov	r5,r21
 8009a98:	18afc83a 	sub	r23,r3,r2
 8009a9c:	a026d43a 	srli	r19,r20,16
 8009aa0:	800b1340 	call	800b134 <__mulsi3>
 8009aa4:	b009883a 	mov	r4,r22
 8009aa8:	880b883a 	mov	r5,r17
 8009aac:	1039883a 	mov	fp,r2
 8009ab0:	800b1340 	call	800b134 <__mulsi3>
 8009ab4:	a80b883a 	mov	r5,r21
 8009ab8:	9809883a 	mov	r4,r19
 8009abc:	102d883a 	mov	r22,r2
 8009ac0:	800b1340 	call	800b134 <__mulsi3>
 8009ac4:	9809883a 	mov	r4,r19
 8009ac8:	880b883a 	mov	r5,r17
 8009acc:	102b883a 	mov	r21,r2
 8009ad0:	800b1340 	call	800b134 <__mulsi3>
 8009ad4:	100b883a 	mov	r5,r2
 8009ad8:	e004d43a 	srli	r2,fp,16
 8009adc:	ad89883a 	add	r4,r21,r22
 8009ae0:	2089883a 	add	r4,r4,r2
 8009ae4:	2540022e 	bgeu	r4,r21,8009af0 <__udivdi3+0x494>
 8009ae8:	00800074 	movhi	r2,1
 8009aec:	288b883a 	add	r5,r5,r2
 8009af0:	2004d43a 	srli	r2,r4,16
 8009af4:	288b883a 	add	r5,r5,r2
 8009af8:	b9404536 	bltu	r23,r5,8009c10 <__udivdi3+0x5b4>
 8009afc:	b9403f26 	beq	r23,r5,8009bfc <__udivdi3+0x5a0>
 8009b00:	a005883a 	mov	r2,r20
 8009b04:	0007883a 	mov	r3,zero
 8009b08:	003f3f06 	br	8009808 <__alt_data_end+0xf8009808>
 8009b0c:	80a0983a 	sll	r16,r16,r2
 8009b10:	88eed83a 	srl	r23,r17,r3
 8009b14:	90c6d83a 	srl	r3,r18,r3
 8009b18:	8028d43a 	srli	r20,r16,16
 8009b1c:	88a2983a 	sll	r17,r17,r2
 8009b20:	b809883a 	mov	r4,r23
 8009b24:	a00b883a 	mov	r5,r20
 8009b28:	88ecb03a 	or	r22,r17,r3
 8009b2c:	90a6983a 	sll	r19,r18,r2
 8009b30:	800b12c0 	call	800b12c <__umodsi3>
 8009b34:	b809883a 	mov	r4,r23
 8009b38:	a00b883a 	mov	r5,r20
 8009b3c:	1023883a 	mov	r17,r2
 8009b40:	857fffcc 	andi	r21,r16,65535
 8009b44:	800b1240 	call	800b124 <__udivsi3>
 8009b48:	1009883a 	mov	r4,r2
 8009b4c:	a80b883a 	mov	r5,r21
 8009b50:	102f883a 	mov	r23,r2
 8009b54:	800b1340 	call	800b134 <__mulsi3>
 8009b58:	1009883a 	mov	r4,r2
 8009b5c:	880a943a 	slli	r5,r17,16
 8009b60:	b004d43a 	srli	r2,r22,16
 8009b64:	288ab03a 	or	r5,r5,r2
 8009b68:	2900062e 	bgeu	r5,r4,8009b84 <__udivdi3+0x528>
 8009b6c:	2c0b883a 	add	r5,r5,r16
 8009b70:	b8bfffc4 	addi	r2,r23,-1
 8009b74:	2c004536 	bltu	r5,r16,8009c8c <__udivdi3+0x630>
 8009b78:	2900442e 	bgeu	r5,r4,8009c8c <__udivdi3+0x630>
 8009b7c:	bdffff84 	addi	r23,r23,-2
 8009b80:	2c0b883a 	add	r5,r5,r16
 8009b84:	2925c83a 	sub	r18,r5,r4
 8009b88:	9009883a 	mov	r4,r18
 8009b8c:	a00b883a 	mov	r5,r20
 8009b90:	800b12c0 	call	800b12c <__umodsi3>
 8009b94:	1023883a 	mov	r17,r2
 8009b98:	9009883a 	mov	r4,r18
 8009b9c:	a00b883a 	mov	r5,r20
 8009ba0:	8822943a 	slli	r17,r17,16
 8009ba4:	800b1240 	call	800b124 <__udivsi3>
 8009ba8:	1009883a 	mov	r4,r2
 8009bac:	a80b883a 	mov	r5,r21
 8009bb0:	b5bfffcc 	andi	r22,r22,65535
 8009bb4:	1025883a 	mov	r18,r2
 8009bb8:	8da2b03a 	or	r17,r17,r22
 8009bbc:	800b1340 	call	800b134 <__mulsi3>
 8009bc0:	8880062e 	bgeu	r17,r2,8009bdc <__udivdi3+0x580>
 8009bc4:	8c23883a 	add	r17,r17,r16
 8009bc8:	90ffffc4 	addi	r3,r18,-1
 8009bcc:	8c002d36 	bltu	r17,r16,8009c84 <__udivdi3+0x628>
 8009bd0:	88802c2e 	bgeu	r17,r2,8009c84 <__udivdi3+0x628>
 8009bd4:	94bfff84 	addi	r18,r18,-2
 8009bd8:	8c23883a 	add	r17,r17,r16
 8009bdc:	b806943a 	slli	r3,r23,16
 8009be0:	88a3c83a 	sub	r17,r17,r2
 8009be4:	90c6b03a 	or	r3,r18,r3
 8009be8:	003f2c06 	br	800989c <__alt_data_end+0xf800989c>
 8009bec:	1823883a 	mov	r17,r3
 8009bf0:	003eec06 	br	80097a4 <__alt_data_end+0xf80097a4>
 8009bf4:	2023883a 	mov	r17,r4
 8009bf8:	003f5606 	br	8009954 <__alt_data_end+0xf8009954>
 8009bfc:	2008943a 	slli	r4,r4,16
 8009c00:	9420983a 	sll	r16,r18,r16
 8009c04:	e73fffcc 	andi	fp,fp,65535
 8009c08:	2709883a 	add	r4,r4,fp
 8009c0c:	813fbc2e 	bgeu	r16,r4,8009b00 <__alt_data_end+0xf8009b00>
 8009c10:	a0bfffc4 	addi	r2,r20,-1
 8009c14:	0007883a 	mov	r3,zero
 8009c18:	003efb06 	br	8009808 <__alt_data_end+0xf8009808>
 8009c1c:	00c00604 	movi	r3,24
 8009c20:	180b883a 	mov	r5,r3
 8009c24:	003eeb06 	br	80097d4 <__alt_data_end+0xf80097d4>
 8009c28:	00c00204 	movi	r3,8
 8009c2c:	180b883a 	mov	r5,r3
 8009c30:	003ee806 	br	80097d4 <__alt_data_end+0xf80097d4>
 8009c34:	00800604 	movi	r2,24
 8009c38:	1007883a 	mov	r3,r2
 8009c3c:	003f0a06 	br	8009868 <__alt_data_end+0xf8009868>
 8009c40:	00800604 	movi	r2,24
 8009c44:	1007883a 	mov	r3,r2
 8009c48:	003e9c06 	br	80096bc <__alt_data_end+0xf80096bc>
 8009c4c:	00800204 	movi	r2,8
 8009c50:	1007883a 	mov	r3,r2
 8009c54:	003e9906 	br	80096bc <__alt_data_end+0xf80096bc>
 8009c58:	00800204 	movi	r2,8
 8009c5c:	1007883a 	mov	r3,r2
 8009c60:	003f0106 	br	8009868 <__alt_data_end+0xf8009868>
 8009c64:	18bf842e 	bgeu	r3,r2,8009a78 <__alt_data_end+0xf8009a78>
 8009c68:	a53fff84 	addi	r20,r20,-2
 8009c6c:	1cc7883a 	add	r3,r3,r19
 8009c70:	003f8206 	br	8009a7c <__alt_data_end+0xf8009a7c>
 8009c74:	393f6b2e 	bgeu	r7,r4,8009a24 <__alt_data_end+0xf8009a24>
 8009c78:	bdffff84 	addi	r23,r23,-2
 8009c7c:	3ccf883a 	add	r7,r7,r19
 8009c80:	003f6906 	br	8009a28 <__alt_data_end+0xf8009a28>
 8009c84:	1825883a 	mov	r18,r3
 8009c88:	003fd406 	br	8009bdc <__alt_data_end+0xf8009bdc>
 8009c8c:	102f883a 	mov	r23,r2
 8009c90:	003fbc06 	br	8009b84 <__alt_data_end+0xf8009b84>
 8009c94:	94bfff84 	addi	r18,r18,-2
 8009c98:	340d883a 	add	r6,r6,r16
 8009c9c:	003f1606 	br	80098f8 <__alt_data_end+0xf80098f8>
 8009ca0:	94bfff84 	addi	r18,r18,-2
 8009ca4:	1c07883a 	add	r3,r3,r16
 8009ca8:	003ea906 	br	8009750 <__alt_data_end+0xf8009750>

08009cac <__umoddi3>:
 8009cac:	defff304 	addi	sp,sp,-52
 8009cb0:	dd000715 	stw	r20,28(sp)
 8009cb4:	dcc00615 	stw	r19,24(sp)
 8009cb8:	dc800515 	stw	r18,20(sp)
 8009cbc:	dc400415 	stw	r17,16(sp)
 8009cc0:	dc000315 	stw	r16,12(sp)
 8009cc4:	dfc00c15 	stw	ra,48(sp)
 8009cc8:	df000b15 	stw	fp,44(sp)
 8009ccc:	ddc00a15 	stw	r23,40(sp)
 8009cd0:	dd800915 	stw	r22,36(sp)
 8009cd4:	dd400815 	stw	r21,32(sp)
 8009cd8:	2025883a 	mov	r18,r4
 8009cdc:	2823883a 	mov	r17,r5
 8009ce0:	3021883a 	mov	r16,r6
 8009ce4:	2027883a 	mov	r19,r4
 8009ce8:	2829883a 	mov	r20,r5
 8009cec:	38003a1e 	bne	r7,zero,8009dd8 <__umoddi3+0x12c>
 8009cf0:	2980522e 	bgeu	r5,r6,8009e3c <__umoddi3+0x190>
 8009cf4:	00bfffd4 	movui	r2,65535
 8009cf8:	1180a436 	bltu	r2,r6,8009f8c <__umoddi3+0x2e0>
 8009cfc:	00803fc4 	movi	r2,255
 8009d00:	11816036 	bltu	r2,r6,800a284 <__umoddi3+0x5d8>
 8009d04:	0005883a 	mov	r2,zero
 8009d08:	0009883a 	mov	r4,zero
 8009d0c:	3084d83a 	srl	r2,r6,r2
 8009d10:	00c20074 	movhi	r3,2049
 8009d14:	18fa4b04 	addi	r3,r3,-5844
 8009d18:	05400804 	movi	r21,32
 8009d1c:	1885883a 	add	r2,r3,r2
 8009d20:	10800003 	ldbu	r2,0(r2)
 8009d24:	1109883a 	add	r4,r2,r4
 8009d28:	a92bc83a 	sub	r21,r21,r4
 8009d2c:	a8010e26 	beq	r21,zero,800a168 <__umoddi3+0x4bc>
 8009d30:	8d62983a 	sll	r17,r17,r21
 8009d34:	9108d83a 	srl	r4,r18,r4
 8009d38:	3560983a 	sll	r16,r6,r21
 8009d3c:	9566983a 	sll	r19,r18,r21
 8009d40:	8928b03a 	or	r20,r17,r4
 8009d44:	8022d43a 	srli	r17,r16,16
 8009d48:	a009883a 	mov	r4,r20
 8009d4c:	84bfffcc 	andi	r18,r16,65535
 8009d50:	880b883a 	mov	r5,r17
 8009d54:	800b12c0 	call	800b12c <__umodsi3>
 8009d58:	a009883a 	mov	r4,r20
 8009d5c:	880b883a 	mov	r5,r17
 8009d60:	102d883a 	mov	r22,r2
 8009d64:	800b1240 	call	800b124 <__udivsi3>
 8009d68:	1009883a 	mov	r4,r2
 8009d6c:	900b883a 	mov	r5,r18
 8009d70:	800b1340 	call	800b134 <__mulsi3>
 8009d74:	1009883a 	mov	r4,r2
 8009d78:	b006943a 	slli	r3,r22,16
 8009d7c:	9804d43a 	srli	r2,r19,16
 8009d80:	1886b03a 	or	r3,r3,r2
 8009d84:	1900042e 	bgeu	r3,r4,8009d98 <__umoddi3+0xec>
 8009d88:	1c07883a 	add	r3,r3,r16
 8009d8c:	1c000236 	bltu	r3,r16,8009d98 <__umoddi3+0xec>
 8009d90:	1900012e 	bgeu	r3,r4,8009d98 <__umoddi3+0xec>
 8009d94:	1c07883a 	add	r3,r3,r16
 8009d98:	1929c83a 	sub	r20,r3,r4
 8009d9c:	a009883a 	mov	r4,r20
 8009da0:	880b883a 	mov	r5,r17
 8009da4:	800b12c0 	call	800b12c <__umodsi3>
 8009da8:	102d883a 	mov	r22,r2
 8009dac:	a009883a 	mov	r4,r20
 8009db0:	880b883a 	mov	r5,r17
 8009db4:	b02c943a 	slli	r22,r22,16
 8009db8:	800b1240 	call	800b124 <__udivsi3>
 8009dbc:	1009883a 	mov	r4,r2
 8009dc0:	900b883a 	mov	r5,r18
 8009dc4:	9cffffcc 	andi	r19,r19,65535
 8009dc8:	800b1340 	call	800b134 <__mulsi3>
 8009dcc:	b4e6b03a 	or	r19,r22,r19
 8009dd0:	9880572e 	bgeu	r19,r2,8009f30 <__umoddi3+0x284>
 8009dd4:	00005206 	br	8009f20 <__umoddi3+0x274>
 8009dd8:	29c05936 	bltu	r5,r7,8009f40 <__umoddi3+0x294>
 8009ddc:	00bfffd4 	movui	r2,65535
 8009de0:	11c0652e 	bgeu	r2,r7,8009f78 <__umoddi3+0x2cc>
 8009de4:	00804034 	movhi	r2,256
 8009de8:	10bfffc4 	addi	r2,r2,-1
 8009dec:	11c11936 	bltu	r2,r7,800a254 <__umoddi3+0x5a8>
 8009df0:	00c00404 	movi	r3,16
 8009df4:	1827883a 	mov	r19,r3
 8009df8:	38c6d83a 	srl	r3,r7,r3
 8009dfc:	01020074 	movhi	r4,2049
 8009e00:	213a4b04 	addi	r4,r4,-5844
 8009e04:	04000804 	movi	r16,32
 8009e08:	20c7883a 	add	r3,r4,r3
 8009e0c:	18800003 	ldbu	r2,0(r3)
 8009e10:	14e7883a 	add	r19,r2,r19
 8009e14:	84e1c83a 	sub	r16,r16,r19
 8009e18:	8000671e 	bne	r16,zero,8009fb8 <__umoddi3+0x30c>
 8009e1c:	3c400136 	bltu	r7,r17,8009e24 <__umoddi3+0x178>
 8009e20:	91812536 	bltu	r18,r6,800a2b8 <__umoddi3+0x60c>
 8009e24:	9185c83a 	sub	r2,r18,r6
 8009e28:	89e3c83a 	sub	r17,r17,r7
 8009e2c:	90a5803a 	cmpltu	r18,r18,r2
 8009e30:	8ca9c83a 	sub	r20,r17,r18
 8009e34:	a007883a 	mov	r3,r20
 8009e38:	00004306 	br	8009f48 <__umoddi3+0x29c>
 8009e3c:	3000041e 	bne	r6,zero,8009e50 <__umoddi3+0x1a4>
 8009e40:	01000044 	movi	r4,1
 8009e44:	000b883a 	mov	r5,zero
 8009e48:	800b1240 	call	800b124 <__udivsi3>
 8009e4c:	1021883a 	mov	r16,r2
 8009e50:	00bfffd4 	movui	r2,65535
 8009e54:	1400532e 	bgeu	r2,r16,8009fa4 <__umoddi3+0x2f8>
 8009e58:	00804034 	movhi	r2,256
 8009e5c:	10bfffc4 	addi	r2,r2,-1
 8009e60:	14010536 	bltu	r2,r16,800a278 <__umoddi3+0x5cc>
 8009e64:	00800404 	movi	r2,16
 8009e68:	1007883a 	mov	r3,r2
 8009e6c:	8084d83a 	srl	r2,r16,r2
 8009e70:	01020074 	movhi	r4,2049
 8009e74:	213a4b04 	addi	r4,r4,-5844
 8009e78:	05400804 	movi	r21,32
 8009e7c:	2085883a 	add	r2,r4,r2
 8009e80:	10800003 	ldbu	r2,0(r2)
 8009e84:	10c7883a 	add	r3,r2,r3
 8009e88:	a8ebc83a 	sub	r21,r21,r3
 8009e8c:	a800b81e 	bne	r21,zero,800a170 <__umoddi3+0x4c4>
 8009e90:	8028d43a 	srli	r20,r16,16
 8009e94:	8c23c83a 	sub	r17,r17,r16
 8009e98:	85bfffcc 	andi	r22,r16,65535
 8009e9c:	8809883a 	mov	r4,r17
 8009ea0:	a00b883a 	mov	r5,r20
 8009ea4:	800b12c0 	call	800b12c <__umodsi3>
 8009ea8:	8809883a 	mov	r4,r17
 8009eac:	a00b883a 	mov	r5,r20
 8009eb0:	1025883a 	mov	r18,r2
 8009eb4:	800b1240 	call	800b124 <__udivsi3>
 8009eb8:	1009883a 	mov	r4,r2
 8009ebc:	b00b883a 	mov	r5,r22
 8009ec0:	800b1340 	call	800b134 <__mulsi3>
 8009ec4:	1009883a 	mov	r4,r2
 8009ec8:	9006943a 	slli	r3,r18,16
 8009ecc:	9804d43a 	srli	r2,r19,16
 8009ed0:	1886b03a 	or	r3,r3,r2
 8009ed4:	1900032e 	bgeu	r3,r4,8009ee4 <__umoddi3+0x238>
 8009ed8:	1c07883a 	add	r3,r3,r16
 8009edc:	1c000136 	bltu	r3,r16,8009ee4 <__umoddi3+0x238>
 8009ee0:	1900f336 	bltu	r3,r4,800a2b0 <__umoddi3+0x604>
 8009ee4:	1923c83a 	sub	r17,r3,r4
 8009ee8:	8809883a 	mov	r4,r17
 8009eec:	a00b883a 	mov	r5,r20
 8009ef0:	800b12c0 	call	800b12c <__umodsi3>
 8009ef4:	102f883a 	mov	r23,r2
 8009ef8:	8809883a 	mov	r4,r17
 8009efc:	a00b883a 	mov	r5,r20
 8009f00:	b82e943a 	slli	r23,r23,16
 8009f04:	800b1240 	call	800b124 <__udivsi3>
 8009f08:	1009883a 	mov	r4,r2
 8009f0c:	b00b883a 	mov	r5,r22
 8009f10:	9cffffcc 	andi	r19,r19,65535
 8009f14:	800b1340 	call	800b134 <__mulsi3>
 8009f18:	bce6b03a 	or	r19,r23,r19
 8009f1c:	9880042e 	bgeu	r19,r2,8009f30 <__umoddi3+0x284>
 8009f20:	9c27883a 	add	r19,r19,r16
 8009f24:	9c000236 	bltu	r19,r16,8009f30 <__umoddi3+0x284>
 8009f28:	9880012e 	bgeu	r19,r2,8009f30 <__umoddi3+0x284>
 8009f2c:	9c27883a 	add	r19,r19,r16
 8009f30:	9885c83a 	sub	r2,r19,r2
 8009f34:	1544d83a 	srl	r2,r2,r21
 8009f38:	0007883a 	mov	r3,zero
 8009f3c:	00000206 	br	8009f48 <__umoddi3+0x29c>
 8009f40:	2005883a 	mov	r2,r4
 8009f44:	2807883a 	mov	r3,r5
 8009f48:	dfc00c17 	ldw	ra,48(sp)
 8009f4c:	df000b17 	ldw	fp,44(sp)
 8009f50:	ddc00a17 	ldw	r23,40(sp)
 8009f54:	dd800917 	ldw	r22,36(sp)
 8009f58:	dd400817 	ldw	r21,32(sp)
 8009f5c:	dd000717 	ldw	r20,28(sp)
 8009f60:	dcc00617 	ldw	r19,24(sp)
 8009f64:	dc800517 	ldw	r18,20(sp)
 8009f68:	dc400417 	ldw	r17,16(sp)
 8009f6c:	dc000317 	ldw	r16,12(sp)
 8009f70:	dec00d04 	addi	sp,sp,52
 8009f74:	f800283a 	ret
 8009f78:	00803fc4 	movi	r2,255
 8009f7c:	11c0b236 	bltu	r2,r7,800a248 <__umoddi3+0x59c>
 8009f80:	0007883a 	mov	r3,zero
 8009f84:	0027883a 	mov	r19,zero
 8009f88:	003f9b06 	br	8009df8 <__alt_data_end+0xf8009df8>
 8009f8c:	00804034 	movhi	r2,256
 8009f90:	10bfffc4 	addi	r2,r2,-1
 8009f94:	1180b236 	bltu	r2,r6,800a260 <__umoddi3+0x5b4>
 8009f98:	00800404 	movi	r2,16
 8009f9c:	1009883a 	mov	r4,r2
 8009fa0:	003f5a06 	br	8009d0c <__alt_data_end+0xf8009d0c>
 8009fa4:	00803fc4 	movi	r2,255
 8009fa8:	1400b036 	bltu	r2,r16,800a26c <__umoddi3+0x5c0>
 8009fac:	0005883a 	mov	r2,zero
 8009fb0:	0007883a 	mov	r3,zero
 8009fb4:	003fad06 	br	8009e6c <__alt_data_end+0xf8009e6c>
 8009fb8:	34c4d83a 	srl	r2,r6,r19
 8009fbc:	3c0e983a 	sll	r7,r7,r16
 8009fc0:	8cf8d83a 	srl	fp,r17,r19
 8009fc4:	8c22983a 	sll	r17,r17,r16
 8009fc8:	38a8b03a 	or	r20,r7,r2
 8009fcc:	a02ad43a 	srli	r21,r20,16
 8009fd0:	94c4d83a 	srl	r2,r18,r19
 8009fd4:	e009883a 	mov	r4,fp
 8009fd8:	a80b883a 	mov	r5,r21
 8009fdc:	342c983a 	sll	r22,r6,r16
 8009fe0:	88a2b03a 	or	r17,r17,r2
 8009fe4:	800b12c0 	call	800b12c <__umodsi3>
 8009fe8:	e009883a 	mov	r4,fp
 8009fec:	a80b883a 	mov	r5,r21
 8009ff0:	a5ffffcc 	andi	r23,r20,65535
 8009ff4:	d8800215 	stw	r2,8(sp)
 8009ff8:	800b1240 	call	800b124 <__udivsi3>
 8009ffc:	1009883a 	mov	r4,r2
 800a000:	b80b883a 	mov	r5,r23
 800a004:	1039883a 	mov	fp,r2
 800a008:	800b1340 	call	800b134 <__mulsi3>
 800a00c:	d8c00217 	ldw	r3,8(sp)
 800a010:	1009883a 	mov	r4,r2
 800a014:	8804d43a 	srli	r2,r17,16
 800a018:	1806943a 	slli	r3,r3,16
 800a01c:	9424983a 	sll	r18,r18,r16
 800a020:	1886b03a 	or	r3,r3,r2
 800a024:	1900042e 	bgeu	r3,r4,800a038 <__umoddi3+0x38c>
 800a028:	1d07883a 	add	r3,r3,r20
 800a02c:	e0bfffc4 	addi	r2,fp,-1
 800a030:	1d009b2e 	bgeu	r3,r20,800a2a0 <__umoddi3+0x5f4>
 800a034:	1039883a 	mov	fp,r2
 800a038:	1907c83a 	sub	r3,r3,r4
 800a03c:	1809883a 	mov	r4,r3
 800a040:	a80b883a 	mov	r5,r21
 800a044:	d8c00215 	stw	r3,8(sp)
 800a048:	800b12c0 	call	800b12c <__umodsi3>
 800a04c:	d8c00217 	ldw	r3,8(sp)
 800a050:	a80b883a 	mov	r5,r21
 800a054:	d8800015 	stw	r2,0(sp)
 800a058:	1809883a 	mov	r4,r3
 800a05c:	800b1240 	call	800b124 <__udivsi3>
 800a060:	1009883a 	mov	r4,r2
 800a064:	b80b883a 	mov	r5,r23
 800a068:	102b883a 	mov	r21,r2
 800a06c:	800b1340 	call	800b134 <__mulsi3>
 800a070:	d9c00017 	ldw	r7,0(sp)
 800a074:	8c7fffcc 	andi	r17,r17,65535
 800a078:	380e943a 	slli	r7,r7,16
 800a07c:	3c4eb03a 	or	r7,r7,r17
 800a080:	3880042e 	bgeu	r7,r2,800a094 <__umoddi3+0x3e8>
 800a084:	3d0f883a 	add	r7,r7,r20
 800a088:	a8ffffc4 	addi	r3,r21,-1
 800a08c:	3d00802e 	bgeu	r7,r20,800a290 <__umoddi3+0x5e4>
 800a090:	182b883a 	mov	r21,r3
 800a094:	e038943a 	slli	fp,fp,16
 800a098:	b010d43a 	srli	r8,r22,16
 800a09c:	b1bfffcc 	andi	r6,r22,65535
 800a0a0:	af2ab03a 	or	r21,r21,fp
 800a0a4:	a82ed43a 	srli	r23,r21,16
 800a0a8:	ad7fffcc 	andi	r21,r21,65535
 800a0ac:	300b883a 	mov	r5,r6
 800a0b0:	a809883a 	mov	r4,r21
 800a0b4:	38a3c83a 	sub	r17,r7,r2
 800a0b8:	d9800115 	stw	r6,4(sp)
 800a0bc:	da000015 	stw	r8,0(sp)
 800a0c0:	800b1340 	call	800b134 <__mulsi3>
 800a0c4:	da000017 	ldw	r8,0(sp)
 800a0c8:	a809883a 	mov	r4,r21
 800a0cc:	1039883a 	mov	fp,r2
 800a0d0:	400b883a 	mov	r5,r8
 800a0d4:	da000215 	stw	r8,8(sp)
 800a0d8:	800b1340 	call	800b134 <__mulsi3>
 800a0dc:	d9800117 	ldw	r6,4(sp)
 800a0e0:	b809883a 	mov	r4,r23
 800a0e4:	d8800015 	stw	r2,0(sp)
 800a0e8:	300b883a 	mov	r5,r6
 800a0ec:	800b1340 	call	800b134 <__mulsi3>
 800a0f0:	d8c00217 	ldw	r3,8(sp)
 800a0f4:	b809883a 	mov	r4,r23
 800a0f8:	102b883a 	mov	r21,r2
 800a0fc:	180b883a 	mov	r5,r3
 800a100:	800b1340 	call	800b134 <__mulsi3>
 800a104:	d9c00017 	ldw	r7,0(sp)
 800a108:	1007883a 	mov	r3,r2
 800a10c:	e004d43a 	srli	r2,fp,16
 800a110:	a9c9883a 	add	r4,r21,r7
 800a114:	2089883a 	add	r4,r4,r2
 800a118:	2540022e 	bgeu	r4,r21,800a124 <__umoddi3+0x478>
 800a11c:	00800074 	movhi	r2,1
 800a120:	1887883a 	add	r3,r3,r2
 800a124:	2004d43a 	srli	r2,r4,16
 800a128:	2008943a 	slli	r4,r4,16
 800a12c:	e73fffcc 	andi	fp,fp,65535
 800a130:	1887883a 	add	r3,r3,r2
 800a134:	2709883a 	add	r4,r4,fp
 800a138:	88c03d36 	bltu	r17,r3,800a230 <__umoddi3+0x584>
 800a13c:	88c06126 	beq	r17,r3,800a2c4 <__umoddi3+0x618>
 800a140:	88c7c83a 	sub	r3,r17,r3
 800a144:	202d883a 	mov	r22,r4
 800a148:	95adc83a 	sub	r22,r18,r22
 800a14c:	95a5803a 	cmpltu	r18,r18,r22
 800a150:	1c87c83a 	sub	r3,r3,r18
 800a154:	1cc4983a 	sll	r2,r3,r19
 800a158:	b42cd83a 	srl	r22,r22,r16
 800a15c:	1c06d83a 	srl	r3,r3,r16
 800a160:	1584b03a 	or	r2,r2,r22
 800a164:	003f7806 	br	8009f48 <__alt_data_end+0xf8009f48>
 800a168:	002b883a 	mov	r21,zero
 800a16c:	003ef506 	br	8009d44 <__alt_data_end+0xf8009d44>
 800a170:	8560983a 	sll	r16,r16,r21
 800a174:	88e6d83a 	srl	r19,r17,r3
 800a178:	90c6d83a 	srl	r3,r18,r3
 800a17c:	8028d43a 	srli	r20,r16,16
 800a180:	8d62983a 	sll	r17,r17,r21
 800a184:	9809883a 	mov	r4,r19
 800a188:	a00b883a 	mov	r5,r20
 800a18c:	88eeb03a 	or	r23,r17,r3
 800a190:	800b12c0 	call	800b12c <__umodsi3>
 800a194:	9809883a 	mov	r4,r19
 800a198:	a00b883a 	mov	r5,r20
 800a19c:	1023883a 	mov	r17,r2
 800a1a0:	85bfffcc 	andi	r22,r16,65535
 800a1a4:	800b1240 	call	800b124 <__udivsi3>
 800a1a8:	1009883a 	mov	r4,r2
 800a1ac:	b00b883a 	mov	r5,r22
 800a1b0:	800b1340 	call	800b134 <__mulsi3>
 800a1b4:	1007883a 	mov	r3,r2
 800a1b8:	8808943a 	slli	r4,r17,16
 800a1bc:	b804d43a 	srli	r2,r23,16
 800a1c0:	9566983a 	sll	r19,r18,r21
 800a1c4:	2088b03a 	or	r4,r4,r2
 800a1c8:	20c0042e 	bgeu	r4,r3,800a1dc <__umoddi3+0x530>
 800a1cc:	2409883a 	add	r4,r4,r16
 800a1d0:	24000236 	bltu	r4,r16,800a1dc <__umoddi3+0x530>
 800a1d4:	20c0012e 	bgeu	r4,r3,800a1dc <__umoddi3+0x530>
 800a1d8:	2409883a 	add	r4,r4,r16
 800a1dc:	20e5c83a 	sub	r18,r4,r3
 800a1e0:	9009883a 	mov	r4,r18
 800a1e4:	a00b883a 	mov	r5,r20
 800a1e8:	800b12c0 	call	800b12c <__umodsi3>
 800a1ec:	1023883a 	mov	r17,r2
 800a1f0:	9009883a 	mov	r4,r18
 800a1f4:	a00b883a 	mov	r5,r20
 800a1f8:	8822943a 	slli	r17,r17,16
 800a1fc:	800b1240 	call	800b124 <__udivsi3>
 800a200:	1009883a 	mov	r4,r2
 800a204:	b00b883a 	mov	r5,r22
 800a208:	bdffffcc 	andi	r23,r23,65535
 800a20c:	800b1340 	call	800b134 <__mulsi3>
 800a210:	8de2b03a 	or	r17,r17,r23
 800a214:	8880042e 	bgeu	r17,r2,800a228 <__umoddi3+0x57c>
 800a218:	8c23883a 	add	r17,r17,r16
 800a21c:	8c000236 	bltu	r17,r16,800a228 <__umoddi3+0x57c>
 800a220:	8880012e 	bgeu	r17,r2,800a228 <__umoddi3+0x57c>
 800a224:	8c23883a 	add	r17,r17,r16
 800a228:	88a3c83a 	sub	r17,r17,r2
 800a22c:	003f1b06 	br	8009e9c <__alt_data_end+0xf8009e9c>
 800a230:	25adc83a 	sub	r22,r4,r22
 800a234:	1d07c83a 	sub	r3,r3,r20
 800a238:	2589803a 	cmpltu	r4,r4,r22
 800a23c:	1907c83a 	sub	r3,r3,r4
 800a240:	88c7c83a 	sub	r3,r17,r3
 800a244:	003fc006 	br	800a148 <__alt_data_end+0xf800a148>
 800a248:	00c00204 	movi	r3,8
 800a24c:	1827883a 	mov	r19,r3
 800a250:	003ee906 	br	8009df8 <__alt_data_end+0xf8009df8>
 800a254:	00c00604 	movi	r3,24
 800a258:	1827883a 	mov	r19,r3
 800a25c:	003ee606 	br	8009df8 <__alt_data_end+0xf8009df8>
 800a260:	00800604 	movi	r2,24
 800a264:	1009883a 	mov	r4,r2
 800a268:	003ea806 	br	8009d0c <__alt_data_end+0xf8009d0c>
 800a26c:	00800204 	movi	r2,8
 800a270:	1007883a 	mov	r3,r2
 800a274:	003efd06 	br	8009e6c <__alt_data_end+0xf8009e6c>
 800a278:	00800604 	movi	r2,24
 800a27c:	1007883a 	mov	r3,r2
 800a280:	003efa06 	br	8009e6c <__alt_data_end+0xf8009e6c>
 800a284:	00800204 	movi	r2,8
 800a288:	1009883a 	mov	r4,r2
 800a28c:	003e9f06 	br	8009d0c <__alt_data_end+0xf8009d0c>
 800a290:	38bf7f2e 	bgeu	r7,r2,800a090 <__alt_data_end+0xf800a090>
 800a294:	ad7fff84 	addi	r21,r21,-2
 800a298:	3d0f883a 	add	r7,r7,r20
 800a29c:	003f7d06 	br	800a094 <__alt_data_end+0xf800a094>
 800a2a0:	193f642e 	bgeu	r3,r4,800a034 <__alt_data_end+0xf800a034>
 800a2a4:	e73fff84 	addi	fp,fp,-2
 800a2a8:	1d07883a 	add	r3,r3,r20
 800a2ac:	003f6206 	br	800a038 <__alt_data_end+0xf800a038>
 800a2b0:	1c07883a 	add	r3,r3,r16
 800a2b4:	003f0b06 	br	8009ee4 <__alt_data_end+0xf8009ee4>
 800a2b8:	9005883a 	mov	r2,r18
 800a2bc:	a007883a 	mov	r3,r20
 800a2c0:	003f2106 	br	8009f48 <__alt_data_end+0xf8009f48>
 800a2c4:	913fda36 	bltu	r18,r4,800a230 <__alt_data_end+0xf800a230>
 800a2c8:	202d883a 	mov	r22,r4
 800a2cc:	0007883a 	mov	r3,zero
 800a2d0:	003f9d06 	br	800a148 <__alt_data_end+0xf800a148>

0800a2d4 <_fpadd_parts>:
 800a2d4:	2005883a 	mov	r2,r4
 800a2d8:	21000017 	ldw	r4,0(r4)
 800a2dc:	01c00044 	movi	r7,1
 800a2e0:	3900622e 	bgeu	r7,r4,800a46c <_fpadd_parts+0x198>
 800a2e4:	28c00017 	ldw	r3,0(r5)
 800a2e8:	38c05f2e 	bgeu	r7,r3,800a468 <_fpadd_parts+0x194>
 800a2ec:	01c00104 	movi	r7,4
 800a2f0:	21c0c626 	beq	r4,r7,800a60c <_fpadd_parts+0x338>
 800a2f4:	19c05c26 	beq	r3,r7,800a468 <_fpadd_parts+0x194>
 800a2f8:	01c00084 	movi	r7,2
 800a2fc:	19c06b26 	beq	r3,r7,800a4ac <_fpadd_parts+0x1d8>
 800a300:	21c05926 	beq	r4,r7,800a468 <_fpadd_parts+0x194>
 800a304:	11c00217 	ldw	r7,8(r2)
 800a308:	2ac00217 	ldw	r11,8(r5)
 800a30c:	13000317 	ldw	r12,12(r2)
 800a310:	13400417 	ldw	r13,16(r2)
 800a314:	3ac9c83a 	sub	r4,r7,r11
 800a318:	2a000317 	ldw	r8,12(r5)
 800a31c:	2a400417 	ldw	r9,16(r5)
 800a320:	2015883a 	mov	r10,r4
 800a324:	20007516 	blt	r4,zero,800a4fc <_fpadd_parts+0x228>
 800a328:	00c00fc4 	movi	r3,63
 800a32c:	1a805016 	blt	r3,r10,800a470 <_fpadd_parts+0x19c>
 800a330:	0100870e 	bge	zero,r4,800a550 <_fpadd_parts+0x27c>
 800a334:	50fff804 	addi	r3,r10,-32
 800a338:	18009916 	blt	r3,zero,800a5a0 <_fpadd_parts+0x2cc>
 800a33c:	48d6d83a 	srl	r11,r9,r3
 800a340:	001d883a 	mov	r14,zero
 800a344:	18009e16 	blt	r3,zero,800a5c0 <_fpadd_parts+0x2ec>
 800a348:	01000044 	movi	r4,1
 800a34c:	20c6983a 	sll	r3,r4,r3
 800a350:	0015883a 	mov	r10,zero
 800a354:	513fffc4 	addi	r4,r10,-1
 800a358:	2295403a 	cmpgeu	r10,r4,r10
 800a35c:	1a87c83a 	sub	r3,r3,r10
 800a360:	1a52703a 	and	r9,r3,r9
 800a364:	2210703a 	and	r8,r4,r8
 800a368:	4250b03a 	or	r8,r8,r9
 800a36c:	4010c03a 	cmpne	r8,r8,zero
 800a370:	42d0b03a 	or	r8,r8,r11
 800a374:	7013883a 	mov	r9,r14
 800a378:	11000117 	ldw	r4,4(r2)
 800a37c:	28800117 	ldw	r2,4(r5)
 800a380:	20804126 	beq	r4,r2,800a488 <_fpadd_parts+0x1b4>
 800a384:	20006326 	beq	r4,zero,800a514 <_fpadd_parts+0x240>
 800a388:	4305c83a 	sub	r2,r8,r12
 800a38c:	4091803a 	cmpltu	r8,r8,r2
 800a390:	4b47c83a 	sub	r3,r9,r13
 800a394:	1a07c83a 	sub	r3,r3,r8
 800a398:	18006316 	blt	r3,zero,800a528 <_fpadd_parts+0x254>
 800a39c:	30000115 	stw	zero,4(r6)
 800a3a0:	31c00215 	stw	r7,8(r6)
 800a3a4:	30800315 	stw	r2,12(r6)
 800a3a8:	30c00415 	stw	r3,16(r6)
 800a3ac:	11ffffc4 	addi	r7,r2,-1
 800a3b0:	388b403a 	cmpgeu	r5,r7,r2
 800a3b4:	194bc83a 	sub	r5,r3,r5
 800a3b8:	01040034 	movhi	r4,4096
 800a3bc:	213fffc4 	addi	r4,r4,-1
 800a3c0:	21401736 	bltu	r4,r5,800a420 <_fpadd_parts+0x14c>
 800a3c4:	29008226 	beq	r5,r4,800a5d0 <_fpadd_parts+0x2fc>
 800a3c8:	31400217 	ldw	r5,8(r6)
 800a3cc:	02840034 	movhi	r10,4096
 800a3d0:	52bfffc4 	addi	r10,r10,-1
 800a3d4:	033fff84 	movi	r12,-2
 800a3d8:	297fffc4 	addi	r5,r5,-1
 800a3dc:	00000106 	br	800a3e4 <_fpadd_parts+0x110>
 800a3e0:	3a804a26 	beq	r7,r10,800a50c <_fpadd_parts+0x238>
 800a3e4:	1089883a 	add	r4,r2,r2
 800a3e8:	2091803a 	cmpltu	r8,r4,r2
 800a3ec:	18c7883a 	add	r3,r3,r3
 800a3f0:	227fffc4 	addi	r9,r4,-1
 800a3f4:	40d1883a 	add	r8,r8,r3
 800a3f8:	490f403a 	cmpgeu	r7,r9,r4
 800a3fc:	41cfc83a 	sub	r7,r8,r7
 800a400:	2817883a 	mov	r11,r5
 800a404:	2005883a 	mov	r2,r4
 800a408:	4007883a 	mov	r3,r8
 800a40c:	297fffc4 	addi	r5,r5,-1
 800a410:	51fff32e 	bgeu	r10,r7,800a3e0 <__alt_data_end+0xf800a3e0>
 800a414:	31000315 	stw	r4,12(r6)
 800a418:	32000415 	stw	r8,16(r6)
 800a41c:	32c00215 	stw	r11,8(r6)
 800a420:	010000c4 	movi	r4,3
 800a424:	31000015 	stw	r4,0(r6)
 800a428:	01080034 	movhi	r4,8192
 800a42c:	213fffc4 	addi	r4,r4,-1
 800a430:	20c00b2e 	bgeu	r4,r3,800a460 <_fpadd_parts+0x18c>
 800a434:	180e97fa 	slli	r7,r3,31
 800a438:	1008d07a 	srli	r4,r2,1
 800a43c:	31400217 	ldw	r5,8(r6)
 800a440:	1806d07a 	srli	r3,r3,1
 800a444:	1080004c 	andi	r2,r2,1
 800a448:	3908b03a 	or	r4,r7,r4
 800a44c:	1108b03a 	or	r4,r2,r4
 800a450:	29400044 	addi	r5,r5,1
 800a454:	31000315 	stw	r4,12(r6)
 800a458:	30c00415 	stw	r3,16(r6)
 800a45c:	31400215 	stw	r5,8(r6)
 800a460:	3005883a 	mov	r2,r6
 800a464:	f800283a 	ret
 800a468:	2805883a 	mov	r2,r5
 800a46c:	f800283a 	ret
 800a470:	59c01e0e 	bge	r11,r7,800a4ec <_fpadd_parts+0x218>
 800a474:	11000117 	ldw	r4,4(r2)
 800a478:	28800117 	ldw	r2,4(r5)
 800a47c:	0011883a 	mov	r8,zero
 800a480:	0013883a 	mov	r9,zero
 800a484:	20bfbf1e 	bne	r4,r2,800a384 <__alt_data_end+0xf800a384>
 800a488:	4305883a 	add	r2,r8,r12
 800a48c:	1207803a 	cmpltu	r3,r2,r8
 800a490:	4b53883a 	add	r9,r9,r13
 800a494:	1a47883a 	add	r3,r3,r9
 800a498:	31000115 	stw	r4,4(r6)
 800a49c:	31c00215 	stw	r7,8(r6)
 800a4a0:	30800315 	stw	r2,12(r6)
 800a4a4:	30c00415 	stw	r3,16(r6)
 800a4a8:	003fdd06 	br	800a420 <__alt_data_end+0xf800a420>
 800a4ac:	20ffef1e 	bne	r4,r3,800a46c <__alt_data_end+0xf800a46c>
 800a4b0:	31000015 	stw	r4,0(r6)
 800a4b4:	10c00117 	ldw	r3,4(r2)
 800a4b8:	30c00115 	stw	r3,4(r6)
 800a4bc:	10c00217 	ldw	r3,8(r2)
 800a4c0:	11000117 	ldw	r4,4(r2)
 800a4c4:	29400117 	ldw	r5,4(r5)
 800a4c8:	30c00215 	stw	r3,8(r6)
 800a4cc:	10c00317 	ldw	r3,12(r2)
 800a4d0:	2908703a 	and	r4,r5,r4
 800a4d4:	30c00315 	stw	r3,12(r6)
 800a4d8:	10c00417 	ldw	r3,16(r2)
 800a4dc:	31000115 	stw	r4,4(r6)
 800a4e0:	3005883a 	mov	r2,r6
 800a4e4:	30c00415 	stw	r3,16(r6)
 800a4e8:	f800283a 	ret
 800a4ec:	580f883a 	mov	r7,r11
 800a4f0:	0019883a 	mov	r12,zero
 800a4f4:	001b883a 	mov	r13,zero
 800a4f8:	003f9f06 	br	800a378 <__alt_data_end+0xf800a378>
 800a4fc:	0115c83a 	sub	r10,zero,r4
 800a500:	00c00fc4 	movi	r3,63
 800a504:	1abfda16 	blt	r3,r10,800a470 <__alt_data_end+0xf800a470>
 800a508:	003f8906 	br	800a330 <__alt_data_end+0xf800a330>
 800a50c:	627fb52e 	bgeu	r12,r9,800a3e4 <__alt_data_end+0xf800a3e4>
 800a510:	003fc006 	br	800a414 <__alt_data_end+0xf800a414>
 800a514:	6205c83a 	sub	r2,r12,r8
 800a518:	6099803a 	cmpltu	r12,r12,r2
 800a51c:	6a47c83a 	sub	r3,r13,r9
 800a520:	1b07c83a 	sub	r3,r3,r12
 800a524:	183f9d0e 	bge	r3,zero,800a39c <__alt_data_end+0xf800a39c>
 800a528:	0085c83a 	sub	r2,zero,r2
 800a52c:	1008c03a 	cmpne	r4,r2,zero
 800a530:	00c7c83a 	sub	r3,zero,r3
 800a534:	1907c83a 	sub	r3,r3,r4
 800a538:	01000044 	movi	r4,1
 800a53c:	31000115 	stw	r4,4(r6)
 800a540:	31c00215 	stw	r7,8(r6)
 800a544:	30800315 	stw	r2,12(r6)
 800a548:	30c00415 	stw	r3,16(r6)
 800a54c:	003f9706 	br	800a3ac <__alt_data_end+0xf800a3ac>
 800a550:	203f8926 	beq	r4,zero,800a378 <__alt_data_end+0xf800a378>
 800a554:	50fff804 	addi	r3,r10,-32
 800a558:	3a8f883a 	add	r7,r7,r10
 800a55c:	18002316 	blt	r3,zero,800a5ec <_fpadd_parts+0x318>
 800a560:	68d6d83a 	srl	r11,r13,r3
 800a564:	001d883a 	mov	r14,zero
 800a568:	18001c16 	blt	r3,zero,800a5dc <_fpadd_parts+0x308>
 800a56c:	01000044 	movi	r4,1
 800a570:	20c6983a 	sll	r3,r4,r3
 800a574:	0015883a 	mov	r10,zero
 800a578:	513fffc4 	addi	r4,r10,-1
 800a57c:	2295403a 	cmpgeu	r10,r4,r10
 800a580:	1a87c83a 	sub	r3,r3,r10
 800a584:	1b5a703a 	and	r13,r3,r13
 800a588:	2318703a 	and	r12,r4,r12
 800a58c:	6358b03a 	or	r12,r12,r13
 800a590:	6018c03a 	cmpne	r12,r12,zero
 800a594:	62d8b03a 	or	r12,r12,r11
 800a598:	701b883a 	mov	r13,r14
 800a59c:	003f7606 	br	800a378 <__alt_data_end+0xf800a378>
 800a5a0:	4808907a 	slli	r4,r9,1
 800a5a4:	02c007c4 	movi	r11,31
 800a5a8:	5a97c83a 	sub	r11,r11,r10
 800a5ac:	22c8983a 	sll	r4,r4,r11
 800a5b0:	4296d83a 	srl	r11,r8,r10
 800a5b4:	4a9cd83a 	srl	r14,r9,r10
 800a5b8:	22d6b03a 	or	r11,r4,r11
 800a5bc:	003f6106 	br	800a344 <__alt_data_end+0xf800a344>
 800a5c0:	00c00044 	movi	r3,1
 800a5c4:	1a94983a 	sll	r10,r3,r10
 800a5c8:	0007883a 	mov	r3,zero
 800a5cc:	003f6106 	br	800a354 <__alt_data_end+0xf800a354>
 800a5d0:	013fff84 	movi	r4,-2
 800a5d4:	21ff7c2e 	bgeu	r4,r7,800a3c8 <__alt_data_end+0xf800a3c8>
 800a5d8:	003f9106 	br	800a420 <__alt_data_end+0xf800a420>
 800a5dc:	00c00044 	movi	r3,1
 800a5e0:	1a94983a 	sll	r10,r3,r10
 800a5e4:	0007883a 	mov	r3,zero
 800a5e8:	003fe306 	br	800a578 <__alt_data_end+0xf800a578>
 800a5ec:	6816907a 	slli	r11,r13,1
 800a5f0:	010007c4 	movi	r4,31
 800a5f4:	2289c83a 	sub	r4,r4,r10
 800a5f8:	5908983a 	sll	r4,r11,r4
 800a5fc:	6296d83a 	srl	r11,r12,r10
 800a600:	6a9cd83a 	srl	r14,r13,r10
 800a604:	22d6b03a 	or	r11,r4,r11
 800a608:	003fd706 	br	800a568 <__alt_data_end+0xf800a568>
 800a60c:	193f971e 	bne	r3,r4,800a46c <__alt_data_end+0xf800a46c>
 800a610:	11000117 	ldw	r4,4(r2)
 800a614:	28c00117 	ldw	r3,4(r5)
 800a618:	20ff9426 	beq	r4,r3,800a46c <__alt_data_end+0xf800a46c>
 800a61c:	00820074 	movhi	r2,2049
 800a620:	10ba4604 	addi	r2,r2,-5864
 800a624:	f800283a 	ret

0800a628 <__adddf3>:
 800a628:	deffec04 	addi	sp,sp,-80
 800a62c:	d9001115 	stw	r4,68(sp)
 800a630:	d9401215 	stw	r5,72(sp)
 800a634:	d9001104 	addi	r4,sp,68
 800a638:	d9400a04 	addi	r5,sp,40
 800a63c:	dfc01315 	stw	ra,76(sp)
 800a640:	d9c01015 	stw	r7,64(sp)
 800a644:	d9800f15 	stw	r6,60(sp)
 800a648:	800b53c0 	call	800b53c <__unpack_d>
 800a64c:	d9000f04 	addi	r4,sp,60
 800a650:	d9400504 	addi	r5,sp,20
 800a654:	800b53c0 	call	800b53c <__unpack_d>
 800a658:	d9000a04 	addi	r4,sp,40
 800a65c:	d9400504 	addi	r5,sp,20
 800a660:	d80d883a 	mov	r6,sp
 800a664:	800a2d40 	call	800a2d4 <_fpadd_parts>
 800a668:	1009883a 	mov	r4,r2
 800a66c:	800b3180 	call	800b318 <__pack_d>
 800a670:	dfc01317 	ldw	ra,76(sp)
 800a674:	dec01404 	addi	sp,sp,80
 800a678:	f800283a 	ret

0800a67c <__subdf3>:
 800a67c:	deffec04 	addi	sp,sp,-80
 800a680:	d9001115 	stw	r4,68(sp)
 800a684:	d9401215 	stw	r5,72(sp)
 800a688:	d9001104 	addi	r4,sp,68
 800a68c:	d9400a04 	addi	r5,sp,40
 800a690:	dfc01315 	stw	ra,76(sp)
 800a694:	d9c01015 	stw	r7,64(sp)
 800a698:	d9800f15 	stw	r6,60(sp)
 800a69c:	800b53c0 	call	800b53c <__unpack_d>
 800a6a0:	d9000f04 	addi	r4,sp,60
 800a6a4:	d9400504 	addi	r5,sp,20
 800a6a8:	800b53c0 	call	800b53c <__unpack_d>
 800a6ac:	d8800617 	ldw	r2,24(sp)
 800a6b0:	d9000a04 	addi	r4,sp,40
 800a6b4:	d9400504 	addi	r5,sp,20
 800a6b8:	d80d883a 	mov	r6,sp
 800a6bc:	1080005c 	xori	r2,r2,1
 800a6c0:	d8800615 	stw	r2,24(sp)
 800a6c4:	800a2d40 	call	800a2d4 <_fpadd_parts>
 800a6c8:	1009883a 	mov	r4,r2
 800a6cc:	800b3180 	call	800b318 <__pack_d>
 800a6d0:	dfc01317 	ldw	ra,76(sp)
 800a6d4:	dec01404 	addi	sp,sp,80
 800a6d8:	f800283a 	ret

0800a6dc <__muldf3>:
 800a6dc:	deffe404 	addi	sp,sp,-112
 800a6e0:	d9001115 	stw	r4,68(sp)
 800a6e4:	d9401215 	stw	r5,72(sp)
 800a6e8:	d9001104 	addi	r4,sp,68
 800a6ec:	d9400a04 	addi	r5,sp,40
 800a6f0:	dfc01b15 	stw	ra,108(sp)
 800a6f4:	d9800f15 	stw	r6,60(sp)
 800a6f8:	d9c01015 	stw	r7,64(sp)
 800a6fc:	ddc01a15 	stw	r23,104(sp)
 800a700:	dd801915 	stw	r22,100(sp)
 800a704:	dd401815 	stw	r21,96(sp)
 800a708:	dd001715 	stw	r20,92(sp)
 800a70c:	dcc01615 	stw	r19,88(sp)
 800a710:	dc801515 	stw	r18,84(sp)
 800a714:	dc401415 	stw	r17,80(sp)
 800a718:	dc001315 	stw	r16,76(sp)
 800a71c:	800b53c0 	call	800b53c <__unpack_d>
 800a720:	d9000f04 	addi	r4,sp,60
 800a724:	d9400504 	addi	r5,sp,20
 800a728:	800b53c0 	call	800b53c <__unpack_d>
 800a72c:	d8c00a17 	ldw	r3,40(sp)
 800a730:	00800044 	movi	r2,1
 800a734:	10c01136 	bltu	r2,r3,800a77c <__muldf3+0xa0>
 800a738:	d8c00b17 	ldw	r3,44(sp)
 800a73c:	d8800617 	ldw	r2,24(sp)
 800a740:	d9000a04 	addi	r4,sp,40
 800a744:	1884c03a 	cmpne	r2,r3,r2
 800a748:	d8800b15 	stw	r2,44(sp)
 800a74c:	800b3180 	call	800b318 <__pack_d>
 800a750:	dfc01b17 	ldw	ra,108(sp)
 800a754:	ddc01a17 	ldw	r23,104(sp)
 800a758:	dd801917 	ldw	r22,100(sp)
 800a75c:	dd401817 	ldw	r21,96(sp)
 800a760:	dd001717 	ldw	r20,92(sp)
 800a764:	dcc01617 	ldw	r19,88(sp)
 800a768:	dc801517 	ldw	r18,84(sp)
 800a76c:	dc401417 	ldw	r17,80(sp)
 800a770:	dc001317 	ldw	r16,76(sp)
 800a774:	dec01c04 	addi	sp,sp,112
 800a778:	f800283a 	ret
 800a77c:	d9000517 	ldw	r4,20(sp)
 800a780:	11000636 	bltu	r2,r4,800a79c <__muldf3+0xc0>
 800a784:	d8800617 	ldw	r2,24(sp)
 800a788:	d8c00b17 	ldw	r3,44(sp)
 800a78c:	d9000504 	addi	r4,sp,20
 800a790:	1884c03a 	cmpne	r2,r3,r2
 800a794:	d8800615 	stw	r2,24(sp)
 800a798:	003fec06 	br	800a74c <__alt_data_end+0xf800a74c>
 800a79c:	00800104 	movi	r2,4
 800a7a0:	1880051e 	bne	r3,r2,800a7b8 <__muldf3+0xdc>
 800a7a4:	00800084 	movi	r2,2
 800a7a8:	20bfe31e 	bne	r4,r2,800a738 <__alt_data_end+0xf800a738>
 800a7ac:	01020074 	movhi	r4,2049
 800a7b0:	213a4604 	addi	r4,r4,-5864
 800a7b4:	003fe506 	br	800a74c <__alt_data_end+0xf800a74c>
 800a7b8:	2080031e 	bne	r4,r2,800a7c8 <__muldf3+0xec>
 800a7bc:	00800084 	movi	r2,2
 800a7c0:	18bffa26 	beq	r3,r2,800a7ac <__alt_data_end+0xf800a7ac>
 800a7c4:	003fef06 	br	800a784 <__alt_data_end+0xf800a784>
 800a7c8:	00800084 	movi	r2,2
 800a7cc:	18bfda26 	beq	r3,r2,800a738 <__alt_data_end+0xf800a738>
 800a7d0:	20bfec26 	beq	r4,r2,800a784 <__alt_data_end+0xf800a784>
 800a7d4:	dc000d17 	ldw	r16,52(sp)
 800a7d8:	dd000817 	ldw	r20,32(sp)
 800a7dc:	dc800917 	ldw	r18,36(sp)
 800a7e0:	8009883a 	mov	r4,r16
 800a7e4:	000b883a 	mov	r5,zero
 800a7e8:	a00d883a 	mov	r6,r20
 800a7ec:	000f883a 	mov	r7,zero
 800a7f0:	800b15c0 	call	800b15c <__muldi3>
 800a7f4:	dc400e17 	ldw	r17,56(sp)
 800a7f8:	9009883a 	mov	r4,r18
 800a7fc:	800d883a 	mov	r6,r16
 800a800:	000b883a 	mov	r5,zero
 800a804:	000f883a 	mov	r7,zero
 800a808:	102f883a 	mov	r23,r2
 800a80c:	1827883a 	mov	r19,r3
 800a810:	800b15c0 	call	800b15c <__muldi3>
 800a814:	900d883a 	mov	r6,r18
 800a818:	8809883a 	mov	r4,r17
 800a81c:	000b883a 	mov	r5,zero
 800a820:	000f883a 	mov	r7,zero
 800a824:	102b883a 	mov	r21,r2
 800a828:	1821883a 	mov	r16,r3
 800a82c:	800b15c0 	call	800b15c <__muldi3>
 800a830:	8809883a 	mov	r4,r17
 800a834:	000b883a 	mov	r5,zero
 800a838:	a00d883a 	mov	r6,r20
 800a83c:	000f883a 	mov	r7,zero
 800a840:	102d883a 	mov	r22,r2
 800a844:	1825883a 	mov	r18,r3
 800a848:	800b15c0 	call	800b15c <__muldi3>
 800a84c:	154b883a 	add	r5,r2,r21
 800a850:	2889803a 	cmpltu	r4,r5,r2
 800a854:	1c07883a 	add	r3,r3,r16
 800a858:	20c9883a 	add	r4,r4,r3
 800a85c:	24004b36 	bltu	r4,r16,800a98c <__muldf3+0x2b0>
 800a860:	8100011e 	bne	r16,r4,800a868 <__muldf3+0x18c>
 800a864:	2d404936 	bltu	r5,r21,800a98c <__muldf3+0x2b0>
 800a868:	0011883a 	mov	r8,zero
 800a86c:	0007883a 	mov	r3,zero
 800a870:	2ccb883a 	add	r5,r5,r19
 800a874:	b80d883a 	mov	r6,r23
 800a878:	2cc0012e 	bgeu	r5,r19,800a880 <__muldf3+0x1a4>
 800a87c:	02000044 	movi	r8,1
 800a880:	258f883a 	add	r7,r4,r22
 800a884:	3909803a 	cmpltu	r4,r7,r4
 800a888:	da400c17 	ldw	r9,48(sp)
 800a88c:	2489883a 	add	r4,r4,r18
 800a890:	d8800717 	ldw	r2,28(sp)
 800a894:	20c9883a 	add	r4,r4,r3
 800a898:	da800b17 	ldw	r10,44(sp)
 800a89c:	d8c00617 	ldw	r3,24(sp)
 800a8a0:	3a11883a 	add	r8,r7,r8
 800a8a4:	4885883a 	add	r2,r9,r2
 800a8a8:	50c6c03a 	cmpne	r3,r10,r3
 800a8ac:	41cf803a 	cmpltu	r7,r8,r7
 800a8b0:	12400104 	addi	r9,r2,4
 800a8b4:	d8c00115 	stw	r3,4(sp)
 800a8b8:	3909883a 	add	r4,r7,r4
 800a8bc:	da400215 	stw	r9,8(sp)
 800a8c0:	03480034 	movhi	r13,8192
 800a8c4:	6b7fffc4 	addi	r13,r13,-1
 800a8c8:	4007883a 	mov	r3,r8
 800a8cc:	6900102e 	bgeu	r13,r4,800a910 <__muldf3+0x234>
 800a8d0:	10800144 	addi	r2,r2,5
 800a8d4:	180ed07a 	srli	r7,r3,1
 800a8d8:	18c0004c 	andi	r3,r3,1
 800a8dc:	201097fa 	slli	r8,r4,31
 800a8e0:	281697fa 	slli	r11,r5,31
 800a8e4:	2008d07a 	srli	r4,r4,1
 800a8e8:	3014d07a 	srli	r10,r6,1
 800a8ec:	2812d07a 	srli	r9,r5,1
 800a8f0:	1019883a 	mov	r12,r2
 800a8f4:	18000226 	beq	r3,zero,800a900 <__muldf3+0x224>
 800a8f8:	5a8cb03a 	or	r6,r11,r10
 800a8fc:	49600034 	orhi	r5,r9,32768
 800a900:	41c6b03a 	or	r3,r8,r7
 800a904:	10800044 	addi	r2,r2,1
 800a908:	693ff236 	bltu	r13,r4,800a8d4 <__alt_data_end+0xf800a8d4>
 800a90c:	db000215 	stw	r12,8(sp)
 800a910:	03440034 	movhi	r13,4096
 800a914:	6b7fffc4 	addi	r13,r13,-1
 800a918:	69001336 	bltu	r13,r4,800a968 <__muldf3+0x28c>
 800a91c:	d8800217 	ldw	r2,8(sp)
 800a920:	10bfffc4 	addi	r2,r2,-1
 800a924:	18d3883a 	add	r9,r3,r3
 800a928:	48c7803a 	cmpltu	r3,r9,r3
 800a92c:	2109883a 	add	r4,r4,r4
 800a930:	190f883a 	add	r7,r3,r4
 800a934:	3191883a 	add	r8,r6,r6
 800a938:	4197803a 	cmpltu	r11,r8,r6
 800a93c:	2955883a 	add	r10,r5,r5
 800a940:	1019883a 	mov	r12,r2
 800a944:	4807883a 	mov	r3,r9
 800a948:	3809883a 	mov	r4,r7
 800a94c:	2800010e 	bge	r5,zero,800a954 <__muldf3+0x278>
 800a950:	48c00054 	ori	r3,r9,1
 800a954:	400d883a 	mov	r6,r8
 800a958:	5a8b883a 	add	r5,r11,r10
 800a95c:	10bfffc4 	addi	r2,r2,-1
 800a960:	69fff02e 	bgeu	r13,r7,800a924 <__alt_data_end+0xf800a924>
 800a964:	db000215 	stw	r12,8(sp)
 800a968:	18803fcc 	andi	r2,r3,255
 800a96c:	01c02004 	movi	r7,128
 800a970:	11c00926 	beq	r2,r7,800a998 <__muldf3+0x2bc>
 800a974:	008000c4 	movi	r2,3
 800a978:	d9000415 	stw	r4,16(sp)
 800a97c:	d8c00315 	stw	r3,12(sp)
 800a980:	d8800015 	stw	r2,0(sp)
 800a984:	d809883a 	mov	r4,sp
 800a988:	003f7006 	br	800a74c <__alt_data_end+0xf800a74c>
 800a98c:	0011883a 	mov	r8,zero
 800a990:	00c00044 	movi	r3,1
 800a994:	003fb606 	br	800a870 <__alt_data_end+0xf800a870>
 800a998:	19c0400c 	andi	r7,r3,256
 800a99c:	383ff51e 	bne	r7,zero,800a974 <__alt_data_end+0xf800a974>
 800a9a0:	314ab03a 	or	r5,r6,r5
 800a9a4:	283ff326 	beq	r5,zero,800a974 <__alt_data_end+0xf800a974>
 800a9a8:	1885883a 	add	r2,r3,r2
 800a9ac:	10cb803a 	cmpltu	r5,r2,r3
 800a9b0:	00ffc004 	movi	r3,-256
 800a9b4:	10c6703a 	and	r3,r2,r3
 800a9b8:	2909883a 	add	r4,r5,r4
 800a9bc:	003fed06 	br	800a974 <__alt_data_end+0xf800a974>

0800a9c0 <__divdf3>:
 800a9c0:	defff104 	addi	sp,sp,-60
 800a9c4:	d9000c15 	stw	r4,48(sp)
 800a9c8:	d9400d15 	stw	r5,52(sp)
 800a9cc:	d9000c04 	addi	r4,sp,48
 800a9d0:	d9400504 	addi	r5,sp,20
 800a9d4:	dfc00e15 	stw	ra,56(sp)
 800a9d8:	d9800a15 	stw	r6,40(sp)
 800a9dc:	d9c00b15 	stw	r7,44(sp)
 800a9e0:	800b53c0 	call	800b53c <__unpack_d>
 800a9e4:	d9000a04 	addi	r4,sp,40
 800a9e8:	d80b883a 	mov	r5,sp
 800a9ec:	800b53c0 	call	800b53c <__unpack_d>
 800a9f0:	d8c00517 	ldw	r3,20(sp)
 800a9f4:	00800044 	movi	r2,1
 800a9f8:	10c00536 	bltu	r2,r3,800aa10 <__divdf3+0x50>
 800a9fc:	d9000504 	addi	r4,sp,20
 800aa00:	800b3180 	call	800b318 <__pack_d>
 800aa04:	dfc00e17 	ldw	ra,56(sp)
 800aa08:	dec00f04 	addi	sp,sp,60
 800aa0c:	f800283a 	ret
 800aa10:	d9000017 	ldw	r4,0(sp)
 800aa14:	11000536 	bltu	r2,r4,800aa2c <__divdf3+0x6c>
 800aa18:	d809883a 	mov	r4,sp
 800aa1c:	800b3180 	call	800b318 <__pack_d>
 800aa20:	dfc00e17 	ldw	ra,56(sp)
 800aa24:	dec00f04 	addi	sp,sp,60
 800aa28:	f800283a 	ret
 800aa2c:	d9800617 	ldw	r6,24(sp)
 800aa30:	d9400117 	ldw	r5,4(sp)
 800aa34:	00800104 	movi	r2,4
 800aa38:	314af03a 	xor	r5,r6,r5
 800aa3c:	d9400615 	stw	r5,24(sp)
 800aa40:	18800226 	beq	r3,r2,800aa4c <__divdf3+0x8c>
 800aa44:	01400084 	movi	r5,2
 800aa48:	1940041e 	bne	r3,r5,800aa5c <__divdf3+0x9c>
 800aa4c:	193feb1e 	bne	r3,r4,800a9fc <__alt_data_end+0xf800a9fc>
 800aa50:	01020074 	movhi	r4,2049
 800aa54:	213a4604 	addi	r4,r4,-5864
 800aa58:	003fe906 	br	800aa00 <__alt_data_end+0xf800aa00>
 800aa5c:	20803326 	beq	r4,r2,800ab2c <__divdf3+0x16c>
 800aa60:	21403726 	beq	r4,r5,800ab40 <__divdf3+0x180>
 800aa64:	d8800217 	ldw	r2,8(sp)
 800aa68:	d9000717 	ldw	r4,28(sp)
 800aa6c:	d8c00917 	ldw	r3,36(sp)
 800aa70:	da000417 	ldw	r8,16(sp)
 800aa74:	2089c83a 	sub	r4,r4,r2
 800aa78:	d9000715 	stw	r4,28(sp)
 800aa7c:	d8800817 	ldw	r2,32(sp)
 800aa80:	dbc00317 	ldw	r15,12(sp)
 800aa84:	1a000236 	bltu	r3,r8,800aa90 <__divdf3+0xd0>
 800aa88:	40c0081e 	bne	r8,r3,800aaac <__divdf3+0xec>
 800aa8c:	13c0072e 	bgeu	r2,r15,800aaac <__divdf3+0xec>
 800aa90:	108b883a 	add	r5,r2,r2
 800aa94:	288d803a 	cmpltu	r6,r5,r2
 800aa98:	18c7883a 	add	r3,r3,r3
 800aa9c:	213fffc4 	addi	r4,r4,-1
 800aaa0:	2805883a 	mov	r2,r5
 800aaa4:	30c7883a 	add	r3,r6,r3
 800aaa8:	d9000715 	stw	r4,28(sp)
 800aaac:	01400f44 	movi	r5,61
 800aab0:	000f883a 	mov	r7,zero
 800aab4:	01040034 	movhi	r4,4096
 800aab8:	0019883a 	mov	r12,zero
 800aabc:	001b883a 	mov	r13,zero
 800aac0:	201697fa 	slli	r11,r4,31
 800aac4:	3814d07a 	srli	r10,r7,1
 800aac8:	297fffc4 	addi	r5,r5,-1
 800aacc:	1a000936 	bltu	r3,r8,800aaf4 <__divdf3+0x134>
 800aad0:	13cdc83a 	sub	r6,r2,r15
 800aad4:	1193803a 	cmpltu	r9,r2,r6
 800aad8:	1a1dc83a 	sub	r14,r3,r8
 800aadc:	40c0011e 	bne	r8,r3,800aae4 <__divdf3+0x124>
 800aae0:	13c00436 	bltu	r2,r15,800aaf4 <__divdf3+0x134>
 800aae4:	3005883a 	mov	r2,r6
 800aae8:	7247c83a 	sub	r3,r14,r9
 800aaec:	61d8b03a 	or	r12,r12,r7
 800aaf0:	691ab03a 	or	r13,r13,r4
 800aaf4:	108d883a 	add	r6,r2,r2
 800aaf8:	3093803a 	cmpltu	r9,r6,r2
 800aafc:	18c7883a 	add	r3,r3,r3
 800ab00:	5a8eb03a 	or	r7,r11,r10
 800ab04:	2008d07a 	srli	r4,r4,1
 800ab08:	3005883a 	mov	r2,r6
 800ab0c:	48c7883a 	add	r3,r9,r3
 800ab10:	283feb1e 	bne	r5,zero,800aac0 <__alt_data_end+0xf800aac0>
 800ab14:	61003fcc 	andi	r4,r12,255
 800ab18:	01402004 	movi	r5,128
 800ab1c:	21400b26 	beq	r4,r5,800ab4c <__divdf3+0x18c>
 800ab20:	db000815 	stw	r12,32(sp)
 800ab24:	db400915 	stw	r13,36(sp)
 800ab28:	003fb406 	br	800a9fc <__alt_data_end+0xf800a9fc>
 800ab2c:	d8000815 	stw	zero,32(sp)
 800ab30:	d8000915 	stw	zero,36(sp)
 800ab34:	d8000715 	stw	zero,28(sp)
 800ab38:	d9000504 	addi	r4,sp,20
 800ab3c:	003fb006 	br	800aa00 <__alt_data_end+0xf800aa00>
 800ab40:	d8800515 	stw	r2,20(sp)
 800ab44:	d9000504 	addi	r4,sp,20
 800ab48:	003fad06 	br	800aa00 <__alt_data_end+0xf800aa00>
 800ab4c:	6140400c 	andi	r5,r12,256
 800ab50:	283ff31e 	bne	r5,zero,800ab20 <__alt_data_end+0xf800ab20>
 800ab54:	30c4b03a 	or	r2,r6,r3
 800ab58:	103ff126 	beq	r2,zero,800ab20 <__alt_data_end+0xf800ab20>
 800ab5c:	6109883a 	add	r4,r12,r4
 800ab60:	2305803a 	cmpltu	r2,r4,r12
 800ab64:	033fc004 	movi	r12,-256
 800ab68:	2318703a 	and	r12,r4,r12
 800ab6c:	135b883a 	add	r13,r2,r13
 800ab70:	003feb06 	br	800ab20 <__alt_data_end+0xf800ab20>

0800ab74 <__eqdf2>:
 800ab74:	defff104 	addi	sp,sp,-60
 800ab78:	d9000c15 	stw	r4,48(sp)
 800ab7c:	d9400d15 	stw	r5,52(sp)
 800ab80:	d9000c04 	addi	r4,sp,48
 800ab84:	d9400504 	addi	r5,sp,20
 800ab88:	dfc00e15 	stw	ra,56(sp)
 800ab8c:	d9800a15 	stw	r6,40(sp)
 800ab90:	d9c00b15 	stw	r7,44(sp)
 800ab94:	800b53c0 	call	800b53c <__unpack_d>
 800ab98:	d9000a04 	addi	r4,sp,40
 800ab9c:	d80b883a 	mov	r5,sp
 800aba0:	800b53c0 	call	800b53c <__unpack_d>
 800aba4:	d8c00517 	ldw	r3,20(sp)
 800aba8:	00800044 	movi	r2,1
 800abac:	10c0052e 	bgeu	r2,r3,800abc4 <__eqdf2+0x50>
 800abb0:	d8c00017 	ldw	r3,0(sp)
 800abb4:	10c0032e 	bgeu	r2,r3,800abc4 <__eqdf2+0x50>
 800abb8:	d9000504 	addi	r4,sp,20
 800abbc:	d80b883a 	mov	r5,sp
 800abc0:	800b6400 	call	800b640 <__fpcmp_parts_d>
 800abc4:	dfc00e17 	ldw	ra,56(sp)
 800abc8:	dec00f04 	addi	sp,sp,60
 800abcc:	f800283a 	ret

0800abd0 <__nedf2>:
 800abd0:	defff104 	addi	sp,sp,-60
 800abd4:	d9000c15 	stw	r4,48(sp)
 800abd8:	d9400d15 	stw	r5,52(sp)
 800abdc:	d9000c04 	addi	r4,sp,48
 800abe0:	d9400504 	addi	r5,sp,20
 800abe4:	dfc00e15 	stw	ra,56(sp)
 800abe8:	d9800a15 	stw	r6,40(sp)
 800abec:	d9c00b15 	stw	r7,44(sp)
 800abf0:	800b53c0 	call	800b53c <__unpack_d>
 800abf4:	d9000a04 	addi	r4,sp,40
 800abf8:	d80b883a 	mov	r5,sp
 800abfc:	800b53c0 	call	800b53c <__unpack_d>
 800ac00:	d8c00517 	ldw	r3,20(sp)
 800ac04:	00800044 	movi	r2,1
 800ac08:	10c0052e 	bgeu	r2,r3,800ac20 <__nedf2+0x50>
 800ac0c:	d8c00017 	ldw	r3,0(sp)
 800ac10:	10c0032e 	bgeu	r2,r3,800ac20 <__nedf2+0x50>
 800ac14:	d9000504 	addi	r4,sp,20
 800ac18:	d80b883a 	mov	r5,sp
 800ac1c:	800b6400 	call	800b640 <__fpcmp_parts_d>
 800ac20:	dfc00e17 	ldw	ra,56(sp)
 800ac24:	dec00f04 	addi	sp,sp,60
 800ac28:	f800283a 	ret

0800ac2c <__gtdf2>:
 800ac2c:	defff104 	addi	sp,sp,-60
 800ac30:	d9000c15 	stw	r4,48(sp)
 800ac34:	d9400d15 	stw	r5,52(sp)
 800ac38:	d9000c04 	addi	r4,sp,48
 800ac3c:	d9400504 	addi	r5,sp,20
 800ac40:	dfc00e15 	stw	ra,56(sp)
 800ac44:	d9800a15 	stw	r6,40(sp)
 800ac48:	d9c00b15 	stw	r7,44(sp)
 800ac4c:	800b53c0 	call	800b53c <__unpack_d>
 800ac50:	d9000a04 	addi	r4,sp,40
 800ac54:	d80b883a 	mov	r5,sp
 800ac58:	800b53c0 	call	800b53c <__unpack_d>
 800ac5c:	d8c00517 	ldw	r3,20(sp)
 800ac60:	00800044 	movi	r2,1
 800ac64:	10c0082e 	bgeu	r2,r3,800ac88 <__gtdf2+0x5c>
 800ac68:	d8c00017 	ldw	r3,0(sp)
 800ac6c:	10c0062e 	bgeu	r2,r3,800ac88 <__gtdf2+0x5c>
 800ac70:	d9000504 	addi	r4,sp,20
 800ac74:	d80b883a 	mov	r5,sp
 800ac78:	800b6400 	call	800b640 <__fpcmp_parts_d>
 800ac7c:	dfc00e17 	ldw	ra,56(sp)
 800ac80:	dec00f04 	addi	sp,sp,60
 800ac84:	f800283a 	ret
 800ac88:	00bfffc4 	movi	r2,-1
 800ac8c:	003ffb06 	br	800ac7c <__alt_data_end+0xf800ac7c>

0800ac90 <__gedf2>:
 800ac90:	defff104 	addi	sp,sp,-60
 800ac94:	d9000c15 	stw	r4,48(sp)
 800ac98:	d9400d15 	stw	r5,52(sp)
 800ac9c:	d9000c04 	addi	r4,sp,48
 800aca0:	d9400504 	addi	r5,sp,20
 800aca4:	dfc00e15 	stw	ra,56(sp)
 800aca8:	d9800a15 	stw	r6,40(sp)
 800acac:	d9c00b15 	stw	r7,44(sp)
 800acb0:	800b53c0 	call	800b53c <__unpack_d>
 800acb4:	d9000a04 	addi	r4,sp,40
 800acb8:	d80b883a 	mov	r5,sp
 800acbc:	800b53c0 	call	800b53c <__unpack_d>
 800acc0:	d8c00517 	ldw	r3,20(sp)
 800acc4:	00800044 	movi	r2,1
 800acc8:	10c0082e 	bgeu	r2,r3,800acec <__gedf2+0x5c>
 800accc:	d8c00017 	ldw	r3,0(sp)
 800acd0:	10c0062e 	bgeu	r2,r3,800acec <__gedf2+0x5c>
 800acd4:	d9000504 	addi	r4,sp,20
 800acd8:	d80b883a 	mov	r5,sp
 800acdc:	800b6400 	call	800b640 <__fpcmp_parts_d>
 800ace0:	dfc00e17 	ldw	ra,56(sp)
 800ace4:	dec00f04 	addi	sp,sp,60
 800ace8:	f800283a 	ret
 800acec:	00bfffc4 	movi	r2,-1
 800acf0:	003ffb06 	br	800ace0 <__alt_data_end+0xf800ace0>

0800acf4 <__ltdf2>:
 800acf4:	defff104 	addi	sp,sp,-60
 800acf8:	d9000c15 	stw	r4,48(sp)
 800acfc:	d9400d15 	stw	r5,52(sp)
 800ad00:	d9000c04 	addi	r4,sp,48
 800ad04:	d9400504 	addi	r5,sp,20
 800ad08:	dfc00e15 	stw	ra,56(sp)
 800ad0c:	d9800a15 	stw	r6,40(sp)
 800ad10:	d9c00b15 	stw	r7,44(sp)
 800ad14:	800b53c0 	call	800b53c <__unpack_d>
 800ad18:	d9000a04 	addi	r4,sp,40
 800ad1c:	d80b883a 	mov	r5,sp
 800ad20:	800b53c0 	call	800b53c <__unpack_d>
 800ad24:	d8c00517 	ldw	r3,20(sp)
 800ad28:	00800044 	movi	r2,1
 800ad2c:	10c0052e 	bgeu	r2,r3,800ad44 <__ltdf2+0x50>
 800ad30:	d8c00017 	ldw	r3,0(sp)
 800ad34:	10c0032e 	bgeu	r2,r3,800ad44 <__ltdf2+0x50>
 800ad38:	d9000504 	addi	r4,sp,20
 800ad3c:	d80b883a 	mov	r5,sp
 800ad40:	800b6400 	call	800b640 <__fpcmp_parts_d>
 800ad44:	dfc00e17 	ldw	ra,56(sp)
 800ad48:	dec00f04 	addi	sp,sp,60
 800ad4c:	f800283a 	ret

0800ad50 <__floatsidf>:
 800ad50:	2004d7fa 	srli	r2,r4,31
 800ad54:	defff904 	addi	sp,sp,-28
 800ad58:	00c000c4 	movi	r3,3
 800ad5c:	dfc00615 	stw	ra,24(sp)
 800ad60:	dc000515 	stw	r16,20(sp)
 800ad64:	d8c00015 	stw	r3,0(sp)
 800ad68:	d8800115 	stw	r2,4(sp)
 800ad6c:	2000081e 	bne	r4,zero,800ad90 <__floatsidf+0x40>
 800ad70:	00800084 	movi	r2,2
 800ad74:	d8800015 	stw	r2,0(sp)
 800ad78:	d809883a 	mov	r4,sp
 800ad7c:	800b3180 	call	800b318 <__pack_d>
 800ad80:	dfc00617 	ldw	ra,24(sp)
 800ad84:	dc000517 	ldw	r16,20(sp)
 800ad88:	dec00704 	addi	sp,sp,28
 800ad8c:	f800283a 	ret
 800ad90:	00c00f04 	movi	r3,60
 800ad94:	d8c00215 	stw	r3,8(sp)
 800ad98:	10000f1e 	bne	r2,zero,800add8 <__floatsidf+0x88>
 800ad9c:	2021883a 	mov	r16,r4
 800ada0:	8009883a 	mov	r4,r16
 800ada4:	800b26c0 	call	800b26c <__clzsi2>
 800ada8:	11000744 	addi	r4,r2,29
 800adac:	0100110e 	bge	zero,r4,800adf4 <__floatsidf+0xa4>
 800adb0:	10ffff44 	addi	r3,r2,-3
 800adb4:	18001216 	blt	r3,zero,800ae00 <__floatsidf+0xb0>
 800adb8:	80c6983a 	sll	r3,r16,r3
 800adbc:	0009883a 	mov	r4,zero
 800adc0:	014007c4 	movi	r5,31
 800adc4:	2885c83a 	sub	r2,r5,r2
 800adc8:	d9000315 	stw	r4,12(sp)
 800adcc:	d8c00415 	stw	r3,16(sp)
 800add0:	d8800215 	stw	r2,8(sp)
 800add4:	003fe806 	br	800ad78 <__alt_data_end+0xf800ad78>
 800add8:	00a00034 	movhi	r2,32768
 800addc:	20800e26 	beq	r4,r2,800ae18 <__floatsidf+0xc8>
 800ade0:	0121c83a 	sub	r16,zero,r4
 800ade4:	8009883a 	mov	r4,r16
 800ade8:	800b26c0 	call	800b26c <__clzsi2>
 800adec:	11000744 	addi	r4,r2,29
 800adf0:	013fef16 	blt	zero,r4,800adb0 <__alt_data_end+0xf800adb0>
 800adf4:	dc000315 	stw	r16,12(sp)
 800adf8:	d8000415 	stw	zero,16(sp)
 800adfc:	003fde06 	br	800ad78 <__alt_data_end+0xf800ad78>
 800ae00:	800ad07a 	srli	r5,r16,1
 800ae04:	00c007c4 	movi	r3,31
 800ae08:	1907c83a 	sub	r3,r3,r4
 800ae0c:	28c6d83a 	srl	r3,r5,r3
 800ae10:	8108983a 	sll	r4,r16,r4
 800ae14:	003fea06 	br	800adc0 <__alt_data_end+0xf800adc0>
 800ae18:	0005883a 	mov	r2,zero
 800ae1c:	00f07834 	movhi	r3,49632
 800ae20:	003fd706 	br	800ad80 <__alt_data_end+0xf800ad80>

0800ae24 <__fixdfsi>:
 800ae24:	defff804 	addi	sp,sp,-32
 800ae28:	d9000515 	stw	r4,20(sp)
 800ae2c:	d9400615 	stw	r5,24(sp)
 800ae30:	d9000504 	addi	r4,sp,20
 800ae34:	d80b883a 	mov	r5,sp
 800ae38:	dfc00715 	stw	ra,28(sp)
 800ae3c:	800b53c0 	call	800b53c <__unpack_d>
 800ae40:	d8800017 	ldw	r2,0(sp)
 800ae44:	00c00084 	movi	r3,2
 800ae48:	10c01c26 	beq	r2,r3,800aebc <__fixdfsi+0x98>
 800ae4c:	00c00044 	movi	r3,1
 800ae50:	18801a2e 	bgeu	r3,r2,800aebc <__fixdfsi+0x98>
 800ae54:	00c00104 	movi	r3,4
 800ae58:	10c01126 	beq	r2,r3,800aea0 <__fixdfsi+0x7c>
 800ae5c:	d8800217 	ldw	r2,8(sp)
 800ae60:	10001616 	blt	r2,zero,800aebc <__fixdfsi+0x98>
 800ae64:	00c00784 	movi	r3,30
 800ae68:	18800d16 	blt	r3,r2,800aea0 <__fixdfsi+0x7c>
 800ae6c:	00c00f04 	movi	r3,60
 800ae70:	1885c83a 	sub	r2,r3,r2
 800ae74:	10fff804 	addi	r3,r2,-32
 800ae78:	d9400317 	ldw	r5,12(sp)
 800ae7c:	d9000417 	ldw	r4,16(sp)
 800ae80:	18001216 	blt	r3,zero,800aecc <__fixdfsi+0xa8>
 800ae84:	20c4d83a 	srl	r2,r4,r3
 800ae88:	d8c00117 	ldw	r3,4(sp)
 800ae8c:	18000826 	beq	r3,zero,800aeb0 <__fixdfsi+0x8c>
 800ae90:	0085c83a 	sub	r2,zero,r2
 800ae94:	dfc00717 	ldw	ra,28(sp)
 800ae98:	dec00804 	addi	sp,sp,32
 800ae9c:	f800283a 	ret
 800aea0:	d8800117 	ldw	r2,4(sp)
 800aea4:	00e00034 	movhi	r3,32768
 800aea8:	1005003a 	cmpeq	r2,r2,zero
 800aeac:	1885c83a 	sub	r2,r3,r2
 800aeb0:	dfc00717 	ldw	ra,28(sp)
 800aeb4:	dec00804 	addi	sp,sp,32
 800aeb8:	f800283a 	ret
 800aebc:	0005883a 	mov	r2,zero
 800aec0:	dfc00717 	ldw	ra,28(sp)
 800aec4:	dec00804 	addi	sp,sp,32
 800aec8:	f800283a 	ret
 800aecc:	2008907a 	slli	r4,r4,1
 800aed0:	018007c4 	movi	r6,31
 800aed4:	308dc83a 	sub	r6,r6,r2
 800aed8:	2188983a 	sll	r4,r4,r6
 800aedc:	2884d83a 	srl	r2,r5,r2
 800aee0:	2084b03a 	or	r2,r4,r2
 800aee4:	003fe806 	br	800ae88 <__alt_data_end+0xf800ae88>

0800aee8 <__floatunsidf>:
 800aee8:	defff904 	addi	sp,sp,-28
 800aeec:	dc000515 	stw	r16,20(sp)
 800aef0:	dfc00615 	stw	ra,24(sp)
 800aef4:	d8000115 	stw	zero,4(sp)
 800aef8:	2021883a 	mov	r16,r4
 800aefc:	20001726 	beq	r4,zero,800af5c <__floatunsidf+0x74>
 800af00:	008000c4 	movi	r2,3
 800af04:	d8800015 	stw	r2,0(sp)
 800af08:	00800f04 	movi	r2,60
 800af0c:	d8800215 	stw	r2,8(sp)
 800af10:	800b26c0 	call	800b26c <__clzsi2>
 800af14:	10c00744 	addi	r3,r2,29
 800af18:	18001816 	blt	r3,zero,800af7c <__floatunsidf+0x94>
 800af1c:	18002d26 	beq	r3,zero,800afd4 <__floatunsidf+0xec>
 800af20:	113fff44 	addi	r4,r2,-3
 800af24:	20002e16 	blt	r4,zero,800afe0 <__floatunsidf+0xf8>
 800af28:	8108983a 	sll	r4,r16,r4
 800af2c:	0021883a 	mov	r16,zero
 800af30:	014007c4 	movi	r5,31
 800af34:	2885c83a 	sub	r2,r5,r2
 800af38:	dc000315 	stw	r16,12(sp)
 800af3c:	d9000415 	stw	r4,16(sp)
 800af40:	d8800215 	stw	r2,8(sp)
 800af44:	d809883a 	mov	r4,sp
 800af48:	800b3180 	call	800b318 <__pack_d>
 800af4c:	dfc00617 	ldw	ra,24(sp)
 800af50:	dc000517 	ldw	r16,20(sp)
 800af54:	dec00704 	addi	sp,sp,28
 800af58:	f800283a 	ret
 800af5c:	00800084 	movi	r2,2
 800af60:	d809883a 	mov	r4,sp
 800af64:	d8800015 	stw	r2,0(sp)
 800af68:	800b3180 	call	800b318 <__pack_d>
 800af6c:	dfc00617 	ldw	ra,24(sp)
 800af70:	dc000517 	ldw	r16,20(sp)
 800af74:	dec00704 	addi	sp,sp,28
 800af78:	f800283a 	ret
 800af7c:	00c7c83a 	sub	r3,zero,r3
 800af80:	193ff804 	addi	r4,r3,-32
 800af84:	20001c16 	blt	r4,zero,800aff8 <__floatunsidf+0x110>
 800af88:	000b883a 	mov	r5,zero
 800af8c:	2009d7fa 	srai	r4,r4,31
 800af90:	80c6d83a 	srl	r3,r16,r3
 800af94:	297fffc4 	addi	r5,r5,-1
 800af98:	2c20703a 	and	r16,r5,r16
 800af9c:	8020c03a 	cmpne	r16,r16,zero
 800afa0:	1906703a 	and	r3,r3,r4
 800afa4:	010007c4 	movi	r4,31
 800afa8:	80c6b03a 	or	r3,r16,r3
 800afac:	2085c83a 	sub	r2,r4,r2
 800afb0:	d809883a 	mov	r4,sp
 800afb4:	d8c00315 	stw	r3,12(sp)
 800afb8:	d8000415 	stw	zero,16(sp)
 800afbc:	d8800215 	stw	r2,8(sp)
 800afc0:	800b3180 	call	800b318 <__pack_d>
 800afc4:	dfc00617 	ldw	ra,24(sp)
 800afc8:	dc000517 	ldw	r16,20(sp)
 800afcc:	dec00704 	addi	sp,sp,28
 800afd0:	f800283a 	ret
 800afd4:	dc000315 	stw	r16,12(sp)
 800afd8:	d8000415 	stw	zero,16(sp)
 800afdc:	003fd906 	br	800af44 <__alt_data_end+0xf800af44>
 800afe0:	800ad07a 	srli	r5,r16,1
 800afe4:	010007c4 	movi	r4,31
 800afe8:	20c9c83a 	sub	r4,r4,r3
 800afec:	2908d83a 	srl	r4,r5,r4
 800aff0:	80e0983a 	sll	r16,r16,r3
 800aff4:	003fce06 	br	800af30 <__alt_data_end+0xf800af30>
 800aff8:	01400044 	movi	r5,1
 800affc:	28ca983a 	sll	r5,r5,r3
 800b000:	003fe206 	br	800af8c <__alt_data_end+0xf800af8c>

0800b004 <udivmodsi4>:
 800b004:	2005883a 	mov	r2,r4
 800b008:	2900182e 	bgeu	r5,r4,800b06c <udivmodsi4+0x68>
 800b00c:	28001716 	blt	r5,zero,800b06c <udivmodsi4+0x68>
 800b010:	01000804 	movi	r4,32
 800b014:	00c00044 	movi	r3,1
 800b018:	00000206 	br	800b024 <udivmodsi4+0x20>
 800b01c:	20001126 	beq	r4,zero,800b064 <udivmodsi4+0x60>
 800b020:	28000516 	blt	r5,zero,800b038 <udivmodsi4+0x34>
 800b024:	294b883a 	add	r5,r5,r5
 800b028:	213fffc4 	addi	r4,r4,-1
 800b02c:	18c7883a 	add	r3,r3,r3
 800b030:	28bffa36 	bltu	r5,r2,800b01c <__alt_data_end+0xf800b01c>
 800b034:	18000b26 	beq	r3,zero,800b064 <udivmodsi4+0x60>
 800b038:	0009883a 	mov	r4,zero
 800b03c:	11400236 	bltu	r2,r5,800b048 <udivmodsi4+0x44>
 800b040:	1145c83a 	sub	r2,r2,r5
 800b044:	20c8b03a 	or	r4,r4,r3
 800b048:	1806d07a 	srli	r3,r3,1
 800b04c:	280ad07a 	srli	r5,r5,1
 800b050:	183ffa1e 	bne	r3,zero,800b03c <__alt_data_end+0xf800b03c>
 800b054:	3000021e 	bne	r6,zero,800b060 <udivmodsi4+0x5c>
 800b058:	2005883a 	mov	r2,r4
 800b05c:	f800283a 	ret
 800b060:	f800283a 	ret
 800b064:	0009883a 	mov	r4,zero
 800b068:	003ffa06 	br	800b054 <__alt_data_end+0xf800b054>
 800b06c:	00c00044 	movi	r3,1
 800b070:	0009883a 	mov	r4,zero
 800b074:	003ff106 	br	800b03c <__alt_data_end+0xf800b03c>

0800b078 <__divsi3>:
 800b078:	defffe04 	addi	sp,sp,-8
 800b07c:	dfc00115 	stw	ra,4(sp)
 800b080:	dc000015 	stw	r16,0(sp)
 800b084:	20000a16 	blt	r4,zero,800b0b0 <__divsi3+0x38>
 800b088:	0021883a 	mov	r16,zero
 800b08c:	28000b16 	blt	r5,zero,800b0bc <__divsi3+0x44>
 800b090:	000d883a 	mov	r6,zero
 800b094:	800b0040 	call	800b004 <udivmodsi4>
 800b098:	80000126 	beq	r16,zero,800b0a0 <__divsi3+0x28>
 800b09c:	0085c83a 	sub	r2,zero,r2
 800b0a0:	dfc00117 	ldw	ra,4(sp)
 800b0a4:	dc000017 	ldw	r16,0(sp)
 800b0a8:	dec00204 	addi	sp,sp,8
 800b0ac:	f800283a 	ret
 800b0b0:	0109c83a 	sub	r4,zero,r4
 800b0b4:	04000044 	movi	r16,1
 800b0b8:	283ff50e 	bge	r5,zero,800b090 <__alt_data_end+0xf800b090>
 800b0bc:	014bc83a 	sub	r5,zero,r5
 800b0c0:	8400005c 	xori	r16,r16,1
 800b0c4:	003ff206 	br	800b090 <__alt_data_end+0xf800b090>

0800b0c8 <__modsi3>:
 800b0c8:	deffff04 	addi	sp,sp,-4
 800b0cc:	dfc00015 	stw	ra,0(sp)
 800b0d0:	20000516 	blt	r4,zero,800b0e8 <__modsi3+0x20>
 800b0d4:	28000c16 	blt	r5,zero,800b108 <__modsi3+0x40>
 800b0d8:	01800044 	movi	r6,1
 800b0dc:	dfc00017 	ldw	ra,0(sp)
 800b0e0:	dec00104 	addi	sp,sp,4
 800b0e4:	800b0041 	jmpi	800b004 <udivmodsi4>
 800b0e8:	0109c83a 	sub	r4,zero,r4
 800b0ec:	28000b16 	blt	r5,zero,800b11c <__modsi3+0x54>
 800b0f0:	01800044 	movi	r6,1
 800b0f4:	800b0040 	call	800b004 <udivmodsi4>
 800b0f8:	0085c83a 	sub	r2,zero,r2
 800b0fc:	dfc00017 	ldw	ra,0(sp)
 800b100:	dec00104 	addi	sp,sp,4
 800b104:	f800283a 	ret
 800b108:	014bc83a 	sub	r5,zero,r5
 800b10c:	01800044 	movi	r6,1
 800b110:	dfc00017 	ldw	ra,0(sp)
 800b114:	dec00104 	addi	sp,sp,4
 800b118:	800b0041 	jmpi	800b004 <udivmodsi4>
 800b11c:	014bc83a 	sub	r5,zero,r5
 800b120:	003ff306 	br	800b0f0 <__alt_data_end+0xf800b0f0>

0800b124 <__udivsi3>:
 800b124:	000d883a 	mov	r6,zero
 800b128:	800b0041 	jmpi	800b004 <udivmodsi4>

0800b12c <__umodsi3>:
 800b12c:	01800044 	movi	r6,1
 800b130:	800b0041 	jmpi	800b004 <udivmodsi4>

0800b134 <__mulsi3>:
 800b134:	0005883a 	mov	r2,zero
 800b138:	20000726 	beq	r4,zero,800b158 <__mulsi3+0x24>
 800b13c:	20c0004c 	andi	r3,r4,1
 800b140:	2008d07a 	srli	r4,r4,1
 800b144:	18000126 	beq	r3,zero,800b14c <__mulsi3+0x18>
 800b148:	1145883a 	add	r2,r2,r5
 800b14c:	294b883a 	add	r5,r5,r5
 800b150:	203ffa1e 	bne	r4,zero,800b13c <__alt_data_end+0xf800b13c>
 800b154:	f800283a 	ret
 800b158:	f800283a 	ret

0800b15c <__muldi3>:
 800b15c:	defff604 	addi	sp,sp,-40
 800b160:	dd400515 	stw	r21,20(sp)
 800b164:	dd000415 	stw	r20,16(sp)
 800b168:	257fffcc 	andi	r21,r4,65535
 800b16c:	353fffcc 	andi	r20,r6,65535
 800b170:	dcc00315 	stw	r19,12(sp)
 800b174:	3026d43a 	srli	r19,r6,16
 800b178:	dd800615 	stw	r22,24(sp)
 800b17c:	dc800215 	stw	r18,8(sp)
 800b180:	dc400115 	stw	r17,4(sp)
 800b184:	2024d43a 	srli	r18,r4,16
 800b188:	2023883a 	mov	r17,r4
 800b18c:	282d883a 	mov	r22,r5
 800b190:	a009883a 	mov	r4,r20
 800b194:	a80b883a 	mov	r5,r21
 800b198:	dfc00915 	stw	ra,36(sp)
 800b19c:	df000815 	stw	fp,32(sp)
 800b1a0:	ddc00715 	stw	r23,28(sp)
 800b1a4:	3839883a 	mov	fp,r7
 800b1a8:	dc000015 	stw	r16,0(sp)
 800b1ac:	3021883a 	mov	r16,r6
 800b1b0:	800b1340 	call	800b134 <__mulsi3>
 800b1b4:	a80b883a 	mov	r5,r21
 800b1b8:	9809883a 	mov	r4,r19
 800b1bc:	102f883a 	mov	r23,r2
 800b1c0:	800b1340 	call	800b134 <__mulsi3>
 800b1c4:	a009883a 	mov	r4,r20
 800b1c8:	900b883a 	mov	r5,r18
 800b1cc:	102b883a 	mov	r21,r2
 800b1d0:	800b1340 	call	800b134 <__mulsi3>
 800b1d4:	9809883a 	mov	r4,r19
 800b1d8:	900b883a 	mov	r5,r18
 800b1dc:	1029883a 	mov	r20,r2
 800b1e0:	800b1340 	call	800b134 <__mulsi3>
 800b1e4:	1007883a 	mov	r3,r2
 800b1e8:	b804d43a 	srli	r2,r23,16
 800b1ec:	a549883a 	add	r4,r20,r21
 800b1f0:	2089883a 	add	r4,r4,r2
 800b1f4:	2500022e 	bgeu	r4,r20,800b200 <__muldi3+0xa4>
 800b1f8:	00800074 	movhi	r2,1
 800b1fc:	1887883a 	add	r3,r3,r2
 800b200:	200cd43a 	srli	r6,r4,16
 800b204:	2004943a 	slli	r2,r4,16
 800b208:	e00b883a 	mov	r5,fp
 800b20c:	8809883a 	mov	r4,r17
 800b210:	bdffffcc 	andi	r23,r23,65535
 800b214:	19a3883a 	add	r17,r3,r6
 800b218:	15ef883a 	add	r23,r2,r23
 800b21c:	800b1340 	call	800b134 <__mulsi3>
 800b220:	8009883a 	mov	r4,r16
 800b224:	b00b883a 	mov	r5,r22
 800b228:	1025883a 	mov	r18,r2
 800b22c:	800b1340 	call	800b134 <__mulsi3>
 800b230:	9085883a 	add	r2,r18,r2
 800b234:	1447883a 	add	r3,r2,r17
 800b238:	b805883a 	mov	r2,r23
 800b23c:	dfc00917 	ldw	ra,36(sp)
 800b240:	df000817 	ldw	fp,32(sp)
 800b244:	ddc00717 	ldw	r23,28(sp)
 800b248:	dd800617 	ldw	r22,24(sp)
 800b24c:	dd400517 	ldw	r21,20(sp)
 800b250:	dd000417 	ldw	r20,16(sp)
 800b254:	dcc00317 	ldw	r19,12(sp)
 800b258:	dc800217 	ldw	r18,8(sp)
 800b25c:	dc400117 	ldw	r17,4(sp)
 800b260:	dc000017 	ldw	r16,0(sp)
 800b264:	dec00a04 	addi	sp,sp,40
 800b268:	f800283a 	ret

0800b26c <__clzsi2>:
 800b26c:	00bfffd4 	movui	r2,65535
 800b270:	11000b36 	bltu	r2,r4,800b2a0 <__clzsi2+0x34>
 800b274:	00803fc4 	movi	r2,255
 800b278:	11001e2e 	bgeu	r2,r4,800b2f4 <__clzsi2+0x88>
 800b27c:	00c00204 	movi	r3,8
 800b280:	20c8d83a 	srl	r4,r4,r3
 800b284:	00c20074 	movhi	r3,2049
 800b288:	18fa4b04 	addi	r3,r3,-5844
 800b28c:	00800604 	movi	r2,24
 800b290:	1909883a 	add	r4,r3,r4
 800b294:	20c00003 	ldbu	r3,0(r4)
 800b298:	10c5c83a 	sub	r2,r2,r3
 800b29c:	f800283a 	ret
 800b2a0:	00804034 	movhi	r2,256
 800b2a4:	10bfffc4 	addi	r2,r2,-1
 800b2a8:	11000936 	bltu	r2,r4,800b2d0 <__clzsi2+0x64>
 800b2ac:	00800404 	movi	r2,16
 800b2b0:	1007883a 	mov	r3,r2
 800b2b4:	20c8d83a 	srl	r4,r4,r3
 800b2b8:	00c20074 	movhi	r3,2049
 800b2bc:	18fa4b04 	addi	r3,r3,-5844
 800b2c0:	1909883a 	add	r4,r3,r4
 800b2c4:	20c00003 	ldbu	r3,0(r4)
 800b2c8:	10c5c83a 	sub	r2,r2,r3
 800b2cc:	f800283a 	ret
 800b2d0:	00c00604 	movi	r3,24
 800b2d4:	20c8d83a 	srl	r4,r4,r3
 800b2d8:	00c20074 	movhi	r3,2049
 800b2dc:	18fa4b04 	addi	r3,r3,-5844
 800b2e0:	00800204 	movi	r2,8
 800b2e4:	1909883a 	add	r4,r3,r4
 800b2e8:	20c00003 	ldbu	r3,0(r4)
 800b2ec:	10c5c83a 	sub	r2,r2,r3
 800b2f0:	f800283a 	ret
 800b2f4:	0007883a 	mov	r3,zero
 800b2f8:	20c8d83a 	srl	r4,r4,r3
 800b2fc:	00c20074 	movhi	r3,2049
 800b300:	18fa4b04 	addi	r3,r3,-5844
 800b304:	00800804 	movi	r2,32
 800b308:	1909883a 	add	r4,r3,r4
 800b30c:	20c00003 	ldbu	r3,0(r4)
 800b310:	10c5c83a 	sub	r2,r2,r3
 800b314:	f800283a 	ret

0800b318 <__pack_d>:
 800b318:	20800017 	ldw	r2,0(r4)
 800b31c:	defff804 	addi	sp,sp,-32
 800b320:	dcc00315 	stw	r19,12(sp)
 800b324:	dc800215 	stw	r18,8(sp)
 800b328:	dfc00715 	stw	ra,28(sp)
 800b32c:	dd800615 	stw	r22,24(sp)
 800b330:	dd400515 	stw	r21,20(sp)
 800b334:	dd000415 	stw	r20,16(sp)
 800b338:	dc400115 	stw	r17,4(sp)
 800b33c:	dc000015 	stw	r16,0(sp)
 800b340:	04800044 	movi	r18,1
 800b344:	24400317 	ldw	r17,12(r4)
 800b348:	24000417 	ldw	r16,16(r4)
 800b34c:	24c00117 	ldw	r19,4(r4)
 800b350:	9080422e 	bgeu	r18,r2,800b45c <__pack_d+0x144>
 800b354:	00c00104 	movi	r3,4
 800b358:	10c03c26 	beq	r2,r3,800b44c <__pack_d+0x134>
 800b35c:	00c00084 	movi	r3,2
 800b360:	10c01926 	beq	r2,r3,800b3c8 <__pack_d+0xb0>
 800b364:	8c04b03a 	or	r2,r17,r16
 800b368:	10001726 	beq	r2,zero,800b3c8 <__pack_d+0xb0>
 800b36c:	21000217 	ldw	r4,8(r4)
 800b370:	00bf0084 	movi	r2,-1022
 800b374:	20804016 	blt	r4,r2,800b478 <__pack_d+0x160>
 800b378:	0080ffc4 	movi	r2,1023
 800b37c:	11003316 	blt	r2,r4,800b44c <__pack_d+0x134>
 800b380:	88803fcc 	andi	r2,r17,255
 800b384:	00c02004 	movi	r3,128
 800b388:	10c02926 	beq	r2,r3,800b430 <__pack_d+0x118>
 800b38c:	88801fc4 	addi	r2,r17,127
 800b390:	1463803a 	cmpltu	r17,r2,r17
 800b394:	8c21883a 	add	r16,r17,r16
 800b398:	1023883a 	mov	r17,r2
 800b39c:	00880034 	movhi	r2,8192
 800b3a0:	10bfffc4 	addi	r2,r2,-1
 800b3a4:	14001c36 	bltu	r2,r16,800b418 <__pack_d+0x100>
 800b3a8:	2100ffc4 	addi	r4,r4,1023
 800b3ac:	8006963a 	slli	r3,r16,24
 800b3b0:	8804d23a 	srli	r2,r17,8
 800b3b4:	8020913a 	slli	r16,r16,4
 800b3b8:	2101ffcc 	andi	r4,r4,2047
 800b3bc:	1884b03a 	or	r2,r3,r2
 800b3c0:	8020d33a 	srli	r16,r16,12
 800b3c4:	00000306 	br	800b3d4 <__pack_d+0xbc>
 800b3c8:	0009883a 	mov	r4,zero
 800b3cc:	0005883a 	mov	r2,zero
 800b3d0:	0021883a 	mov	r16,zero
 800b3d4:	2008953a 	slli	r4,r4,20
 800b3d8:	982697fa 	slli	r19,r19,31
 800b3dc:	00c00434 	movhi	r3,16
 800b3e0:	18ffffc4 	addi	r3,r3,-1
 800b3e4:	80e0703a 	and	r16,r16,r3
 800b3e8:	8106b03a 	or	r3,r16,r4
 800b3ec:	1cc6b03a 	or	r3,r3,r19
 800b3f0:	dfc00717 	ldw	ra,28(sp)
 800b3f4:	dd800617 	ldw	r22,24(sp)
 800b3f8:	dd400517 	ldw	r21,20(sp)
 800b3fc:	dd000417 	ldw	r20,16(sp)
 800b400:	dcc00317 	ldw	r19,12(sp)
 800b404:	dc800217 	ldw	r18,8(sp)
 800b408:	dc400117 	ldw	r17,4(sp)
 800b40c:	dc000017 	ldw	r16,0(sp)
 800b410:	dec00804 	addi	sp,sp,32
 800b414:	f800283a 	ret
 800b418:	800697fa 	slli	r3,r16,31
 800b41c:	8804d07a 	srli	r2,r17,1
 800b420:	21010004 	addi	r4,r4,1024
 800b424:	8020d07a 	srli	r16,r16,1
 800b428:	18a2b03a 	or	r17,r3,r2
 800b42c:	003fdf06 	br	800b3ac <__alt_data_end+0xf800b3ac>
 800b430:	88c0400c 	andi	r3,r17,256
 800b434:	183fd926 	beq	r3,zero,800b39c <__alt_data_end+0xf800b39c>
 800b438:	8885883a 	add	r2,r17,r2
 800b43c:	1463803a 	cmpltu	r17,r2,r17
 800b440:	8c21883a 	add	r16,r17,r16
 800b444:	1023883a 	mov	r17,r2
 800b448:	003fd406 	br	800b39c <__alt_data_end+0xf800b39c>
 800b44c:	0101ffc4 	movi	r4,2047
 800b450:	0005883a 	mov	r2,zero
 800b454:	0021883a 	mov	r16,zero
 800b458:	003fde06 	br	800b3d4 <__alt_data_end+0xf800b3d4>
 800b45c:	84000234 	orhi	r16,r16,8
 800b460:	00c00434 	movhi	r3,16
 800b464:	18ffffc4 	addi	r3,r3,-1
 800b468:	8805883a 	mov	r2,r17
 800b46c:	80e0703a 	and	r16,r16,r3
 800b470:	0101ffc4 	movi	r4,2047
 800b474:	003fd706 	br	800b3d4 <__alt_data_end+0xf800b3d4>
 800b478:	1129c83a 	sub	r20,r2,r4
 800b47c:	00800e04 	movi	r2,56
 800b480:	15002716 	blt	r2,r20,800b520 <__pack_d+0x208>
 800b484:	800b883a 	mov	r5,r16
 800b488:	a00d883a 	mov	r6,r20
 800b48c:	8809883a 	mov	r4,r17
 800b490:	800b7100 	call	800b710 <__lshrdi3>
 800b494:	9009883a 	mov	r4,r18
 800b498:	000b883a 	mov	r5,zero
 800b49c:	a00d883a 	mov	r6,r20
 800b4a0:	102d883a 	mov	r22,r2
 800b4a4:	182b883a 	mov	r21,r3
 800b4a8:	800b7540 	call	800b754 <__ashldi3>
 800b4ac:	1009003a 	cmpeq	r4,r2,zero
 800b4b0:	1907c83a 	sub	r3,r3,r4
 800b4b4:	10bfffc4 	addi	r2,r2,-1
 800b4b8:	1c20703a 	and	r16,r3,r16
 800b4bc:	1444703a 	and	r2,r2,r17
 800b4c0:	1404b03a 	or	r2,r2,r16
 800b4c4:	1004c03a 	cmpne	r2,r2,zero
 800b4c8:	1584b03a 	or	r2,r2,r22
 800b4cc:	11003fcc 	andi	r4,r2,255
 800b4d0:	01402004 	movi	r5,128
 800b4d4:	a807883a 	mov	r3,r21
 800b4d8:	2140131e 	bne	r4,r5,800b528 <__pack_d+0x210>
 800b4dc:	1140400c 	andi	r5,r2,256
 800b4e0:	28000426 	beq	r5,zero,800b4f4 <__pack_d+0x1dc>
 800b4e4:	1109883a 	add	r4,r2,r4
 800b4e8:	2085803a 	cmpltu	r2,r4,r2
 800b4ec:	1547883a 	add	r3,r2,r21
 800b4f0:	2005883a 	mov	r2,r4
 800b4f4:	1808963a 	slli	r4,r3,24
 800b4f8:	1004d23a 	srli	r2,r2,8
 800b4fc:	1820913a 	slli	r16,r3,4
 800b500:	01440034 	movhi	r5,4096
 800b504:	297fffc4 	addi	r5,r5,-1
 800b508:	2084b03a 	or	r2,r4,r2
 800b50c:	8020d33a 	srli	r16,r16,12
 800b510:	01000044 	movi	r4,1
 800b514:	28ffaf36 	bltu	r5,r3,800b3d4 <__alt_data_end+0xf800b3d4>
 800b518:	0009883a 	mov	r4,zero
 800b51c:	003fad06 	br	800b3d4 <__alt_data_end+0xf800b3d4>
 800b520:	0005883a 	mov	r2,zero
 800b524:	0007883a 	mov	r3,zero
 800b528:	11001fc4 	addi	r4,r2,127
 800b52c:	2085803a 	cmpltu	r2,r4,r2
 800b530:	10c7883a 	add	r3,r2,r3
 800b534:	2005883a 	mov	r2,r4
 800b538:	003fee06 	br	800b4f4 <__alt_data_end+0xf800b4f4>

0800b53c <__unpack_d>:
 800b53c:	21800117 	ldw	r6,4(r4)
 800b540:	20c00017 	ldw	r3,0(r4)
 800b544:	3004d7fa 	srli	r2,r6,31
 800b548:	3008d53a 	srli	r4,r6,20
 800b54c:	28800115 	stw	r2,4(r5)
 800b550:	2101ffcc 	andi	r4,r4,2047
 800b554:	00800434 	movhi	r2,16
 800b558:	10bfffc4 	addi	r2,r2,-1
 800b55c:	3084703a 	and	r2,r6,r2
 800b560:	20001a1e 	bne	r4,zero,800b5cc <__unpack_d+0x90>
 800b564:	1888b03a 	or	r4,r3,r2
 800b568:	20002626 	beq	r4,zero,800b604 <__unpack_d+0xc8>
 800b56c:	1808d63a 	srli	r4,r3,24
 800b570:	1004923a 	slli	r2,r2,8
 800b574:	01bf0084 	movi	r6,-1022
 800b578:	29800215 	stw	r6,8(r5)
 800b57c:	2084b03a 	or	r2,r4,r2
 800b580:	010000c4 	movi	r4,3
 800b584:	29000015 	stw	r4,0(r5)
 800b588:	02040034 	movhi	r8,4096
 800b58c:	423fffc4 	addi	r8,r8,-1
 800b590:	1806923a 	slli	r3,r3,8
 800b594:	40801836 	bltu	r8,r2,800b5f8 <__unpack_d+0xbc>
 800b598:	013f0044 	movi	r4,-1023
 800b59c:	18cd883a 	add	r6,r3,r3
 800b5a0:	30c7803a 	cmpltu	r3,r6,r3
 800b5a4:	1085883a 	add	r2,r2,r2
 800b5a8:	1885883a 	add	r2,r3,r2
 800b5ac:	200f883a 	mov	r7,r4
 800b5b0:	3007883a 	mov	r3,r6
 800b5b4:	213fffc4 	addi	r4,r4,-1
 800b5b8:	40bff82e 	bgeu	r8,r2,800b59c <__alt_data_end+0xf800b59c>
 800b5bc:	29c00215 	stw	r7,8(r5)
 800b5c0:	28c00315 	stw	r3,12(r5)
 800b5c4:	28800415 	stw	r2,16(r5)
 800b5c8:	f800283a 	ret
 800b5cc:	01c1ffc4 	movi	r7,2047
 800b5d0:	21c00f26 	beq	r4,r7,800b610 <__unpack_d+0xd4>
 800b5d4:	180cd63a 	srli	r6,r3,24
 800b5d8:	1004923a 	slli	r2,r2,8
 800b5dc:	213f0044 	addi	r4,r4,-1023
 800b5e0:	1806923a 	slli	r3,r3,8
 800b5e4:	3084b03a 	or	r2,r6,r2
 800b5e8:	29000215 	stw	r4,8(r5)
 800b5ec:	010000c4 	movi	r4,3
 800b5f0:	10840034 	orhi	r2,r2,4096
 800b5f4:	29000015 	stw	r4,0(r5)
 800b5f8:	28c00315 	stw	r3,12(r5)
 800b5fc:	28800415 	stw	r2,16(r5)
 800b600:	f800283a 	ret
 800b604:	00800084 	movi	r2,2
 800b608:	28800015 	stw	r2,0(r5)
 800b60c:	f800283a 	ret
 800b610:	1888b03a 	or	r4,r3,r2
 800b614:	20000526 	beq	r4,zero,800b62c <__unpack_d+0xf0>
 800b618:	3180022c 	andhi	r6,r6,8
 800b61c:	30000626 	beq	r6,zero,800b638 <__unpack_d+0xfc>
 800b620:	01000044 	movi	r4,1
 800b624:	29000015 	stw	r4,0(r5)
 800b628:	003ff306 	br	800b5f8 <__alt_data_end+0xf800b5f8>
 800b62c:	00800104 	movi	r2,4
 800b630:	28800015 	stw	r2,0(r5)
 800b634:	f800283a 	ret
 800b638:	28000015 	stw	zero,0(r5)
 800b63c:	003fee06 	br	800b5f8 <__alt_data_end+0xf800b5f8>

0800b640 <__fpcmp_parts_d>:
 800b640:	20c00017 	ldw	r3,0(r4)
 800b644:	00800044 	movi	r2,1
 800b648:	10c0142e 	bgeu	r2,r3,800b69c <__fpcmp_parts_d+0x5c>
 800b64c:	29800017 	ldw	r6,0(r5)
 800b650:	1180122e 	bgeu	r2,r6,800b69c <__fpcmp_parts_d+0x5c>
 800b654:	01c00104 	movi	r7,4
 800b658:	19c02826 	beq	r3,r7,800b6fc <__fpcmp_parts_d+0xbc>
 800b65c:	31c00926 	beq	r6,r7,800b684 <__fpcmp_parts_d+0x44>
 800b660:	01c00084 	movi	r7,2
 800b664:	19c00626 	beq	r3,r7,800b680 <__fpcmp_parts_d+0x40>
 800b668:	31c00a26 	beq	r6,r7,800b694 <__fpcmp_parts_d+0x54>
 800b66c:	20c00117 	ldw	r3,4(r4)
 800b670:	29800117 	ldw	r6,4(r5)
 800b674:	19800b26 	beq	r3,r6,800b6a4 <__fpcmp_parts_d+0x64>
 800b678:	1800041e 	bne	r3,zero,800b68c <__fpcmp_parts_d+0x4c>
 800b67c:	f800283a 	ret
 800b680:	30c01a26 	beq	r6,r3,800b6ec <__fpcmp_parts_d+0xac>
 800b684:	28800117 	ldw	r2,4(r5)
 800b688:	1000041e 	bne	r2,zero,800b69c <__fpcmp_parts_d+0x5c>
 800b68c:	00bfffc4 	movi	r2,-1
 800b690:	f800283a 	ret
 800b694:	20800117 	ldw	r2,4(r4)
 800b698:	103ffc1e 	bne	r2,zero,800b68c <__alt_data_end+0xf800b68c>
 800b69c:	00800044 	movi	r2,1
 800b6a0:	f800283a 	ret
 800b6a4:	21c00217 	ldw	r7,8(r4)
 800b6a8:	29800217 	ldw	r6,8(r5)
 800b6ac:	31c0020e 	bge	r6,r7,800b6b8 <__fpcmp_parts_d+0x78>
 800b6b0:	183ff61e 	bne	r3,zero,800b68c <__alt_data_end+0xf800b68c>
 800b6b4:	f800283a 	ret
 800b6b8:	39800a16 	blt	r7,r6,800b6e4 <__fpcmp_parts_d+0xa4>
 800b6bc:	20800417 	ldw	r2,16(r4)
 800b6c0:	29800417 	ldw	r6,16(r5)
 800b6c4:	21c00317 	ldw	r7,12(r4)
 800b6c8:	29000317 	ldw	r4,12(r5)
 800b6cc:	30800936 	bltu	r6,r2,800b6f4 <__fpcmp_parts_d+0xb4>
 800b6d0:	1180011e 	bne	r2,r6,800b6d8 <__fpcmp_parts_d+0x98>
 800b6d4:	21c00736 	bltu	r4,r7,800b6f4 <__fpcmp_parts_d+0xb4>
 800b6d8:	11800236 	bltu	r2,r6,800b6e4 <__fpcmp_parts_d+0xa4>
 800b6dc:	3080031e 	bne	r6,r2,800b6ec <__fpcmp_parts_d+0xac>
 800b6e0:	3900022e 	bgeu	r7,r4,800b6ec <__fpcmp_parts_d+0xac>
 800b6e4:	183fe926 	beq	r3,zero,800b68c <__alt_data_end+0xf800b68c>
 800b6e8:	003fec06 	br	800b69c <__alt_data_end+0xf800b69c>
 800b6ec:	0005883a 	mov	r2,zero
 800b6f0:	f800283a 	ret
 800b6f4:	183fe926 	beq	r3,zero,800b69c <__alt_data_end+0xf800b69c>
 800b6f8:	003fe406 	br	800b68c <__alt_data_end+0xf800b68c>
 800b6fc:	30ffe51e 	bne	r6,r3,800b694 <__alt_data_end+0xf800b694>
 800b700:	28c00117 	ldw	r3,4(r5)
 800b704:	20800117 	ldw	r2,4(r4)
 800b708:	1885c83a 	sub	r2,r3,r2
 800b70c:	f800283a 	ret

0800b710 <__lshrdi3>:
 800b710:	2005883a 	mov	r2,r4
 800b714:	2807883a 	mov	r3,r5
 800b718:	30000826 	beq	r6,zero,800b73c <__lshrdi3+0x2c>
 800b71c:	01000804 	movi	r4,32
 800b720:	2189c83a 	sub	r4,r4,r6
 800b724:	0100060e 	bge	zero,r4,800b740 <__lshrdi3+0x30>
 800b728:	1184d83a 	srl	r2,r2,r6
 800b72c:	2908983a 	sll	r4,r5,r4
 800b730:	298cd83a 	srl	r6,r5,r6
 800b734:	2084b03a 	or	r2,r4,r2
 800b738:	3007883a 	mov	r3,r6
 800b73c:	f800283a 	ret
 800b740:	0105c83a 	sub	r2,zero,r4
 800b744:	000d883a 	mov	r6,zero
 800b748:	2884d83a 	srl	r2,r5,r2
 800b74c:	3007883a 	mov	r3,r6
 800b750:	003ffa06 	br	800b73c <__alt_data_end+0xf800b73c>

0800b754 <__ashldi3>:
 800b754:	2005883a 	mov	r2,r4
 800b758:	2807883a 	mov	r3,r5
 800b75c:	30000826 	beq	r6,zero,800b780 <__ashldi3+0x2c>
 800b760:	01000804 	movi	r4,32
 800b764:	2189c83a 	sub	r4,r4,r6
 800b768:	0100060e 	bge	zero,r4,800b784 <__ashldi3+0x30>
 800b76c:	1108d83a 	srl	r4,r2,r4
 800b770:	2986983a 	sll	r3,r5,r6
 800b774:	118c983a 	sll	r6,r2,r6
 800b778:	20c6b03a 	or	r3,r4,r3
 800b77c:	3005883a 	mov	r2,r6
 800b780:	f800283a 	ret
 800b784:	0107c83a 	sub	r3,zero,r4
 800b788:	000d883a 	mov	r6,zero
 800b78c:	10c6983a 	sll	r3,r2,r3
 800b790:	3005883a 	mov	r2,r6
 800b794:	003ffa06 	br	800b780 <__alt_data_end+0xf800b780>

0800b798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b798:	defffe04 	addi	sp,sp,-8
 800b79c:	dfc00115 	stw	ra,4(sp)
 800b7a0:	df000015 	stw	fp,0(sp)
 800b7a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b7a8:	00820074 	movhi	r2,2049
 800b7ac:	10812704 	addi	r2,r2,1180
 800b7b0:	10800017 	ldw	r2,0(r2)
 800b7b4:	10000526 	beq	r2,zero,800b7cc <alt_get_errno+0x34>
 800b7b8:	00820074 	movhi	r2,2049
 800b7bc:	10812704 	addi	r2,r2,1180
 800b7c0:	10800017 	ldw	r2,0(r2)
 800b7c4:	103ee83a 	callr	r2
 800b7c8:	00000206 	br	800b7d4 <alt_get_errno+0x3c>
 800b7cc:	00820074 	movhi	r2,2049
 800b7d0:	1087c904 	addi	r2,r2,7972
}
 800b7d4:	e037883a 	mov	sp,fp
 800b7d8:	dfc00117 	ldw	ra,4(sp)
 800b7dc:	df000017 	ldw	fp,0(sp)
 800b7e0:	dec00204 	addi	sp,sp,8
 800b7e4:	f800283a 	ret

0800b7e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800b7e8:	defffb04 	addi	sp,sp,-20
 800b7ec:	dfc00415 	stw	ra,16(sp)
 800b7f0:	df000315 	stw	fp,12(sp)
 800b7f4:	df000304 	addi	fp,sp,12
 800b7f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800b7fc:	e0bfff17 	ldw	r2,-4(fp)
 800b800:	10000716 	blt	r2,zero,800b820 <close+0x38>
 800b804:	e13fff17 	ldw	r4,-4(fp)
 800b808:	01400304 	movi	r5,12
 800b80c:	800b1340 	call	800b134 <__mulsi3>
 800b810:	00c20074 	movhi	r3,2049
 800b814:	18fca504 	addi	r3,r3,-3436
 800b818:	10c5883a 	add	r2,r2,r3
 800b81c:	00000106 	br	800b824 <close+0x3c>
 800b820:	0005883a 	mov	r2,zero
 800b824:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800b828:	e0bffd17 	ldw	r2,-12(fp)
 800b82c:	10001826 	beq	r2,zero,800b890 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800b830:	e0bffd17 	ldw	r2,-12(fp)
 800b834:	10800017 	ldw	r2,0(r2)
 800b838:	10800417 	ldw	r2,16(r2)
 800b83c:	10000626 	beq	r2,zero,800b858 <close+0x70>
 800b840:	e0bffd17 	ldw	r2,-12(fp)
 800b844:	10800017 	ldw	r2,0(r2)
 800b848:	10800417 	ldw	r2,16(r2)
 800b84c:	e13ffd17 	ldw	r4,-12(fp)
 800b850:	103ee83a 	callr	r2
 800b854:	00000106 	br	800b85c <close+0x74>
 800b858:	0005883a 	mov	r2,zero
 800b85c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800b860:	e13fff17 	ldw	r4,-4(fp)
 800b864:	800bee00 	call	800bee0 <alt_release_fd>
    if (rval < 0)
 800b868:	e0bffe17 	ldw	r2,-8(fp)
 800b86c:	1000060e 	bge	r2,zero,800b888 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800b870:	800b7980 	call	800b798 <alt_get_errno>
 800b874:	e0fffe17 	ldw	r3,-8(fp)
 800b878:	00c7c83a 	sub	r3,zero,r3
 800b87c:	10c00015 	stw	r3,0(r2)
      return -1;
 800b880:	00bfffc4 	movi	r2,-1
 800b884:	00000606 	br	800b8a0 <close+0xb8>
    }
    return 0;
 800b888:	0005883a 	mov	r2,zero
 800b88c:	00000406 	br	800b8a0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b890:	800b7980 	call	800b798 <alt_get_errno>
 800b894:	00c01444 	movi	r3,81
 800b898:	10c00015 	stw	r3,0(r2)
    return -1;
 800b89c:	00bfffc4 	movi	r2,-1
  }
}
 800b8a0:	e037883a 	mov	sp,fp
 800b8a4:	dfc00117 	ldw	ra,4(sp)
 800b8a8:	df000017 	ldw	fp,0(sp)
 800b8ac:	dec00204 	addi	sp,sp,8
 800b8b0:	f800283a 	ret

0800b8b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800b8b4:	defffc04 	addi	sp,sp,-16
 800b8b8:	df000315 	stw	fp,12(sp)
 800b8bc:	df000304 	addi	fp,sp,12
 800b8c0:	e13ffd15 	stw	r4,-12(fp)
 800b8c4:	e17ffe15 	stw	r5,-8(fp)
 800b8c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800b8cc:	e0bfff17 	ldw	r2,-4(fp)
}
 800b8d0:	e037883a 	mov	sp,fp
 800b8d4:	df000017 	ldw	fp,0(sp)
 800b8d8:	dec00104 	addi	sp,sp,4
 800b8dc:	f800283a 	ret

0800b8e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b8e0:	defffe04 	addi	sp,sp,-8
 800b8e4:	dfc00115 	stw	ra,4(sp)
 800b8e8:	df000015 	stw	fp,0(sp)
 800b8ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b8f0:	00820074 	movhi	r2,2049
 800b8f4:	10812704 	addi	r2,r2,1180
 800b8f8:	10800017 	ldw	r2,0(r2)
 800b8fc:	10000526 	beq	r2,zero,800b914 <alt_get_errno+0x34>
 800b900:	00820074 	movhi	r2,2049
 800b904:	10812704 	addi	r2,r2,1180
 800b908:	10800017 	ldw	r2,0(r2)
 800b90c:	103ee83a 	callr	r2
 800b910:	00000206 	br	800b91c <alt_get_errno+0x3c>
 800b914:	00820074 	movhi	r2,2049
 800b918:	1087c904 	addi	r2,r2,7972
}
 800b91c:	e037883a 	mov	sp,fp
 800b920:	dfc00117 	ldw	ra,4(sp)
 800b924:	df000017 	ldw	fp,0(sp)
 800b928:	dec00204 	addi	sp,sp,8
 800b92c:	f800283a 	ret

0800b930 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800b930:	defffb04 	addi	sp,sp,-20
 800b934:	dfc00415 	stw	ra,16(sp)
 800b938:	df000315 	stw	fp,12(sp)
 800b93c:	df000304 	addi	fp,sp,12
 800b940:	e13ffe15 	stw	r4,-8(fp)
 800b944:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800b948:	e0bffe17 	ldw	r2,-8(fp)
 800b94c:	10000716 	blt	r2,zero,800b96c <fstat+0x3c>
 800b950:	e13ffe17 	ldw	r4,-8(fp)
 800b954:	01400304 	movi	r5,12
 800b958:	800b1340 	call	800b134 <__mulsi3>
 800b95c:	00c20074 	movhi	r3,2049
 800b960:	18fca504 	addi	r3,r3,-3436
 800b964:	10c5883a 	add	r2,r2,r3
 800b968:	00000106 	br	800b970 <fstat+0x40>
 800b96c:	0005883a 	mov	r2,zero
 800b970:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800b974:	e0bffd17 	ldw	r2,-12(fp)
 800b978:	10001026 	beq	r2,zero,800b9bc <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800b97c:	e0bffd17 	ldw	r2,-12(fp)
 800b980:	10800017 	ldw	r2,0(r2)
 800b984:	10800817 	ldw	r2,32(r2)
 800b988:	10000726 	beq	r2,zero,800b9a8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 800b98c:	e0bffd17 	ldw	r2,-12(fp)
 800b990:	10800017 	ldw	r2,0(r2)
 800b994:	10800817 	ldw	r2,32(r2)
 800b998:	e13ffd17 	ldw	r4,-12(fp)
 800b99c:	e17fff17 	ldw	r5,-4(fp)
 800b9a0:	103ee83a 	callr	r2
 800b9a4:	00000906 	br	800b9cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800b9a8:	e0bfff17 	ldw	r2,-4(fp)
 800b9ac:	00c80004 	movi	r3,8192
 800b9b0:	10c00115 	stw	r3,4(r2)
      return 0;
 800b9b4:	0005883a 	mov	r2,zero
 800b9b8:	00000406 	br	800b9cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800b9bc:	800b8e00 	call	800b8e0 <alt_get_errno>
 800b9c0:	00c01444 	movi	r3,81
 800b9c4:	10c00015 	stw	r3,0(r2)
    return -1;
 800b9c8:	00bfffc4 	movi	r2,-1
  }
}
 800b9cc:	e037883a 	mov	sp,fp
 800b9d0:	dfc00117 	ldw	ra,4(sp)
 800b9d4:	df000017 	ldw	fp,0(sp)
 800b9d8:	dec00204 	addi	sp,sp,8
 800b9dc:	f800283a 	ret

0800b9e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800b9e0:	defffe04 	addi	sp,sp,-8
 800b9e4:	dfc00115 	stw	ra,4(sp)
 800b9e8:	df000015 	stw	fp,0(sp)
 800b9ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800b9f0:	00820074 	movhi	r2,2049
 800b9f4:	10812704 	addi	r2,r2,1180
 800b9f8:	10800017 	ldw	r2,0(r2)
 800b9fc:	10000526 	beq	r2,zero,800ba14 <alt_get_errno+0x34>
 800ba00:	00820074 	movhi	r2,2049
 800ba04:	10812704 	addi	r2,r2,1180
 800ba08:	10800017 	ldw	r2,0(r2)
 800ba0c:	103ee83a 	callr	r2
 800ba10:	00000206 	br	800ba1c <alt_get_errno+0x3c>
 800ba14:	00820074 	movhi	r2,2049
 800ba18:	1087c904 	addi	r2,r2,7972
}
 800ba1c:	e037883a 	mov	sp,fp
 800ba20:	dfc00117 	ldw	ra,4(sp)
 800ba24:	df000017 	ldw	fp,0(sp)
 800ba28:	dec00204 	addi	sp,sp,8
 800ba2c:	f800283a 	ret

0800ba30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800ba30:	deffed04 	addi	sp,sp,-76
 800ba34:	dfc01215 	stw	ra,72(sp)
 800ba38:	df001115 	stw	fp,68(sp)
 800ba3c:	df001104 	addi	fp,sp,68
 800ba40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ba44:	e0bfff17 	ldw	r2,-4(fp)
 800ba48:	10000716 	blt	r2,zero,800ba68 <isatty+0x38>
 800ba4c:	e13fff17 	ldw	r4,-4(fp)
 800ba50:	01400304 	movi	r5,12
 800ba54:	800b1340 	call	800b134 <__mulsi3>
 800ba58:	00c20074 	movhi	r3,2049
 800ba5c:	18fca504 	addi	r3,r3,-3436
 800ba60:	10c5883a 	add	r2,r2,r3
 800ba64:	00000106 	br	800ba6c <isatty+0x3c>
 800ba68:	0005883a 	mov	r2,zero
 800ba6c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ba70:	e0bfef17 	ldw	r2,-68(fp)
 800ba74:	10000e26 	beq	r2,zero,800bab0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ba78:	e0bfef17 	ldw	r2,-68(fp)
 800ba7c:	10800017 	ldw	r2,0(r2)
 800ba80:	10800817 	ldw	r2,32(r2)
 800ba84:	1000021e 	bne	r2,zero,800ba90 <isatty+0x60>
    {
      return 1;
 800ba88:	00800044 	movi	r2,1
 800ba8c:	00000c06 	br	800bac0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ba90:	e0bff004 	addi	r2,fp,-64
 800ba94:	e13fff17 	ldw	r4,-4(fp)
 800ba98:	100b883a 	mov	r5,r2
 800ba9c:	800b9300 	call	800b930 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800baa0:	e0bff117 	ldw	r2,-60(fp)
 800baa4:	10880020 	cmpeqi	r2,r2,8192
 800baa8:	10803fcc 	andi	r2,r2,255
 800baac:	00000406 	br	800bac0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800bab0:	800b9e00 	call	800b9e0 <alt_get_errno>
 800bab4:	00c01444 	movi	r3,81
 800bab8:	10c00015 	stw	r3,0(r2)
    return 0;
 800babc:	0005883a 	mov	r2,zero
  }
}
 800bac0:	e037883a 	mov	sp,fp
 800bac4:	dfc00117 	ldw	ra,4(sp)
 800bac8:	df000017 	ldw	fp,0(sp)
 800bacc:	dec00204 	addi	sp,sp,8
 800bad0:	f800283a 	ret

0800bad4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800bad4:	defffc04 	addi	sp,sp,-16
 800bad8:	df000315 	stw	fp,12(sp)
 800badc:	df000304 	addi	fp,sp,12
 800bae0:	e13ffd15 	stw	r4,-12(fp)
 800bae4:	e17ffe15 	stw	r5,-8(fp)
 800bae8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800baec:	e0fffe17 	ldw	r3,-8(fp)
 800baf0:	e0bffd17 	ldw	r2,-12(fp)
 800baf4:	18800e26 	beq	r3,r2,800bb30 <alt_load_section+0x5c>
  {
    while( to != end )
 800baf8:	00000a06 	br	800bb24 <alt_load_section+0x50>
    {
      *to++ = *from++;
 800bafc:	e0bffd17 	ldw	r2,-12(fp)
 800bb00:	10c00017 	ldw	r3,0(r2)
 800bb04:	e0bffe17 	ldw	r2,-8(fp)
 800bb08:	10c00015 	stw	r3,0(r2)
 800bb0c:	e0bffe17 	ldw	r2,-8(fp)
 800bb10:	10800104 	addi	r2,r2,4
 800bb14:	e0bffe15 	stw	r2,-8(fp)
 800bb18:	e0bffd17 	ldw	r2,-12(fp)
 800bb1c:	10800104 	addi	r2,r2,4
 800bb20:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800bb24:	e0fffe17 	ldw	r3,-8(fp)
 800bb28:	e0bfff17 	ldw	r2,-4(fp)
 800bb2c:	18bff31e 	bne	r3,r2,800bafc <__alt_data_end+0xf800bafc>
    {
      *to++ = *from++;
    }
  }
}
 800bb30:	e037883a 	mov	sp,fp
 800bb34:	df000017 	ldw	fp,0(sp)
 800bb38:	dec00104 	addi	sp,sp,4
 800bb3c:	f800283a 	ret

0800bb40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800bb40:	defffe04 	addi	sp,sp,-8
 800bb44:	dfc00115 	stw	ra,4(sp)
 800bb48:	df000015 	stw	fp,0(sp)
 800bb4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800bb50:	01020074 	movhi	r4,2049
 800bb54:	21012c04 	addi	r4,r4,1200
 800bb58:	01420074 	movhi	r5,2049
 800bb5c:	297a9604 	addi	r5,r5,-5544
 800bb60:	01820074 	movhi	r6,2049
 800bb64:	31812c04 	addi	r6,r6,1200
 800bb68:	800bad40 	call	800bad4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800bb6c:	01020034 	movhi	r4,2048
 800bb70:	21000804 	addi	r4,r4,32
 800bb74:	01420034 	movhi	r5,2048
 800bb78:	29400804 	addi	r5,r5,32
 800bb7c:	01820034 	movhi	r6,2048
 800bb80:	31806e04 	addi	r6,r6,440
 800bb84:	800bad40 	call	800bad4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800bb88:	01020074 	movhi	r4,2049
 800bb8c:	2137f104 	addi	r4,r4,-8252
 800bb90:	01420074 	movhi	r5,2049
 800bb94:	2977f104 	addi	r5,r5,-8252
 800bb98:	01820074 	movhi	r6,2049
 800bb9c:	31ba9604 	addi	r6,r6,-5544
 800bba0:	800bad40 	call	800bad4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800bba4:	800cf240 	call	800cf24 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800bba8:	800d0e80 	call	800d0e8 <alt_icache_flush_all>
}
 800bbac:	e037883a 	mov	sp,fp
 800bbb0:	dfc00117 	ldw	ra,4(sp)
 800bbb4:	df000017 	ldw	fp,0(sp)
 800bbb8:	dec00204 	addi	sp,sp,8
 800bbbc:	f800283a 	ret

0800bbc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800bbc0:	defffe04 	addi	sp,sp,-8
 800bbc4:	dfc00115 	stw	ra,4(sp)
 800bbc8:	df000015 	stw	fp,0(sp)
 800bbcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800bbd0:	00820074 	movhi	r2,2049
 800bbd4:	10812704 	addi	r2,r2,1180
 800bbd8:	10800017 	ldw	r2,0(r2)
 800bbdc:	10000526 	beq	r2,zero,800bbf4 <alt_get_errno+0x34>
 800bbe0:	00820074 	movhi	r2,2049
 800bbe4:	10812704 	addi	r2,r2,1180
 800bbe8:	10800017 	ldw	r2,0(r2)
 800bbec:	103ee83a 	callr	r2
 800bbf0:	00000206 	br	800bbfc <alt_get_errno+0x3c>
 800bbf4:	00820074 	movhi	r2,2049
 800bbf8:	1087c904 	addi	r2,r2,7972
}
 800bbfc:	e037883a 	mov	sp,fp
 800bc00:	dfc00117 	ldw	ra,4(sp)
 800bc04:	df000017 	ldw	fp,0(sp)
 800bc08:	dec00204 	addi	sp,sp,8
 800bc0c:	f800283a 	ret

0800bc10 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800bc10:	defff904 	addi	sp,sp,-28
 800bc14:	dfc00615 	stw	ra,24(sp)
 800bc18:	df000515 	stw	fp,20(sp)
 800bc1c:	df000504 	addi	fp,sp,20
 800bc20:	e13ffd15 	stw	r4,-12(fp)
 800bc24:	e17ffe15 	stw	r5,-8(fp)
 800bc28:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800bc2c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800bc30:	e0bffd17 	ldw	r2,-12(fp)
 800bc34:	10000716 	blt	r2,zero,800bc54 <lseek+0x44>
 800bc38:	e13ffd17 	ldw	r4,-12(fp)
 800bc3c:	01400304 	movi	r5,12
 800bc40:	800b1340 	call	800b134 <__mulsi3>
 800bc44:	00c20074 	movhi	r3,2049
 800bc48:	18fca504 	addi	r3,r3,-3436
 800bc4c:	10c5883a 	add	r2,r2,r3
 800bc50:	00000106 	br	800bc58 <lseek+0x48>
 800bc54:	0005883a 	mov	r2,zero
 800bc58:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800bc5c:	e0bffc17 	ldw	r2,-16(fp)
 800bc60:	10001026 	beq	r2,zero,800bca4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800bc64:	e0bffc17 	ldw	r2,-16(fp)
 800bc68:	10800017 	ldw	r2,0(r2)
 800bc6c:	10800717 	ldw	r2,28(r2)
 800bc70:	10000926 	beq	r2,zero,800bc98 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800bc74:	e0bffc17 	ldw	r2,-16(fp)
 800bc78:	10800017 	ldw	r2,0(r2)
 800bc7c:	10800717 	ldw	r2,28(r2)
 800bc80:	e13ffc17 	ldw	r4,-16(fp)
 800bc84:	e17ffe17 	ldw	r5,-8(fp)
 800bc88:	e1bfff17 	ldw	r6,-4(fp)
 800bc8c:	103ee83a 	callr	r2
 800bc90:	e0bffb15 	stw	r2,-20(fp)
 800bc94:	00000506 	br	800bcac <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800bc98:	00bfde84 	movi	r2,-134
 800bc9c:	e0bffb15 	stw	r2,-20(fp)
 800bca0:	00000206 	br	800bcac <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 800bca4:	00bfebc4 	movi	r2,-81
 800bca8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800bcac:	e0bffb17 	ldw	r2,-20(fp)
 800bcb0:	1000060e 	bge	r2,zero,800bccc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800bcb4:	800bbc00 	call	800bbc0 <alt_get_errno>
 800bcb8:	e0fffb17 	ldw	r3,-20(fp)
 800bcbc:	00c7c83a 	sub	r3,zero,r3
 800bcc0:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800bcc4:	00bfffc4 	movi	r2,-1
 800bcc8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800bccc:	e0bffb17 	ldw	r2,-20(fp)
}
 800bcd0:	e037883a 	mov	sp,fp
 800bcd4:	dfc00117 	ldw	ra,4(sp)
 800bcd8:	df000017 	ldw	fp,0(sp)
 800bcdc:	dec00204 	addi	sp,sp,8
 800bce0:	f800283a 	ret

0800bce4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800bce4:	defffd04 	addi	sp,sp,-12
 800bce8:	dfc00215 	stw	ra,8(sp)
 800bcec:	df000115 	stw	fp,4(sp)
 800bcf0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800bcf4:	0009883a 	mov	r4,zero
 800bcf8:	800c1b80 	call	800c1b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800bcfc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800bd00:	800c1ec0 	call	800c1ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800bd04:	01020074 	movhi	r4,2049
 800bd08:	213a8e04 	addi	r4,r4,-5576
 800bd0c:	01420074 	movhi	r5,2049
 800bd10:	297a8e04 	addi	r5,r5,-5576
 800bd14:	01820074 	movhi	r6,2049
 800bd18:	31ba8e04 	addi	r6,r6,-5576
 800bd1c:	800d4ac0 	call	800d4ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800bd20:	800d0300 	call	800d030 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800bd24:	01020074 	movhi	r4,2049
 800bd28:	21342304 	addi	r4,r4,-12148
 800bd2c:	800dbf00 	call	800dbf0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800bd30:	d126ad17 	ldw	r4,-25932(gp)
 800bd34:	d0e6ae17 	ldw	r3,-25928(gp)
 800bd38:	d0a6af17 	ldw	r2,-25924(gp)
 800bd3c:	180b883a 	mov	r5,r3
 800bd40:	100d883a 	mov	r6,r2
 800bd44:	80001f40 	call	80001f4 <main>
 800bd48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800bd4c:	01000044 	movi	r4,1
 800bd50:	800b7e80 	call	800b7e8 <close>
  exit (result);
 800bd54:	e13fff17 	ldw	r4,-4(fp)
 800bd58:	800dc040 	call	800dc04 <exit>

0800bd5c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800bd5c:	defffe04 	addi	sp,sp,-8
 800bd60:	df000115 	stw	fp,4(sp)
 800bd64:	df000104 	addi	fp,sp,4
 800bd68:	e13fff15 	stw	r4,-4(fp)
}
 800bd6c:	e037883a 	mov	sp,fp
 800bd70:	df000017 	ldw	fp,0(sp)
 800bd74:	dec00104 	addi	sp,sp,4
 800bd78:	f800283a 	ret

0800bd7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800bd7c:	defffe04 	addi	sp,sp,-8
 800bd80:	df000115 	stw	fp,4(sp)
 800bd84:	df000104 	addi	fp,sp,4
 800bd88:	e13fff15 	stw	r4,-4(fp)
}
 800bd8c:	e037883a 	mov	sp,fp
 800bd90:	df000017 	ldw	fp,0(sp)
 800bd94:	dec00104 	addi	sp,sp,4
 800bd98:	f800283a 	ret

0800bd9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800bd9c:	defffe04 	addi	sp,sp,-8
 800bda0:	dfc00115 	stw	ra,4(sp)
 800bda4:	df000015 	stw	fp,0(sp)
 800bda8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800bdac:	00820074 	movhi	r2,2049
 800bdb0:	10812704 	addi	r2,r2,1180
 800bdb4:	10800017 	ldw	r2,0(r2)
 800bdb8:	10000526 	beq	r2,zero,800bdd0 <alt_get_errno+0x34>
 800bdbc:	00820074 	movhi	r2,2049
 800bdc0:	10812704 	addi	r2,r2,1180
 800bdc4:	10800017 	ldw	r2,0(r2)
 800bdc8:	103ee83a 	callr	r2
 800bdcc:	00000206 	br	800bdd8 <alt_get_errno+0x3c>
 800bdd0:	00820074 	movhi	r2,2049
 800bdd4:	1087c904 	addi	r2,r2,7972
}
 800bdd8:	e037883a 	mov	sp,fp
 800bddc:	dfc00117 	ldw	ra,4(sp)
 800bde0:	df000017 	ldw	fp,0(sp)
 800bde4:	dec00204 	addi	sp,sp,8
 800bde8:	f800283a 	ret

0800bdec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800bdec:	defff904 	addi	sp,sp,-28
 800bdf0:	dfc00615 	stw	ra,24(sp)
 800bdf4:	df000515 	stw	fp,20(sp)
 800bdf8:	df000504 	addi	fp,sp,20
 800bdfc:	e13ffd15 	stw	r4,-12(fp)
 800be00:	e17ffe15 	stw	r5,-8(fp)
 800be04:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800be08:	e0bffd17 	ldw	r2,-12(fp)
 800be0c:	10000716 	blt	r2,zero,800be2c <read+0x40>
 800be10:	e13ffd17 	ldw	r4,-12(fp)
 800be14:	01400304 	movi	r5,12
 800be18:	800b1340 	call	800b134 <__mulsi3>
 800be1c:	00c20074 	movhi	r3,2049
 800be20:	18fca504 	addi	r3,r3,-3436
 800be24:	10c5883a 	add	r2,r2,r3
 800be28:	00000106 	br	800be30 <read+0x44>
 800be2c:	0005883a 	mov	r2,zero
 800be30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800be34:	e0bffb17 	ldw	r2,-20(fp)
 800be38:	10002026 	beq	r2,zero,800bebc <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800be3c:	e0bffb17 	ldw	r2,-20(fp)
 800be40:	10800217 	ldw	r2,8(r2)
 800be44:	108000cc 	andi	r2,r2,3
 800be48:	10800060 	cmpeqi	r2,r2,1
 800be4c:	1000171e 	bne	r2,zero,800beac <read+0xc0>
        (fd->dev->read))
 800be50:	e0bffb17 	ldw	r2,-20(fp)
 800be54:	10800017 	ldw	r2,0(r2)
 800be58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800be5c:	10001326 	beq	r2,zero,800beac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800be60:	e0bffb17 	ldw	r2,-20(fp)
 800be64:	10800017 	ldw	r2,0(r2)
 800be68:	10c00517 	ldw	r3,20(r2)
 800be6c:	e0bfff17 	ldw	r2,-4(fp)
 800be70:	e13ffb17 	ldw	r4,-20(fp)
 800be74:	e17ffe17 	ldw	r5,-8(fp)
 800be78:	100d883a 	mov	r6,r2
 800be7c:	183ee83a 	callr	r3
 800be80:	e0bffc15 	stw	r2,-16(fp)
 800be84:	e0bffc17 	ldw	r2,-16(fp)
 800be88:	1000060e 	bge	r2,zero,800bea4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800be8c:	800bd9c0 	call	800bd9c <alt_get_errno>
 800be90:	e0fffc17 	ldw	r3,-16(fp)
 800be94:	00c7c83a 	sub	r3,zero,r3
 800be98:	10c00015 	stw	r3,0(r2)
          return -1;
 800be9c:	00bfffc4 	movi	r2,-1
 800bea0:	00000a06 	br	800becc <read+0xe0>
        }
        return rval;
 800bea4:	e0bffc17 	ldw	r2,-16(fp)
 800bea8:	00000806 	br	800becc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800beac:	800bd9c0 	call	800bd9c <alt_get_errno>
 800beb0:	00c00344 	movi	r3,13
 800beb4:	10c00015 	stw	r3,0(r2)
 800beb8:	00000306 	br	800bec8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800bebc:	800bd9c0 	call	800bd9c <alt_get_errno>
 800bec0:	00c01444 	movi	r3,81
 800bec4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800bec8:	00bfffc4 	movi	r2,-1
}
 800becc:	e037883a 	mov	sp,fp
 800bed0:	dfc00117 	ldw	ra,4(sp)
 800bed4:	df000017 	ldw	fp,0(sp)
 800bed8:	dec00204 	addi	sp,sp,8
 800bedc:	f800283a 	ret

0800bee0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800bee0:	defffc04 	addi	sp,sp,-16
 800bee4:	dfc00315 	stw	ra,12(sp)
 800bee8:	df000215 	stw	fp,8(sp)
 800beec:	dc000115 	stw	r16,4(sp)
 800bef0:	df000104 	addi	fp,sp,4
 800bef4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800bef8:	e0bfff17 	ldw	r2,-4(fp)
 800befc:	108000d0 	cmplti	r2,r2,3
 800bf00:	1000111e 	bne	r2,zero,800bf48 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800bf04:	04020074 	movhi	r16,2049
 800bf08:	843ca504 	addi	r16,r16,-3436
 800bf0c:	e0bfff17 	ldw	r2,-4(fp)
 800bf10:	1009883a 	mov	r4,r2
 800bf14:	01400304 	movi	r5,12
 800bf18:	800b1340 	call	800b134 <__mulsi3>
 800bf1c:	8085883a 	add	r2,r16,r2
 800bf20:	10800204 	addi	r2,r2,8
 800bf24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800bf28:	04020074 	movhi	r16,2049
 800bf2c:	843ca504 	addi	r16,r16,-3436
 800bf30:	e0bfff17 	ldw	r2,-4(fp)
 800bf34:	1009883a 	mov	r4,r2
 800bf38:	01400304 	movi	r5,12
 800bf3c:	800b1340 	call	800b134 <__mulsi3>
 800bf40:	8085883a 	add	r2,r16,r2
 800bf44:	10000015 	stw	zero,0(r2)
  }
}
 800bf48:	e037883a 	mov	sp,fp
 800bf4c:	dfc00217 	ldw	ra,8(sp)
 800bf50:	df000117 	ldw	fp,4(sp)
 800bf54:	dc000017 	ldw	r16,0(sp)
 800bf58:	dec00304 	addi	sp,sp,12
 800bf5c:	f800283a 	ret

0800bf60 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800bf60:	defff904 	addi	sp,sp,-28
 800bf64:	df000615 	stw	fp,24(sp)
 800bf68:	df000604 	addi	fp,sp,24
 800bf6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800bf70:	0005303a 	rdctl	r2,status
 800bf74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bf78:	e0fffc17 	ldw	r3,-16(fp)
 800bf7c:	00bfff84 	movi	r2,-2
 800bf80:	1884703a 	and	r2,r3,r2
 800bf84:	1001703a 	wrctl	status,r2
  
  return context;
 800bf88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800bf8c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800bf90:	d0a00b17 	ldw	r2,-32724(gp)
 800bf94:	10c000c4 	addi	r3,r2,3
 800bf98:	00bfff04 	movi	r2,-4
 800bf9c:	1884703a 	and	r2,r3,r2
 800bfa0:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800bfa4:	d0e00b17 	ldw	r3,-32724(gp)
 800bfa8:	e0bfff17 	ldw	r2,-4(fp)
 800bfac:	1885883a 	add	r2,r3,r2
 800bfb0:	00c40034 	movhi	r3,4096
 800bfb4:	18c00004 	addi	r3,r3,0
 800bfb8:	1880062e 	bgeu	r3,r2,800bfd4 <sbrk+0x74>
 800bfbc:	e0bffa17 	ldw	r2,-24(fp)
 800bfc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800bfc4:	e0bffd17 	ldw	r2,-12(fp)
 800bfc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800bfcc:	00bfffc4 	movi	r2,-1
 800bfd0:	00000b06 	br	800c000 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800bfd4:	d0a00b17 	ldw	r2,-32724(gp)
 800bfd8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800bfdc:	d0e00b17 	ldw	r3,-32724(gp)
 800bfe0:	e0bfff17 	ldw	r2,-4(fp)
 800bfe4:	1885883a 	add	r2,r3,r2
 800bfe8:	d0a00b15 	stw	r2,-32724(gp)
 800bfec:	e0bffa17 	ldw	r2,-24(fp)
 800bff0:	e0bffe15 	stw	r2,-8(fp)
 800bff4:	e0bffe17 	ldw	r2,-8(fp)
 800bff8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800bffc:	e0bffb17 	ldw	r2,-20(fp)
} 
 800c000:	e037883a 	mov	sp,fp
 800c004:	df000017 	ldw	fp,0(sp)
 800c008:	dec00104 	addi	sp,sp,4
 800c00c:	f800283a 	ret

0800c010 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800c010:	defffd04 	addi	sp,sp,-12
 800c014:	dfc00215 	stw	ra,8(sp)
 800c018:	df000115 	stw	fp,4(sp)
 800c01c:	df000104 	addi	fp,sp,4
 800c020:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800c024:	e13fff17 	ldw	r4,-4(fp)
 800c028:	800cdd00 	call	800cdd0 <alt_busy_sleep>
}
 800c02c:	e037883a 	mov	sp,fp
 800c030:	dfc00117 	ldw	ra,4(sp)
 800c034:	df000017 	ldw	fp,0(sp)
 800c038:	dec00204 	addi	sp,sp,8
 800c03c:	f800283a 	ret

0800c040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c040:	defffe04 	addi	sp,sp,-8
 800c044:	dfc00115 	stw	ra,4(sp)
 800c048:	df000015 	stw	fp,0(sp)
 800c04c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c050:	00820074 	movhi	r2,2049
 800c054:	10812704 	addi	r2,r2,1180
 800c058:	10800017 	ldw	r2,0(r2)
 800c05c:	10000526 	beq	r2,zero,800c074 <alt_get_errno+0x34>
 800c060:	00820074 	movhi	r2,2049
 800c064:	10812704 	addi	r2,r2,1180
 800c068:	10800017 	ldw	r2,0(r2)
 800c06c:	103ee83a 	callr	r2
 800c070:	00000206 	br	800c07c <alt_get_errno+0x3c>
 800c074:	00820074 	movhi	r2,2049
 800c078:	1087c904 	addi	r2,r2,7972
}
 800c07c:	e037883a 	mov	sp,fp
 800c080:	dfc00117 	ldw	ra,4(sp)
 800c084:	df000017 	ldw	fp,0(sp)
 800c088:	dec00204 	addi	sp,sp,8
 800c08c:	f800283a 	ret

0800c090 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800c090:	defff904 	addi	sp,sp,-28
 800c094:	dfc00615 	stw	ra,24(sp)
 800c098:	df000515 	stw	fp,20(sp)
 800c09c:	df000504 	addi	fp,sp,20
 800c0a0:	e13ffd15 	stw	r4,-12(fp)
 800c0a4:	e17ffe15 	stw	r5,-8(fp)
 800c0a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800c0ac:	e0bffd17 	ldw	r2,-12(fp)
 800c0b0:	10000716 	blt	r2,zero,800c0d0 <write+0x40>
 800c0b4:	e13ffd17 	ldw	r4,-12(fp)
 800c0b8:	01400304 	movi	r5,12
 800c0bc:	800b1340 	call	800b134 <__mulsi3>
 800c0c0:	00c20074 	movhi	r3,2049
 800c0c4:	18fca504 	addi	r3,r3,-3436
 800c0c8:	10c5883a 	add	r2,r2,r3
 800c0cc:	00000106 	br	800c0d4 <write+0x44>
 800c0d0:	0005883a 	mov	r2,zero
 800c0d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800c0d8:	e0bffb17 	ldw	r2,-20(fp)
 800c0dc:	10001f26 	beq	r2,zero,800c15c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800c0e0:	e0bffb17 	ldw	r2,-20(fp)
 800c0e4:	10800217 	ldw	r2,8(r2)
 800c0e8:	108000cc 	andi	r2,r2,3
 800c0ec:	10001726 	beq	r2,zero,800c14c <write+0xbc>
 800c0f0:	e0bffb17 	ldw	r2,-20(fp)
 800c0f4:	10800017 	ldw	r2,0(r2)
 800c0f8:	10800617 	ldw	r2,24(r2)
 800c0fc:	10001326 	beq	r2,zero,800c14c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800c100:	e0bffb17 	ldw	r2,-20(fp)
 800c104:	10800017 	ldw	r2,0(r2)
 800c108:	10c00617 	ldw	r3,24(r2)
 800c10c:	e0bfff17 	ldw	r2,-4(fp)
 800c110:	e13ffb17 	ldw	r4,-20(fp)
 800c114:	e17ffe17 	ldw	r5,-8(fp)
 800c118:	100d883a 	mov	r6,r2
 800c11c:	183ee83a 	callr	r3
 800c120:	e0bffc15 	stw	r2,-16(fp)
 800c124:	e0bffc17 	ldw	r2,-16(fp)
 800c128:	1000060e 	bge	r2,zero,800c144 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800c12c:	800c0400 	call	800c040 <alt_get_errno>
 800c130:	e0fffc17 	ldw	r3,-16(fp)
 800c134:	00c7c83a 	sub	r3,zero,r3
 800c138:	10c00015 	stw	r3,0(r2)
        return -1;
 800c13c:	00bfffc4 	movi	r2,-1
 800c140:	00000a06 	br	800c16c <write+0xdc>
      }
      return rval;
 800c144:	e0bffc17 	ldw	r2,-16(fp)
 800c148:	00000806 	br	800c16c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800c14c:	800c0400 	call	800c040 <alt_get_errno>
 800c150:	00c00344 	movi	r3,13
 800c154:	10c00015 	stw	r3,0(r2)
 800c158:	00000306 	br	800c168 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800c15c:	800c0400 	call	800c040 <alt_get_errno>
 800c160:	00c01444 	movi	r3,81
 800c164:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800c168:	00bfffc4 	movi	r2,-1
}
 800c16c:	e037883a 	mov	sp,fp
 800c170:	dfc00117 	ldw	ra,4(sp)
 800c174:	df000017 	ldw	fp,0(sp)
 800c178:	dec00204 	addi	sp,sp,8
 800c17c:	f800283a 	ret

0800c180 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800c180:	defffd04 	addi	sp,sp,-12
 800c184:	dfc00215 	stw	ra,8(sp)
 800c188:	df000115 	stw	fp,4(sp)
 800c18c:	df000104 	addi	fp,sp,4
 800c190:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800c194:	e13fff17 	ldw	r4,-4(fp)
 800c198:	01420074 	movhi	r5,2049
 800c19c:	29412404 	addi	r5,r5,1168
 800c1a0:	800cf900 	call	800cf90 <alt_dev_llist_insert>
}
 800c1a4:	e037883a 	mov	sp,fp
 800c1a8:	dfc00117 	ldw	ra,4(sp)
 800c1ac:	df000017 	ldw	fp,0(sp)
 800c1b0:	dec00204 	addi	sp,sp,8
 800c1b4:	f800283a 	ret

0800c1b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800c1b8:	defffd04 	addi	sp,sp,-12
 800c1bc:	dfc00215 	stw	ra,8(sp)
 800c1c0:	df000115 	stw	fp,4(sp)
 800c1c4:	df000104 	addi	fp,sp,4
 800c1c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 800c1cc:	800d9580 	call	800d958 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800c1d0:	00800044 	movi	r2,1
 800c1d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800c1d8:	e037883a 	mov	sp,fp
 800c1dc:	dfc00117 	ldw	ra,4(sp)
 800c1e0:	df000017 	ldw	fp,0(sp)
 800c1e4:	dec00204 	addi	sp,sp,8
 800c1e8:	f800283a 	ret

0800c1ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800c1ec:	defffe04 	addi	sp,sp,-8
 800c1f0:	dfc00115 	stw	ra,4(sp)
 800c1f4:	df000015 	stw	fp,0(sp)
 800c1f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800c1fc:	01020074 	movhi	r4,2049
 800c200:	213d0f04 	addi	r4,r4,-3012
 800c204:	000b883a 	mov	r5,zero
 800c208:	01800144 	movi	r6,5
 800c20c:	800c3940 	call	800c394 <altera_avalon_jtag_uart_init>
 800c210:	01020074 	movhi	r4,2049
 800c214:	213d0504 	addi	r4,r4,-3052
 800c218:	800c1800 	call	800c180 <alt_dev_reg>
}
 800c21c:	e037883a 	mov	sp,fp
 800c220:	dfc00117 	ldw	ra,4(sp)
 800c224:	df000017 	ldw	fp,0(sp)
 800c228:	dec00204 	addi	sp,sp,8
 800c22c:	f800283a 	ret

0800c230 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800c230:	defffa04 	addi	sp,sp,-24
 800c234:	dfc00515 	stw	ra,20(sp)
 800c238:	df000415 	stw	fp,16(sp)
 800c23c:	df000404 	addi	fp,sp,16
 800c240:	e13ffd15 	stw	r4,-12(fp)
 800c244:	e17ffe15 	stw	r5,-8(fp)
 800c248:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c24c:	e0bffd17 	ldw	r2,-12(fp)
 800c250:	10800017 	ldw	r2,0(r2)
 800c254:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800c258:	e0bffc17 	ldw	r2,-16(fp)
 800c25c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 800c260:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800c264:	10800217 	ldw	r2,8(r2)
 800c268:	1809883a 	mov	r4,r3
 800c26c:	e17ffe17 	ldw	r5,-8(fp)
 800c270:	e1bfff17 	ldw	r6,-4(fp)
 800c274:	100f883a 	mov	r7,r2
 800c278:	800c8580 	call	800c858 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800c27c:	e037883a 	mov	sp,fp
 800c280:	dfc00117 	ldw	ra,4(sp)
 800c284:	df000017 	ldw	fp,0(sp)
 800c288:	dec00204 	addi	sp,sp,8
 800c28c:	f800283a 	ret

0800c290 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800c290:	defffa04 	addi	sp,sp,-24
 800c294:	dfc00515 	stw	ra,20(sp)
 800c298:	df000415 	stw	fp,16(sp)
 800c29c:	df000404 	addi	fp,sp,16
 800c2a0:	e13ffd15 	stw	r4,-12(fp)
 800c2a4:	e17ffe15 	stw	r5,-8(fp)
 800c2a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c2ac:	e0bffd17 	ldw	r2,-12(fp)
 800c2b0:	10800017 	ldw	r2,0(r2)
 800c2b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800c2b8:	e0bffc17 	ldw	r2,-16(fp)
 800c2bc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 800c2c0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800c2c4:	10800217 	ldw	r2,8(r2)
 800c2c8:	1809883a 	mov	r4,r3
 800c2cc:	e17ffe17 	ldw	r5,-8(fp)
 800c2d0:	e1bfff17 	ldw	r6,-4(fp)
 800c2d4:	100f883a 	mov	r7,r2
 800c2d8:	800ca700 	call	800ca70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800c2dc:	e037883a 	mov	sp,fp
 800c2e0:	dfc00117 	ldw	ra,4(sp)
 800c2e4:	df000017 	ldw	fp,0(sp)
 800c2e8:	dec00204 	addi	sp,sp,8
 800c2ec:	f800283a 	ret

0800c2f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800c2f0:	defffc04 	addi	sp,sp,-16
 800c2f4:	dfc00315 	stw	ra,12(sp)
 800c2f8:	df000215 	stw	fp,8(sp)
 800c2fc:	df000204 	addi	fp,sp,8
 800c300:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800c304:	e0bfff17 	ldw	r2,-4(fp)
 800c308:	10800017 	ldw	r2,0(r2)
 800c30c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800c310:	e0bffe17 	ldw	r2,-8(fp)
 800c314:	10c00a04 	addi	r3,r2,40
 800c318:	e0bfff17 	ldw	r2,-4(fp)
 800c31c:	10800217 	ldw	r2,8(r2)
 800c320:	1809883a 	mov	r4,r3
 800c324:	100b883a 	mov	r5,r2
 800c328:	800c6fc0 	call	800c6fc <altera_avalon_jtag_uart_close>
}
 800c32c:	e037883a 	mov	sp,fp
 800c330:	dfc00117 	ldw	ra,4(sp)
 800c334:	df000017 	ldw	fp,0(sp)
 800c338:	dec00204 	addi	sp,sp,8
 800c33c:	f800283a 	ret

0800c340 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800c340:	defffa04 	addi	sp,sp,-24
 800c344:	dfc00515 	stw	ra,20(sp)
 800c348:	df000415 	stw	fp,16(sp)
 800c34c:	df000404 	addi	fp,sp,16
 800c350:	e13ffd15 	stw	r4,-12(fp)
 800c354:	e17ffe15 	stw	r5,-8(fp)
 800c358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800c35c:	e0bffd17 	ldw	r2,-12(fp)
 800c360:	10800017 	ldw	r2,0(r2)
 800c364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800c368:	e0bffc17 	ldw	r2,-16(fp)
 800c36c:	10800a04 	addi	r2,r2,40
 800c370:	1009883a 	mov	r4,r2
 800c374:	e17ffe17 	ldw	r5,-8(fp)
 800c378:	e1bfff17 	ldw	r6,-4(fp)
 800c37c:	800c7640 	call	800c764 <altera_avalon_jtag_uart_ioctl>
}
 800c380:	e037883a 	mov	sp,fp
 800c384:	dfc00117 	ldw	ra,4(sp)
 800c388:	df000017 	ldw	fp,0(sp)
 800c38c:	dec00204 	addi	sp,sp,8
 800c390:	f800283a 	ret

0800c394 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800c394:	defffa04 	addi	sp,sp,-24
 800c398:	dfc00515 	stw	ra,20(sp)
 800c39c:	df000415 	stw	fp,16(sp)
 800c3a0:	df000404 	addi	fp,sp,16
 800c3a4:	e13ffd15 	stw	r4,-12(fp)
 800c3a8:	e17ffe15 	stw	r5,-8(fp)
 800c3ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c3b0:	e0bffd17 	ldw	r2,-12(fp)
 800c3b4:	00c00044 	movi	r3,1
 800c3b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800c3bc:	e0bffd17 	ldw	r2,-12(fp)
 800c3c0:	10800017 	ldw	r2,0(r2)
 800c3c4:	10800104 	addi	r2,r2,4
 800c3c8:	e0fffd17 	ldw	r3,-12(fp)
 800c3cc:	18c00817 	ldw	r3,32(r3)
 800c3d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800c3d4:	e0fffe17 	ldw	r3,-8(fp)
 800c3d8:	e0bfff17 	ldw	r2,-4(fp)
 800c3dc:	d8000015 	stw	zero,0(sp)
 800c3e0:	1809883a 	mov	r4,r3
 800c3e4:	100b883a 	mov	r5,r2
 800c3e8:	01820074 	movhi	r6,2049
 800c3ec:	31b11504 	addi	r6,r6,-15276
 800c3f0:	e1fffd17 	ldw	r7,-12(fp)
 800c3f4:	800d1040 	call	800d104 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800c3f8:	e0bffd17 	ldw	r2,-12(fp)
 800c3fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800c400:	e0bffd17 	ldw	r2,-12(fp)
 800c404:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800c408:	00820074 	movhi	r2,2049
 800c40c:	1087ce04 	addi	r2,r2,7992
 800c410:	10800017 	ldw	r2,0(r2)
 800c414:	1809883a 	mov	r4,r3
 800c418:	100b883a 	mov	r5,r2
 800c41c:	01820074 	movhi	r6,2049
 800c420:	31b19604 	addi	r6,r6,-14760
 800c424:	e1fffd17 	ldw	r7,-12(fp)
 800c428:	800cc900 	call	800cc90 <alt_alarm_start>
 800c42c:	1000040e 	bge	r2,zero,800c440 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800c430:	e0bffd17 	ldw	r2,-12(fp)
 800c434:	00e00034 	movhi	r3,32768
 800c438:	18ffffc4 	addi	r3,r3,-1
 800c43c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800c440:	e037883a 	mov	sp,fp
 800c444:	dfc00117 	ldw	ra,4(sp)
 800c448:	df000017 	ldw	fp,0(sp)
 800c44c:	dec00204 	addi	sp,sp,8
 800c450:	f800283a 	ret

0800c454 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800c454:	defff804 	addi	sp,sp,-32
 800c458:	df000715 	stw	fp,28(sp)
 800c45c:	df000704 	addi	fp,sp,28
 800c460:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800c464:	e0bfff17 	ldw	r2,-4(fp)
 800c468:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800c46c:	e0bffb17 	ldw	r2,-20(fp)
 800c470:	10800017 	ldw	r2,0(r2)
 800c474:	e0bffc15 	stw	r2,-16(fp)
 800c478:	00000106 	br	800c480 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 800c47c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c480:	e0bffc17 	ldw	r2,-16(fp)
 800c484:	10800104 	addi	r2,r2,4
 800c488:	10800037 	ldwio	r2,0(r2)
 800c48c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800c490:	e0bffd17 	ldw	r2,-12(fp)
 800c494:	1080c00c 	andi	r2,r2,768
 800c498:	10006a26 	beq	r2,zero,800c644 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800c49c:	e0bffd17 	ldw	r2,-12(fp)
 800c4a0:	1080400c 	andi	r2,r2,256
 800c4a4:	10003326 	beq	r2,zero,800c574 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800c4a8:	00800074 	movhi	r2,1
 800c4ac:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c4b0:	e0bffb17 	ldw	r2,-20(fp)
 800c4b4:	10800a17 	ldw	r2,40(r2)
 800c4b8:	10800044 	addi	r2,r2,1
 800c4bc:	1081ffcc 	andi	r2,r2,2047
 800c4c0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800c4c4:	e0bffb17 	ldw	r2,-20(fp)
 800c4c8:	10c00b17 	ldw	r3,44(r2)
 800c4cc:	e0bffe17 	ldw	r2,-8(fp)
 800c4d0:	18801426 	beq	r3,r2,800c524 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800c4d4:	e0bffc17 	ldw	r2,-16(fp)
 800c4d8:	10800037 	ldwio	r2,0(r2)
 800c4dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800c4e0:	e0bff917 	ldw	r2,-28(fp)
 800c4e4:	10a0000c 	andi	r2,r2,32768
 800c4e8:	10001026 	beq	r2,zero,800c52c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800c4ec:	e0bffb17 	ldw	r2,-20(fp)
 800c4f0:	10800a17 	ldw	r2,40(r2)
 800c4f4:	e0fff917 	ldw	r3,-28(fp)
 800c4f8:	e13ffb17 	ldw	r4,-20(fp)
 800c4fc:	2085883a 	add	r2,r4,r2
 800c500:	10800e04 	addi	r2,r2,56
 800c504:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c508:	e0bffb17 	ldw	r2,-20(fp)
 800c50c:	10800a17 	ldw	r2,40(r2)
 800c510:	10800044 	addi	r2,r2,1
 800c514:	10c1ffcc 	andi	r3,r2,2047
 800c518:	e0bffb17 	ldw	r2,-20(fp)
 800c51c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800c520:	003fe306 	br	800c4b0 <__alt_data_end+0xf800c4b0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800c524:	0001883a 	nop
 800c528:	00000106 	br	800c530 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800c52c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800c530:	e0bff917 	ldw	r2,-28(fp)
 800c534:	10bfffec 	andhi	r2,r2,65535
 800c538:	10000e26 	beq	r2,zero,800c574 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c53c:	e0bffb17 	ldw	r2,-20(fp)
 800c540:	10c00817 	ldw	r3,32(r2)
 800c544:	00bfff84 	movi	r2,-2
 800c548:	1886703a 	and	r3,r3,r2
 800c54c:	e0bffb17 	ldw	r2,-20(fp)
 800c550:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800c554:	e0bffc17 	ldw	r2,-16(fp)
 800c558:	10800104 	addi	r2,r2,4
 800c55c:	e0fffb17 	ldw	r3,-20(fp)
 800c560:	18c00817 	ldw	r3,32(r3)
 800c564:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c568:	e0bffc17 	ldw	r2,-16(fp)
 800c56c:	10800104 	addi	r2,r2,4
 800c570:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800c574:	e0bffd17 	ldw	r2,-12(fp)
 800c578:	1080800c 	andi	r2,r2,512
 800c57c:	103fbf26 	beq	r2,zero,800c47c <__alt_data_end+0xf800c47c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800c580:	e0bffd17 	ldw	r2,-12(fp)
 800c584:	1004d43a 	srli	r2,r2,16
 800c588:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c58c:	00001406 	br	800c5e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800c590:	e0bffc17 	ldw	r2,-16(fp)
 800c594:	e0fffb17 	ldw	r3,-20(fp)
 800c598:	18c00d17 	ldw	r3,52(r3)
 800c59c:	e13ffb17 	ldw	r4,-20(fp)
 800c5a0:	20c7883a 	add	r3,r4,r3
 800c5a4:	18c20e04 	addi	r3,r3,2104
 800c5a8:	18c00003 	ldbu	r3,0(r3)
 800c5ac:	18c03fcc 	andi	r3,r3,255
 800c5b0:	18c0201c 	xori	r3,r3,128
 800c5b4:	18ffe004 	addi	r3,r3,-128
 800c5b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c5bc:	e0bffb17 	ldw	r2,-20(fp)
 800c5c0:	10800d17 	ldw	r2,52(r2)
 800c5c4:	10800044 	addi	r2,r2,1
 800c5c8:	10c1ffcc 	andi	r3,r2,2047
 800c5cc:	e0bffb17 	ldw	r2,-20(fp)
 800c5d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800c5d4:	e0bffa17 	ldw	r2,-24(fp)
 800c5d8:	10bfffc4 	addi	r2,r2,-1
 800c5dc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c5e0:	e0bffa17 	ldw	r2,-24(fp)
 800c5e4:	10000526 	beq	r2,zero,800c5fc <altera_avalon_jtag_uart_irq+0x1a8>
 800c5e8:	e0bffb17 	ldw	r2,-20(fp)
 800c5ec:	10c00d17 	ldw	r3,52(r2)
 800c5f0:	e0bffb17 	ldw	r2,-20(fp)
 800c5f4:	10800c17 	ldw	r2,48(r2)
 800c5f8:	18bfe51e 	bne	r3,r2,800c590 <__alt_data_end+0xf800c590>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800c5fc:	e0bffa17 	ldw	r2,-24(fp)
 800c600:	103f9e26 	beq	r2,zero,800c47c <__alt_data_end+0xf800c47c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c604:	e0bffb17 	ldw	r2,-20(fp)
 800c608:	10c00817 	ldw	r3,32(r2)
 800c60c:	00bfff44 	movi	r2,-3
 800c610:	1886703a 	and	r3,r3,r2
 800c614:	e0bffb17 	ldw	r2,-20(fp)
 800c618:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c61c:	e0bffb17 	ldw	r2,-20(fp)
 800c620:	10800017 	ldw	r2,0(r2)
 800c624:	10800104 	addi	r2,r2,4
 800c628:	e0fffb17 	ldw	r3,-20(fp)
 800c62c:	18c00817 	ldw	r3,32(r3)
 800c630:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c634:	e0bffc17 	ldw	r2,-16(fp)
 800c638:	10800104 	addi	r2,r2,4
 800c63c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800c640:	003f8e06 	br	800c47c <__alt_data_end+0xf800c47c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800c644:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800c648:	e037883a 	mov	sp,fp
 800c64c:	df000017 	ldw	fp,0(sp)
 800c650:	dec00104 	addi	sp,sp,4
 800c654:	f800283a 	ret

0800c658 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800c658:	defffc04 	addi	sp,sp,-16
 800c65c:	df000315 	stw	fp,12(sp)
 800c660:	df000304 	addi	fp,sp,12
 800c664:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c668:	e0bfff17 	ldw	r2,-4(fp)
 800c66c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c670:	e0bffd17 	ldw	r2,-12(fp)
 800c674:	10800017 	ldw	r2,0(r2)
 800c678:	10800104 	addi	r2,r2,4
 800c67c:	10800037 	ldwio	r2,0(r2)
 800c680:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c684:	e0bffe17 	ldw	r2,-8(fp)
 800c688:	1081000c 	andi	r2,r2,1024
 800c68c:	10000a26 	beq	r2,zero,800c6b8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c690:	e0bffd17 	ldw	r2,-12(fp)
 800c694:	10800017 	ldw	r2,0(r2)
 800c698:	10800104 	addi	r2,r2,4
 800c69c:	e0fffd17 	ldw	r3,-12(fp)
 800c6a0:	18c00817 	ldw	r3,32(r3)
 800c6a4:	18c10014 	ori	r3,r3,1024
 800c6a8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800c6ac:	e0bffd17 	ldw	r2,-12(fp)
 800c6b0:	10000915 	stw	zero,36(r2)
 800c6b4:	00000a06 	br	800c6e0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c6b8:	e0bffd17 	ldw	r2,-12(fp)
 800c6bc:	10800917 	ldw	r2,36(r2)
 800c6c0:	00e00034 	movhi	r3,32768
 800c6c4:	18ffff04 	addi	r3,r3,-4
 800c6c8:	18800536 	bltu	r3,r2,800c6e0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 800c6cc:	e0bffd17 	ldw	r2,-12(fp)
 800c6d0:	10800917 	ldw	r2,36(r2)
 800c6d4:	10c00044 	addi	r3,r2,1
 800c6d8:	e0bffd17 	ldw	r2,-12(fp)
 800c6dc:	10c00915 	stw	r3,36(r2)
 800c6e0:	00820074 	movhi	r2,2049
 800c6e4:	1087ce04 	addi	r2,r2,7992
 800c6e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c6ec:	e037883a 	mov	sp,fp
 800c6f0:	df000017 	ldw	fp,0(sp)
 800c6f4:	dec00104 	addi	sp,sp,4
 800c6f8:	f800283a 	ret

0800c6fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c6fc:	defffd04 	addi	sp,sp,-12
 800c700:	df000215 	stw	fp,8(sp)
 800c704:	df000204 	addi	fp,sp,8
 800c708:	e13ffe15 	stw	r4,-8(fp)
 800c70c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c710:	00000506 	br	800c728 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c714:	e0bfff17 	ldw	r2,-4(fp)
 800c718:	1090000c 	andi	r2,r2,16384
 800c71c:	10000226 	beq	r2,zero,800c728 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c720:	00bffd44 	movi	r2,-11
 800c724:	00000b06 	br	800c754 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c728:	e0bffe17 	ldw	r2,-8(fp)
 800c72c:	10c00d17 	ldw	r3,52(r2)
 800c730:	e0bffe17 	ldw	r2,-8(fp)
 800c734:	10800c17 	ldw	r2,48(r2)
 800c738:	18800526 	beq	r3,r2,800c750 <altera_avalon_jtag_uart_close+0x54>
 800c73c:	e0bffe17 	ldw	r2,-8(fp)
 800c740:	10c00917 	ldw	r3,36(r2)
 800c744:	e0bffe17 	ldw	r2,-8(fp)
 800c748:	10800117 	ldw	r2,4(r2)
 800c74c:	18bff136 	bltu	r3,r2,800c714 <__alt_data_end+0xf800c714>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800c750:	0005883a 	mov	r2,zero
}
 800c754:	e037883a 	mov	sp,fp
 800c758:	df000017 	ldw	fp,0(sp)
 800c75c:	dec00104 	addi	sp,sp,4
 800c760:	f800283a 	ret

0800c764 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c764:	defffa04 	addi	sp,sp,-24
 800c768:	df000515 	stw	fp,20(sp)
 800c76c:	df000504 	addi	fp,sp,20
 800c770:	e13ffd15 	stw	r4,-12(fp)
 800c774:	e17ffe15 	stw	r5,-8(fp)
 800c778:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800c77c:	00bff9c4 	movi	r2,-25
 800c780:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800c784:	e0bffe17 	ldw	r2,-8(fp)
 800c788:	10da8060 	cmpeqi	r3,r2,27137
 800c78c:	1800031e 	bne	r3,zero,800c79c <altera_avalon_jtag_uart_ioctl+0x38>
 800c790:	109a80a0 	cmpeqi	r2,r2,27138
 800c794:	1000181e 	bne	r2,zero,800c7f8 <altera_avalon_jtag_uart_ioctl+0x94>
 800c798:	00002606 	br	800c834 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800c79c:	e0bffd17 	ldw	r2,-12(fp)
 800c7a0:	10c00117 	ldw	r3,4(r2)
 800c7a4:	00a00034 	movhi	r2,32768
 800c7a8:	10bfffc4 	addi	r2,r2,-1
 800c7ac:	18802226 	beq	r3,r2,800c838 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 800c7b0:	e0bfff17 	ldw	r2,-4(fp)
 800c7b4:	10800017 	ldw	r2,0(r2)
 800c7b8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c7bc:	e0bffc17 	ldw	r2,-16(fp)
 800c7c0:	10800090 	cmplti	r2,r2,2
 800c7c4:	1000061e 	bne	r2,zero,800c7e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800c7c8:	e0fffc17 	ldw	r3,-16(fp)
 800c7cc:	00a00034 	movhi	r2,32768
 800c7d0:	10bfffc4 	addi	r2,r2,-1
 800c7d4:	18800226 	beq	r3,r2,800c7e0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800c7d8:	e0bffc17 	ldw	r2,-16(fp)
 800c7dc:	00000206 	br	800c7e8 <altera_avalon_jtag_uart_ioctl+0x84>
 800c7e0:	00a00034 	movhi	r2,32768
 800c7e4:	10bfff84 	addi	r2,r2,-2
 800c7e8:	e0fffd17 	ldw	r3,-12(fp)
 800c7ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c7f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c7f4:	00001006 	br	800c838 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800c7f8:	e0bffd17 	ldw	r2,-12(fp)
 800c7fc:	10c00117 	ldw	r3,4(r2)
 800c800:	00a00034 	movhi	r2,32768
 800c804:	10bfffc4 	addi	r2,r2,-1
 800c808:	18800d26 	beq	r3,r2,800c840 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c80c:	e0bffd17 	ldw	r2,-12(fp)
 800c810:	10c00917 	ldw	r3,36(r2)
 800c814:	e0bffd17 	ldw	r2,-12(fp)
 800c818:	10800117 	ldw	r2,4(r2)
 800c81c:	1885803a 	cmpltu	r2,r3,r2
 800c820:	10c03fcc 	andi	r3,r2,255
 800c824:	e0bfff17 	ldw	r2,-4(fp)
 800c828:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c82c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800c830:	00000306 	br	800c840 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 800c834:	00000306 	br	800c844 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800c838:	0001883a 	nop
 800c83c:	00000106 	br	800c844 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800c840:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800c844:	e0bffb17 	ldw	r2,-20(fp)
}
 800c848:	e037883a 	mov	sp,fp
 800c84c:	df000017 	ldw	fp,0(sp)
 800c850:	dec00104 	addi	sp,sp,4
 800c854:	f800283a 	ret

0800c858 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c858:	defff304 	addi	sp,sp,-52
 800c85c:	dfc00c15 	stw	ra,48(sp)
 800c860:	df000b15 	stw	fp,44(sp)
 800c864:	df000b04 	addi	fp,sp,44
 800c868:	e13ffc15 	stw	r4,-16(fp)
 800c86c:	e17ffd15 	stw	r5,-12(fp)
 800c870:	e1bffe15 	stw	r6,-8(fp)
 800c874:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800c878:	e0bffd17 	ldw	r2,-12(fp)
 800c87c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c880:	00004706 	br	800c9a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c884:	e0bffc17 	ldw	r2,-16(fp)
 800c888:	10800a17 	ldw	r2,40(r2)
 800c88c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800c890:	e0bffc17 	ldw	r2,-16(fp)
 800c894:	10800b17 	ldw	r2,44(r2)
 800c898:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800c89c:	e0fff717 	ldw	r3,-36(fp)
 800c8a0:	e0bff817 	ldw	r2,-32(fp)
 800c8a4:	18800536 	bltu	r3,r2,800c8bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c8a8:	e0fff717 	ldw	r3,-36(fp)
 800c8ac:	e0bff817 	ldw	r2,-32(fp)
 800c8b0:	1885c83a 	sub	r2,r3,r2
 800c8b4:	e0bff615 	stw	r2,-40(fp)
 800c8b8:	00000406 	br	800c8cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c8bc:	00c20004 	movi	r3,2048
 800c8c0:	e0bff817 	ldw	r2,-32(fp)
 800c8c4:	1885c83a 	sub	r2,r3,r2
 800c8c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800c8cc:	e0bff617 	ldw	r2,-40(fp)
 800c8d0:	10001e26 	beq	r2,zero,800c94c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c8d4:	e0fffe17 	ldw	r3,-8(fp)
 800c8d8:	e0bff617 	ldw	r2,-40(fp)
 800c8dc:	1880022e 	bgeu	r3,r2,800c8e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c8e0:	e0bffe17 	ldw	r2,-8(fp)
 800c8e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c8e8:	e0bff817 	ldw	r2,-32(fp)
 800c8ec:	10800e04 	addi	r2,r2,56
 800c8f0:	e0fffc17 	ldw	r3,-16(fp)
 800c8f4:	1885883a 	add	r2,r3,r2
 800c8f8:	e13ff517 	ldw	r4,-44(fp)
 800c8fc:	100b883a 	mov	r5,r2
 800c900:	e1bff617 	ldw	r6,-40(fp)
 800c904:	800752c0 	call	800752c <memcpy>
      ptr   += n;
 800c908:	e0fff517 	ldw	r3,-44(fp)
 800c90c:	e0bff617 	ldw	r2,-40(fp)
 800c910:	1885883a 	add	r2,r3,r2
 800c914:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800c918:	e0fffe17 	ldw	r3,-8(fp)
 800c91c:	e0bff617 	ldw	r2,-40(fp)
 800c920:	1885c83a 	sub	r2,r3,r2
 800c924:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c928:	e0fff817 	ldw	r3,-32(fp)
 800c92c:	e0bff617 	ldw	r2,-40(fp)
 800c930:	1885883a 	add	r2,r3,r2
 800c934:	10c1ffcc 	andi	r3,r2,2047
 800c938:	e0bffc17 	ldw	r2,-16(fp)
 800c93c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c940:	e0bffe17 	ldw	r2,-8(fp)
 800c944:	00bfcf16 	blt	zero,r2,800c884 <__alt_data_end+0xf800c884>
 800c948:	00000106 	br	800c950 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800c94c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800c950:	e0fff517 	ldw	r3,-44(fp)
 800c954:	e0bffd17 	ldw	r2,-12(fp)
 800c958:	1880141e 	bne	r3,r2,800c9ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c95c:	e0bfff17 	ldw	r2,-4(fp)
 800c960:	1090000c 	andi	r2,r2,16384
 800c964:	1000131e 	bne	r2,zero,800c9b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c968:	0001883a 	nop
 800c96c:	e0bffc17 	ldw	r2,-16(fp)
 800c970:	10c00a17 	ldw	r3,40(r2)
 800c974:	e0bff717 	ldw	r2,-36(fp)
 800c978:	1880051e 	bne	r3,r2,800c990 <altera_avalon_jtag_uart_read+0x138>
 800c97c:	e0bffc17 	ldw	r2,-16(fp)
 800c980:	10c00917 	ldw	r3,36(r2)
 800c984:	e0bffc17 	ldw	r2,-16(fp)
 800c988:	10800117 	ldw	r2,4(r2)
 800c98c:	18bff736 	bltu	r3,r2,800c96c <__alt_data_end+0xf800c96c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c990:	e0bffc17 	ldw	r2,-16(fp)
 800c994:	10c00a17 	ldw	r3,40(r2)
 800c998:	e0bff717 	ldw	r2,-36(fp)
 800c99c:	18800726 	beq	r3,r2,800c9bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c9a0:	e0bffe17 	ldw	r2,-8(fp)
 800c9a4:	00bfb716 	blt	zero,r2,800c884 <__alt_data_end+0xf800c884>
 800c9a8:	00000506 	br	800c9c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800c9ac:	0001883a 	nop
 800c9b0:	00000306 	br	800c9c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800c9b4:	0001883a 	nop
 800c9b8:	00000106 	br	800c9c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800c9bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800c9c0:	e0fff517 	ldw	r3,-44(fp)
 800c9c4:	e0bffd17 	ldw	r2,-12(fp)
 800c9c8:	18801726 	beq	r3,r2,800ca28 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800c9cc:	0005303a 	rdctl	r2,status
 800c9d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c9d4:	e0fffa17 	ldw	r3,-24(fp)
 800c9d8:	00bfff84 	movi	r2,-2
 800c9dc:	1884703a 	and	r2,r3,r2
 800c9e0:	1001703a 	wrctl	status,r2
  
  return context;
 800c9e4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800c9e8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c9ec:	e0bffc17 	ldw	r2,-16(fp)
 800c9f0:	10800817 	ldw	r2,32(r2)
 800c9f4:	10c00054 	ori	r3,r2,1
 800c9f8:	e0bffc17 	ldw	r2,-16(fp)
 800c9fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ca00:	e0bffc17 	ldw	r2,-16(fp)
 800ca04:	10800017 	ldw	r2,0(r2)
 800ca08:	10800104 	addi	r2,r2,4
 800ca0c:	e0fffc17 	ldw	r3,-16(fp)
 800ca10:	18c00817 	ldw	r3,32(r3)
 800ca14:	10c00035 	stwio	r3,0(r2)
 800ca18:	e0bff917 	ldw	r2,-28(fp)
 800ca1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ca20:	e0bffb17 	ldw	r2,-20(fp)
 800ca24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800ca28:	e0fff517 	ldw	r3,-44(fp)
 800ca2c:	e0bffd17 	ldw	r2,-12(fp)
 800ca30:	18800426 	beq	r3,r2,800ca44 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 800ca34:	e0fff517 	ldw	r3,-44(fp)
 800ca38:	e0bffd17 	ldw	r2,-12(fp)
 800ca3c:	1885c83a 	sub	r2,r3,r2
 800ca40:	00000606 	br	800ca5c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 800ca44:	e0bfff17 	ldw	r2,-4(fp)
 800ca48:	1090000c 	andi	r2,r2,16384
 800ca4c:	10000226 	beq	r2,zero,800ca58 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 800ca50:	00bffd44 	movi	r2,-11
 800ca54:	00000106 	br	800ca5c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 800ca58:	00bffec4 	movi	r2,-5
}
 800ca5c:	e037883a 	mov	sp,fp
 800ca60:	dfc00117 	ldw	ra,4(sp)
 800ca64:	df000017 	ldw	fp,0(sp)
 800ca68:	dec00204 	addi	sp,sp,8
 800ca6c:	f800283a 	ret

0800ca70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800ca70:	defff304 	addi	sp,sp,-52
 800ca74:	dfc00c15 	stw	ra,48(sp)
 800ca78:	df000b15 	stw	fp,44(sp)
 800ca7c:	df000b04 	addi	fp,sp,44
 800ca80:	e13ffc15 	stw	r4,-16(fp)
 800ca84:	e17ffd15 	stw	r5,-12(fp)
 800ca88:	e1bffe15 	stw	r6,-8(fp)
 800ca8c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800ca90:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800ca94:	e0bffd17 	ldw	r2,-12(fp)
 800ca98:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ca9c:	00003706 	br	800cb7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800caa0:	e0bffc17 	ldw	r2,-16(fp)
 800caa4:	10800c17 	ldw	r2,48(r2)
 800caa8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800caac:	e0bffc17 	ldw	r2,-16(fp)
 800cab0:	10800d17 	ldw	r2,52(r2)
 800cab4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800cab8:	e0fff817 	ldw	r3,-32(fp)
 800cabc:	e0bff517 	ldw	r2,-44(fp)
 800cac0:	1880062e 	bgeu	r3,r2,800cadc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800cac4:	e0fff517 	ldw	r3,-44(fp)
 800cac8:	e0bff817 	ldw	r2,-32(fp)
 800cacc:	1885c83a 	sub	r2,r3,r2
 800cad0:	10bfffc4 	addi	r2,r2,-1
 800cad4:	e0bff615 	stw	r2,-40(fp)
 800cad8:	00000b06 	br	800cb08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800cadc:	e0bff517 	ldw	r2,-44(fp)
 800cae0:	10000526 	beq	r2,zero,800caf8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800cae4:	00c20004 	movi	r3,2048
 800cae8:	e0bff817 	ldw	r2,-32(fp)
 800caec:	1885c83a 	sub	r2,r3,r2
 800caf0:	e0bff615 	stw	r2,-40(fp)
 800caf4:	00000406 	br	800cb08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800caf8:	00c1ffc4 	movi	r3,2047
 800cafc:	e0bff817 	ldw	r2,-32(fp)
 800cb00:	1885c83a 	sub	r2,r3,r2
 800cb04:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800cb08:	e0bff617 	ldw	r2,-40(fp)
 800cb0c:	10001e26 	beq	r2,zero,800cb88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800cb10:	e0fffe17 	ldw	r3,-8(fp)
 800cb14:	e0bff617 	ldw	r2,-40(fp)
 800cb18:	1880022e 	bgeu	r3,r2,800cb24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800cb1c:	e0bffe17 	ldw	r2,-8(fp)
 800cb20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800cb24:	e0bff817 	ldw	r2,-32(fp)
 800cb28:	10820e04 	addi	r2,r2,2104
 800cb2c:	e0fffc17 	ldw	r3,-16(fp)
 800cb30:	1885883a 	add	r2,r3,r2
 800cb34:	1009883a 	mov	r4,r2
 800cb38:	e17ffd17 	ldw	r5,-12(fp)
 800cb3c:	e1bff617 	ldw	r6,-40(fp)
 800cb40:	800752c0 	call	800752c <memcpy>
      ptr   += n;
 800cb44:	e0fffd17 	ldw	r3,-12(fp)
 800cb48:	e0bff617 	ldw	r2,-40(fp)
 800cb4c:	1885883a 	add	r2,r3,r2
 800cb50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800cb54:	e0fffe17 	ldw	r3,-8(fp)
 800cb58:	e0bff617 	ldw	r2,-40(fp)
 800cb5c:	1885c83a 	sub	r2,r3,r2
 800cb60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800cb64:	e0fff817 	ldw	r3,-32(fp)
 800cb68:	e0bff617 	ldw	r2,-40(fp)
 800cb6c:	1885883a 	add	r2,r3,r2
 800cb70:	10c1ffcc 	andi	r3,r2,2047
 800cb74:	e0bffc17 	ldw	r2,-16(fp)
 800cb78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800cb7c:	e0bffe17 	ldw	r2,-8(fp)
 800cb80:	00bfc716 	blt	zero,r2,800caa0 <__alt_data_end+0xf800caa0>
 800cb84:	00000106 	br	800cb8c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800cb88:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cb8c:	0005303a 	rdctl	r2,status
 800cb90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cb94:	e0fffa17 	ldw	r3,-24(fp)
 800cb98:	00bfff84 	movi	r2,-2
 800cb9c:	1884703a 	and	r2,r3,r2
 800cba0:	1001703a 	wrctl	status,r2
  
  return context;
 800cba4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800cba8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800cbac:	e0bffc17 	ldw	r2,-16(fp)
 800cbb0:	10800817 	ldw	r2,32(r2)
 800cbb4:	10c00094 	ori	r3,r2,2
 800cbb8:	e0bffc17 	ldw	r2,-16(fp)
 800cbbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800cbc0:	e0bffc17 	ldw	r2,-16(fp)
 800cbc4:	10800017 	ldw	r2,0(r2)
 800cbc8:	10800104 	addi	r2,r2,4
 800cbcc:	e0fffc17 	ldw	r3,-16(fp)
 800cbd0:	18c00817 	ldw	r3,32(r3)
 800cbd4:	10c00035 	stwio	r3,0(r2)
 800cbd8:	e0bff917 	ldw	r2,-28(fp)
 800cbdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cbe0:	e0bffb17 	ldw	r2,-20(fp)
 800cbe4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800cbe8:	e0bffe17 	ldw	r2,-8(fp)
 800cbec:	0080100e 	bge	zero,r2,800cc30 <altera_avalon_jtag_uart_write+0x1c0>
    {
      if (flags & O_NONBLOCK)
 800cbf0:	e0bfff17 	ldw	r2,-4(fp)
 800cbf4:	1090000c 	andi	r2,r2,16384
 800cbf8:	1000101e 	bne	r2,zero,800cc3c <altera_avalon_jtag_uart_write+0x1cc>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800cbfc:	0001883a 	nop
 800cc00:	e0bffc17 	ldw	r2,-16(fp)
 800cc04:	10c00d17 	ldw	r3,52(r2)
 800cc08:	e0bff517 	ldw	r2,-44(fp)
 800cc0c:	1880051e 	bne	r3,r2,800cc24 <altera_avalon_jtag_uart_write+0x1b4>
 800cc10:	e0bffc17 	ldw	r2,-16(fp)
 800cc14:	10c00917 	ldw	r3,36(r2)
 800cc18:	e0bffc17 	ldw	r2,-16(fp)
 800cc1c:	10800117 	ldw	r2,4(r2)
 800cc20:	18bff736 	bltu	r3,r2,800cc00 <__alt_data_end+0xf800cc00>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800cc24:	e0bffc17 	ldw	r2,-16(fp)
 800cc28:	10800917 	ldw	r2,36(r2)
 800cc2c:	1000051e 	bne	r2,zero,800cc44 <altera_avalon_jtag_uart_write+0x1d4>
         break;
    }
  }
  while (count > 0);
 800cc30:	e0bffe17 	ldw	r2,-8(fp)
 800cc34:	00bfd116 	blt	zero,r2,800cb7c <__alt_data_end+0xf800cb7c>
 800cc38:	00000306 	br	800cc48 <altera_avalon_jtag_uart_write+0x1d8>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800cc3c:	0001883a 	nop
 800cc40:	00000106 	br	800cc48 <altera_avalon_jtag_uart_write+0x1d8>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800cc44:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800cc48:	e0fffd17 	ldw	r3,-12(fp)
 800cc4c:	e0bff717 	ldw	r2,-36(fp)
 800cc50:	18800426 	beq	r3,r2,800cc64 <altera_avalon_jtag_uart_write+0x1f4>
    return ptr - start;
 800cc54:	e0fffd17 	ldw	r3,-12(fp)
 800cc58:	e0bff717 	ldw	r2,-36(fp)
 800cc5c:	1885c83a 	sub	r2,r3,r2
 800cc60:	00000606 	br	800cc7c <altera_avalon_jtag_uart_write+0x20c>
  else if (flags & O_NONBLOCK)
 800cc64:	e0bfff17 	ldw	r2,-4(fp)
 800cc68:	1090000c 	andi	r2,r2,16384
 800cc6c:	10000226 	beq	r2,zero,800cc78 <altera_avalon_jtag_uart_write+0x208>
    return -EWOULDBLOCK;
 800cc70:	00bffd44 	movi	r2,-11
 800cc74:	00000106 	br	800cc7c <altera_avalon_jtag_uart_write+0x20c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800cc78:	00bffec4 	movi	r2,-5
}
 800cc7c:	e037883a 	mov	sp,fp
 800cc80:	dfc00117 	ldw	ra,4(sp)
 800cc84:	df000017 	ldw	fp,0(sp)
 800cc88:	dec00204 	addi	sp,sp,8
 800cc8c:	f800283a 	ret

0800cc90 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800cc90:	defff504 	addi	sp,sp,-44
 800cc94:	df000a15 	stw	fp,40(sp)
 800cc98:	df000a04 	addi	fp,sp,40
 800cc9c:	e13ffc15 	stw	r4,-16(fp)
 800cca0:	e17ffd15 	stw	r5,-12(fp)
 800cca4:	e1bffe15 	stw	r6,-8(fp)
 800cca8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800ccac:	e03ff615 	stw	zero,-40(fp)
 800ccb0:	00820074 	movhi	r2,2049
 800ccb4:	1087ce04 	addi	r2,r2,7992
 800ccb8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800ccbc:	10003f26 	beq	r2,zero,800cdbc <alt_alarm_start+0x12c>
  {
    if (alarm)
 800ccc0:	e0bffc17 	ldw	r2,-16(fp)
 800ccc4:	10003b26 	beq	r2,zero,800cdb4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800ccc8:	e0bffc17 	ldw	r2,-16(fp)
 800cccc:	e0fffe17 	ldw	r3,-8(fp)
 800ccd0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800ccd4:	e0bffc17 	ldw	r2,-16(fp)
 800ccd8:	e0ffff17 	ldw	r3,-4(fp)
 800ccdc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cce0:	0005303a 	rdctl	r2,status
 800cce4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cce8:	e0fff817 	ldw	r3,-32(fp)
 800ccec:	00bfff84 	movi	r2,-2
 800ccf0:	1884703a 	and	r2,r3,r2
 800ccf4:	1001703a 	wrctl	status,r2
  
  return context;
 800ccf8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800ccfc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800cd00:	00820074 	movhi	r2,2049
 800cd04:	1087cf04 	addi	r2,r2,7996
 800cd08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800cd0c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800cd10:	e0fffd17 	ldw	r3,-12(fp)
 800cd14:	e0bff617 	ldw	r2,-40(fp)
 800cd18:	1885883a 	add	r2,r3,r2
 800cd1c:	10c00044 	addi	r3,r2,1
 800cd20:	e0bffc17 	ldw	r2,-16(fp)
 800cd24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800cd28:	e0bffc17 	ldw	r2,-16(fp)
 800cd2c:	10c00217 	ldw	r3,8(r2)
 800cd30:	e0bff617 	ldw	r2,-40(fp)
 800cd34:	1880042e 	bgeu	r3,r2,800cd48 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800cd38:	e0bffc17 	ldw	r2,-16(fp)
 800cd3c:	00c00044 	movi	r3,1
 800cd40:	10c00405 	stb	r3,16(r2)
 800cd44:	00000206 	br	800cd50 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800cd48:	e0bffc17 	ldw	r2,-16(fp)
 800cd4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800cd50:	e0bffc17 	ldw	r2,-16(fp)
 800cd54:	00c20074 	movhi	r3,2049
 800cd58:	18c12a04 	addi	r3,r3,1192
 800cd5c:	e0fff915 	stw	r3,-28(fp)
 800cd60:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800cd64:	e0bffa17 	ldw	r2,-24(fp)
 800cd68:	e0fff917 	ldw	r3,-28(fp)
 800cd6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cd70:	e0bff917 	ldw	r2,-28(fp)
 800cd74:	10c00017 	ldw	r3,0(r2)
 800cd78:	e0bffa17 	ldw	r2,-24(fp)
 800cd7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cd80:	e0bff917 	ldw	r2,-28(fp)
 800cd84:	10800017 	ldw	r2,0(r2)
 800cd88:	e0fffa17 	ldw	r3,-24(fp)
 800cd8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800cd90:	e0bff917 	ldw	r2,-28(fp)
 800cd94:	e0fffa17 	ldw	r3,-24(fp)
 800cd98:	10c00015 	stw	r3,0(r2)
 800cd9c:	e0bff717 	ldw	r2,-36(fp)
 800cda0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cda4:	e0bffb17 	ldw	r2,-20(fp)
 800cda8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800cdac:	0005883a 	mov	r2,zero
 800cdb0:	00000306 	br	800cdc0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800cdb4:	00bffa84 	movi	r2,-22
 800cdb8:	00000106 	br	800cdc0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800cdbc:	00bfde84 	movi	r2,-134
  }
}
 800cdc0:	e037883a 	mov	sp,fp
 800cdc4:	df000017 	ldw	fp,0(sp)
 800cdc8:	dec00104 	addi	sp,sp,4
 800cdcc:	f800283a 	ret

0800cdd0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800cdd0:	defffa04 	addi	sp,sp,-24
 800cdd4:	dfc00515 	stw	ra,20(sp)
 800cdd8:	df000415 	stw	fp,16(sp)
 800cddc:	df000404 	addi	fp,sp,16
 800cde0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800cde4:	00800244 	movi	r2,9
 800cde8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800cdec:	e13ffd17 	ldw	r4,-12(fp)
 800cdf0:	014003f4 	movhi	r5,15
 800cdf4:	29509004 	addi	r5,r5,16960
 800cdf8:	800b1340 	call	800b134 <__mulsi3>
 800cdfc:	0100bef4 	movhi	r4,763
 800ce00:	213c2004 	addi	r4,r4,-3968
 800ce04:	100b883a 	mov	r5,r2
 800ce08:	800b1240 	call	800b124 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800ce0c:	01200034 	movhi	r4,32768
 800ce10:	213fffc4 	addi	r4,r4,-1
 800ce14:	100b883a 	mov	r5,r2
 800ce18:	800b1240 	call	800b124 <__udivsi3>
 800ce1c:	e13fff17 	ldw	r4,-4(fp)
 800ce20:	100b883a 	mov	r5,r2
 800ce24:	800b1240 	call	800b124 <__udivsi3>
 800ce28:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800ce2c:	e0bffe17 	ldw	r2,-8(fp)
 800ce30:	10002926 	beq	r2,zero,800ced8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 800ce34:	e03ffc15 	stw	zero,-16(fp)
 800ce38:	00001606 	br	800ce94 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800ce3c:	00a00034 	movhi	r2,32768
 800ce40:	10bfffc4 	addi	r2,r2,-1
 800ce44:	10bfffc4 	addi	r2,r2,-1
 800ce48:	103ffe1e 	bne	r2,zero,800ce44 <__alt_data_end+0xf800ce44>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800ce4c:	e13ffd17 	ldw	r4,-12(fp)
 800ce50:	014003f4 	movhi	r5,15
 800ce54:	29509004 	addi	r5,r5,16960
 800ce58:	800b1340 	call	800b134 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800ce5c:	0100bef4 	movhi	r4,763
 800ce60:	213c2004 	addi	r4,r4,-3968
 800ce64:	100b883a 	mov	r5,r2
 800ce68:	800b1240 	call	800b124 <__udivsi3>
 800ce6c:	01200034 	movhi	r4,32768
 800ce70:	213fffc4 	addi	r4,r4,-1
 800ce74:	100b883a 	mov	r5,r2
 800ce78:	800b1240 	call	800b124 <__udivsi3>
 800ce7c:	e0ffff17 	ldw	r3,-4(fp)
 800ce80:	1885c83a 	sub	r2,r3,r2
 800ce84:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800ce88:	e0bffc17 	ldw	r2,-16(fp)
 800ce8c:	10800044 	addi	r2,r2,1
 800ce90:	e0bffc15 	stw	r2,-16(fp)
 800ce94:	e0fffc17 	ldw	r3,-16(fp)
 800ce98:	e0bffe17 	ldw	r2,-8(fp)
 800ce9c:	18bfe716 	blt	r3,r2,800ce3c <__alt_data_end+0xf800ce3c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800cea0:	e13ffd17 	ldw	r4,-12(fp)
 800cea4:	014003f4 	movhi	r5,15
 800cea8:	29509004 	addi	r5,r5,16960
 800ceac:	800b1340 	call	800b134 <__mulsi3>
 800ceb0:	0100bef4 	movhi	r4,763
 800ceb4:	213c2004 	addi	r4,r4,-3968
 800ceb8:	100b883a 	mov	r5,r2
 800cebc:	800b1240 	call	800b124 <__udivsi3>
 800cec0:	1009883a 	mov	r4,r2
 800cec4:	e17fff17 	ldw	r5,-4(fp)
 800cec8:	800b1340 	call	800b134 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cecc:	10bfffc4 	addi	r2,r2,-1
 800ced0:	103ffe1e 	bne	r2,zero,800cecc <__alt_data_end+0xf800cecc>
 800ced4:	00000d06 	br	800cf0c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ced8:	e13ffd17 	ldw	r4,-12(fp)
 800cedc:	014003f4 	movhi	r5,15
 800cee0:	29509004 	addi	r5,r5,16960
 800cee4:	800b1340 	call	800b134 <__mulsi3>
 800cee8:	0100bef4 	movhi	r4,763
 800ceec:	213c2004 	addi	r4,r4,-3968
 800cef0:	100b883a 	mov	r5,r2
 800cef4:	800b1240 	call	800b124 <__udivsi3>
 800cef8:	1009883a 	mov	r4,r2
 800cefc:	e17fff17 	ldw	r5,-4(fp)
 800cf00:	800b1340 	call	800b134 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800cf04:	10bfffc4 	addi	r2,r2,-1
 800cf08:	00bffe16 	blt	zero,r2,800cf04 <__alt_data_end+0xf800cf04>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800cf0c:	0005883a 	mov	r2,zero
}
 800cf10:	e037883a 	mov	sp,fp
 800cf14:	dfc00117 	ldw	ra,4(sp)
 800cf18:	df000017 	ldw	fp,0(sp)
 800cf1c:	dec00204 	addi	sp,sp,8
 800cf20:	f800283a 	ret

0800cf24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800cf24:	deffff04 	addi	sp,sp,-4
 800cf28:	df000015 	stw	fp,0(sp)
 800cf2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800cf30:	e037883a 	mov	sp,fp
 800cf34:	df000017 	ldw	fp,0(sp)
 800cf38:	dec00104 	addi	sp,sp,4
 800cf3c:	f800283a 	ret

0800cf40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cf40:	defffe04 	addi	sp,sp,-8
 800cf44:	dfc00115 	stw	ra,4(sp)
 800cf48:	df000015 	stw	fp,0(sp)
 800cf4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cf50:	00820074 	movhi	r2,2049
 800cf54:	10812704 	addi	r2,r2,1180
 800cf58:	10800017 	ldw	r2,0(r2)
 800cf5c:	10000526 	beq	r2,zero,800cf74 <alt_get_errno+0x34>
 800cf60:	00820074 	movhi	r2,2049
 800cf64:	10812704 	addi	r2,r2,1180
 800cf68:	10800017 	ldw	r2,0(r2)
 800cf6c:	103ee83a 	callr	r2
 800cf70:	00000206 	br	800cf7c <alt_get_errno+0x3c>
 800cf74:	00820074 	movhi	r2,2049
 800cf78:	1087c904 	addi	r2,r2,7972
}
 800cf7c:	e037883a 	mov	sp,fp
 800cf80:	dfc00117 	ldw	ra,4(sp)
 800cf84:	df000017 	ldw	fp,0(sp)
 800cf88:	dec00204 	addi	sp,sp,8
 800cf8c:	f800283a 	ret

0800cf90 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800cf90:	defffa04 	addi	sp,sp,-24
 800cf94:	dfc00515 	stw	ra,20(sp)
 800cf98:	df000415 	stw	fp,16(sp)
 800cf9c:	df000404 	addi	fp,sp,16
 800cfa0:	e13ffe15 	stw	r4,-8(fp)
 800cfa4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800cfa8:	e0bffe17 	ldw	r2,-8(fp)
 800cfac:	10000326 	beq	r2,zero,800cfbc <alt_dev_llist_insert+0x2c>
 800cfb0:	e0bffe17 	ldw	r2,-8(fp)
 800cfb4:	10800217 	ldw	r2,8(r2)
 800cfb8:	1000051e 	bne	r2,zero,800cfd0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 800cfbc:	800cf400 	call	800cf40 <alt_get_errno>
 800cfc0:	00c00584 	movi	r3,22
 800cfc4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 800cfc8:	00bffa84 	movi	r2,-22
 800cfcc:	00001306 	br	800d01c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800cfd0:	e0bffe17 	ldw	r2,-8(fp)
 800cfd4:	e0ffff17 	ldw	r3,-4(fp)
 800cfd8:	e0fffc15 	stw	r3,-16(fp)
 800cfdc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800cfe0:	e0bffd17 	ldw	r2,-12(fp)
 800cfe4:	e0fffc17 	ldw	r3,-16(fp)
 800cfe8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cfec:	e0bffc17 	ldw	r2,-16(fp)
 800cff0:	10c00017 	ldw	r3,0(r2)
 800cff4:	e0bffd17 	ldw	r2,-12(fp)
 800cff8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800cffc:	e0bffc17 	ldw	r2,-16(fp)
 800d000:	10800017 	ldw	r2,0(r2)
 800d004:	e0fffd17 	ldw	r3,-12(fp)
 800d008:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800d00c:	e0bffc17 	ldw	r2,-16(fp)
 800d010:	e0fffd17 	ldw	r3,-12(fp)
 800d014:	10c00015 	stw	r3,0(r2)

  return 0;  
 800d018:	0005883a 	mov	r2,zero
}
 800d01c:	e037883a 	mov	sp,fp
 800d020:	dfc00117 	ldw	ra,4(sp)
 800d024:	df000017 	ldw	fp,0(sp)
 800d028:	dec00204 	addi	sp,sp,8
 800d02c:	f800283a 	ret

0800d030 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800d030:	defffd04 	addi	sp,sp,-12
 800d034:	dfc00215 	stw	ra,8(sp)
 800d038:	df000115 	stw	fp,4(sp)
 800d03c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d040:	00820074 	movhi	r2,2049
 800d044:	10b7f004 	addi	r2,r2,-8256
 800d048:	e0bfff15 	stw	r2,-4(fp)
 800d04c:	00000606 	br	800d068 <_do_ctors+0x38>
        (*ctor) (); 
 800d050:	e0bfff17 	ldw	r2,-4(fp)
 800d054:	10800017 	ldw	r2,0(r2)
 800d058:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800d05c:	e0bfff17 	ldw	r2,-4(fp)
 800d060:	10bfff04 	addi	r2,r2,-4
 800d064:	e0bfff15 	stw	r2,-4(fp)
 800d068:	e0ffff17 	ldw	r3,-4(fp)
 800d06c:	00820074 	movhi	r2,2049
 800d070:	10b7f104 	addi	r2,r2,-8252
 800d074:	18bff62e 	bgeu	r3,r2,800d050 <__alt_data_end+0xf800d050>
        (*ctor) (); 
}
 800d078:	e037883a 	mov	sp,fp
 800d07c:	dfc00117 	ldw	ra,4(sp)
 800d080:	df000017 	ldw	fp,0(sp)
 800d084:	dec00204 	addi	sp,sp,8
 800d088:	f800283a 	ret

0800d08c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800d08c:	defffd04 	addi	sp,sp,-12
 800d090:	dfc00215 	stw	ra,8(sp)
 800d094:	df000115 	stw	fp,4(sp)
 800d098:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d09c:	00820074 	movhi	r2,2049
 800d0a0:	10b7f004 	addi	r2,r2,-8256
 800d0a4:	e0bfff15 	stw	r2,-4(fp)
 800d0a8:	00000606 	br	800d0c4 <_do_dtors+0x38>
        (*dtor) (); 
 800d0ac:	e0bfff17 	ldw	r2,-4(fp)
 800d0b0:	10800017 	ldw	r2,0(r2)
 800d0b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800d0b8:	e0bfff17 	ldw	r2,-4(fp)
 800d0bc:	10bfff04 	addi	r2,r2,-4
 800d0c0:	e0bfff15 	stw	r2,-4(fp)
 800d0c4:	e0ffff17 	ldw	r3,-4(fp)
 800d0c8:	00820074 	movhi	r2,2049
 800d0cc:	10b7f104 	addi	r2,r2,-8252
 800d0d0:	18bff62e 	bgeu	r3,r2,800d0ac <__alt_data_end+0xf800d0ac>
        (*dtor) (); 
}
 800d0d4:	e037883a 	mov	sp,fp
 800d0d8:	dfc00117 	ldw	ra,4(sp)
 800d0dc:	df000017 	ldw	fp,0(sp)
 800d0e0:	dec00204 	addi	sp,sp,8
 800d0e4:	f800283a 	ret

0800d0e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800d0e8:	deffff04 	addi	sp,sp,-4
 800d0ec:	df000015 	stw	fp,0(sp)
 800d0f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800d0f4:	e037883a 	mov	sp,fp
 800d0f8:	df000017 	ldw	fp,0(sp)
 800d0fc:	dec00104 	addi	sp,sp,4
 800d100:	f800283a 	ret

0800d104 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d104:	defff904 	addi	sp,sp,-28
 800d108:	dfc00615 	stw	ra,24(sp)
 800d10c:	df000515 	stw	fp,20(sp)
 800d110:	df000504 	addi	fp,sp,20
 800d114:	e13ffc15 	stw	r4,-16(fp)
 800d118:	e17ffd15 	stw	r5,-12(fp)
 800d11c:	e1bffe15 	stw	r6,-8(fp)
 800d120:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800d124:	e0800217 	ldw	r2,8(fp)
 800d128:	d8800015 	stw	r2,0(sp)
 800d12c:	e13ffc17 	ldw	r4,-16(fp)
 800d130:	e17ffd17 	ldw	r5,-12(fp)
 800d134:	e1bffe17 	ldw	r6,-8(fp)
 800d138:	e1ffff17 	ldw	r7,-4(fp)
 800d13c:	800d2dc0 	call	800d2dc <alt_iic_isr_register>
}  
 800d140:	e037883a 	mov	sp,fp
 800d144:	dfc00117 	ldw	ra,4(sp)
 800d148:	df000017 	ldw	fp,0(sp)
 800d14c:	dec00204 	addi	sp,sp,8
 800d150:	f800283a 	ret

0800d154 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800d154:	defff904 	addi	sp,sp,-28
 800d158:	df000615 	stw	fp,24(sp)
 800d15c:	df000604 	addi	fp,sp,24
 800d160:	e13ffe15 	stw	r4,-8(fp)
 800d164:	e17fff15 	stw	r5,-4(fp)
 800d168:	e0bfff17 	ldw	r2,-4(fp)
 800d16c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d170:	0005303a 	rdctl	r2,status
 800d174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d178:	e0fffb17 	ldw	r3,-20(fp)
 800d17c:	00bfff84 	movi	r2,-2
 800d180:	1884703a 	and	r2,r3,r2
 800d184:	1001703a 	wrctl	status,r2
  
  return context;
 800d188:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d18c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800d190:	e0bffa17 	ldw	r2,-24(fp)
 800d194:	00c00044 	movi	r3,1
 800d198:	1884983a 	sll	r2,r3,r2
 800d19c:	1007883a 	mov	r3,r2
 800d1a0:	00820074 	movhi	r2,2049
 800d1a4:	1087cd04 	addi	r2,r2,7988
 800d1a8:	10800017 	ldw	r2,0(r2)
 800d1ac:	1886b03a 	or	r3,r3,r2
 800d1b0:	00820074 	movhi	r2,2049
 800d1b4:	1087cd04 	addi	r2,r2,7988
 800d1b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d1bc:	00820074 	movhi	r2,2049
 800d1c0:	1087cd04 	addi	r2,r2,7988
 800d1c4:	10800017 	ldw	r2,0(r2)
 800d1c8:	100170fa 	wrctl	ienable,r2
 800d1cc:	e0bffc17 	ldw	r2,-16(fp)
 800d1d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d1d4:	e0bffd17 	ldw	r2,-12(fp)
 800d1d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d1dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 800d1e0:	e037883a 	mov	sp,fp
 800d1e4:	df000017 	ldw	fp,0(sp)
 800d1e8:	dec00104 	addi	sp,sp,4
 800d1ec:	f800283a 	ret

0800d1f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800d1f0:	defff904 	addi	sp,sp,-28
 800d1f4:	df000615 	stw	fp,24(sp)
 800d1f8:	df000604 	addi	fp,sp,24
 800d1fc:	e13ffe15 	stw	r4,-8(fp)
 800d200:	e17fff15 	stw	r5,-4(fp)
 800d204:	e0bfff17 	ldw	r2,-4(fp)
 800d208:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d20c:	0005303a 	rdctl	r2,status
 800d210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d214:	e0fffb17 	ldw	r3,-20(fp)
 800d218:	00bfff84 	movi	r2,-2
 800d21c:	1884703a 	and	r2,r3,r2
 800d220:	1001703a 	wrctl	status,r2
  
  return context;
 800d224:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800d228:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800d22c:	e0bffa17 	ldw	r2,-24(fp)
 800d230:	00c00044 	movi	r3,1
 800d234:	1884983a 	sll	r2,r3,r2
 800d238:	0084303a 	nor	r2,zero,r2
 800d23c:	1007883a 	mov	r3,r2
 800d240:	00820074 	movhi	r2,2049
 800d244:	1087cd04 	addi	r2,r2,7988
 800d248:	10800017 	ldw	r2,0(r2)
 800d24c:	1886703a 	and	r3,r3,r2
 800d250:	00820074 	movhi	r2,2049
 800d254:	1087cd04 	addi	r2,r2,7988
 800d258:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800d25c:	00820074 	movhi	r2,2049
 800d260:	1087cd04 	addi	r2,r2,7988
 800d264:	10800017 	ldw	r2,0(r2)
 800d268:	100170fa 	wrctl	ienable,r2
 800d26c:	e0bffc17 	ldw	r2,-16(fp)
 800d270:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d274:	e0bffd17 	ldw	r2,-12(fp)
 800d278:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800d27c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 800d280:	e037883a 	mov	sp,fp
 800d284:	df000017 	ldw	fp,0(sp)
 800d288:	dec00104 	addi	sp,sp,4
 800d28c:	f800283a 	ret

0800d290 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800d290:	defffc04 	addi	sp,sp,-16
 800d294:	df000315 	stw	fp,12(sp)
 800d298:	df000304 	addi	fp,sp,12
 800d29c:	e13ffe15 	stw	r4,-8(fp)
 800d2a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800d2a4:	000530fa 	rdctl	r2,ienable
 800d2a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800d2ac:	e0bfff17 	ldw	r2,-4(fp)
 800d2b0:	00c00044 	movi	r3,1
 800d2b4:	1884983a 	sll	r2,r3,r2
 800d2b8:	1007883a 	mov	r3,r2
 800d2bc:	e0bffd17 	ldw	r2,-12(fp)
 800d2c0:	1884703a 	and	r2,r3,r2
 800d2c4:	1004c03a 	cmpne	r2,r2,zero
 800d2c8:	10803fcc 	andi	r2,r2,255
}
 800d2cc:	e037883a 	mov	sp,fp
 800d2d0:	df000017 	ldw	fp,0(sp)
 800d2d4:	dec00104 	addi	sp,sp,4
 800d2d8:	f800283a 	ret

0800d2dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800d2dc:	defff504 	addi	sp,sp,-44
 800d2e0:	dfc00a15 	stw	ra,40(sp)
 800d2e4:	df000915 	stw	fp,36(sp)
 800d2e8:	df000904 	addi	fp,sp,36
 800d2ec:	e13ffc15 	stw	r4,-16(fp)
 800d2f0:	e17ffd15 	stw	r5,-12(fp)
 800d2f4:	e1bffe15 	stw	r6,-8(fp)
 800d2f8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800d2fc:	00bffa84 	movi	r2,-22
 800d300:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800d304:	e0bffd17 	ldw	r2,-12(fp)
 800d308:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800d30c:	e0bff817 	ldw	r2,-32(fp)
 800d310:	10800808 	cmpgei	r2,r2,32
 800d314:	1000271e 	bne	r2,zero,800d3b4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d318:	0005303a 	rdctl	r2,status
 800d31c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d320:	e0fffa17 	ldw	r3,-24(fp)
 800d324:	00bfff84 	movi	r2,-2
 800d328:	1884703a 	and	r2,r3,r2
 800d32c:	1001703a 	wrctl	status,r2
  
  return context;
 800d330:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d334:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800d338:	00c20074 	movhi	r3,2049
 800d33c:	18c7da04 	addi	r3,r3,8040
 800d340:	e0bff817 	ldw	r2,-32(fp)
 800d344:	100490fa 	slli	r2,r2,3
 800d348:	1885883a 	add	r2,r3,r2
 800d34c:	e0fffe17 	ldw	r3,-8(fp)
 800d350:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800d354:	00c20074 	movhi	r3,2049
 800d358:	18c7da04 	addi	r3,r3,8040
 800d35c:	e0bff817 	ldw	r2,-32(fp)
 800d360:	100490fa 	slli	r2,r2,3
 800d364:	1885883a 	add	r2,r3,r2
 800d368:	10800104 	addi	r2,r2,4
 800d36c:	e0ffff17 	ldw	r3,-4(fp)
 800d370:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d374:	e0bffe17 	ldw	r2,-8(fp)
 800d378:	10000526 	beq	r2,zero,800d390 <alt_iic_isr_register+0xb4>
 800d37c:	e0bff817 	ldw	r2,-32(fp)
 800d380:	e13ffc17 	ldw	r4,-16(fp)
 800d384:	100b883a 	mov	r5,r2
 800d388:	800d1540 	call	800d154 <alt_ic_irq_enable>
 800d38c:	00000406 	br	800d3a0 <alt_iic_isr_register+0xc4>
 800d390:	e0bff817 	ldw	r2,-32(fp)
 800d394:	e13ffc17 	ldw	r4,-16(fp)
 800d398:	100b883a 	mov	r5,r2
 800d39c:	800d1f00 	call	800d1f0 <alt_ic_irq_disable>
 800d3a0:	e0bff715 	stw	r2,-36(fp)
 800d3a4:	e0bff917 	ldw	r2,-28(fp)
 800d3a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d3ac:	e0bffb17 	ldw	r2,-20(fp)
 800d3b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d3b4:	e0bff717 	ldw	r2,-36(fp)
}
 800d3b8:	e037883a 	mov	sp,fp
 800d3bc:	dfc00117 	ldw	ra,4(sp)
 800d3c0:	df000017 	ldw	fp,0(sp)
 800d3c4:	dec00204 	addi	sp,sp,8
 800d3c8:	f800283a 	ret

0800d3cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800d3cc:	defff804 	addi	sp,sp,-32
 800d3d0:	dfc00715 	stw	ra,28(sp)
 800d3d4:	df000615 	stw	fp,24(sp)
 800d3d8:	dc000515 	stw	r16,20(sp)
 800d3dc:	df000504 	addi	fp,sp,20
 800d3e0:	e13ffc15 	stw	r4,-16(fp)
 800d3e4:	e17ffd15 	stw	r5,-12(fp)
 800d3e8:	e1bffe15 	stw	r6,-8(fp)
 800d3ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800d3f0:	e13ffd17 	ldw	r4,-12(fp)
 800d3f4:	e17ffe17 	ldw	r5,-8(fp)
 800d3f8:	e1bfff17 	ldw	r6,-4(fp)
 800d3fc:	800d6640 	call	800d664 <open>
 800d400:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800d404:	e0bffb17 	ldw	r2,-20(fp)
 800d408:	10002216 	blt	r2,zero,800d494 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800d40c:	04020074 	movhi	r16,2049
 800d410:	843ca504 	addi	r16,r16,-3436
 800d414:	e0bffb17 	ldw	r2,-20(fp)
 800d418:	1009883a 	mov	r4,r2
 800d41c:	01400304 	movi	r5,12
 800d420:	800b1340 	call	800b134 <__mulsi3>
 800d424:	8085883a 	add	r2,r16,r2
 800d428:	10c00017 	ldw	r3,0(r2)
 800d42c:	e0bffc17 	ldw	r2,-16(fp)
 800d430:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800d434:	04020074 	movhi	r16,2049
 800d438:	843ca504 	addi	r16,r16,-3436
 800d43c:	e0bffb17 	ldw	r2,-20(fp)
 800d440:	1009883a 	mov	r4,r2
 800d444:	01400304 	movi	r5,12
 800d448:	800b1340 	call	800b134 <__mulsi3>
 800d44c:	8085883a 	add	r2,r16,r2
 800d450:	10800104 	addi	r2,r2,4
 800d454:	10c00017 	ldw	r3,0(r2)
 800d458:	e0bffc17 	ldw	r2,-16(fp)
 800d45c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800d460:	04020074 	movhi	r16,2049
 800d464:	843ca504 	addi	r16,r16,-3436
 800d468:	e0bffb17 	ldw	r2,-20(fp)
 800d46c:	1009883a 	mov	r4,r2
 800d470:	01400304 	movi	r5,12
 800d474:	800b1340 	call	800b134 <__mulsi3>
 800d478:	8085883a 	add	r2,r16,r2
 800d47c:	10800204 	addi	r2,r2,8
 800d480:	10c00017 	ldw	r3,0(r2)
 800d484:	e0bffc17 	ldw	r2,-16(fp)
 800d488:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800d48c:	e13ffb17 	ldw	r4,-20(fp)
 800d490:	800bee00 	call	800bee0 <alt_release_fd>
  }
} 
 800d494:	e037883a 	mov	sp,fp
 800d498:	dfc00217 	ldw	ra,8(sp)
 800d49c:	df000117 	ldw	fp,4(sp)
 800d4a0:	dc000017 	ldw	r16,0(sp)
 800d4a4:	dec00304 	addi	sp,sp,12
 800d4a8:	f800283a 	ret

0800d4ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800d4ac:	defffb04 	addi	sp,sp,-20
 800d4b0:	dfc00415 	stw	ra,16(sp)
 800d4b4:	df000315 	stw	fp,12(sp)
 800d4b8:	df000304 	addi	fp,sp,12
 800d4bc:	e13ffd15 	stw	r4,-12(fp)
 800d4c0:	e17ffe15 	stw	r5,-8(fp)
 800d4c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800d4c8:	01020074 	movhi	r4,2049
 800d4cc:	213ca804 	addi	r4,r4,-3424
 800d4d0:	e17ffd17 	ldw	r5,-12(fp)
 800d4d4:	01800044 	movi	r6,1
 800d4d8:	01c07fc4 	movi	r7,511
 800d4dc:	800d3cc0 	call	800d3cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800d4e0:	01020074 	movhi	r4,2049
 800d4e4:	213ca504 	addi	r4,r4,-3436
 800d4e8:	e17ffe17 	ldw	r5,-8(fp)
 800d4ec:	000d883a 	mov	r6,zero
 800d4f0:	01c07fc4 	movi	r7,511
 800d4f4:	800d3cc0 	call	800d3cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800d4f8:	01020074 	movhi	r4,2049
 800d4fc:	213cab04 	addi	r4,r4,-3412
 800d500:	e17fff17 	ldw	r5,-4(fp)
 800d504:	01800044 	movi	r6,1
 800d508:	01c07fc4 	movi	r7,511
 800d50c:	800d3cc0 	call	800d3cc <alt_open_fd>
}  
 800d510:	e037883a 	mov	sp,fp
 800d514:	dfc00117 	ldw	ra,4(sp)
 800d518:	df000017 	ldw	fp,0(sp)
 800d51c:	dec00204 	addi	sp,sp,8
 800d520:	f800283a 	ret

0800d524 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d524:	defffe04 	addi	sp,sp,-8
 800d528:	dfc00115 	stw	ra,4(sp)
 800d52c:	df000015 	stw	fp,0(sp)
 800d530:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d534:	00820074 	movhi	r2,2049
 800d538:	10812704 	addi	r2,r2,1180
 800d53c:	10800017 	ldw	r2,0(r2)
 800d540:	10000526 	beq	r2,zero,800d558 <alt_get_errno+0x34>
 800d544:	00820074 	movhi	r2,2049
 800d548:	10812704 	addi	r2,r2,1180
 800d54c:	10800017 	ldw	r2,0(r2)
 800d550:	103ee83a 	callr	r2
 800d554:	00000206 	br	800d560 <alt_get_errno+0x3c>
 800d558:	00820074 	movhi	r2,2049
 800d55c:	1087c904 	addi	r2,r2,7972
}
 800d560:	e037883a 	mov	sp,fp
 800d564:	dfc00117 	ldw	ra,4(sp)
 800d568:	df000017 	ldw	fp,0(sp)
 800d56c:	dec00204 	addi	sp,sp,8
 800d570:	f800283a 	ret

0800d574 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800d574:	defffb04 	addi	sp,sp,-20
 800d578:	dfc00415 	stw	ra,16(sp)
 800d57c:	df000315 	stw	fp,12(sp)
 800d580:	dc000215 	stw	r16,8(sp)
 800d584:	df000204 	addi	fp,sp,8
 800d588:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800d58c:	e0bfff17 	ldw	r2,-4(fp)
 800d590:	10800217 	ldw	r2,8(r2)
 800d594:	10d00034 	orhi	r3,r2,16384
 800d598:	e0bfff17 	ldw	r2,-4(fp)
 800d59c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d5a0:	e03ffe15 	stw	zero,-8(fp)
 800d5a4:	00002206 	br	800d630 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d5a8:	04020074 	movhi	r16,2049
 800d5ac:	843ca504 	addi	r16,r16,-3436
 800d5b0:	e0bffe17 	ldw	r2,-8(fp)
 800d5b4:	1009883a 	mov	r4,r2
 800d5b8:	01400304 	movi	r5,12
 800d5bc:	800b1340 	call	800b134 <__mulsi3>
 800d5c0:	8085883a 	add	r2,r16,r2
 800d5c4:	10c00017 	ldw	r3,0(r2)
 800d5c8:	e0bfff17 	ldw	r2,-4(fp)
 800d5cc:	10800017 	ldw	r2,0(r2)
 800d5d0:	1880141e 	bne	r3,r2,800d624 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d5d4:	04020074 	movhi	r16,2049
 800d5d8:	843ca504 	addi	r16,r16,-3436
 800d5dc:	e0bffe17 	ldw	r2,-8(fp)
 800d5e0:	1009883a 	mov	r4,r2
 800d5e4:	01400304 	movi	r5,12
 800d5e8:	800b1340 	call	800b134 <__mulsi3>
 800d5ec:	8085883a 	add	r2,r16,r2
 800d5f0:	10800204 	addi	r2,r2,8
 800d5f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d5f8:	10000a0e 	bge	r2,zero,800d624 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800d5fc:	e13ffe17 	ldw	r4,-8(fp)
 800d600:	01400304 	movi	r5,12
 800d604:	800b1340 	call	800b134 <__mulsi3>
 800d608:	00c20074 	movhi	r3,2049
 800d60c:	18fca504 	addi	r3,r3,-3436
 800d610:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d614:	e0bfff17 	ldw	r2,-4(fp)
 800d618:	18800226 	beq	r3,r2,800d624 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800d61c:	00bffcc4 	movi	r2,-13
 800d620:	00000a06 	br	800d64c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d624:	e0bffe17 	ldw	r2,-8(fp)
 800d628:	10800044 	addi	r2,r2,1
 800d62c:	e0bffe15 	stw	r2,-8(fp)
 800d630:	00820074 	movhi	r2,2049
 800d634:	10812604 	addi	r2,r2,1176
 800d638:	10800017 	ldw	r2,0(r2)
 800d63c:	1007883a 	mov	r3,r2
 800d640:	e0bffe17 	ldw	r2,-8(fp)
 800d644:	18bfd82e 	bgeu	r3,r2,800d5a8 <__alt_data_end+0xf800d5a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800d648:	0005883a 	mov	r2,zero
}
 800d64c:	e037883a 	mov	sp,fp
 800d650:	dfc00217 	ldw	ra,8(sp)
 800d654:	df000117 	ldw	fp,4(sp)
 800d658:	dc000017 	ldw	r16,0(sp)
 800d65c:	dec00304 	addi	sp,sp,12
 800d660:	f800283a 	ret

0800d664 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800d664:	defff604 	addi	sp,sp,-40
 800d668:	dfc00915 	stw	ra,36(sp)
 800d66c:	df000815 	stw	fp,32(sp)
 800d670:	df000804 	addi	fp,sp,32
 800d674:	e13ffd15 	stw	r4,-12(fp)
 800d678:	e17ffe15 	stw	r5,-8(fp)
 800d67c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800d680:	00bfffc4 	movi	r2,-1
 800d684:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800d688:	00bffb44 	movi	r2,-19
 800d68c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800d690:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800d694:	e13ffd17 	ldw	r4,-12(fp)
 800d698:	01420074 	movhi	r5,2049
 800d69c:	29412404 	addi	r5,r5,1168
 800d6a0:	800d9780 	call	800d978 <alt_find_dev>
 800d6a4:	e0bff815 	stw	r2,-32(fp)
 800d6a8:	e0bff817 	ldw	r2,-32(fp)
 800d6ac:	1000051e 	bne	r2,zero,800d6c4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800d6b0:	e13ffd17 	ldw	r4,-12(fp)
 800d6b4:	800da080 	call	800da08 <alt_find_file>
 800d6b8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800d6bc:	00800044 	movi	r2,1
 800d6c0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800d6c4:	e0bff817 	ldw	r2,-32(fp)
 800d6c8:	10002a26 	beq	r2,zero,800d774 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800d6cc:	e13ff817 	ldw	r4,-32(fp)
 800d6d0:	800db1c0 	call	800db1c <alt_get_fd>
 800d6d4:	e0bff915 	stw	r2,-28(fp)
 800d6d8:	e0bff917 	ldw	r2,-28(fp)
 800d6dc:	1000030e 	bge	r2,zero,800d6ec <open+0x88>
    {
      status = index;
 800d6e0:	e0bff917 	ldw	r2,-28(fp)
 800d6e4:	e0bffa15 	stw	r2,-24(fp)
 800d6e8:	00002406 	br	800d77c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800d6ec:	e13ff917 	ldw	r4,-28(fp)
 800d6f0:	01400304 	movi	r5,12
 800d6f4:	800b1340 	call	800b134 <__mulsi3>
 800d6f8:	00c20074 	movhi	r3,2049
 800d6fc:	18fca504 	addi	r3,r3,-3436
 800d700:	10c5883a 	add	r2,r2,r3
 800d704:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800d708:	e0fffe17 	ldw	r3,-8(fp)
 800d70c:	00900034 	movhi	r2,16384
 800d710:	10bfffc4 	addi	r2,r2,-1
 800d714:	1886703a 	and	r3,r3,r2
 800d718:	e0bffc17 	ldw	r2,-16(fp)
 800d71c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800d720:	e0bffb17 	ldw	r2,-20(fp)
 800d724:	1000051e 	bne	r2,zero,800d73c <open+0xd8>
 800d728:	e13ffc17 	ldw	r4,-16(fp)
 800d72c:	800d5740 	call	800d574 <alt_file_locked>
 800d730:	e0bffa15 	stw	r2,-24(fp)
 800d734:	e0bffa17 	ldw	r2,-24(fp)
 800d738:	10001016 	blt	r2,zero,800d77c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800d73c:	e0bff817 	ldw	r2,-32(fp)
 800d740:	10800317 	ldw	r2,12(r2)
 800d744:	10000826 	beq	r2,zero,800d768 <open+0x104>
 800d748:	e0bff817 	ldw	r2,-32(fp)
 800d74c:	10800317 	ldw	r2,12(r2)
 800d750:	e13ffc17 	ldw	r4,-16(fp)
 800d754:	e17ffd17 	ldw	r5,-12(fp)
 800d758:	e1bffe17 	ldw	r6,-8(fp)
 800d75c:	e1ffff17 	ldw	r7,-4(fp)
 800d760:	103ee83a 	callr	r2
 800d764:	00000106 	br	800d76c <open+0x108>
 800d768:	0005883a 	mov	r2,zero
 800d76c:	e0bffa15 	stw	r2,-24(fp)
 800d770:	00000206 	br	800d77c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800d774:	00bffb44 	movi	r2,-19
 800d778:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800d77c:	e0bffa17 	ldw	r2,-24(fp)
 800d780:	1000080e 	bge	r2,zero,800d7a4 <open+0x140>
  {
    alt_release_fd (index);  
 800d784:	e13ff917 	ldw	r4,-28(fp)
 800d788:	800bee00 	call	800bee0 <alt_release_fd>
    ALT_ERRNO = -status;
 800d78c:	800d5240 	call	800d524 <alt_get_errno>
 800d790:	e0fffa17 	ldw	r3,-24(fp)
 800d794:	00c7c83a 	sub	r3,zero,r3
 800d798:	10c00015 	stw	r3,0(r2)
    return -1;
 800d79c:	00bfffc4 	movi	r2,-1
 800d7a0:	00000106 	br	800d7a8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 800d7a4:	e0bff917 	ldw	r2,-28(fp)
}
 800d7a8:	e037883a 	mov	sp,fp
 800d7ac:	dfc00117 	ldw	ra,4(sp)
 800d7b0:	df000017 	ldw	fp,0(sp)
 800d7b4:	dec00204 	addi	sp,sp,8
 800d7b8:	f800283a 	ret

0800d7bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800d7bc:	defffa04 	addi	sp,sp,-24
 800d7c0:	df000515 	stw	fp,20(sp)
 800d7c4:	df000504 	addi	fp,sp,20
 800d7c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d7cc:	0005303a 	rdctl	r2,status
 800d7d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d7d4:	e0fffc17 	ldw	r3,-16(fp)
 800d7d8:	00bfff84 	movi	r2,-2
 800d7dc:	1884703a 	and	r2,r3,r2
 800d7e0:	1001703a 	wrctl	status,r2
  
  return context;
 800d7e4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800d7e8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800d7ec:	e0bfff17 	ldw	r2,-4(fp)
 800d7f0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800d7f4:	e0bffd17 	ldw	r2,-12(fp)
 800d7f8:	10800017 	ldw	r2,0(r2)
 800d7fc:	e0fffd17 	ldw	r3,-12(fp)
 800d800:	18c00117 	ldw	r3,4(r3)
 800d804:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800d808:	e0bffd17 	ldw	r2,-12(fp)
 800d80c:	10800117 	ldw	r2,4(r2)
 800d810:	e0fffd17 	ldw	r3,-12(fp)
 800d814:	18c00017 	ldw	r3,0(r3)
 800d818:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800d81c:	e0bffd17 	ldw	r2,-12(fp)
 800d820:	e0fffd17 	ldw	r3,-12(fp)
 800d824:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800d828:	e0bffd17 	ldw	r2,-12(fp)
 800d82c:	e0fffd17 	ldw	r3,-12(fp)
 800d830:	10c00015 	stw	r3,0(r2)
 800d834:	e0bffb17 	ldw	r2,-20(fp)
 800d838:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d83c:	e0bffe17 	ldw	r2,-8(fp)
 800d840:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800d844:	e037883a 	mov	sp,fp
 800d848:	df000017 	ldw	fp,0(sp)
 800d84c:	dec00104 	addi	sp,sp,4
 800d850:	f800283a 	ret

0800d854 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800d854:	defffb04 	addi	sp,sp,-20
 800d858:	dfc00415 	stw	ra,16(sp)
 800d85c:	df000315 	stw	fp,12(sp)
 800d860:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800d864:	d0a00d17 	ldw	r2,-32716(gp)
 800d868:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800d86c:	d0a6b217 	ldw	r2,-25912(gp)
 800d870:	10800044 	addi	r2,r2,1
 800d874:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d878:	00002e06 	br	800d934 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800d87c:	e0bffd17 	ldw	r2,-12(fp)
 800d880:	10800017 	ldw	r2,0(r2)
 800d884:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800d888:	e0bffd17 	ldw	r2,-12(fp)
 800d88c:	10800403 	ldbu	r2,16(r2)
 800d890:	10803fcc 	andi	r2,r2,255
 800d894:	10000426 	beq	r2,zero,800d8a8 <alt_tick+0x54>
 800d898:	d0a6b217 	ldw	r2,-25912(gp)
 800d89c:	1000021e 	bne	r2,zero,800d8a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800d8a0:	e0bffd17 	ldw	r2,-12(fp)
 800d8a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800d8a8:	e0bffd17 	ldw	r2,-12(fp)
 800d8ac:	10800217 	ldw	r2,8(r2)
 800d8b0:	d0e6b217 	ldw	r3,-25912(gp)
 800d8b4:	18801d36 	bltu	r3,r2,800d92c <alt_tick+0xd8>
 800d8b8:	e0bffd17 	ldw	r2,-12(fp)
 800d8bc:	10800403 	ldbu	r2,16(r2)
 800d8c0:	10803fcc 	andi	r2,r2,255
 800d8c4:	1000191e 	bne	r2,zero,800d92c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800d8c8:	e0bffd17 	ldw	r2,-12(fp)
 800d8cc:	10c00317 	ldw	r3,12(r2)
 800d8d0:	e0bffd17 	ldw	r2,-12(fp)
 800d8d4:	10800517 	ldw	r2,20(r2)
 800d8d8:	1009883a 	mov	r4,r2
 800d8dc:	183ee83a 	callr	r3
 800d8e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800d8e4:	e0bfff17 	ldw	r2,-4(fp)
 800d8e8:	1000031e 	bne	r2,zero,800d8f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800d8ec:	e13ffd17 	ldw	r4,-12(fp)
 800d8f0:	800d7bc0 	call	800d7bc <alt_alarm_stop>
 800d8f4:	00000d06 	br	800d92c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800d8f8:	e0bffd17 	ldw	r2,-12(fp)
 800d8fc:	10c00217 	ldw	r3,8(r2)
 800d900:	e0bfff17 	ldw	r2,-4(fp)
 800d904:	1887883a 	add	r3,r3,r2
 800d908:	e0bffd17 	ldw	r2,-12(fp)
 800d90c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800d910:	e0bffd17 	ldw	r2,-12(fp)
 800d914:	10c00217 	ldw	r3,8(r2)
 800d918:	d0a6b217 	ldw	r2,-25912(gp)
 800d91c:	1880032e 	bgeu	r3,r2,800d92c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800d920:	e0bffd17 	ldw	r2,-12(fp)
 800d924:	00c00044 	movi	r3,1
 800d928:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800d92c:	e0bffe17 	ldw	r2,-8(fp)
 800d930:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d934:	e0fffd17 	ldw	r3,-12(fp)
 800d938:	d0a00d04 	addi	r2,gp,-32716
 800d93c:	18bfcf1e 	bne	r3,r2,800d87c <__alt_data_end+0xf800d87c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800d940:	0001883a 	nop
}
 800d944:	e037883a 	mov	sp,fp
 800d948:	dfc00117 	ldw	ra,4(sp)
 800d94c:	df000017 	ldw	fp,0(sp)
 800d950:	dec00204 	addi	sp,sp,8
 800d954:	f800283a 	ret

0800d958 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800d958:	deffff04 	addi	sp,sp,-4
 800d95c:	df000015 	stw	fp,0(sp)
 800d960:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800d964:	000170fa 	wrctl	ienable,zero
}
 800d968:	e037883a 	mov	sp,fp
 800d96c:	df000017 	ldw	fp,0(sp)
 800d970:	dec00104 	addi	sp,sp,4
 800d974:	f800283a 	ret

0800d978 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800d978:	defffa04 	addi	sp,sp,-24
 800d97c:	dfc00515 	stw	ra,20(sp)
 800d980:	df000415 	stw	fp,16(sp)
 800d984:	df000404 	addi	fp,sp,16
 800d988:	e13ffe15 	stw	r4,-8(fp)
 800d98c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800d990:	e0bfff17 	ldw	r2,-4(fp)
 800d994:	10800017 	ldw	r2,0(r2)
 800d998:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800d99c:	e13ffe17 	ldw	r4,-8(fp)
 800d9a0:	80021ac0 	call	80021ac <strlen>
 800d9a4:	10800044 	addi	r2,r2,1
 800d9a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800d9ac:	00000d06 	br	800d9e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800d9b0:	e0bffc17 	ldw	r2,-16(fp)
 800d9b4:	10c00217 	ldw	r3,8(r2)
 800d9b8:	e0bffd17 	ldw	r2,-12(fp)
 800d9bc:	1809883a 	mov	r4,r3
 800d9c0:	e17ffe17 	ldw	r5,-8(fp)
 800d9c4:	100d883a 	mov	r6,r2
 800d9c8:	800dc3c0 	call	800dc3c <memcmp>
 800d9cc:	1000021e 	bne	r2,zero,800d9d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800d9d0:	e0bffc17 	ldw	r2,-16(fp)
 800d9d4:	00000706 	br	800d9f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800d9d8:	e0bffc17 	ldw	r2,-16(fp)
 800d9dc:	10800017 	ldw	r2,0(r2)
 800d9e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800d9e4:	e0fffc17 	ldw	r3,-16(fp)
 800d9e8:	e0bfff17 	ldw	r2,-4(fp)
 800d9ec:	18bff01e 	bne	r3,r2,800d9b0 <__alt_data_end+0xf800d9b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800d9f0:	0005883a 	mov	r2,zero
}
 800d9f4:	e037883a 	mov	sp,fp
 800d9f8:	dfc00117 	ldw	ra,4(sp)
 800d9fc:	df000017 	ldw	fp,0(sp)
 800da00:	dec00204 	addi	sp,sp,8
 800da04:	f800283a 	ret

0800da08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800da08:	defffb04 	addi	sp,sp,-20
 800da0c:	dfc00415 	stw	ra,16(sp)
 800da10:	df000315 	stw	fp,12(sp)
 800da14:	df000304 	addi	fp,sp,12
 800da18:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800da1c:	00820074 	movhi	r2,2049
 800da20:	10812204 	addi	r2,r2,1160
 800da24:	10800017 	ldw	r2,0(r2)
 800da28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800da2c:	00003106 	br	800daf4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800da30:	e0bffd17 	ldw	r2,-12(fp)
 800da34:	10800217 	ldw	r2,8(r2)
 800da38:	1009883a 	mov	r4,r2
 800da3c:	80021ac0 	call	80021ac <strlen>
 800da40:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800da44:	e0bffd17 	ldw	r2,-12(fp)
 800da48:	10c00217 	ldw	r3,8(r2)
 800da4c:	e0bffe17 	ldw	r2,-8(fp)
 800da50:	10bfffc4 	addi	r2,r2,-1
 800da54:	1885883a 	add	r2,r3,r2
 800da58:	10800003 	ldbu	r2,0(r2)
 800da5c:	10803fcc 	andi	r2,r2,255
 800da60:	1080201c 	xori	r2,r2,128
 800da64:	10bfe004 	addi	r2,r2,-128
 800da68:	10800bd8 	cmpnei	r2,r2,47
 800da6c:	1000031e 	bne	r2,zero,800da7c <alt_find_file+0x74>
    {
      len -= 1;
 800da70:	e0bffe17 	ldw	r2,-8(fp)
 800da74:	10bfffc4 	addi	r2,r2,-1
 800da78:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800da7c:	e0bffe17 	ldw	r2,-8(fp)
 800da80:	e0ffff17 	ldw	r3,-4(fp)
 800da84:	1885883a 	add	r2,r3,r2
 800da88:	10800003 	ldbu	r2,0(r2)
 800da8c:	10803fcc 	andi	r2,r2,255
 800da90:	1080201c 	xori	r2,r2,128
 800da94:	10bfe004 	addi	r2,r2,-128
 800da98:	10800be0 	cmpeqi	r2,r2,47
 800da9c:	1000081e 	bne	r2,zero,800dac0 <alt_find_file+0xb8>
 800daa0:	e0bffe17 	ldw	r2,-8(fp)
 800daa4:	e0ffff17 	ldw	r3,-4(fp)
 800daa8:	1885883a 	add	r2,r3,r2
 800daac:	10800003 	ldbu	r2,0(r2)
 800dab0:	10803fcc 	andi	r2,r2,255
 800dab4:	1080201c 	xori	r2,r2,128
 800dab8:	10bfe004 	addi	r2,r2,-128
 800dabc:	10000a1e 	bne	r2,zero,800dae8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800dac0:	e0bffd17 	ldw	r2,-12(fp)
 800dac4:	10c00217 	ldw	r3,8(r2)
 800dac8:	e0bffe17 	ldw	r2,-8(fp)
 800dacc:	1809883a 	mov	r4,r3
 800dad0:	e17fff17 	ldw	r5,-4(fp)
 800dad4:	100d883a 	mov	r6,r2
 800dad8:	800dc3c0 	call	800dc3c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800dadc:	1000021e 	bne	r2,zero,800dae8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800dae0:	e0bffd17 	ldw	r2,-12(fp)
 800dae4:	00000806 	br	800db08 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800dae8:	e0bffd17 	ldw	r2,-12(fp)
 800daec:	10800017 	ldw	r2,0(r2)
 800daf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800daf4:	e0fffd17 	ldw	r3,-12(fp)
 800daf8:	00820074 	movhi	r2,2049
 800dafc:	10812204 	addi	r2,r2,1160
 800db00:	18bfcb1e 	bne	r3,r2,800da30 <__alt_data_end+0xf800da30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800db04:	0005883a 	mov	r2,zero
}
 800db08:	e037883a 	mov	sp,fp
 800db0c:	dfc00117 	ldw	ra,4(sp)
 800db10:	df000017 	ldw	fp,0(sp)
 800db14:	dec00204 	addi	sp,sp,8
 800db18:	f800283a 	ret

0800db1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800db1c:	defffa04 	addi	sp,sp,-24
 800db20:	dfc00515 	stw	ra,20(sp)
 800db24:	df000415 	stw	fp,16(sp)
 800db28:	dc000315 	stw	r16,12(sp)
 800db2c:	df000304 	addi	fp,sp,12
 800db30:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800db34:	00bffa04 	movi	r2,-24
 800db38:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800db3c:	e03ffd15 	stw	zero,-12(fp)
 800db40:	00002106 	br	800dbc8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 800db44:	04020074 	movhi	r16,2049
 800db48:	843ca504 	addi	r16,r16,-3436
 800db4c:	e0bffd17 	ldw	r2,-12(fp)
 800db50:	1009883a 	mov	r4,r2
 800db54:	01400304 	movi	r5,12
 800db58:	800b1340 	call	800b134 <__mulsi3>
 800db5c:	8085883a 	add	r2,r16,r2
 800db60:	10800017 	ldw	r2,0(r2)
 800db64:	1000151e 	bne	r2,zero,800dbbc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 800db68:	04020074 	movhi	r16,2049
 800db6c:	843ca504 	addi	r16,r16,-3436
 800db70:	e0bffd17 	ldw	r2,-12(fp)
 800db74:	1009883a 	mov	r4,r2
 800db78:	01400304 	movi	r5,12
 800db7c:	800b1340 	call	800b134 <__mulsi3>
 800db80:	8085883a 	add	r2,r16,r2
 800db84:	e0ffff17 	ldw	r3,-4(fp)
 800db88:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800db8c:	00820074 	movhi	r2,2049
 800db90:	10812604 	addi	r2,r2,1176
 800db94:	10c00017 	ldw	r3,0(r2)
 800db98:	e0bffd17 	ldw	r2,-12(fp)
 800db9c:	1880040e 	bge	r3,r2,800dbb0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 800dba0:	00820074 	movhi	r2,2049
 800dba4:	10812604 	addi	r2,r2,1176
 800dba8:	e0fffd17 	ldw	r3,-12(fp)
 800dbac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800dbb0:	e0bffd17 	ldw	r2,-12(fp)
 800dbb4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800dbb8:	00000606 	br	800dbd4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800dbbc:	e0bffd17 	ldw	r2,-12(fp)
 800dbc0:	10800044 	addi	r2,r2,1
 800dbc4:	e0bffd15 	stw	r2,-12(fp)
 800dbc8:	e0bffd17 	ldw	r2,-12(fp)
 800dbcc:	10800810 	cmplti	r2,r2,32
 800dbd0:	103fdc1e 	bne	r2,zero,800db44 <__alt_data_end+0xf800db44>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800dbd4:	e0bffe17 	ldw	r2,-8(fp)
}
 800dbd8:	e037883a 	mov	sp,fp
 800dbdc:	dfc00217 	ldw	ra,8(sp)
 800dbe0:	df000117 	ldw	fp,4(sp)
 800dbe4:	dc000017 	ldw	r16,0(sp)
 800dbe8:	dec00304 	addi	sp,sp,12
 800dbec:	f800283a 	ret

0800dbf0 <atexit>:
 800dbf0:	200b883a 	mov	r5,r4
 800dbf4:	000d883a 	mov	r6,zero
 800dbf8:	0009883a 	mov	r4,zero
 800dbfc:	000f883a 	mov	r7,zero
 800dc00:	800dcb81 	jmpi	800dcb8 <__register_exitproc>

0800dc04 <exit>:
 800dc04:	defffe04 	addi	sp,sp,-8
 800dc08:	000b883a 	mov	r5,zero
 800dc0c:	dc000015 	stw	r16,0(sp)
 800dc10:	dfc00115 	stw	ra,4(sp)
 800dc14:	2021883a 	mov	r16,r4
 800dc18:	800dde80 	call	800dde8 <__call_exitprocs>
 800dc1c:	00820074 	movhi	r2,2049
 800dc20:	10811d04 	addi	r2,r2,1140
 800dc24:	11000017 	ldw	r4,0(r2)
 800dc28:	20800f17 	ldw	r2,60(r4)
 800dc2c:	10000126 	beq	r2,zero,800dc34 <exit+0x30>
 800dc30:	103ee83a 	callr	r2
 800dc34:	8009883a 	mov	r4,r16
 800dc38:	800df880 	call	800df88 <_exit>

0800dc3c <memcmp>:
 800dc3c:	01c000c4 	movi	r7,3
 800dc40:	3980192e 	bgeu	r7,r6,800dca8 <memcmp+0x6c>
 800dc44:	2904b03a 	or	r2,r5,r4
 800dc48:	11c4703a 	and	r2,r2,r7
 800dc4c:	10000f26 	beq	r2,zero,800dc8c <memcmp+0x50>
 800dc50:	20c00003 	ldbu	r3,0(r4)
 800dc54:	28800003 	ldbu	r2,0(r5)
 800dc58:	1880151e 	bne	r3,r2,800dcb0 <memcmp+0x74>
 800dc5c:	31bfff84 	addi	r6,r6,-2
 800dc60:	01ffffc4 	movi	r7,-1
 800dc64:	00000406 	br	800dc78 <memcmp+0x3c>
 800dc68:	20c00003 	ldbu	r3,0(r4)
 800dc6c:	28800003 	ldbu	r2,0(r5)
 800dc70:	31bfffc4 	addi	r6,r6,-1
 800dc74:	18800e1e 	bne	r3,r2,800dcb0 <memcmp+0x74>
 800dc78:	21000044 	addi	r4,r4,1
 800dc7c:	29400044 	addi	r5,r5,1
 800dc80:	31fff91e 	bne	r6,r7,800dc68 <__alt_data_end+0xf800dc68>
 800dc84:	0005883a 	mov	r2,zero
 800dc88:	f800283a 	ret
 800dc8c:	20c00017 	ldw	r3,0(r4)
 800dc90:	28800017 	ldw	r2,0(r5)
 800dc94:	1880041e 	bne	r3,r2,800dca8 <memcmp+0x6c>
 800dc98:	31bfff04 	addi	r6,r6,-4
 800dc9c:	21000104 	addi	r4,r4,4
 800dca0:	29400104 	addi	r5,r5,4
 800dca4:	39bff936 	bltu	r7,r6,800dc8c <__alt_data_end+0xf800dc8c>
 800dca8:	303fe91e 	bne	r6,zero,800dc50 <__alt_data_end+0xf800dc50>
 800dcac:	003ff506 	br	800dc84 <__alt_data_end+0xf800dc84>
 800dcb0:	1885c83a 	sub	r2,r3,r2
 800dcb4:	f800283a 	ret

0800dcb8 <__register_exitproc>:
 800dcb8:	defffa04 	addi	sp,sp,-24
 800dcbc:	00820074 	movhi	r2,2049
 800dcc0:	10811d04 	addi	r2,r2,1140
 800dcc4:	dc000315 	stw	r16,12(sp)
 800dcc8:	14000017 	ldw	r16,0(r2)
 800dccc:	dc400415 	stw	r17,16(sp)
 800dcd0:	dfc00515 	stw	ra,20(sp)
 800dcd4:	80805217 	ldw	r2,328(r16)
 800dcd8:	2023883a 	mov	r17,r4
 800dcdc:	10003e26 	beq	r2,zero,800ddd8 <__register_exitproc+0x120>
 800dce0:	10c00117 	ldw	r3,4(r2)
 800dce4:	020007c4 	movi	r8,31
 800dce8:	40c0180e 	bge	r8,r3,800dd4c <__register_exitproc+0x94>
 800dcec:	00800034 	movhi	r2,0
 800dcf0:	10800004 	addi	r2,r2,0
 800dcf4:	1000061e 	bne	r2,zero,800dd10 <__register_exitproc+0x58>
 800dcf8:	00bfffc4 	movi	r2,-1
 800dcfc:	dfc00517 	ldw	ra,20(sp)
 800dd00:	dc400417 	ldw	r17,16(sp)
 800dd04:	dc000317 	ldw	r16,12(sp)
 800dd08:	dec00604 	addi	sp,sp,24
 800dd0c:	f800283a 	ret
 800dd10:	01006404 	movi	r4,400
 800dd14:	d9400015 	stw	r5,0(sp)
 800dd18:	d9800115 	stw	r6,4(sp)
 800dd1c:	d9c00215 	stw	r7,8(sp)
 800dd20:	00000000 	call	0 <__reset-0x8000000>
 800dd24:	d9400017 	ldw	r5,0(sp)
 800dd28:	d9800117 	ldw	r6,4(sp)
 800dd2c:	d9c00217 	ldw	r7,8(sp)
 800dd30:	103ff126 	beq	r2,zero,800dcf8 <__alt_data_end+0xf800dcf8>
 800dd34:	80c05217 	ldw	r3,328(r16)
 800dd38:	10000115 	stw	zero,4(r2)
 800dd3c:	10c00015 	stw	r3,0(r2)
 800dd40:	80805215 	stw	r2,328(r16)
 800dd44:	10006215 	stw	zero,392(r2)
 800dd48:	10006315 	stw	zero,396(r2)
 800dd4c:	10c00117 	ldw	r3,4(r2)
 800dd50:	88000d1e 	bne	r17,zero,800dd88 <__register_exitproc+0xd0>
 800dd54:	19000084 	addi	r4,r3,2
 800dd58:	2109883a 	add	r4,r4,r4
 800dd5c:	18c00044 	addi	r3,r3,1
 800dd60:	2109883a 	add	r4,r4,r4
 800dd64:	1109883a 	add	r4,r2,r4
 800dd68:	10c00115 	stw	r3,4(r2)
 800dd6c:	0005883a 	mov	r2,zero
 800dd70:	21400015 	stw	r5,0(r4)
 800dd74:	dfc00517 	ldw	ra,20(sp)
 800dd78:	dc400417 	ldw	r17,16(sp)
 800dd7c:	dc000317 	ldw	r16,12(sp)
 800dd80:	dec00604 	addi	sp,sp,24
 800dd84:	f800283a 	ret
 800dd88:	02400044 	movi	r9,1
 800dd8c:	12806217 	ldw	r10,392(r2)
 800dd90:	48d2983a 	sll	r9,r9,r3
 800dd94:	19000804 	addi	r4,r3,32
 800dd98:	18d1883a 	add	r8,r3,r3
 800dd9c:	2109883a 	add	r4,r4,r4
 800dda0:	4211883a 	add	r8,r8,r8
 800dda4:	2109883a 	add	r4,r4,r4
 800dda8:	1109883a 	add	r4,r2,r4
 800ddac:	1211883a 	add	r8,r2,r8
 800ddb0:	5254b03a 	or	r10,r10,r9
 800ddb4:	21c02215 	stw	r7,136(r4)
 800ddb8:	41802215 	stw	r6,136(r8)
 800ddbc:	12806215 	stw	r10,392(r2)
 800ddc0:	01000084 	movi	r4,2
 800ddc4:	893fe31e 	bne	r17,r4,800dd54 <__alt_data_end+0xf800dd54>
 800ddc8:	11006317 	ldw	r4,396(r2)
 800ddcc:	2252b03a 	or	r9,r4,r9
 800ddd0:	12406315 	stw	r9,396(r2)
 800ddd4:	003fdf06 	br	800dd54 <__alt_data_end+0xf800dd54>
 800ddd8:	00820074 	movhi	r2,2049
 800dddc:	10881a04 	addi	r2,r2,8296
 800dde0:	80805215 	stw	r2,328(r16)
 800dde4:	003fbe06 	br	800dce0 <__alt_data_end+0xf800dce0>

0800dde8 <__call_exitprocs>:
 800dde8:	00820074 	movhi	r2,2049
 800ddec:	10811d04 	addi	r2,r2,1140
 800ddf0:	10800017 	ldw	r2,0(r2)
 800ddf4:	defff304 	addi	sp,sp,-52
 800ddf8:	df000b15 	stw	fp,44(sp)
 800ddfc:	d8800015 	stw	r2,0(sp)
 800de00:	10805204 	addi	r2,r2,328
 800de04:	dd400815 	stw	r21,32(sp)
 800de08:	dfc00c15 	stw	ra,48(sp)
 800de0c:	ddc00a15 	stw	r23,40(sp)
 800de10:	dd800915 	stw	r22,36(sp)
 800de14:	dd000715 	stw	r20,28(sp)
 800de18:	dcc00615 	stw	r19,24(sp)
 800de1c:	dc800515 	stw	r18,20(sp)
 800de20:	dc400415 	stw	r17,16(sp)
 800de24:	dc000315 	stw	r16,12(sp)
 800de28:	d9000115 	stw	r4,4(sp)
 800de2c:	2839883a 	mov	fp,r5
 800de30:	d8800215 	stw	r2,8(sp)
 800de34:	057fffc4 	movi	r21,-1
 800de38:	d8800017 	ldw	r2,0(sp)
 800de3c:	ddc00217 	ldw	r23,8(sp)
 800de40:	14805217 	ldw	r18,328(r2)
 800de44:	90001726 	beq	r18,zero,800dea4 <__call_exitprocs+0xbc>
 800de48:	94400117 	ldw	r17,4(r18)
 800de4c:	8c3fffc4 	addi	r16,r17,-1
 800de50:	80001116 	blt	r16,zero,800de98 <__call_exitprocs+0xb0>
 800de54:	8c400044 	addi	r17,r17,1
 800de58:	8427883a 	add	r19,r16,r16
 800de5c:	8c63883a 	add	r17,r17,r17
 800de60:	95802204 	addi	r22,r18,136
 800de64:	9ce7883a 	add	r19,r19,r19
 800de68:	8c63883a 	add	r17,r17,r17
 800de6c:	b4e7883a 	add	r19,r22,r19
 800de70:	9463883a 	add	r17,r18,r17
 800de74:	e0001726 	beq	fp,zero,800ded4 <__call_exitprocs+0xec>
 800de78:	8c87c83a 	sub	r3,r17,r18
 800de7c:	b0c7883a 	add	r3,r22,r3
 800de80:	18c01e17 	ldw	r3,120(r3)
 800de84:	1f001326 	beq	r3,fp,800ded4 <__call_exitprocs+0xec>
 800de88:	843fffc4 	addi	r16,r16,-1
 800de8c:	9cffff04 	addi	r19,r19,-4
 800de90:	8c7fff04 	addi	r17,r17,-4
 800de94:	857ff71e 	bne	r16,r21,800de74 <__alt_data_end+0xf800de74>
 800de98:	00800034 	movhi	r2,0
 800de9c:	10800004 	addi	r2,r2,0
 800dea0:	10002a1e 	bne	r2,zero,800df4c <__call_exitprocs+0x164>
 800dea4:	dfc00c17 	ldw	ra,48(sp)
 800dea8:	df000b17 	ldw	fp,44(sp)
 800deac:	ddc00a17 	ldw	r23,40(sp)
 800deb0:	dd800917 	ldw	r22,36(sp)
 800deb4:	dd400817 	ldw	r21,32(sp)
 800deb8:	dd000717 	ldw	r20,28(sp)
 800debc:	dcc00617 	ldw	r19,24(sp)
 800dec0:	dc800517 	ldw	r18,20(sp)
 800dec4:	dc400417 	ldw	r17,16(sp)
 800dec8:	dc000317 	ldw	r16,12(sp)
 800decc:	dec00d04 	addi	sp,sp,52
 800ded0:	f800283a 	ret
 800ded4:	91000117 	ldw	r4,4(r18)
 800ded8:	88c00017 	ldw	r3,0(r17)
 800dedc:	213fffc4 	addi	r4,r4,-1
 800dee0:	24001526 	beq	r4,r16,800df38 <__call_exitprocs+0x150>
 800dee4:	88000015 	stw	zero,0(r17)
 800dee8:	183fe726 	beq	r3,zero,800de88 <__alt_data_end+0xf800de88>
 800deec:	00800044 	movi	r2,1
 800def0:	1408983a 	sll	r4,r2,r16
 800def4:	91406217 	ldw	r5,392(r18)
 800def8:	95000117 	ldw	r20,4(r18)
 800defc:	214a703a 	and	r5,r4,r5
 800df00:	28000b26 	beq	r5,zero,800df30 <__call_exitprocs+0x148>
 800df04:	91406317 	ldw	r5,396(r18)
 800df08:	2148703a 	and	r4,r4,r5
 800df0c:	20000c1e 	bne	r4,zero,800df40 <__call_exitprocs+0x158>
 800df10:	99400017 	ldw	r5,0(r19)
 800df14:	d9000117 	ldw	r4,4(sp)
 800df18:	183ee83a 	callr	r3
 800df1c:	90c00117 	ldw	r3,4(r18)
 800df20:	1d3fc51e 	bne	r3,r20,800de38 <__alt_data_end+0xf800de38>
 800df24:	b8c00017 	ldw	r3,0(r23)
 800df28:	1cbfd726 	beq	r3,r18,800de88 <__alt_data_end+0xf800de88>
 800df2c:	003fc206 	br	800de38 <__alt_data_end+0xf800de38>
 800df30:	183ee83a 	callr	r3
 800df34:	003ff906 	br	800df1c <__alt_data_end+0xf800df1c>
 800df38:	94000115 	stw	r16,4(r18)
 800df3c:	003fea06 	br	800dee8 <__alt_data_end+0xf800dee8>
 800df40:	99000017 	ldw	r4,0(r19)
 800df44:	183ee83a 	callr	r3
 800df48:	003ff406 	br	800df1c <__alt_data_end+0xf800df1c>
 800df4c:	90c00117 	ldw	r3,4(r18)
 800df50:	1800071e 	bne	r3,zero,800df70 <__call_exitprocs+0x188>
 800df54:	90c00017 	ldw	r3,0(r18)
 800df58:	18000926 	beq	r3,zero,800df80 <__call_exitprocs+0x198>
 800df5c:	9009883a 	mov	r4,r18
 800df60:	b8c00015 	stw	r3,0(r23)
 800df64:	00000000 	call	0 <__reset-0x8000000>
 800df68:	bc800017 	ldw	r18,0(r23)
 800df6c:	003fb506 	br	800de44 <__alt_data_end+0xf800de44>
 800df70:	90c00017 	ldw	r3,0(r18)
 800df74:	902f883a 	mov	r23,r18
 800df78:	1825883a 	mov	r18,r3
 800df7c:	003fb106 	br	800de44 <__alt_data_end+0xf800de44>
 800df80:	0007883a 	mov	r3,zero
 800df84:	003ffb06 	br	800df74 <__alt_data_end+0xf800df74>

0800df88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800df88:	defffc04 	addi	sp,sp,-16
 800df8c:	df000315 	stw	fp,12(sp)
 800df90:	df000304 	addi	fp,sp,12
 800df94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800df98:	0001883a 	nop
 800df9c:	e0bfff17 	ldw	r2,-4(fp)
 800dfa0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 800dfa4:	e0bffd17 	ldw	r2,-12(fp)
 800dfa8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800dfac:	e0bffe17 	ldw	r2,-8(fp)
 800dfb0:	10000226 	beq	r2,zero,800dfbc <_exit+0x34>
    ALT_SIM_FAIL();
 800dfb4:	002af070 	cmpltui	zero,zero,43969
 800dfb8:	00000106 	br	800dfc0 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 800dfbc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800dfc0:	003fff06 	br	800dfc0 <__alt_data_end+0xf800dfc0>
