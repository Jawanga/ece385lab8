
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011b14 memsz 0x00011b14 flags r-x
    LOAD off    0x00012b34 vaddr 0x08011b34 paddr 0x08013620 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001510c vaddr 0x0801510c paddr 0x0801510c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010f18  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a60  080110d4  080110d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08011b34  08013620  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0801510c  0801510c  0001510c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0801526c  0801526c  00014620  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  00014620  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d08  00000000  00000000  00014660  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000234d6  00000000  00000000  00015368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008e6a  00000000  00000000  0003883e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b1af  00000000  00000000  000416a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002254  00000000  00000000  0004c858  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003368  00000000  00000000  0004eaac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001704e  00000000  00000000  00051e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00068e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001338  00000000  00000000  00068ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d3af  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006d3b2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d3b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d3b6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006d3b7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006d3c0  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006d3c9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006d3d2  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  0006d3dc  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004fd93  00000000  00000000  0006d409  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080110d4 l    d  .rodata	00000000 .rodata
08011b34 l    d  .rwdata	00000000 .rwdata
0801510c l    d  .bss	00000000 .bss
0801526c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0801510c l     O .bss	00000002 ctl_reg.3283
0801510e l     O .bss	00000002 no_device.3284
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011882 l     O .rodata	00000010 zeroes.4155
08011892 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800448c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005f64 l     F .text	00000008 __fp_lock
08005f6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011b34 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08011f78 l     O .rwdata	00000020 lc_ctype_charset
08011f58 l     O .rwdata	00000020 lc_message_charset
08011f98 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080118c4 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
080093e8 l     F .text	000000fc __sprint_r.part.0
080119f8 l     O .rodata	00000010 blanks.4099
080119e8 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c010 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800e8d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800e9f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ea1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800eb20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800ec18 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ecfc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800eedc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08013610 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f184 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f2c8 l     F .text	00000038 alt_dev_reg
08012580 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f59c l     F .text	000001fc altera_avalon_jtag_uart_irq
0800f798 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010060 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080104ec l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010644 l     F .text	00000050 alt_get_errno
08010694 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008a64 g     F .text	00000074 _mprec_log10
08008b50 g     F .text	00000088 __any_on
0800aeb0 g     F .text	00000064 _isatty_r
080118d0 g     O .rodata	00000028 __mprec_tinytens
0800ee24 g     F .text	00000078 alt_main
08002084 g     F .text	000000b8 _puts_r
0801516c g     O .bss	00000100 alt_irq
0800af14 g     F .text	0000006c _lseek_r
08013620 g       *ABS*	00000000 __flash_rwdata_start
0800d364 g     F .text	00000084 .hidden __eqdf2
0801526c g       *ABS*	00000000 __alt_heap_start
08002048 g     F .text	0000003c printf
0800b188 g     F .text	0000009c _wcrtomb_r
080092e0 g     F .text	0000005c __sseek
08006010 g     F .text	0000019c __sinit
0800afec g     F .text	00000180 __swbuf_r
08006d20 g     F .text	00000070 _setlocale_r
08005f80 g     F .text	00000078 __sfmoreglue
0800eebc g     F .text	00000020 __malloc_unlock
08001f18 g     F .text	00000088 UsbGetRetryCnt
08007960 g     F .text	0000013c memmove
08005ff8 g     F .text	00000018 _cleanup
08007bb0 g     F .text	000000a8 _Balloc
0800d3e8 g     F .text	000000d8 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800ae48 g     F .text	00000068 _fstat_r
08015128 g     O .bss	00000004 errno
0800925c g     F .text	00000008 __seofread
08015130 g     O .bss	00000004 alt_argv
0801b5e0 g       *ABS*	00000000 _gp
0800f154 g     F .text	00000030 usleep
08012400 g     O .rwdata	00000180 alt_fd_list
08010aa0 g     F .text	00000090 alt_find_dev
08007854 g     F .text	0000010c memcpy
08005f74 g     F .text	0000000c _cleanup_r
0800e6b4 g     F .text	000000d0 .hidden __floatsidf
080105cc g     F .text	00000078 alt_io_redirect
0800d4c0 g     F .text	000000ec .hidden __ltdf2
080110d4 g       *ABS*	00000000 __DTOR_END__
0800213c g     F .text	00000014 puts
0800913c g     F .text	00000068 __fpclassifyd
080089c4 g     F .text	000000a0 __ratio
0800a944 g     F .text	00000024 __vfiprintf_internal
0800f990 g     F .text	00000208 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0800201c g     F .text	0000002c _printf_r
0800c114 g     F .text	00000008 .hidden __udivsi3
0800eb70 g     F .text	000000a8 isatty
08011920 g     O .rodata	000000c8 __mprec_tens
08006d90 g     F .text	0000000c __locale_charset
08015124 g     O .bss	00000004 __malloc_top_pad
080015a4 g     F .text	00000268 UsbGetConfigDesc2
080135e8 g     O .rwdata	00000004 __mb_cur_max
08006dc0 g     F .text	0000000c _localeconv_r
08007fe0 g     F .text	0000003c __i2b
08006714 g     F .text	000004ac __sfvwrite_r
080091a4 g     F .text	00000064 _sbrk_r
0800af80 g     F .text	0000006c _read_r
08013608 g     O .rwdata	00000004 alt_max_fd
0800ab10 g     F .text	00000128 _fclose_r
08005f34 g     F .text	00000030 fflush
08015120 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c14c g     F .text	0000087c .hidden __adddf3
08008790 g     F .text	000000f0 __b2d
0800b9dc g     F .text	00000634 .hidden __umoddi3
0800ed4c g     F .text	000000d8 lseek
080135e0 g     O .rwdata	00000004 _global_impure_ptr
08008bd8 g     F .text	00000564 _realloc_r
0801526c g       *ABS*	00000000 __bss_end
080103fc g     F .text	000000f0 alt_iic_isr_register
0801097c g     F .text	00000104 alt_tick
0800b388 g     F .text	00000654 .hidden __udivdi3
0800ac4c g     F .text	00000184 _fputwc_r
080118f8 g     O .rodata	00000028 __mprec_bigtens
08007dc4 g     F .text	00000104 __s2b
0800e784 g     F .text	000000a0 .hidden __floatunsidf
08008520 g     F .text	00000060 __mcmp
08000ff4 g     F .text	00000100 UsbSetAddress
080062d8 g     F .text	00000018 __fp_lock_all
080103b0 g     F .text	0000004c alt_ic_irq_enabled
080108e4 g     F .text	00000098 alt_alarm_stop
08015138 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
080123d8 g     O .rwdata	00000028 alt_dev_null
08010044 g     F .text	0000001c alt_dcache_flush_all
08007ec8 g     F .text	00000068 __hi0bits
0800e634 g     F .text	00000080 .hidden __fixdfsi
08013620 g       *ABS*	00000000 __ram_rwdata_end
08013600 g     O .rwdata	00000008 alt_dev_list
0800f1d4 g     F .text	000000f4 write
08011b34 g       *ABS*	00000000 __ram_rodata_end
0800ea6c g     F .text	000000b4 fstat
0800d4c0 g     F .text	000000ec .hidden __ledf2
08001fa0 g     F .text	0000007c UsbPrintMem
08008288 g     F .text	00000148 __pow5mult
080094fc g     F .text	00001448 ___vfiprintf_internal_r
08015118 g     O .bss	00000004 __nlocale_changed
0800c11c g     F .text	00000008 .hidden __umodsi3
0801526c g       *ABS*	00000000 end
0800f4dc g     F .text	000000c0 altera_avalon_jtag_uart_init
080110d4 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800e824 g     F .text	000000ac .hidden __clzsi2
0800fb98 g     F .text	00000218 altera_avalon_jtag_uart_write
080062c8 g     F .text	00000004 __sfp_lock_acquire
0800776c g     F .text	000000e8 memchr
080021dc g     F .text	00002154 ___vfprintf_internal_r
0800190c g     F .text	00000100 UsbClassRequest
08006444 g     F .text	000002d0 _free_r
08006d9c g     F .text	00000010 __locale_mb_cur_max
08010efc g     F .text	000001a4 __call_exitprocs
08015114 g     O .bss	00000004 __mlocale_changed
080135ec g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
0801513c g     O .bss	00000004 _alt_tick_rate
080083d0 g     F .text	00000150 __lshift
08015140 g     O .bss	00000004 _alt_nticks
0800ef2c g     F .text	000000f8 read
0800f334 g     F .text	00000044 alt_sys_init
08010de0 g     F .text	0000011c __register_exitproc
0800801c g     F .text	0000026c __multiply
0800f83c g     F .text	00000068 altera_avalon_jtag_uart_close
0800c124 g     F .text	00000028 .hidden __mulsi3
08011b34 g       *ABS*	00000000 __ram_rwdata_start
080110d4 g       *ABS*	00000000 __ram_rodata_start
08015144 g     O .bss	00000028 __malloc_current_mallinfo
08008880 g     F .text	00000144 __d2b
080010f4 g     F .text	00000148 UsbGetDeviceDesc1
0800f378 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010c44 g     F .text	000000d4 alt_get_fd
0800fef0 g     F .text	00000154 alt_busy_sleep
0800a9d4 g     F .text	00000064 _close_r
08010d64 g     F .text	0000007c memcmp
0800f438 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801526c g       *ABS*	00000000 __alt_stack_base
0800f488 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004354 g     F .text	00000138 __swsetup_r
0800c9c8 g     F .text	0000099c .hidden __divdf3
080061ac g     F .text	0000011c __sfp
08008ad8 g     F .text	00000078 __copybits
08011fd0 g     O .rwdata	00000408 __malloc_av_
080062d4 g     F .text	00000004 __sinit_lock_release
0800d5ac g     F .text	00000800 .hidden __muldf3
08009208 g     F .text	00000054 __sread
08001e94 g     F .text	00000084 UsbWaitTDListDone
08010b30 g     F .text	00000114 alt_find_file
080100b0 g     F .text	000000a0 alt_dev_llist_insert
0800ee9c g     F .text	00000020 __malloc_lock
0800f0a4 g     F .text	000000b0 sbrk
08005cf0 g     F .text	00000244 _fflush_r
0800aa38 g     F .text	000000d8 _calloc_r
0801510c g       *ABS*	00000000 __bss_start
08007a9c g     F .text	00000114 memset
080001f8 g     F .text	00000cbc main
08015134 g     O .bss	00000004 alt_envp
0801511c g     O .bss	00000004 __malloc_max_total_mem
0800f3d8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800180c g     F .text	00000100 UsbSetConfig
0800b16c g     F .text	0000001c __swbuf
0800933c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800ac38 g     F .text	00000014 fclose
080046b4 g     F .text	0000163c _dtoa_r
08006fa8 g     F .text	000007c4 _malloc_r
0800b2fc g     F .text	00000030 __ascii_wctomb
0801360c g     O .rwdata	00000004 alt_errno
08006bc0 g     F .text	000000a8 _fwalk
0800c080 g     F .text	00000048 .hidden __divsi3
08006308 g     F .text	0000013c _malloc_trim_r
08001a0c g     F .text	00000148 UsbGetHidDesc
080110d4 g       *ABS*	00000000 __CTOR_END__
08009344 g     F .text	000000a4 strcmp
080110d4 g       *ABS*	00000000 __flash_rodata_start
080110d4 g       *ABS*	00000000 __DTOR_LIST__
0800d364 g     F .text	00000084 .hidden __nedf2
08000efc g     F .text	0000003c UsbRead
0800f300 g     F .text	00000034 alt_irq_init
0800f024 g     F .text	00000080 alt_release_fd
08011a08 g     O .rodata	00000100 .hidden __clz_tab
08015110 g     O .bss	00000004 _PathLocale
08010d18 g     F .text	00000014 atexit
0800a968 g     F .text	0000006c _write_r
08006dcc g     F .text	0000001c setlocale
080135e4 g     O .rwdata	00000004 _impure_ptr
0801512c g     O .bss	00000004 alt_argc
080101ac g     F .text	0000005c _do_dtors
08006db8 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08008730 g     F .text	00000060 __ulp
080062f0 g     F .text	00000018 __fp_unlock_all
080135f8 g     O .rwdata	00000008 alt_fs_list
08001b54 g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006de8 g     F .text	0000000c localeconv
08010224 g     F .text	00000050 alt_ic_isr_register
08013620 g       *ABS*	00000000 _edata
0801526c g       *ABS*	00000000 _end
08000eb4 g     F .text	00000048 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800f8a4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08010310 g     F .text	000000a0 alt_ic_irq_disable
08009264 g     F .text	0000007c __swrite
080135f0 g     O .rwdata	00000004 __malloc_trim_threshold
08010a80 g     F .text	00000020 altera_nios2_qsys_irq_init
08006dac g     F .text	0000000c __locale_msgcharset
08010d2c g     F .text	00000038 exit
08006c68 g     F .text	000000b8 _fwalk_reent
08008580 g     F .text	000001b0 __mdiff
0800c0c8 g     F .text	0000004c .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080062cc g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080110a0 g     F .text	00000034 _exit
0800fdb0 g     F .text	00000140 alt_alarm_start
08006df4 g     F .text	000001b4 __smakebuf_r
08002150 g     F .text	0000008c strlen
08010788 g     F .text	0000015c open
0800d3e8 g     F .text	000000d8 .hidden __gedf2
080135f4 g     O .rwdata	00000004 __wctomb
080094e4 g     F .text	00000018 __sprint_r
08010208 g     F .text	0000001c alt_icache_flush_all
08013614 g     O .rwdata	00000004 alt_priority_mask
08010274 g     F .text	0000009c alt_ic_irq_enable
08004330 g     F .text	00000024 __vfprintf_internal
0800b32c g     F .text	0000005c _wctomb_r
0800ddac g     F .text	00000888 .hidden __subdf3
08007f30 g     F .text	000000b0 __lo0bits
08001414 g     F .text	00000190 UsbGetConfigDesc1
08013618 g     O .rwdata	00000008 alt_alarm_list
08010150 g     F .text	0000005c _do_ctors
08000f38 g     F .text	000000bc UsbSoftReset
0800b224 g     F .text	000000d8 wcrtomb
0800e920 g     F .text	000000d0 close
0800123c g     F .text	000001d8 UsbGetDeviceDesc2
0800ec7c g     F .text	00000080 alt_load
0800add0 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
080062d0 g     F .text	00000004 __sinit_lock_acquire
08007c80 g     F .text	00000144 __multadd
08007c58 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001726 	beq	r2,zero,8000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00c20074 	movhi	r3,2049
 8000130:	18d45b04 	addi	r3,r3,20844
 8000134:	e0bffd17 	ldw	r2,-12(fp)
 8000138:	100490fa 	slli	r2,r2,3
 800013c:	1885883a 	add	r2,r3,r2
 8000140:	10800017 	ldw	r2,0(r2)
 8000144:	01020074 	movhi	r4,2049
 8000148:	21145b04 	addi	r4,r4,20844
 800014c:	e0fffd17 	ldw	r3,-12(fp)
 8000150:	180690fa 	slli	r3,r3,3
 8000154:	20c7883a 	add	r3,r4,r3
 8000158:	18c00104 	addi	r3,r3,4
 800015c:	18c00017 	ldw	r3,0(r3)
 8000160:	1809883a 	mov	r4,r3
 8000164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 8000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800017c:	e0bffb17 	ldw	r2,-20(fp)
 8000180:	103fe31e 	bne	r2,zero,8000110 <__alt_data_end+0xf8000110>
 8000184:	00000706 	br	80001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 8000188:	e0bffc17 	ldw	r2,-16(fp)
 800018c:	1085883a 	add	r2,r2,r2
 8000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000194:	e0bffd17 	ldw	r2,-12(fp)
 8000198:	10800044 	addi	r2,r2,1
 800019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a0:	003fde06 	br	800011c <__alt_data_end+0xf800011c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6ad7814 	ori	gp,gp,46560
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	10944314 	ori	r2,r2,20748

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d49b14 	ori	r3,r3,21100

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800ec7c0 	call	800ec7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800ee240 	call	800ee24 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xf80001f4>

080001f8 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 80001f8:	defff804 	addi	sp,sp,-32
 80001fc:	dfc00715 	stw	ra,28(sp)
 8000200:	df000615 	stw	fp,24(sp)
 8000204:	df000604 	addi	fp,sp,24
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 8000208:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 800020c:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000210:	e03ffa85 	stb	zero,-22(fp)

	alt_u16 code;
	int i,hot_plug_count;
	

	printf("USB keyboard setup...\n\n");
 8000214:	01020074 	movhi	r4,2049
 8000218:	21043504 	addi	r4,r4,4308
 800021c:	800213c0 	call	800213c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000220:	8000f380 	call	8000f38 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000224:	01005104 	movi	r4,324
 8000228:	000b883a 	mov	r5,zero
 800022c:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8000230:	01302414 	movui	r4,49296
 8000234:	017fffd4 	movui	r5,65535
 8000238:	8000eb40 	call	8000eb4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 800023c:	01006d04 	movi	r4,436
 8000240:	01409604 	movi	r5,600
 8000244:	8000eb40 	call	8000eb4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 8000248:	00811004 	movi	r2,1088
 800024c:	e0bffa0d 	sth	r2,-24(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 8000250:	e0bffa0b 	ldhu	r2,-24(fp)
 8000254:	01005084 	movi	r4,322
 8000258:	100b883a 	mov	r5,r2
 800025c:	8000eb40 	call	8000eb4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 8000260:	00808404 	movi	r2,528
 8000264:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 8000268:	e0bffe0b 	ldhu	r2,-8(fp)
 800026c:	01302314 	movui	r4,49292
 8000270:	100b883a 	mov	r5,r2
 8000274:	8000eb40 	call	8000eb4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 8000278:	01007104 	movi	r4,452
 800027c:	000b883a 	mov	r5,zero
 8000280:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8000284:	01007184 	movi	r4,454
 8000288:	000b883a 	mov	r5,zero
 800028c:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000290:	01007204 	movi	r4,456
 8000294:	000b883a 	mov	r5,zero
 8000298:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 800029c:	01007284 	movi	r4,458
 80002a0:	000b883a 	mov	r5,zero
 80002a4:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80002a8:	01007304 	movi	r4,460
 80002ac:	000b883a 	mov	r5,zero
 80002b0:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80002b4:	01007384 	movi	r4,462
 80002b8:	000b883a 	mov	r5,zero
 80002bc:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80002c0:	01007404 	movi	r4,464
 80002c4:	000b883a 	mov	r5,zero
 80002c8:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80002cc:	01007484 	movi	r4,466
 80002d0:	000b883a 	mov	r5,zero
 80002d4:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80002d8:	01007504 	movi	r4,468
 80002dc:	000b883a 	mov	r5,zero
 80002e0:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80002e4:	01007584 	movi	r4,470
 80002e8:	000b883a 	mov	r5,zero
 80002ec:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80002f0:	01007604 	movi	r4,472
 80002f4:	000b883a 	mov	r5,zero
 80002f8:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 80002fc:	01007684 	movi	r4,474
 8000300:	000b883a 	mov	r5,zero
 8000304:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000308:	01007704 	movi	r4,476
 800030c:	000b883a 	mov	r5,zero
 8000310:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000314:	01007784 	movi	r4,478
 8000318:	000b883a 	mov	r5,zero
 800031c:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000320:	01007084 	movi	r4,450
 8000324:	01401c84 	movi	r5,114
 8000328:	8000eb40 	call	8000eb4 <UsbWrite>
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 800032c:	00f38054 	movui	r3,52737
 8000330:	00840034 	movhi	r2,4096
 8000334:	10800104 	addi	r2,r2,4
 8000338:	10c00035 	stwio	r3,0(r2)

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 800033c:	0001883a 	nop
 8000340:	00840034 	movhi	r2,4096
 8000344:	10800304 	addi	r2,r2,12
 8000348:	10800037 	ldwio	r2,0(r2)
 800034c:	10bfffcc 	andi	r2,r2,65535
 8000350:	103ffb26 	beq	r2,zero,8000340 <__alt_data_end+0xf8000340>
	{
	}
	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 8000354:	0001883a 	nop
 8000358:	00840034 	movhi	r2,4096
 800035c:	10800104 	addi	r2,r2,4
 8000360:	10800037 	ldwio	r2,0(r2)
 8000364:	1083fb58 	cmpnei	r2,r2,4077
 8000368:	10000826 	beq	r2,zero,800038c <main+0x194>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 800036c:	00840034 	movhi	r2,4096
 8000370:	10800104 	addi	r2,r2,4
 8000374:	10800037 	ldwio	r2,0(r2)
 8000378:	01020074 	movhi	r4,2049
 800037c:	21043b04 	addi	r4,r4,4332
 8000380:	100b883a 	mov	r5,r2
 8000384:	80020480 	call	8002048 <printf>
		goto USB_HOT_PLUG;
 8000388:	003fa506 	br	8000220 <__alt_data_end+0xf8000220>
	}
	// STEP 1b end


	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 800038c:	01007084 	movi	r4,450
 8000390:	01401d04 	movi	r5,116
 8000394:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 8000398:	01007104 	movi	r4,452
 800039c:	01400f04 	movi	r5,60
 80003a0:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003a4:	01007184 	movi	r4,454
 80003a8:	000b883a 	mov	r5,zero
 80003ac:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80003b0:	01007204 	movi	r4,456
 80003b4:	000b883a 	mov	r5,zero
 80003b8:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80003bc:	01007284 	movi	r4,458
 80003c0:	000b883a 	mov	r5,zero
 80003c4:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80003c8:	01007304 	movi	r4,460
 80003cc:	000b883a 	mov	r5,zero
 80003d0:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80003d4:	01007384 	movi	r4,462
 80003d8:	000b883a 	mov	r5,zero
 80003dc:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80003e0:	01007404 	movi	r4,464
 80003e4:	000b883a 	mov	r5,zero
 80003e8:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80003ec:	01007484 	movi	r4,466
 80003f0:	000b883a 	mov	r5,zero
 80003f4:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80003f8:	01007504 	movi	r4,468
 80003fc:	000b883a 	mov	r5,zero
 8000400:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000404:	01007584 	movi	r4,470
 8000408:	000b883a 	mov	r5,zero
 800040c:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000410:	01007604 	movi	r4,472
 8000414:	000b883a 	mov	r5,zero
 8000418:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 800041c:	01007684 	movi	r4,474
 8000420:	000b883a 	mov	r5,zero
 8000424:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000428:	01007704 	movi	r4,476
 800042c:	000b883a 	mov	r5,zero
 8000430:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000434:	01007784 	movi	r4,478
 8000438:	000b883a 	mov	r5,zero
 800043c:	8000eb40 	call	8000eb4 <UsbWrite>

	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_EXEC_INT);
 8000440:	00f38054 	movui	r3,52737
 8000444:	00840034 	movhi	r2,4096
 8000448:	10800104 	addi	r2,r2,4
 800044c:	10c00035 	stwio	r3,0(r2)

	while (IORD(CY7C67200_BASE,HPI_MAILBOX) != COMM_ACK)
 8000450:	0001883a 	nop
 8000454:	00840034 	movhi	r2,4096
 8000458:	10800104 	addi	r2,r2,4
 800045c:	10800037 	ldwio	r2,0(r2)
 8000460:	1083fb58 	cmpnei	r2,r2,4077
 8000464:	10000826 	beq	r2,zero,8000488 <main+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IORD(CY7C67200_BASE,HPI_MAILBOX));
 8000468:	00840034 	movhi	r2,4096
 800046c:	10800104 	addi	r2,r2,4
 8000470:	10800037 	ldwio	r2,0(r2)
 8000474:	01020074 	movhi	r4,2049
 8000478:	21043b04 	addi	r4,r4,4332
 800047c:	100b883a 	mov	r5,r2
 8000480:	80020480 	call	8002048 <printf>
		goto USB_HOT_PLUG;
 8000484:	003f6606 	br	8000220 <__alt_data_end+0xf8000220>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 8000488:	00b02284 	movi	r2,-16246
 800048c:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8000490:	008c0004 	movi	r2,12288
 8000494:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 8000498:	00880004 	movi	r2,8192
 800049c:	e0bffc0d 	sth	r2,-16(fp)

	usb_ctl_val = UsbRead(ctl_reg);
 80004a0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80004a4:	10bfffcc 	andi	r2,r2,65535
 80004a8:	1009883a 	mov	r4,r2
 80004ac:	8000efc0 	call	8000efc <UsbRead>
 80004b0:	e0bffa0d 	sth	r2,-24(fp)

	if (!(usb_ctl_val & no_device))
 80004b4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80004b8:	e0fffa0b 	ldhu	r3,-24(fp)
 80004bc:	1884703a 	and	r2,r3,r2
 80004c0:	10bfffcc 	andi	r2,r2,65535
 80004c4:	1000341e 	bne	r2,zero,8000598 <main+0x3a0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80004c8:	e03ffb15 	stw	zero,-20(fp)
 80004cc:	00001006 	br	8000510 <main+0x318>
		{
			usleep(5*1000);
 80004d0:	0104e204 	movi	r4,5000
 80004d4:	800f1540 	call	800f154 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80004d8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80004dc:	10bfffcc 	andi	r2,r2,65535
 80004e0:	1009883a 	mov	r4,r2
 80004e4:	8000efc0 	call	8000efc <UsbRead>
 80004e8:	e0bffa0d 	sth	r2,-24(fp)
			if(usb_ctl_val & no_device) break;
 80004ec:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80004f0:	e0fffa0b 	ldhu	r3,-24(fp)
 80004f4:	1884703a 	and	r2,r3,r2
 80004f8:	10bfffcc 	andi	r2,r2,65535
 80004fc:	10000126 	beq	r2,zero,8000504 <main+0x30c>
 8000500:	00000606 	br	800051c <main+0x324>

	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 8000504:	e0bffb17 	ldw	r2,-20(fp)
 8000508:	10800044 	addi	r2,r2,1
 800050c:	e0bffb15 	stw	r2,-20(fp)
 8000510:	e0bffb17 	ldw	r2,-20(fp)
 8000514:	10800150 	cmplti	r2,r2,5
 8000518:	103fed1e 	bne	r2,zero,80004d0 <__alt_data_end+0xf80004d0>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 800051c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000520:	e0fffa0b 	ldhu	r3,-24(fp)
 8000524:	1884703a 	and	r2,r3,r2
 8000528:	10bfffcc 	andi	r2,r2,65535
 800052c:	1000261e 	bne	r2,zero,80005c8 <main+0x3d0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000530:	01020074 	movhi	r4,2049
 8000534:	21044404 	addi	r4,r4,4368
 8000538:	800213c0 	call	800213c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 800053c:	01020074 	movhi	r4,2049
 8000540:	21044e04 	addi	r4,r4,4408
 8000544:	800213c0 	call	800213c <puts>
			while (!(usb_ctl_val & no_device))
 8000548:	00000d06 	br	8000580 <main+0x388>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 800054c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000550:	10bfffcc 	andi	r2,r2,65535
 8000554:	1009883a 	mov	r4,r2
 8000558:	8000efc0 	call	8000efc <UsbRead>
 800055c:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device)
 8000560:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000564:	e0fffa0b 	ldhu	r3,-24(fp)
 8000568:	1884703a 	and	r2,r3,r2
 800056c:	10bfffcc 	andi	r2,r2,65535
 8000570:	10000126 	beq	r2,zero,8000578 <main+0x380>
					goto USB_HOT_PLUG;
 8000574:	003f2a06 	br	8000220 <__alt_data_end+0xf8000220>

				usleep(2000);
 8000578:	0101f404 	movi	r4,2000
 800057c:	800f1540 	call	800f154 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 8000580:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000584:	e0fffa0b 	ldhu	r3,-24(fp)
 8000588:	1884703a 	and	r2,r3,r2
 800058c:	10bfffcc 	andi	r2,r2,65535
 8000590:	103fee26 	beq	r2,zero,800054c <__alt_data_end+0xf800054c>
 8000594:	00000c06 	br	80005c8 <main+0x3d0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 8000598:	e0fffa0b 	ldhu	r3,-24(fp)
 800059c:	e0bffc0b 	ldhu	r2,-16(fp)
 80005a0:	1884703a 	and	r2,r3,r2
 80005a4:	10bfffcc 	andi	r2,r2,65535
 80005a8:	10000426 	beq	r2,zero,80005bc <main+0x3c4>
		{
			printf("[INFO]: full speed device\n");
 80005ac:	01020074 	movhi	r4,2049
 80005b0:	21045a04 	addi	r4,r4,4456
 80005b4:	800213c0 	call	800213c <puts>
 80005b8:	00000306 	br	80005c8 <main+0x3d0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80005bc:	01020074 	movhi	r4,2049
 80005c0:	21046104 	addi	r4,r4,4484
 80005c4:	800213c0 	call	800213c <puts>
		}
	}

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80005c8:	8000ff40 	call	8000ff4 <UsbSetAddress>

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80005cc:	00000306 	br	80005dc <main+0x3e4>
	{
		UsbSetAddress();
 80005d0:	8000ff40 	call	8000ff4 <UsbSetAddress>
		usleep(10*1000);
 80005d4:	0109c404 	movi	r4,10000
 80005d8:	800f1540 	call	800f154 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80005dc:	00840034 	movhi	r2,4096
 80005e0:	10800304 	addi	r2,r2,12
 80005e4:	10800037 	ldwio	r2,0(r2)
 80005e8:	1080040c 	andi	r2,r2,16
 80005ec:	103ff826 	beq	r2,zero,80005d0 <__alt_data_end+0xf80005d0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80005f0:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506); // i
 80005f4:	00c14184 	movi	r3,1286
 80005f8:	00840034 	movhi	r2,4096
 80005fc:	10800204 	addi	r2,r2,8
 8000600:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000604:	00840034 	movhi	r2,4096
 8000608:	10800037 	ldwio	r2,0(r2)
 800060c:	01020074 	movhi	r4,2049
 8000610:	21046804 	addi	r4,r4,4512
 8000614:	100b883a 	mov	r5,r2
 8000618:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508); // n
 800061c:	00c14204 	movi	r3,1288
 8000620:	00840034 	movhi	r2,4096
 8000624:	10800204 	addi	r2,r2,8
 8000628:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 800062c:	00840034 	movhi	r2,4096
 8000630:	10800037 	ldwio	r2,0(r2)
 8000634:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 8000638:	e0bffa0b 	ldhu	r2,-24(fp)
 800063c:	01020074 	movhi	r4,2049
 8000640:	21047304 	addi	r4,r4,4556
 8000644:	100b883a 	mov	r5,r2
 8000648:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 800064c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000650:	108000e0 	cmpeqi	r2,r2,3
 8000654:	1000031e 	bne	r2,zero,8000664 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000658:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 800065c:	e0bffa0d 	sth	r2,-24(fp)

		goto USB_HOT_PLUG;
 8000660:	003eef06 	br	8000220 <__alt_data_end+0xf8000220>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000664:	01020074 	movhi	r4,2049
 8000668:	21047f04 	addi	r4,r4,4604
 800066c:	800213c0 	call	800213c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000670:	00000206 	br	800067c <main+0x484>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 8000674:	0109c404 	movi	r4,10000
 8000678:	800f1540 	call	800f154 <usleep>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800067c:	00840034 	movhi	r2,4096
 8000680:	10800304 	addi	r2,r2,12
 8000684:	10800037 	ldwio	r2,0(r2)
 8000688:	1080040c 	andi	r2,r2,16
 800068c:	103ff926 	beq	r2,zero,8000674 <__alt_data_end+0xf8000674>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000690:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000694:	00c14184 	movi	r3,1286
 8000698:	00840034 	movhi	r2,4096
 800069c:	10800204 	addi	r2,r2,8
 80006a0:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80006a4:	00840034 	movhi	r2,4096
 80006a8:	10800037 	ldwio	r2,0(r2)
 80006ac:	01020074 	movhi	r4,2049
 80006b0:	21048e04 	addi	r4,r4,4664
 80006b4:	100b883a 	mov	r5,r2
 80006b8:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80006bc:	00c14204 	movi	r3,1288
 80006c0:	00840034 	movhi	r2,4096
 80006c4:	10800204 	addi	r2,r2,8
 80006c8:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80006cc:	00840034 	movhi	r2,4096
 80006d0:	10800037 	ldwio	r2,0(r2)
 80006d4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80006d8:	e0bffa0b 	ldhu	r2,-24(fp)
 80006dc:	01020074 	movhi	r4,2049
 80006e0:	21049904 	addi	r4,r4,4708
 80006e4:	100b883a 	mov	r5,r2
 80006e8:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 80006ec:	00000206 	br	80006f8 <main+0x500>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80006f0:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 80006f4:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80006f8:	e0bffa0b 	ldhu	r2,-24(fp)
 80006fc:	108000d8 	cmpnei	r2,r2,3
 8000700:	103ffb1e 	bne	r2,zero,80006f0 <__alt_data_end+0xf80006f0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000704:	01020074 	movhi	r4,2049
 8000708:	2104a504 	addi	r4,r4,4756
 800070c:	800213c0 	call	800213c <puts>
	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000710:	00000206 	br	800071c <main+0x524>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.

		usleep(10*1000);
 8000714:	0109c404 	movi	r4,10000
 8000718:	800f1540 	call	800f154 <usleep>
	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800071c:	00840034 	movhi	r2,4096
 8000720:	10800304 	addi	r2,r2,12
 8000724:	10800037 	ldwio	r2,0(r2)
 8000728:	1080040c 	andi	r2,r2,16
 800072c:	103ff926 	beq	r2,zero,8000714 <__alt_data_end+0xf8000714>
		// TASK: Call the appropriate function again if it wasn't processed successfully.

		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000730:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000734:	00c14184 	movi	r3,1286
 8000738:	00840034 	movhi	r2,4096
 800073c:	10800204 	addi	r2,r2,8
 8000740:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000744:	00840034 	movhi	r2,4096
 8000748:	10800037 	ldwio	r2,0(r2)
 800074c:	01020074 	movhi	r4,2049
 8000750:	21048e04 	addi	r4,r4,4664
 8000754:	100b883a 	mov	r5,r2
 8000758:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 800075c:	00c14204 	movi	r3,1288
 8000760:	00840034 	movhi	r2,4096
 8000764:	10800204 	addi	r2,r2,8
 8000768:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 800076c:	00840034 	movhi	r2,4096
 8000770:	10800037 	ldwio	r2,0(r2)
 8000774:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8000778:	e0bffa0b 	ldhu	r2,-24(fp)
 800077c:	01020074 	movhi	r4,2049
 8000780:	21049904 	addi	r4,r4,4708
 8000784:	100b883a 	mov	r5,r2
 8000788:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 800078c:	00000206 	br	8000798 <main+0x5a0>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000790:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 8000794:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000798:	e0bffa0b 	ldhu	r2,-24(fp)
 800079c:	108000d8 	cmpnei	r2,r2,3
 80007a0:	103ffb1e 	bne	r2,zero,8000790 <__alt_data_end+0xf8000790>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 80007a4:	01020074 	movhi	r4,2049
 80007a8:	2104b904 	addi	r4,r4,4836
 80007ac:	800213c0 	call	800213c <puts>
	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007b0:	00000206 	br	80007bc <main+0x5c4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 80007b4:	0109c404 	movi	r4,10000
 80007b8:	800f1540 	call	800f154 <usleep>
	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.

	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007bc:	00840034 	movhi	r2,4096
 80007c0:	10800304 	addi	r2,r2,12
 80007c4:	10800037 	ldwio	r2,0(r2)
 80007c8:	1080040c 	andi	r2,r2,16
 80007cc:	103ff926 	beq	r2,zero,80007b4 <__alt_data_end+0xf80007b4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80007d0:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 80007d4:	00c14184 	movi	r3,1286
 80007d8:	00840034 	movhi	r2,4096
 80007dc:	10800204 	addi	r2,r2,8
 80007e0:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80007e4:	00840034 	movhi	r2,4096
 80007e8:	10800037 	ldwio	r2,0(r2)
 80007ec:	01020074 	movhi	r4,2049
 80007f0:	2104cb04 	addi	r4,r4,4908
 80007f4:	100b883a 	mov	r5,r2
 80007f8:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80007fc:	00c14204 	movi	r3,1288
 8000800:	00840034 	movhi	r2,4096
 8000804:	10800204 	addi	r2,r2,8
 8000808:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 800080c:	00840034 	movhi	r2,4096
 8000810:	10800037 	ldwio	r2,0(r2)
 8000814:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000818:	e0bffa0b 	ldhu	r2,-24(fp)
 800081c:	01020074 	movhi	r4,2049
 8000820:	2104d604 	addi	r4,r4,4952
 8000824:	100b883a 	mov	r5,r2
 8000828:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 800082c:	00000206 	br	8000838 <main+0x640>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000830:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 8000834:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000838:	e0bffa0b 	ldhu	r2,-24(fp)
 800083c:	108000d8 	cmpnei	r2,r2,3
 8000840:	103ffb1e 	bne	r2,zero,8000830 <__alt_data_end+0xf8000830>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8000844:	01020074 	movhi	r4,2049
 8000848:	2104e204 	addi	r4,r4,5000
 800084c:	800213c0 	call	800213c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	// TASK: Call the appropriate function for this step.

	usleep(100*1000);
 8000850:	010000b4 	movhi	r4,2
 8000854:	2121a804 	addi	r4,r4,-31072
 8000858:	800f1540 	call	800f154 <usleep>
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800085c:	00000206 	br	8000868 <main+0x670>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 8000860:	0109c404 	movi	r4,10000
 8000864:	800f1540 	call	800f154 <usleep>
	//-----------------------------------get configuration descriptor-2------------------------------------//
	// TASK: Call the appropriate function for this step.

	usleep(100*1000);
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000868:	00840034 	movhi	r2,4096
 800086c:	10800304 	addi	r2,r2,12
 8000870:	10800037 	ldwio	r2,0(r2)
 8000874:	1080040c 	andi	r2,r2,16
 8000878:	103ff926 	beq	r2,zero,8000860 <__alt_data_end+0xf8000860>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800087c:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000880:	00c14184 	movi	r3,1286
 8000884:	00840034 	movhi	r2,4096
 8000888:	10800204 	addi	r2,r2,8
 800088c:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000890:	00840034 	movhi	r2,4096
 8000894:	10800037 	ldwio	r2,0(r2)
 8000898:	01020074 	movhi	r4,2049
 800089c:	2104f504 	addi	r4,r4,5076
 80008a0:	100b883a 	mov	r5,r2
 80008a4:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80008a8:	00c14204 	movi	r3,1288
 80008ac:	00840034 	movhi	r2,4096
 80008b0:	10800204 	addi	r2,r2,8
 80008b4:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80008b8:	00840034 	movhi	r2,4096
 80008bc:	10800037 	ldwio	r2,0(r2)
 80008c0:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 80008c4:	e0bffa0b 	ldhu	r2,-24(fp)
 80008c8:	01020074 	movhi	r4,2049
 80008cc:	21050004 	addi	r4,r4,5120
 80008d0:	100b883a 	mov	r5,r2
 80008d4:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 80008d8:	00000206 	br	80008e4 <main+0x6ec>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80008dc:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 80008e0:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80008e4:	e0bffa0b 	ldhu	r2,-24(fp)
 80008e8:	108000d8 	cmpnei	r2,r2,3
 80008ec:	103ffb1e 	bne	r2,zero,80008dc <__alt_data_end+0xf80008dc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 80008f0:	01020074 	movhi	r4,2049
 80008f4:	21050c04 	addi	r4,r4,5168
 80008f8:	800213c0 	call	800213c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	code = IORD(CY7C67200_BASE,HPI_DATA);
 80008fc:	00840034 	movhi	r2,4096
 8000900:	10800037 	ldwio	r2,0(r2)
 8000904:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000908:	e0bffe8b 	ldhu	r2,-6(fp)
 800090c:	01020074 	movhi	r4,2049
 8000910:	21051f04 	addi	r4,r4,5244
 8000914:	100b883a 	mov	r5,r2
 8000918:	80020480 	call	8002048 <printf>
	code = code & 0x0ff;
 800091c:	e0bffe8b 	ldhu	r2,-6(fp)
 8000920:	10803fcc 	andi	r2,r2,255
 8000924:	e0bffe8d 	sth	r2,-6(fp)
	if (code == 0x01)
 8000928:	e0bffe8b 	ldhu	r2,-6(fp)
 800092c:	10800058 	cmpnei	r2,r2,1
 8000930:	1000041e 	bne	r2,zero,8000944 <main+0x74c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000934:	01020074 	movhi	r4,2049
 8000938:	21052204 	addi	r4,r4,5256
 800093c:	800213c0 	call	800213c <puts>
 8000940:	00000306 	br	8000950 <main+0x758>
	}
	else
	{
		//printf("\nvalue= %x\n", code);
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000944:	01020074 	movhi	r4,2049
 8000948:	21053104 	addi	r4,r4,5316
 800094c:	800213c0 	call	800213c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	data_size = (IORD(CY7C67200_BASE,HPI_DATA)>>8)&0x0ff;
 8000950:	00840034 	movhi	r2,4096
 8000954:	10800037 	ldwio	r2,0(r2)
 8000958:	1005d23a 	srai	r2,r2,8
 800095c:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000960:	e0bfff03 	ldbu	r2,-4(fp)
 8000964:	01020074 	movhi	r4,2049
 8000968:	21053a04 	addi	r4,r4,5352
 800096c:	100b883a 	mov	r5,r2
 8000970:	80020480 	call	8002048 <printf>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000974:	00000206 	br	8000980 <main+0x788>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 8000978:	0109c404 	movi	r4,10000
 800097c:	800f1540 	call	800f154 <usleep>

	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000980:	00840034 	movhi	r2,4096
 8000984:	10800304 	addi	r2,r2,12
 8000988:	10800037 	ldwio	r2,0(r2)
 800098c:	1080040c 	andi	r2,r2,16
 8000990:	103ff926 	beq	r2,zero,8000978 <__alt_data_end+0xf8000978>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000994:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000998:	00c14184 	movi	r3,1286
 800099c:	00840034 	movhi	r2,4096
 80009a0:	10800204 	addi	r2,r2,8
 80009a4:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 80009a8:	00840034 	movhi	r2,4096
 80009ac:	10800037 	ldwio	r2,0(r2)
 80009b0:	01020074 	movhi	r4,2049
 80009b4:	21054404 	addi	r4,r4,5392
 80009b8:	100b883a 	mov	r5,r2
 80009bc:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 80009c0:	00c14204 	movi	r3,1288
 80009c4:	00840034 	movhi	r2,4096
 80009c8:	10800204 	addi	r2,r2,8
 80009cc:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 80009d0:	00840034 	movhi	r2,4096
 80009d4:	10800037 	ldwio	r2,0(r2)
 80009d8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 80009dc:	e0bffa0b 	ldhu	r2,-24(fp)
 80009e0:	01020074 	movhi	r4,2049
 80009e4:	21054f04 	addi	r4,r4,5436
 80009e8:	100b883a 	mov	r5,r2
 80009ec:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 80009f0:	00000206 	br	80009fc <main+0x804>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80009f4:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 80009f8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80009fc:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a00:	108000d8 	cmpnei	r2,r2,3
 8000a04:	103ffb1e 	bne	r2,zero,80009f4 <__alt_data_end+0xf80009f4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000a08:	01020074 	movhi	r4,2049
 8000a0c:	21055b04 	addi	r4,r4,5484
 8000a10:	800213c0 	call	800213c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a14:	00000206 	br	8000a20 <main+0x828>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 8000a18:	0109c404 	movi	r4,10000
 8000a1c:	800f1540 	call	800f154 <usleep>
	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.

	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000a20:	00840034 	movhi	r2,4096
 8000a24:	10800304 	addi	r2,r2,12
 8000a28:	10800037 	ldwio	r2,0(r2)
 8000a2c:	1080040c 	andi	r2,r2,16
 8000a30:	103ff926 	beq	r2,zero,8000a18 <__alt_data_end+0xf8000a18>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a34:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000a38:	00c14184 	movi	r3,1286
 8000a3c:	00840034 	movhi	r2,4096
 8000a40:	10800204 	addi	r2,r2,8
 8000a44:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000a48:	00840034 	movhi	r2,4096
 8000a4c:	10800037 	ldwio	r2,0(r2)
 8000a50:	01020074 	movhi	r4,2049
 8000a54:	21056d04 	addi	r4,r4,5556
 8000a58:	100b883a 	mov	r5,r2
 8000a5c:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000a60:	00c14204 	movi	r3,1288
 8000a64:	00840034 	movhi	r2,4096
 8000a68:	10800204 	addi	r2,r2,8
 8000a6c:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000a70:	00840034 	movhi	r2,4096
 8000a74:	10800037 	ldwio	r2,0(r2)
 8000a78:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000a7c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000a80:	01020074 	movhi	r4,2049
 8000a84:	21057804 	addi	r4,r4,5600
 8000a88:	100b883a 	mov	r5,r2
 8000a8c:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 8000a90:	00000206 	br	8000a9c <main+0x8a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a94:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 8000a98:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a9c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000aa0:	108000d8 	cmpnei	r2,r2,3
 8000aa4:	103ffb1e 	bne	r2,zero,8000a94 <__alt_data_end+0xf8000a94>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000aa8:	01020074 	movhi	r4,2049
 8000aac:	21058404 	addi	r4,r4,5648
 8000ab0:	800213c0 	call	800213c <puts>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.


	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000ab4:	00000206 	br	8000ac0 <main+0x8c8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 8000ab8:	0109c404 	movi	r4,10000
 8000abc:	800f1540 	call	800f154 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.


	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000ac0:	00840034 	movhi	r2,4096
 8000ac4:	10800304 	addi	r2,r2,12
 8000ac8:	10800037 	ldwio	r2,0(r2)
 8000acc:	1080040c 	andi	r2,r2,16
 8000ad0:	103ff926 	beq	r2,zero,8000ab8 <__alt_data_end+0xf8000ab8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000ad4:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000ad8:	00c14184 	movi	r3,1286
 8000adc:	00840034 	movhi	r2,4096
 8000ae0:	10800204 	addi	r2,r2,8
 8000ae4:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000ae8:	00840034 	movhi	r2,4096
 8000aec:	10800037 	ldwio	r2,0(r2)
 8000af0:	01020074 	movhi	r4,2049
 8000af4:	21056d04 	addi	r4,r4,5556
 8000af8:	100b883a 	mov	r5,r2
 8000afc:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000b00:	00c14204 	movi	r3,1288
 8000b04:	00840034 	movhi	r2,4096
 8000b08:	10800204 	addi	r2,r2,8
 8000b0c:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000b10:	00840034 	movhi	r2,4096
 8000b14:	10800037 	ldwio	r2,0(r2)
 8000b18:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000b1c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000b20:	01020074 	movhi	r4,2049
 8000b24:	21057804 	addi	r4,r4,5600
 8000b28:	100b883a 	mov	r5,r2
 8000b2c:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 8000b30:	00000206 	br	8000b3c <main+0x944>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000b34:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 8000b38:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000b3c:	e0bffa0b 	ldhu	r2,-24(fp)
 8000b40:	108000d8 	cmpnei	r2,r2,3
 8000b44:	103ffb1e 	bne	r2,zero,8000b34 <__alt_data_end+0xf8000b34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000b48:	01020074 	movhi	r4,2049
 8000b4c:	21059604 	addi	r4,r4,5720
 8000b50:	800213c0 	call	800213c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b54:	00000206 	br	8000b60 <main+0x968>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
 8000b58:	0109c404 	movi	r4,10000
 8000b5c:	800f1540 	call	800f154 <usleep>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	//if no message
	while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b60:	00840034 	movhi	r2,4096
 8000b64:	10800304 	addi	r2,r2,12
 8000b68:	10800037 	ldwio	r2,0(r2)
 8000b6c:	1080040c 	andi	r2,r2,16
 8000b70:	103ff926 	beq	r2,zero,8000b58 <__alt_data_end+0xf8000b58>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b74:	8001e940 	call	8001e94 <UsbWaitTDListDone>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0506);
 8000b78:	00c14184 	movi	r3,1286
 8000b7c:	00840034 	movhi	r2,4096
 8000b80:	10800204 	addi	r2,r2,8
 8000b84:	10c00035 	stwio	r3,0(r2)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));
 8000b88:	00840034 	movhi	r2,4096
 8000b8c:	10800037 	ldwio	r2,0(r2)
 8000b90:	01020074 	movhi	r4,2049
 8000b94:	2105aa04 	addi	r4,r4,5800
 8000b98:	100b883a 	mov	r5,r2
 8000b9c:	80020480 	call	8002048 <printf>

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8000ba0:	00c14204 	movi	r3,1288
 8000ba4:	00840034 	movhi	r2,4096
 8000ba8:	10800204 	addi	r2,r2,8
 8000bac:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8000bb0:	00840034 	movhi	r2,4096
 8000bb4:	10800037 	ldwio	r2,0(r2)
 8000bb8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000bbc:	e0bffa0b 	ldhu	r2,-24(fp)
 8000bc0:	01020074 	movhi	r4,2049
 8000bc4:	2105b604 	addi	r4,r4,5848
 8000bc8:	100b883a 	mov	r5,r2
 8000bcc:	80020480 	call	8002048 <printf>
	while (usb_ctl_val != 0x03)
 8000bd0:	00000206 	br	8000bdc <main+0x9e4>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000bd4:	8001f180 	call	8001f18 <UsbGetRetryCnt>
 8000bd8:	e0bffa0d 	sth	r2,-24(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IORD(CY7C67200_BASE,HPI_DATA));

	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000bdc:	e0bffa0b 	ldhu	r2,-24(fp)
 8000be0:	108000d8 	cmpnei	r2,r2,3
 8000be4:	103ffb1e 	bne	r2,zero,8000bd4 <__alt_data_end+0xf8000bd4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000be8:	01020074 	movhi	r4,2049
 8000bec:	2105c204 	addi	r4,r4,5896
 8000bf0:	800213c0 	call	800213c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000bf4:	0109c404 	movi	r4,10000
 8000bf8:	800f1540 	call	800f154 <usleep>
	while(1)
	{
		toggle++;
 8000bfc:	e0bffa83 	ldbu	r2,-22(fp)
 8000c00:	10800044 	addi	r2,r2,1
 8000c04:	e0bffa85 	stb	r2,-22(fp)
		IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000c08:	00c14004 	movi	r3,1280
 8000c0c:	00840034 	movhi	r2,4096
 8000c10:	10800204 	addi	r2,r2,8
 8000c14:	10c00035 	stwio	r3,0(r2)
		//data phase IN-1
		IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000c18:	00c14704 	movi	r3,1308
 8000c1c:	00840034 	movhi	r2,4096
 8000c20:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000c24:	e0bfff03 	ldbu	r2,-4(fp)
 8000c28:	10c003cc 	andi	r3,r2,15
 8000c2c:	00840034 	movhi	r2,4096
 8000c30:	10c00035 	stwio	r3,0(r2)

		IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000c34:	00c0a444 	movi	r3,657
 8000c38:	00840034 	movhi	r2,4096
 8000c3c:	10c00035 	stwio	r3,0(r2)
		if(toggle%2)
 8000c40:	e0bffa83 	ldbu	r2,-22(fp)
 8000c44:	1080004c 	andi	r2,r2,1
 8000c48:	10803fcc 	andi	r2,r2,255
 8000c4c:	10000426 	beq	r2,zero,8000c60 <main+0xa68>
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000c50:	00c00044 	movi	r3,1
 8000c54:	00840034 	movhi	r2,4096
 8000c58:	10c00035 	stwio	r3,0(r2)
 8000c5c:	00000306 	br	8000c6c <main+0xa74>
		}
		else
		{
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000c60:	00c01044 	movi	r3,65
 8000c64:	00840034 	movhi	r2,4096
 8000c68:	10c00035 	stwio	r3,0(r2)
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000c6c:	00c004c4 	movi	r3,19
 8000c70:	00840034 	movhi	r2,4096
 8000c74:	10c00035 	stwio	r3,0(r2)
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 8000c78:	0007883a 	mov	r3,zero
 8000c7c:	00840034 	movhi	r2,4096
 8000c80:	10c00035 	stwio	r3,0(r2)
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000c84:	01006c04 	movi	r4,432
 8000c88:	01414004 	movi	r5,1280
 8000c8c:	8000eb40 	call	8000eb4 <UsbWrite>
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c90:	00002406 	br	8000d24 <main+0xb2c>
		{
			IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8000c94:	00c14004 	movi	r3,1280
 8000c98:	00840034 	movhi	r2,4096
 8000c9c:	10800204 	addi	r2,r2,8
 8000ca0:	10c00035 	stwio	r3,0(r2)
			//data phase IN-1
			IOWR(CY7C67200_BASE,HPI_DATA,0x051c); //500
 8000ca4:	00c14704 	movi	r3,1308
 8000ca8:	00840034 	movhi	r2,4096
 8000cac:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x000f & data_size);//2 data length
 8000cb0:	e0bfff03 	ldbu	r2,-4(fp)
 8000cb4:	10c003cc 	andi	r3,r2,15
 8000cb8:	00840034 	movhi	r2,4096
 8000cbc:	10c00035 	stwio	r3,0(r2)

			IOWR(CY7C67200_BASE,HPI_DATA,0x0291);//4 //endpoint 1
 8000cc0:	00c0a444 	movi	r3,657
 8000cc4:	00840034 	movhi	r2,4096
 8000cc8:	10c00035 	stwio	r3,0(r2)
			if(toggle%2)
 8000ccc:	e0bffa83 	ldbu	r2,-22(fp)
 8000cd0:	1080004c 	andi	r2,r2,1
 8000cd4:	10803fcc 	andi	r2,r2,255
 8000cd8:	10000426 	beq	r2,zero,8000cec <main+0xaf4>
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data 1
 8000cdc:	00c00044 	movi	r3,1
 8000ce0:	00840034 	movhi	r2,4096
 8000ce4:	10c00035 	stwio	r3,0(r2)
 8000ce8:	00000306 	br	8000cf8 <main+0xb00>
			}
			else
			{
				IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
 8000cec:	00c01044 	movi	r3,65
 8000cf0:	00840034 	movhi	r2,4096
 8000cf4:	10c00035 	stwio	r3,0(r2)
			}
			IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8000cf8:	00c004c4 	movi	r3,19
 8000cfc:	00840034 	movhi	r2,4096
 8000d00:	10c00035 	stwio	r3,0(r2)
			IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//
 8000d04:	0007883a 	mov	r3,zero
 8000d08:	00840034 	movhi	r2,4096
 8000d0c:	10c00035 	stwio	r3,0(r2)
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000d10:	01006c04 	movi	r4,432
 8000d14:	01414004 	movi	r5,1280
 8000d18:	8000eb40 	call	8000eb4 <UsbWrite>
			usleep(10*1000);
 8000d1c:	0109c404 	movi	r4,10000
 8000d20:	800f1540 	call	800f154 <usleep>
			IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6 //data 1
		}
		IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
		IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d24:	00840034 	movhi	r2,4096
 8000d28:	10800304 	addi	r2,r2,12
 8000d2c:	10800037 	ldwio	r2,0(r2)
 8000d30:	1080040c 	andi	r2,r2,16
 8000d34:	103fd726 	beq	r2,zero,8000c94 <__alt_data_end+0xf8000c94>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while


		usb_ctl_val = UsbWaitTDListDone();
 8000d38:	8001e940 	call	8001e94 <UsbWaitTDListDone>
 8000d3c:	e0bffa0d 	sth	r2,-24(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		keycode = IORD(CY7C67200_BASE,HPI_DATA);
 8000d40:	00840034 	movhi	r2,4096
 8000d44:	10800037 	ldwio	r2,0(r2)
 8000d48:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000d4c:	01020074 	movhi	r4,2049
 8000d50:	2105d604 	addi	r4,r4,5976
 8000d54:	e17ffd17 	ldw	r5,-12(fp)
 8000d58:	80020480 	call	8002048 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000d5c:	e0bffd17 	ldw	r2,-12(fp)
 8000d60:	10c03fcc 	andi	r3,r2,255
 8000d64:	00844034 	movhi	r2,4352
 8000d68:	10840804 	addi	r2,r2,4128
 8000d6c:	10c00035 	stwio	r3,0(r2)

		
		usleep(200);//usleep(5000);
 8000d70:	01003204 	movi	r4,200
 8000d74:	800f1540 	call	800f154 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000d78:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000d7c:	10bfffcc 	andi	r2,r2,65535
 8000d80:	1009883a 	mov	r4,r2
 8000d84:	8000efc0 	call	8000efc <UsbRead>
 8000d88:	e0bffa0d 	sth	r2,-24(fp)

		if(!(usb_ctl_val & no_device))
 8000d8c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000d90:	e0fffa0b 	ldhu	r3,-24(fp)
 8000d94:	1884703a 	and	r2,r3,r2
 8000d98:	10bfffcc 	andi	r2,r2,65535
 8000d9c:	1000211e 	bne	r2,zero,8000e24 <main+0xc2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000da0:	e03ffb15 	stw	zero,-20(fp)
 8000da4:	00001006 	br	8000de8 <main+0xbf0>
			{
				usleep(5*1000);
 8000da8:	0104e204 	movi	r4,5000
 8000dac:	800f1540 	call	800f154 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000db0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000db4:	10bfffcc 	andi	r2,r2,65535
 8000db8:	1009883a 	mov	r4,r2
 8000dbc:	8000efc0 	call	8000efc <UsbRead>
 8000dc0:	e0bffa0d 	sth	r2,-24(fp)
				if(usb_ctl_val & no_device) break;
 8000dc4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000dc8:	e0fffa0b 	ldhu	r3,-24(fp)
 8000dcc:	1884703a 	and	r2,r3,r2
 8000dd0:	10bfffcc 	andi	r2,r2,65535
 8000dd4:	10000126 	beq	r2,zero,8000ddc <main+0xbe4>
 8000dd8:	00000606 	br	8000df4 <main+0xbfc>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000ddc:	e0bffb17 	ldw	r2,-20(fp)
 8000de0:	10800044 	addi	r2,r2,1
 8000de4:	e0bffb15 	stw	r2,-20(fp)
 8000de8:	e0bffb17 	ldw	r2,-20(fp)
 8000dec:	108001d0 	cmplti	r2,r2,7
 8000df0:	103fed1e 	bne	r2,zero,8000da8 <__alt_data_end+0xf8000da8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000df4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000df8:	e0fffa0b 	ldhu	r3,-24(fp)
 8000dfc:	1884703a 	and	r2,r3,r2
 8000e00:	10bfffcc 	andi	r2,r2,65535
 8000e04:	1000071e 	bne	r2,zero,8000e24 <main+0xc2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000e08:	01020074 	movhi	r4,2049
 8000e0c:	2105df04 	addi	r4,r4,6012
 8000e10:	800213c0 	call	800213c <puts>
				printf("[INFO]: please insert again!!! \n");
 8000e14:	01020074 	movhi	r4,2049
 8000e18:	2105ea04 	addi	r4,r4,6056
 8000e1c:	800213c0 	call	800213c <puts>
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8000e20:	00001e06 	br	8000e9c <main+0xca4>
 8000e24:	00001d06 	br	8000e9c <main+0xca4>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8000e28:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000e2c:	10bfffcc 	andi	r2,r2,65535
 8000e30:	1009883a 	mov	r4,r2
 8000e34:	8000efc0 	call	8000efc <UsbRead>
 8000e38:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000e3c:	0104e204 	movi	r4,5000
 8000e40:	800f1540 	call	800f154 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000e44:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000e48:	10bfffcc 	andi	r2,r2,65535
 8000e4c:	1009883a 	mov	r4,r2
 8000e50:	8000efc0 	call	8000efc <UsbRead>
 8000e54:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000e58:	0104e204 	movi	r4,5000
 8000e5c:	800f1540 	call	800f154 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8000e60:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000e64:	10bfffcc 	andi	r2,r2,65535
 8000e68:	1009883a 	mov	r4,r2
 8000e6c:	8000efc0 	call	8000efc <UsbRead>
 8000e70:	e0bffa0d 	sth	r2,-24(fp)
			usleep(5*1000);
 8000e74:	0104e204 	movi	r4,5000
 8000e78:	800f1540 	call	800f154 <usleep>

			if(usb_ctl_val & no_device)
 8000e7c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000e80:	e0fffa0b 	ldhu	r3,-24(fp)
 8000e84:	1884703a 	and	r2,r3,r2
 8000e88:	10bfffcc 	andi	r2,r2,65535
 8000e8c:	10000126 	beq	r2,zero,8000e94 <main+0xc9c>
				goto USB_HOT_PLUG;
 8000e90:	003ce306 	br	8000220 <__alt_data_end+0xf8000220>

			usleep(200);
 8000e94:	01003204 	movi	r4,200
 8000e98:	800f1540 	call	800f154 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}
		
		while (!(usb_ctl_val & no_device))
 8000e9c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000ea0:	e0fffa0b 	ldhu	r3,-24(fp)
 8000ea4:	1884703a 	and	r2,r3,r2
 8000ea8:	10bfffcc 	andi	r2,r2,65535
 8000eac:	103fde26 	beq	r2,zero,8000e28 <__alt_data_end+0xf8000e28>

			usleep(200);

		}

	}//end while
 8000eb0:	003f5206 	br	8000bfc <__alt_data_end+0xf8000bfc>

08000eb4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8000eb4:	defffd04 	addi	sp,sp,-12
 8000eb8:	df000215 	stw	fp,8(sp)
 8000ebc:	df000204 	addi	fp,sp,8
 8000ec0:	2007883a 	mov	r3,r4
 8000ec4:	2805883a 	mov	r2,r5
 8000ec8:	e0fffe0d 	sth	r3,-8(fp)
 8000ecc:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(USB_ADDRESS, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 8000ed0:	e0fffe0b 	ldhu	r3,-8(fp)
 8000ed4:	00840034 	movhi	r2,4096
 8000ed8:	10800204 	addi	r2,r2,8
 8000edc:	10c00035 	stwio	r3,0(r2)
	//usleep(10);

	//XIo_Out16(USB_DATA, Data);
	IOWR(CY7C67200_BASE,HPI_DATA,Data);
 8000ee0:	e0ffff0b 	ldhu	r3,-4(fp)
 8000ee4:	00840034 	movhi	r2,4096
 8000ee8:	10c00035 	stwio	r3,0(r2)
}
 8000eec:	e037883a 	mov	sp,fp
 8000ef0:	df000017 	ldw	fp,0(sp)
 8000ef4:	dec00104 	addi	sp,sp,4
 8000ef8:	f800283a 	ret

08000efc <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 8000efc:	defffe04 	addi	sp,sp,-8
 8000f00:	df000115 	stw	fp,4(sp)
 8000f04:	df000104 	addi	fp,sp,4
 8000f08:	2005883a 	mov	r2,r4
 8000f0c:	e0bfff0d 	sth	r2,-4(fp)
	//XIo_Out16(HPI_ADDR, Address);
	IOWR(CY7C67200_BASE,HPI_ADDR,Address);
 8000f10:	e0ffff0b 	ldhu	r3,-4(fp)
 8000f14:	00840034 	movhi	r2,4096
 8000f18:	10800204 	addi	r2,r2,8
 8000f1c:	10c00035 	stwio	r3,0(r2)
	//usleep(20);
	return IORD(CY7C67200_BASE,HPI_DATA);
 8000f20:	00840034 	movhi	r2,4096
 8000f24:	10800037 	ldwio	r2,0(r2)
}
 8000f28:	e037883a 	mov	sp,fp
 8000f2c:	df000017 	ldw	fp,0(sp)
 8000f30:	dec00104 	addi	sp,sp,4
 8000f34:	f800283a 	ret

08000f38 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 8000f38:	defffe04 	addi	sp,sp,-8
 8000f3c:	dfc00115 	stw	ra,4(sp)
 8000f40:	df000015 	stw	fp,0(sp)
 8000f44:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IOWR(CY7C67200_BASE,HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 8000f48:	00fe9414 	movui	r3,64080
 8000f4c:	00840034 	movhi	r2,4096
 8000f50:	10800104 	addi	r2,r2,4
 8000f54:	10c00035 	stwio	r3,0(r2)
	usleep(100000);
 8000f58:	010000b4 	movhi	r4,2
 8000f5c:	2121a804 	addi	r4,r4,-31072
 8000f60:	800f1540 	call	800f154 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8000f64:	01020074 	movhi	r4,2049
 8000f68:	2105f204 	addi	r4,r4,6088
 8000f6c:	800213c0 	call	800213c <puts>

	usleep(500000);
 8000f70:	01000234 	movhi	r4,8
 8000f74:	21284804 	addi	r4,r4,-24288
 8000f78:	800f1540 	call	800f154 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 8000f7c:	01020074 	movhi	r4,2049
 8000f80:	2105f904 	addi	r4,r4,6116
 8000f84:	800213c0 	call	800213c <puts>
	IORD(CY7C67200_BASE,HPI_MAILBOX);
 8000f88:	00840034 	movhi	r2,4096
 8000f8c:	10800104 	addi	r2,r2,4
 8000f90:	10800037 	ldwio	r2,0(r2)
	IORD(CY7C67200_BASE,HPI_STATUS);
 8000f94:	00840034 	movhi	r2,4096
 8000f98:	10800304 	addi	r2,r2,12
 8000f9c:	10800037 	ldwio	r2,0(r2)

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8000fa0:	01005104 	movi	r4,324
 8000fa4:	8000efc0 	call	8000efc <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000fa8:	01005104 	movi	r4,324
 8000fac:	000b883a 	mov	r5,zero
 8000fb0:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 8000fb4:	01005204 	movi	r4,328
 8000fb8:	8000efc0 	call	8000efc <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 8000fbc:	01005204 	movi	r4,328
 8000fc0:	000b883a 	mov	r5,zero
 8000fc4:	8000eb40 	call	8000eb4 <UsbWrite>

	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8000fc8:	01302414 	movui	r4,49296
 8000fcc:	017fffd4 	movui	r5,65535
 8000fd0:	8000eb40 	call	8000eb4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8000fd4:	01302c14 	movui	r4,49328
 8000fd8:	017fffd4 	movui	r5,65535
 8000fdc:	8000eb40 	call	8000eb4 <UsbWrite>
}
 8000fe0:	e037883a 	mov	sp,fp
 8000fe4:	dfc00117 	ldw	ra,4(sp)
 8000fe8:	df000017 	ldw	fp,0(sp)
 8000fec:	dec00204 	addi	sp,sp,8
 8000ff0:	f800283a 	ret

08000ff4 <UsbSetAddress>:


void UsbSetAddress()
{
 8000ff4:	defffe04 	addi	sp,sp,-8
 8000ff8:	dfc00115 	stw	ra,4(sp)
 8000ffc:	df000015 	stw	fp,0(sp)
 8001000:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001004:	00c14004 	movi	r3,1280
 8001008:	00840034 	movhi	r2,4096
 800100c:	10800204 	addi	r2,r2,8
 8001010:	10c00035 	stwio	r3,0(r2)
	// TD #1: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001014:	00c14304 	movi	r3,1292
 8001018:	00840034 	movhi	r2,4096
 800101c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001020:	00c00204 	movi	r3,8
 8001024:	00840034 	movhi	r2,4096
 8001028:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00D0);
 800102c:	00c03404 	movi	r3,208
 8001030:	00840034 	movhi	r2,4096
 8001034:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001038:	00c00044 	movi	r3,1
 800103c:	00840034 	movhi	r2,4096
 8001040:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001044:	00c004c4 	movi	r3,19
 8001048:	00840034 	movhi	r2,4096
 800104c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001050:	00c14504 	movi	r3,1300
 8001054:	00840034 	movhi	r2,4096
 8001058:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 more IOWR functions

	// TD #2: 4 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0500);
 800105c:	00c14004 	movi	r3,1280
 8001060:	00840034 	movhi	r2,4096
 8001064:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);
 8001068:	00c00084 	movi	r3,2
 800106c:	00840034 	movhi	r2,4096
 8001070:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001074:	0007883a 	mov	r3,zero
 8001078:	00840034 	movhi	r2,4096
 800107c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001080:	0007883a 	mov	r3,zero
 8001084:	00840034 	movhi	r2,4096
 8001088:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 4 IOWR functions
	
	// TD #3: 6 writes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800108c:	0007883a 	mov	r3,zero
 8001090:	00840034 	movhi	r2,4096
 8001094:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001098:	0007883a 	mov	r3,zero
 800109c:	00840034 	movhi	r2,4096
 80010a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0090);
 80010a4:	00c02404 	movi	r3,144
 80010a8:	00840034 	movhi	r2,4096
 80010ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 80010b0:	00c01044 	movi	r3,65
 80010b4:	00840034 	movhi	r2,4096
 80010b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80010bc:	00c004c4 	movi	r3,19
 80010c0:	00840034 	movhi	r2,4096
 80010c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80010c8:	0007883a 	mov	r3,zero
 80010cc:	00840034 	movhi	r2,4096
 80010d0:	10c00035 	stwio	r3,0(r2)
	// TASK: Complete with 6 IOWR functions

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80010d4:	01006c04 	movi	r4,432
 80010d8:	01414004 	movi	r5,1280
 80010dc:	8000eb40 	call	8000eb4 <UsbWrite>
}
 80010e0:	e037883a 	mov	sp,fp
 80010e4:	dfc00117 	ldw	ra,4(sp)
 80010e8:	df000017 	ldw	fp,0(sp)
 80010ec:	dec00204 	addi	sp,sp,8
 80010f0:	f800283a 	ret

080010f4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80010f4:	defffe04 	addi	sp,sp,-8
 80010f8:	dfc00115 	stw	ra,4(sp)
 80010fc:	df000015 	stw	fp,0(sp)
 8001100:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001104:	00c14004 	movi	r3,1280
 8001108:	00840034 	movhi	r2,4096
 800110c:	10800204 	addi	r2,r2,8
 8001110:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001114:	00c14304 	movi	r3,1292
 8001118:	00840034 	movhi	r2,4096
 800111c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001120:	00c00204 	movi	r3,8
 8001124:	00840034 	movhi	r2,4096
 8001128:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 800112c:	00c0b404 	movi	r3,720
 8001130:	00840034 	movhi	r2,4096
 8001134:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001138:	00c00044 	movi	r3,1
 800113c:	00840034 	movhi	r2,4096
 8001140:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001144:	00c004c4 	movi	r3,19
 8001148:	00840034 	movhi	r2,4096
 800114c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001150:	00c14504 	movi	r3,1300
 8001154:	00840034 	movhi	r2,4096
 8001158:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 800115c:	00c1a004 	movi	r3,1664
 8001160:	00840034 	movhi	r2,4096
 8001164:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100); //device 0x01
 8001168:	00c04004 	movi	r3,256
 800116c:	00840034 	movhi	r2,4096
 8001170:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001174:	0007883a 	mov	r3,zero
 8001178:	00840034 	movhi	r2,4096
 800117c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);
 8001180:	00c00204 	movi	r3,8
 8001184:	00840034 	movhi	r2,4096
 8001188:	10c00035 	stwio	r3,0(r2)

	//data phase IN
	IOWR(CY7C67200_BASE,HPI_DATA,0x052C); //
 800118c:	00c14b04 	movi	r3,1324
 8001190:	00840034 	movhi	r2,4096
 8001194:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//
 8001198:	00c00204 	movi	r3,8
 800119c:	00840034 	movhi	r2,4096
 80011a0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//
 80011a4:	00c0a404 	movi	r3,656
 80011a8:	00840034 	movhi	r2,4096
 80011ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 80011b0:	00c01044 	movi	r3,65
 80011b4:	00840034 	movhi	r2,4096
 80011b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80011bc:	00c004c4 	movi	r3,19
 80011c0:	00840034 	movhi	r2,4096
 80011c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);
 80011c8:	00c14804 	movi	r3,1312
 80011cc:	00840034 	movhi	r2,4096
 80011d0:	10c00035 	stwio	r3,0(r2)

	//    //status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 80011d4:	0007883a 	mov	r3,zero
 80011d8:	00840034 	movhi	r2,4096
 80011dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 80011e0:	0007883a 	mov	r3,zero
 80011e4:	00840034 	movhi	r2,4096
 80011e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//device address
 80011ec:	00c08404 	movi	r3,528
 80011f0:	00840034 	movhi	r2,4096
 80011f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);
 80011f8:	00c01044 	movi	r3,65
 80011fc:	00840034 	movhi	r2,4096
 8001200:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001204:	00c004c4 	movi	r3,19
 8001208:	00840034 	movhi	r2,4096
 800120c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001210:	0007883a 	mov	r3,zero
 8001214:	00840034 	movhi	r2,4096
 8001218:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800121c:	01006c04 	movi	r4,432
 8001220:	01414004 	movi	r5,1280
 8001224:	8000eb40 	call	8000eb4 <UsbWrite>
}
 8001228:	e037883a 	mov	sp,fp
 800122c:	dfc00117 	ldw	ra,4(sp)
 8001230:	df000017 	ldw	fp,0(sp)
 8001234:	dec00204 	addi	sp,sp,8
 8001238:	f800283a 	ret

0800123c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 800123c:	defffe04 	addi	sp,sp,-8
 8001240:	dfc00115 	stw	ra,4(sp)
 8001244:	df000015 	stw	fp,0(sp)
 8001248:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 800124c:	00c14004 	movi	r3,1280
 8001250:	00840034 	movhi	r2,4096
 8001254:	10800204 	addi	r2,r2,8
 8001258:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 800125c:	00c14304 	movi	r3,1292
 8001260:	00840034 	movhi	r2,4096
 8001264:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001268:	00c00204 	movi	r3,8
 800126c:	00840034 	movhi	r2,4096
 8001270:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001274:	00c0b404 	movi	r3,720
 8001278:	00840034 	movhi	r2,4096
 800127c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001280:	00c00044 	movi	r3,1
 8001284:	00840034 	movhi	r2,4096
 8001288:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 800128c:	00c004c4 	movi	r3,19
 8001290:	00840034 	movhi	r2,4096
 8001294:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001298:	00c14504 	movi	r3,1300
 800129c:	00840034 	movhi	r2,4096
 80012a0:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 80012a4:	00c1a004 	movi	r3,1664
 80012a8:	00840034 	movhi	r2,4096
 80012ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0100);//e //device 0x01
 80012b0:	00c04004 	movi	r3,256
 80012b4:	00840034 	movhi	r2,4096
 80012b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 80012bc:	0007883a 	mov	r3,zero
 80012c0:	00840034 	movhi	r2,4096
 80012c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0012);//2
 80012c8:	00c00484 	movi	r3,18
 80012cc:	00840034 	movhi	r2,4096
 80012d0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 80012d4:	00c15104 	movi	r3,1348
 80012d8:	00840034 	movhi	r2,4096
 80012dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 80012e0:	00c00204 	movi	r3,8
 80012e4:	00840034 	movhi	r2,4096
 80012e8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 80012ec:	00c0a404 	movi	r3,656
 80012f0:	00840034 	movhi	r2,4096
 80012f4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 80012f8:	00c01044 	movi	r3,65
 80012fc:	00840034 	movhi	r2,4096
 8001300:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001304:	00c004c4 	movi	r3,19
 8001308:	00840034 	movhi	r2,4096
 800130c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001310:	00c14804 	movi	r3,1312
 8001314:	00840034 	movhi	r2,4096
 8001318:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 800131c:	00c15304 	movi	r3,1356
 8001320:	00840034 	movhi	r2,4096
 8001324:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001328:	00c00204 	movi	r3,8
 800132c:	00840034 	movhi	r2,4096
 8001330:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001334:	00c0a404 	movi	r3,656
 8001338:	00840034 	movhi	r2,4096
 800133c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6
 8001340:	00c00044 	movi	r3,1
 8001344:	00840034 	movhi	r2,4096
 8001348:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 800134c:	00c004c4 	movi	r3,19
 8001350:	00840034 	movhi	r2,4096
 8001354:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001358:	00c14b04 	movi	r3,1324
 800135c:	00840034 	movhi	r2,4096
 8001360:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0554); //c
 8001364:	00c15504 	movi	r3,1364
 8001368:	00840034 	movhi	r2,4096
 800136c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//e
 8001370:	00c00084 	movi	r3,2
 8001374:	00840034 	movhi	r2,4096
 8001378:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 800137c:	00c0a404 	movi	r3,656
 8001380:	00840034 	movhi	r2,4096
 8001384:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001388:	00c01044 	movi	r3,65
 800138c:	00840034 	movhi	r2,4096
 8001390:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001394:	00c004c4 	movi	r3,19
 8001398:	00840034 	movhi	r2,4096
 800139c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 80013a0:	00c14e04 	movi	r3,1336
 80013a4:	00840034 	movhi	r2,4096
 80013a8:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //538
 80013ac:	0007883a 	mov	r3,zero
 80013b0:	00840034 	movhi	r2,4096
 80013b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 80013b8:	0007883a 	mov	r3,zero
 80013bc:	00840034 	movhi	r2,4096
 80013c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//c
 80013c4:	00c08404 	movi	r3,528
 80013c8:	00840034 	movhi	r2,4096
 80013cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//e
 80013d0:	00c01044 	movi	r3,65
 80013d4:	00840034 	movhi	r2,4096
 80013d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 80013dc:	00c004c4 	movi	r3,19
 80013e0:	00840034 	movhi	r2,4096
 80013e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 80013e8:	0007883a 	mov	r3,zero
 80013ec:	00840034 	movhi	r2,4096
 80013f0:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80013f4:	01006c04 	movi	r4,432
 80013f8:	01414004 	movi	r5,1280
 80013fc:	8000eb40 	call	8000eb4 <UsbWrite>
}
 8001400:	e037883a 	mov	sp,fp
 8001404:	dfc00117 	ldw	ra,4(sp)
 8001408:	df000017 	ldw	fp,0(sp)
 800140c:	dec00204 	addi	sp,sp,8
 8001410:	f800283a 	ret

08001414 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 8001414:	defffe04 	addi	sp,sp,-8
 8001418:	dfc00115 	stw	ra,4(sp)
 800141c:	df000015 	stw	fp,0(sp)
 8001420:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001424:	00c14004 	movi	r3,1280
 8001428:	00840034 	movhi	r2,4096
 800142c:	10800204 	addi	r2,r2,8
 8001430:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001434:	00c14304 	movi	r3,1292
 8001438:	00840034 	movhi	r2,4096
 800143c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001440:	00c00204 	movi	r3,8
 8001444:	00840034 	movhi	r2,4096
 8001448:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 800144c:	00c0b404 	movi	r3,720
 8001450:	00840034 	movhi	r2,4096
 8001454:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001458:	00c00044 	movi	r3,1
 800145c:	00840034 	movhi	r2,4096
 8001460:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001464:	00c004c4 	movi	r3,19
 8001468:	00840034 	movhi	r2,4096
 800146c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001470:	00c14504 	movi	r3,1300
 8001474:	00840034 	movhi	r2,4096
 8001478:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 800147c:	00c1a004 	movi	r3,1664
 8001480:	00840034 	movhi	r2,4096
 8001484:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 8001488:	00c08004 	movi	r3,512
 800148c:	00840034 	movhi	r2,4096
 8001490:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001494:	0007883a 	mov	r3,zero
 8001498:	00840034 	movhi	r2,4096
 800149c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0009);//2
 80014a0:	00c00244 	movi	r3,9
 80014a4:	00840034 	movhi	r2,4096
 80014a8:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 80014ac:	00c15104 	movi	r3,1348
 80014b0:	00840034 	movhi	r2,4096
 80014b4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 80014b8:	00c00204 	movi	r3,8
 80014bc:	00840034 	movhi	r2,4096
 80014c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 80014c4:	00c0a404 	movi	r3,656
 80014c8:	00840034 	movhi	r2,4096
 80014cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 80014d0:	00c01044 	movi	r3,65
 80014d4:	00840034 	movhi	r2,4096
 80014d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 80014dc:	00c004c4 	movi	r3,19
 80014e0:	00840034 	movhi	r2,4096
 80014e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 80014e8:	00c14804 	movi	r3,1312
 80014ec:	00840034 	movhi	r2,4096
 80014f0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x054c); //520
 80014f4:	00c15304 	movi	r3,1356
 80014f8:	00840034 	movhi	r2,4096
 80014fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//2
 8001500:	00c00044 	movi	r3,1
 8001504:	00840034 	movhi	r2,4096
 8001508:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 800150c:	00c0a404 	movi	r3,656
 8001510:	00840034 	movhi	r2,4096
 8001514:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001518:	00c00044 	movi	r3,1
 800151c:	00840034 	movhi	r2,4096
 8001520:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001524:	00c004c4 	movi	r3,19
 8001528:	00840034 	movhi	r2,4096
 800152c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001530:	00c14b04 	movi	r3,1324
 8001534:	00840034 	movhi	r2,4096
 8001538:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 800153c:	0007883a 	mov	r3,zero
 8001540:	00840034 	movhi	r2,4096
 8001544:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001548:	0007883a 	mov	r3,zero
 800154c:	00840034 	movhi	r2,4096
 8001550:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001554:	00c08404 	movi	r3,528
 8001558:	00840034 	movhi	r2,4096
 800155c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001560:	00c01044 	movi	r3,65
 8001564:	00840034 	movhi	r2,4096
 8001568:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 800156c:	00c004c4 	movi	r3,19
 8001570:	00840034 	movhi	r2,4096
 8001574:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001578:	0007883a 	mov	r3,zero
 800157c:	00840034 	movhi	r2,4096
 8001580:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001584:	01006c04 	movi	r4,432
 8001588:	01414004 	movi	r5,1280
 800158c:	8000eb40 	call	8000eb4 <UsbWrite>
}
 8001590:	e037883a 	mov	sp,fp
 8001594:	dfc00117 	ldw	ra,4(sp)
 8001598:	df000017 	ldw	fp,0(sp)
 800159c:	dec00204 	addi	sp,sp,8
 80015a0:	f800283a 	ret

080015a4 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 80015a4:	defffe04 	addi	sp,sp,-8
 80015a8:	dfc00115 	stw	ra,4(sp)
 80015ac:	df000015 	stw	fp,0(sp)
 80015b0:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 80015b4:	00c14004 	movi	r3,1280
 80015b8:	00840034 	movhi	r2,4096
 80015bc:	10800204 	addi	r2,r2,8
 80015c0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 80015c4:	00c14304 	movi	r3,1292
 80015c8:	00840034 	movhi	r2,4096
 80015cc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 80015d0:	00c00204 	movi	r3,8
 80015d4:	00840034 	movhi	r2,4096
 80015d8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 80015dc:	00c0b404 	movi	r3,720
 80015e0:	00840034 	movhi	r2,4096
 80015e4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 80015e8:	00c00044 	movi	r3,1
 80015ec:	00840034 	movhi	r2,4096
 80015f0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80015f4:	00c004c4 	movi	r3,19
 80015f8:	00840034 	movhi	r2,4096
 80015fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001600:	00c14504 	movi	r3,1300
 8001604:	00840034 	movhi	r2,4096
 8001608:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0680);//c
 800160c:	00c1a004 	movi	r3,1664
 8001610:	00840034 	movhi	r2,4096
 8001614:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0200);//e //config 0x02
 8001618:	00c08004 	movi	r3,512
 800161c:	00840034 	movhi	r2,4096
 8001620:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001624:	0007883a 	mov	r3,zero
 8001628:	00840034 	movhi	r2,4096
 800162c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x00FF);//2
 8001630:	00c03fc4 	movi	r3,255
 8001634:	00840034 	movhi	r2,4096
 8001638:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c); //514
 800163c:	00c15704 	movi	r3,1372
 8001640:	00840034 	movhi	r2,4096
 8001644:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001648:	00c00204 	movi	r3,8
 800164c:	00840034 	movhi	r2,4096
 8001650:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001654:	00c0a404 	movi	r3,656
 8001658:	00840034 	movhi	r2,4096
 800165c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001660:	00c01044 	movi	r3,65
 8001664:	00840034 	movhi	r2,4096
 8001668:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 800166c:	00c004c4 	movi	r3,19
 8001670:	00840034 	movhi	r2,4096
 8001674:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001678:	00c14804 	movi	r3,1312
 800167c:	00840034 	movhi	r2,4096
 8001680:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0564); //520
 8001684:	00c15904 	movi	r3,1380
 8001688:	00840034 	movhi	r2,4096
 800168c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001690:	00c00204 	movi	r3,8
 8001694:	00840034 	movhi	r2,4096
 8001698:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 800169c:	00c0a404 	movi	r3,656
 80016a0:	00840034 	movhi	r2,4096
 80016a4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 80016a8:	00c00044 	movi	r3,1
 80016ac:	00840034 	movhi	r2,4096
 80016b0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 80016b4:	00c004c4 	movi	r3,19
 80016b8:	00840034 	movhi	r2,4096
 80016bc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 80016c0:	00c14b04 	movi	r3,1324
 80016c4:	00840034 	movhi	r2,4096
 80016c8:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x056c); //52c
 80016cc:	00c15b04 	movi	r3,1388
 80016d0:	00840034 	movhi	r2,4096
 80016d4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 80016d8:	00c00204 	movi	r3,8
 80016dc:	00840034 	movhi	r2,4096
 80016e0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 80016e4:	00c0a404 	movi	r3,656
 80016e8:	00840034 	movhi	r2,4096
 80016ec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 80016f0:	00c01044 	movi	r3,65
 80016f4:	00840034 	movhi	r2,4096
 80016f8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 80016fc:	00c004c4 	movi	r3,19
 8001700:	00840034 	movhi	r2,4096
 8001704:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001708:	00c14e04 	movi	r3,1336
 800170c:	00840034 	movhi	r2,4096
 8001710:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574); //538
 8001714:	00c15d04 	movi	r3,1396
 8001718:	00840034 	movhi	r2,4096
 800171c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 8001720:	00c00204 	movi	r3,8
 8001724:	00840034 	movhi	r2,4096
 8001728:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 800172c:	00c0a404 	movi	r3,656
 8001730:	00840034 	movhi	r2,4096
 8001734:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001738:	00c00044 	movi	r3,1
 800173c:	00840034 	movhi	r2,4096
 8001740:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001744:	00c004c4 	movi	r3,19
 8001748:	00840034 	movhi	r2,4096
 800174c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 8001750:	00c15104 	movi	r3,1348
 8001754:	00840034 	movhi	r2,4096
 8001758:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x057c); //544
 800175c:	00c15f04 	movi	r3,1404
 8001760:	00840034 	movhi	r2,4096
 8001764:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0002);//6
 8001768:	00c00084 	movi	r3,2
 800176c:	00840034 	movhi	r2,4096
 8001770:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001774:	00c0a404 	movi	r3,656
 8001778:	00840034 	movhi	r2,4096
 800177c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001780:	00c01044 	movi	r3,65
 8001784:	00840034 	movhi	r2,4096
 8001788:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 800178c:	00c004c4 	movi	r3,19
 8001790:	00840034 	movhi	r2,4096
 8001794:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 8001798:	00c15404 	movi	r3,1360
 800179c:	00840034 	movhi	r2,4096
 80017a0:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //550
 80017a4:	0007883a 	mov	r3,zero
 80017a8:	00840034 	movhi	r2,4096
 80017ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//2
 80017b0:	0007883a 	mov	r3,zero
 80017b4:	00840034 	movhi	r2,4096
 80017b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//4
 80017bc:	00c08404 	movi	r3,528
 80017c0:	00840034 	movhi	r2,4096
 80017c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//6
 80017c8:	00c01044 	movi	r3,65
 80017cc:	00840034 	movhi	r2,4096
 80017d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 80017d4:	00c004c4 	movi	r3,19
 80017d8:	00840034 	movhi	r2,4096
 80017dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//a
 80017e0:	0007883a 	mov	r3,zero
 80017e4:	00840034 	movhi	r2,4096
 80017e8:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80017ec:	01006c04 	movi	r4,432
 80017f0:	01414004 	movi	r5,1280
 80017f4:	8000eb40 	call	8000eb4 <UsbWrite>
}
 80017f8:	e037883a 	mov	sp,fp
 80017fc:	dfc00117 	ldw	ra,4(sp)
 8001800:	df000017 	ldw	fp,0(sp)
 8001804:	dec00204 	addi	sp,sp,8
 8001808:	f800283a 	ret

0800180c <UsbSetConfig>:

void UsbSetConfig()
{
 800180c:	defffe04 	addi	sp,sp,-8
 8001810:	dfc00115 	stw	ra,4(sp)
 8001814:	df000015 	stw	fp,0(sp)
 8001818:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 800181c:	00c14004 	movi	r3,1280
 8001820:	00840034 	movhi	r2,4096
 8001824:	10800204 	addi	r2,r2,8
 8001828:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 800182c:	00c14304 	movi	r3,1292
 8001830:	00840034 	movhi	r2,4096
 8001834:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001838:	00c00204 	movi	r3,8
 800183c:	00840034 	movhi	r2,4096
 8001840:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001844:	00c0b404 	movi	r3,720
 8001848:	00840034 	movhi	r2,4096
 800184c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001850:	00c00044 	movi	r3,1
 8001854:	00840034 	movhi	r2,4096
 8001858:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 800185c:	00c004c4 	movi	r3,19
 8001860:	00840034 	movhi	r2,4096
 8001864:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001868:	00c14504 	movi	r3,1300
 800186c:	00840034 	movhi	r2,4096
 8001870:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0900);
 8001874:	00c24004 	movi	r3,2304
 8001878:	00840034 	movhi	r2,4096
 800187c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//device address
 8001880:	00c00044 	movi	r3,1
 8001884:	00840034 	movhi	r2,4096
 8001888:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800188c:	0007883a 	mov	r3,zero
 8001890:	00840034 	movhi	r2,4096
 8001894:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001898:	0007883a 	mov	r3,zero
 800189c:	00840034 	movhi	r2,4096
 80018a0:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 80018a4:	0007883a 	mov	r3,zero
 80018a8:	00840034 	movhi	r2,4096
 80018ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number
 80018b0:	0007883a 	mov	r3,zero
 80018b4:	00840034 	movhi	r2,4096
 80018b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 80018bc:	00c0a404 	movi	r3,656
 80018c0:	00840034 	movhi	r2,4096
 80018c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 80018c8:	00c01044 	movi	r3,65
 80018cc:	00840034 	movhi	r2,4096
 80018d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80018d4:	00c004c4 	movi	r3,19
 80018d8:	00840034 	movhi	r2,4096
 80018dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80018e0:	0007883a 	mov	r3,zero
 80018e4:	00840034 	movhi	r2,4096
 80018e8:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80018ec:	01006c04 	movi	r4,432
 80018f0:	01414004 	movi	r5,1280
 80018f4:	8000eb40 	call	8000eb4 <UsbWrite>

}
 80018f8:	e037883a 	mov	sp,fp
 80018fc:	dfc00117 	ldw	ra,4(sp)
 8001900:	df000017 	ldw	fp,0(sp)
 8001904:	dec00204 	addi	sp,sp,8
 8001908:	f800283a 	ret

0800190c <UsbClassRequest>:

void UsbClassRequest()
{
 800190c:	defffe04 	addi	sp,sp,-8
 8001910:	dfc00115 	stw	ra,4(sp)
 8001914:	df000015 	stw	fp,0(sp)
 8001918:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 800191c:	00c14004 	movi	r3,1280
 8001920:	00840034 	movhi	r2,4096
 8001924:	10800204 	addi	r2,r2,8
 8001928:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 800192c:	00c14304 	movi	r3,1292
 8001930:	00840034 	movhi	r2,4096
 8001934:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001938:	00c00204 	movi	r3,8
 800193c:	00840034 	movhi	r2,4096
 8001940:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001944:	00c0b404 	movi	r3,720
 8001948:	00840034 	movhi	r2,4096
 800194c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001950:	00c00044 	movi	r3,1
 8001954:	00840034 	movhi	r2,4096
 8001958:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 800195c:	00c004c4 	movi	r3,19
 8001960:	00840034 	movhi	r2,4096
 8001964:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001968:	00c14504 	movi	r3,1300
 800196c:	00840034 	movhi	r2,4096
 8001970:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0A21);
 8001974:	00c28844 	movi	r3,2593
 8001978:	00840034 	movhi	r2,4096
 800197c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//device address
 8001980:	0007883a 	mov	r3,zero
 8001984:	00840034 	movhi	r2,4096
 8001988:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 800198c:	0007883a 	mov	r3,zero
 8001990:	00840034 	movhi	r2,4096
 8001994:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 8001998:	0007883a 	mov	r3,zero
 800199c:	00840034 	movhi	r2,4096
 80019a0:	10c00035 	stwio	r3,0(r2)
	//in packet
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //don't care
 80019a4:	0007883a 	mov	r3,zero
 80019a8:	00840034 	movhi	r2,4096
 80019ac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//port number /data length
 80019b0:	0007883a 	mov	r3,zero
 80019b4:	00840034 	movhi	r2,4096
 80019b8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//device address
 80019bc:	00c0a404 	movi	r3,656
 80019c0:	00840034 	movhi	r2,4096
 80019c4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041); //data 1
 80019c8:	00c01044 	movi	r3,65
 80019cc:	00840034 	movhi	r2,4096
 80019d0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 80019d4:	00c004c4 	movi	r3,19
 80019d8:	00840034 	movhi	r2,4096
 80019dc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);
 80019e0:	0007883a 	mov	r3,zero
 80019e4:	00840034 	movhi	r2,4096
 80019e8:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80019ec:	01006c04 	movi	r4,432
 80019f0:	01414004 	movi	r5,1280
 80019f4:	8000eb40 	call	8000eb4 <UsbWrite>
}
 80019f8:	e037883a 	mov	sp,fp
 80019fc:	dfc00117 	ldw	ra,4(sp)
 8001a00:	df000017 	ldw	fp,0(sp)
 8001a04:	dec00204 	addi	sp,sp,8
 8001a08:	f800283a 	ret

08001a0c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001a0c:	defffe04 	addi	sp,sp,-8
 8001a10:	dfc00115 	stw	ra,4(sp)
 8001a14:	df000015 	stw	fp,0(sp)
 8001a18:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001a1c:	00c14004 	movi	r3,1280
 8001a20:	00840034 	movhi	r2,4096
 8001a24:	10800204 	addi	r2,r2,8
 8001a28:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001a2c:	00c14304 	movi	r3,1292
 8001a30:	00840034 	movhi	r2,4096
 8001a34:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001a38:	00c00204 	movi	r3,8
 8001a3c:	00840034 	movhi	r2,4096
 8001a40:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //port address
 8001a44:	00c0b404 	movi	r3,720
 8001a48:	00840034 	movhi	r2,4096
 8001a4c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001a50:	00c00044 	movi	r3,1
 8001a54:	00840034 	movhi	r2,4096
 8001a58:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001a5c:	00c004c4 	movi	r3,19
 8001a60:	00840034 	movhi	r2,4096
 8001a64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001a68:	00c14504 	movi	r3,1300
 8001a6c:	00840034 	movhi	r2,4096
 8001a70:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001a74:	00c1a044 	movi	r3,1665
 8001a78:	00840034 	movhi	r2,4096
 8001a7c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2100);//e //HID 0x21
 8001a80:	00c84004 	movi	r3,8448
 8001a84:	00840034 	movhi	r2,4096
 8001a88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001a8c:	0007883a 	mov	r3,zero
 8001a90:	00840034 	movhi	r2,4096
 8001a94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001a98:	00c01ec4 	movi	r3,123
 8001a9c:	00840034 	movhi	r2,4096
 8001aa0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544); //514
 8001aa4:	00c15104 	movi	r3,1348
 8001aa8:	00840034 	movhi	r2,4096
 8001aac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001ab0:	00c00204 	movi	r3,8
 8001ab4:	00840034 	movhi	r2,4096
 8001ab8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001abc:	00c0a404 	movi	r3,656
 8001ac0:	00840034 	movhi	r2,4096
 8001ac4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001ac8:	00c01044 	movi	r3,65
 8001acc:	00840034 	movhi	r2,4096
 8001ad0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001ad4:	00c004c4 	movi	r3,19
 8001ad8:	00840034 	movhi	r2,4096
 8001adc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001ae0:	00c14804 	movi	r3,1312
 8001ae4:	00840034 	movhi	r2,4096
 8001ae8:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //52c
 8001aec:	0007883a 	mov	r3,zero
 8001af0:	00840034 	movhi	r2,4096
 8001af4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001af8:	0007883a 	mov	r3,zero
 8001afc:	00840034 	movhi	r2,4096
 8001b00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//530
 8001b04:	00c08404 	movi	r3,528
 8001b08:	00840034 	movhi	r2,4096
 8001b0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001b10:	00c01044 	movi	r3,65
 8001b14:	00840034 	movhi	r2,4096
 8001b18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001b1c:	00c004c4 	movi	r3,19
 8001b20:	00840034 	movhi	r2,4096
 8001b24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001b28:	0007883a 	mov	r3,zero
 8001b2c:	00840034 	movhi	r2,4096
 8001b30:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001b34:	01006c04 	movi	r4,432
 8001b38:	01414004 	movi	r5,1280
 8001b3c:	8000eb40 	call	8000eb4 <UsbWrite>

}
 8001b40:	e037883a 	mov	sp,fp
 8001b44:	dfc00117 	ldw	ra,4(sp)
 8001b48:	df000017 	ldw	fp,0(sp)
 8001b4c:	dec00204 	addi	sp,sp,8
 8001b50:	f800283a 	ret

08001b54 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001b54:	defffe04 	addi	sp,sp,-8
 8001b58:	dfc00115 	stw	ra,4(sp)
 8001b5c:	df000015 	stw	fp,0(sp)
 8001b60:	d839883a 	mov	fp,sp
	//the starting address
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001b64:	00c14004 	movi	r3,1280
 8001b68:	00840034 	movhi	r2,4096
 8001b6c:	10800204 	addi	r2,r2,8
 8001b70:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x050C);
 8001b74:	00c14304 	movi	r3,1292
 8001b78:	00840034 	movhi	r2,4096
 8001b7c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008); //4 port number
 8001b80:	00c00204 	movi	r3,8
 8001b84:	00840034 	movhi	r2,4096
 8001b88:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x02D0); //device address
 8001b8c:	00c0b404 	movi	r3,720
 8001b90:	00840034 	movhi	r2,4096
 8001b94:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);
 8001b98:	00c00044 	movi	r3,1
 8001b9c:	00840034 	movhi	r2,4096
 8001ba0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);
 8001ba4:	00c004c4 	movi	r3,19
 8001ba8:	00840034 	movhi	r2,4096
 8001bac:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0514);
 8001bb0:	00c14504 	movi	r3,1300
 8001bb4:	00840034 	movhi	r2,4096
 8001bb8:	10c00035 	stwio	r3,0(r2)

	//td content 4 bytes
	IOWR(CY7C67200_BASE,HPI_DATA,0x0681);//c
 8001bbc:	00c1a044 	movi	r3,1665
 8001bc0:	00840034 	movhi	r2,4096
 8001bc4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x2200);//e //report 0x22
 8001bc8:	00c88004 	movi	r3,8704
 8001bcc:	00840034 	movhi	r2,4096
 8001bd0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//0
 8001bd4:	0007883a 	mov	r3,zero
 8001bd8:	00840034 	movhi	r2,4096
 8001bdc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x007B);//2
 8001be0:	00c01ec4 	movi	r3,123
 8001be4:	00840034 	movhi	r2,4096
 8001be8:	10c00035 	stwio	r3,0(r2)

	//data phase IN-1
	IOWR(CY7C67200_BASE,HPI_DATA,0x0580); //514
 8001bec:	00c16004 	movi	r3,1408
 8001bf0:	00840034 	movhi	r2,4096
 8001bf4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001bf8:	00c00204 	movi	r3,8
 8001bfc:	00840034 	movhi	r2,4096
 8001c00:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001c04:	00c0a404 	movi	r3,656
 8001c08:	00840034 	movhi	r2,4096
 8001c0c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001c10:	00c01044 	movi	r3,65
 8001c14:	00840034 	movhi	r2,4096
 8001c18:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001c1c:	00c004c4 	movi	r3,19
 8001c20:	00840034 	movhi	r2,4096
 8001c24:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0520);//e
 8001c28:	00c14804 	movi	r3,1312
 8001c2c:	00840034 	movhi	r2,4096
 8001c30:	10c00035 	stwio	r3,0(r2)

	//data phase IN-2
	IOWR(CY7C67200_BASE,HPI_DATA,0x0588); //520
 8001c34:	00c16204 	movi	r3,1416
 8001c38:	00840034 	movhi	r2,4096
 8001c3c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001c40:	00c00204 	movi	r3,8
 8001c44:	00840034 	movhi	r2,4096
 8001c48:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001c4c:	00c0a404 	movi	r3,656
 8001c50:	00840034 	movhi	r2,4096
 8001c54:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001c58:	00c00044 	movi	r3,1
 8001c5c:	00840034 	movhi	r2,4096
 8001c60:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001c64:	00c004c4 	movi	r3,19
 8001c68:	00840034 	movhi	r2,4096
 8001c6c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x052c);//a
 8001c70:	00c14b04 	movi	r3,1324
 8001c74:	00840034 	movhi	r2,4096
 8001c78:	10c00035 	stwio	r3,0(r2)

	//data phase IN-3
	IOWR(CY7C67200_BASE,HPI_DATA,0x0590); //52c
 8001c7c:	00c16404 	movi	r3,1424
 8001c80:	00840034 	movhi	r2,4096
 8001c84:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001c88:	00c00204 	movi	r3,8
 8001c8c:	00840034 	movhi	r2,4096
 8001c90:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//530
 8001c94:	00c0a404 	movi	r3,656
 8001c98:	00840034 	movhi	r2,4096
 8001c9c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2
 8001ca0:	00c01044 	movi	r3,65
 8001ca4:	00840034 	movhi	r2,4096
 8001ca8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001cac:	00c004c4 	movi	r3,19
 8001cb0:	00840034 	movhi	r2,4096
 8001cb4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0538);//6
 8001cb8:	00c14e04 	movi	r3,1336
 8001cbc:	00840034 	movhi	r2,4096
 8001cc0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-4
	IOWR(CY7C67200_BASE,HPI_DATA,0x0598); //538
 8001cc4:	00c16604 	movi	r3,1432
 8001cc8:	00840034 	movhi	r2,4096
 8001ccc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//a
 8001cd0:	00c00204 	movi	r3,8
 8001cd4:	00840034 	movhi	r2,4096
 8001cd8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001cdc:	00c0a404 	movi	r3,656
 8001ce0:	00840034 	movhi	r2,4096
 8001ce4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001ce8:	00c00044 	movi	r3,1
 8001cec:	00840034 	movhi	r2,4096
 8001cf0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//540
 8001cf4:	00c004c4 	movi	r3,19
 8001cf8:	00840034 	movhi	r2,4096
 8001cfc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0544);//2
 8001d00:	00c15104 	movi	r3,1348
 8001d04:	00840034 	movhi	r2,4096
 8001d08:	10c00035 	stwio	r3,0(r2)

	//data phase IN-5
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a0); //544
 8001d0c:	00c16804 	movi	r3,1440
 8001d10:	00840034 	movhi	r2,4096
 8001d14:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//6
 8001d18:	00c00204 	movi	r3,8
 8001d1c:	00840034 	movhi	r2,4096
 8001d20:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//8
 8001d24:	00c0a404 	movi	r3,656
 8001d28:	00840034 	movhi	r2,4096
 8001d2c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a //data1
 8001d30:	00c01044 	movi	r3,65
 8001d34:	00840034 	movhi	r2,4096
 8001d38:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001d3c:	00c004c4 	movi	r3,19
 8001d40:	00840034 	movhi	r2,4096
 8001d44:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0550);//e
 8001d48:	00c15404 	movi	r3,1360
 8001d4c:	00840034 	movhi	r2,4096
 8001d50:	10c00035 	stwio	r3,0(r2)

	//data phase IN-6
	IOWR(CY7C67200_BASE,HPI_DATA,0x05a8); //550
 8001d54:	00c16a04 	movi	r3,1448
 8001d58:	00840034 	movhi	r2,4096
 8001d5c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//2
 8001d60:	00c00204 	movi	r3,8
 8001d64:	00840034 	movhi	r2,4096
 8001d68:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//4
 8001d6c:	00c0a404 	movi	r3,656
 8001d70:	00840034 	movhi	r2,4096
 8001d74:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//6 //data0
 8001d78:	00c00044 	movi	r3,1
 8001d7c:	00840034 	movhi	r2,4096
 8001d80:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//8
 8001d84:	00c004c4 	movi	r3,19
 8001d88:	00840034 	movhi	r2,4096
 8001d8c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x055c);//a
 8001d90:	00c15704 	movi	r3,1372
 8001d94:	00840034 	movhi	r2,4096
 8001d98:	10c00035 	stwio	r3,0(r2)

	//data phase IN-7
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b0); //c
 8001d9c:	00c16c04 	movi	r3,1456
 8001da0:	00840034 	movhi	r2,4096
 8001da4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0008);//e
 8001da8:	00c00204 	movi	r3,8
 8001dac:	00840034 	movhi	r2,4096
 8001db0:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//560
 8001db4:	00c0a404 	movi	r3,656
 8001db8:	00840034 	movhi	r2,4096
 8001dbc:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//2 //data1
 8001dc0:	00c01044 	movi	r3,65
 8001dc4:	00840034 	movhi	r2,4096
 8001dc8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//4
 8001dcc:	00c004c4 	movi	r3,19
 8001dd0:	00840034 	movhi	r2,4096
 8001dd4:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0568);//6
 8001dd8:	00c15a04 	movi	r3,1384
 8001ddc:	00840034 	movhi	r2,4096
 8001de0:	10c00035 	stwio	r3,0(r2)

	//data phase IN-8
	IOWR(CY7C67200_BASE,HPI_DATA,0x05b8); //8
 8001de4:	00c16e04 	movi	r3,1464
 8001de8:	00840034 	movhi	r2,4096
 8001dec:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0003);//a
 8001df0:	00c000c4 	movi	r3,3
 8001df4:	00840034 	movhi	r2,4096
 8001df8:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0290);//c
 8001dfc:	00c0a404 	movi	r3,656
 8001e00:	00840034 	movhi	r2,4096
 8001e04:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0001);//e //data0
 8001e08:	00c00044 	movi	r3,1
 8001e0c:	00840034 	movhi	r2,4096
 8001e10:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//570
 8001e14:	00c004c4 	movi	r3,19
 8001e18:	00840034 	movhi	r2,4096
 8001e1c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0574);//2
 8001e20:	00c15d04 	movi	r3,1396
 8001e24:	00840034 	movhi	r2,4096
 8001e28:	10c00035 	stwio	r3,0(r2)

	//status phase
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000); //574
 8001e2c:	0007883a 	mov	r3,zero
 8001e30:	00840034 	movhi	r2,4096
 8001e34:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//6
 8001e38:	0007883a 	mov	r3,zero
 8001e3c:	00840034 	movhi	r2,4096
 8001e40:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0210);//8
 8001e44:	00c08404 	movi	r3,528
 8001e48:	00840034 	movhi	r2,4096
 8001e4c:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0041);//a
 8001e50:	00c01044 	movi	r3,65
 8001e54:	00840034 	movhi	r2,4096
 8001e58:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0013);//c
 8001e5c:	00c004c4 	movi	r3,19
 8001e60:	00840034 	movhi	r2,4096
 8001e64:	10c00035 	stwio	r3,0(r2)
	IOWR(CY7C67200_BASE,HPI_DATA,0x0000);//e
 8001e68:	0007883a 	mov	r3,zero
 8001e6c:	00840034 	movhi	r2,4096
 8001e70:	10c00035 	stwio	r3,0(r2)

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001e74:	01006c04 	movi	r4,432
 8001e78:	01414004 	movi	r5,1280
 8001e7c:	8000eb40 	call	8000eb4 <UsbWrite>

}
 8001e80:	e037883a 	mov	sp,fp
 8001e84:	dfc00117 	ldw	ra,4(sp)
 8001e88:	df000017 	ldw	fp,0(sp)
 8001e8c:	dec00204 	addi	sp,sp,8
 8001e90:	f800283a 	ret

08001e94 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 8001e94:	defffd04 	addi	sp,sp,-12
 8001e98:	dfc00215 	stw	ra,8(sp)
 8001e9c:	df000115 	stw	fp,4(sp)
 8001ea0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 8001ea4:	01005104 	movi	r4,324
 8001ea8:	8000efc0 	call	8000efc <UsbRead>
 8001eac:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001eb0:	01005104 	movi	r4,324
 8001eb4:	000b883a 	mov	r5,zero
 8001eb8:	8000eb40 	call	8000eb4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001ebc:	00000d06 	br	8001ef4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8001ec0:	e0bfff0b 	ldhu	r2,-4(fp)
 8001ec4:	10000526 	beq	r2,zero,8001edc <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8001ec8:	e0bfff0b 	ldhu	r2,-4(fp)
 8001ecc:	01020074 	movhi	r4,2049
 8001ed0:	21060204 	addi	r4,r4,6152
 8001ed4:	100b883a 	mov	r5,r2
 8001ed8:	80020480 	call	8002048 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8001edc:	01005104 	movi	r4,324
 8001ee0:	8000efc0 	call	8000efc <UsbRead>
 8001ee4:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001ee8:	01005104 	movi	r4,324
 8001eec:	000b883a 	mov	r5,zero
 8001ef0:	8000eb40 	call	8000eb4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001ef4:	e0bfff0b 	ldhu	r2,-4(fp)
 8001ef8:	10840018 	cmpnei	r2,r2,4096
 8001efc:	103ff01e 	bne	r2,zero,8001ec0 <__alt_data_end+0xf8001ec0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 8001f00:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8001f04:	e037883a 	mov	sp,fp
 8001f08:	dfc00117 	ldw	ra,4(sp)
 8001f0c:	df000017 	ldw	fp,0(sp)
 8001f10:	dec00204 	addi	sp,sp,8
 8001f14:	f800283a 	ret

08001f18 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 8001f18:	defffd04 	addi	sp,sp,-12
 8001f1c:	dfc00215 	stw	ra,8(sp)
 8001f20:	df000115 	stw	fp,4(sp)
 8001f24:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IORD(CY7C67200_BASE,HPI_STATUS);
 8001f28:	00840034 	movhi	r2,4096
 8001f2c:	10800304 	addi	r2,r2,12
 8001f30:	10800037 	ldwio	r2,0(r2)
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8001f34:	01005104 	movi	r4,324
 8001f38:	8000efc0 	call	8000efc <UsbRead>
 8001f3c:	10bfffcc 	andi	r2,r2,65535
 8001f40:	10840018 	cmpnei	r2,r2,4096
 8001f44:	1000091e 	bne	r2,zero,8001f6c <UsbGetRetryCnt+0x54>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001f48:	01005104 	movi	r4,324
 8001f4c:	000b883a 	mov	r5,zero
 8001f50:	8000eb40 	call	8000eb4 <UsbWrite>

		while (!(IORD(CY7C67200_BASE,HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001f54:	0001883a 	nop
 8001f58:	00840034 	movhi	r2,4096
 8001f5c:	10800304 	addi	r2,r2,12
 8001f60:	10800037 	ldwio	r2,0(r2)
 8001f64:	1080040c 	andi	r2,r2,16
 8001f68:	103ffb26 	beq	r2,zero,8001f58 <__alt_data_end+0xf8001f58>
		{
		}
	}
	//usleep(1000);
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0508);
 8001f6c:	00c14204 	movi	r3,1288
 8001f70:	00840034 	movhi	r2,4096
 8001f74:	10800204 	addi	r2,r2,8
 8001f78:	10c00035 	stwio	r3,0(r2)
	usb_ctl_val = IORD(CY7C67200_BASE,HPI_DATA);
 8001f7c:	00840034 	movhi	r2,4096
 8001f80:	10800037 	ldwio	r2,0(r2)
 8001f84:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8001f88:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8001f8c:	e037883a 	mov	sp,fp
 8001f90:	dfc00117 	ldw	ra,4(sp)
 8001f94:	df000017 	ldw	fp,0(sp)
 8001f98:	dec00204 	addi	sp,sp,8
 8001f9c:	f800283a 	ret

08001fa0 <UsbPrintMem>:


void UsbPrintMem()
{
 8001fa0:	defffc04 	addi	sp,sp,-16
 8001fa4:	dfc00315 	stw	ra,12(sp)
 8001fa8:	df000215 	stw	fp,8(sp)
 8001fac:	df000204 	addi	fp,sp,8
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
 8001fb0:	00c14004 	movi	r3,1280
 8001fb4:	00840034 	movhi	r2,4096
 8001fb8:	10800204 	addi	r2,r2,8
 8001fbc:	10c00035 	stwio	r3,0(r2)
	for (i = 0; i <= 200; i += 2)
 8001fc0:	e03ffe15 	stw	zero,-8(fp)
 8001fc4:	00000d06 	br	8001ffc <UsbPrintMem+0x5c>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
 8001fc8:	00840034 	movhi	r2,4096
 8001fcc:	10800037 	ldwio	r2,0(r2)
 8001fd0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8001fd4:	e0bffe17 	ldw	r2,-8(fp)
 8001fd8:	10814004 	addi	r2,r2,1280
 8001fdc:	01020074 	movhi	r4,2049
 8001fe0:	21060a04 	addi	r4,r4,6184
 8001fe4:	100b883a 	mov	r5,r2
 8001fe8:	e1bfff17 	ldw	r6,-4(fp)
 8001fec:	80020480 	call	8002048 <printf>

void UsbPrintMem()
{
	int i, code;
	IOWR(CY7C67200_BASE,HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 8001ff0:	e0bffe17 	ldw	r2,-8(fp)
 8001ff4:	10800084 	addi	r2,r2,2
 8001ff8:	e0bffe15 	stw	r2,-8(fp)
 8001ffc:	e0bffe17 	ldw	r2,-8(fp)
 8002000:	10803250 	cmplti	r2,r2,201
 8002004:	103ff01e 	bne	r2,zero,8001fc8 <__alt_data_end+0xf8001fc8>
	{
		code = IORD(CY7C67200_BASE,HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 8002008:	e037883a 	mov	sp,fp
 800200c:	dfc00117 	ldw	ra,4(sp)
 8002010:	df000017 	ldw	fp,0(sp)
 8002014:	dec00204 	addi	sp,sp,8
 8002018:	f800283a 	ret

0800201c <_printf_r>:
 800201c:	defffd04 	addi	sp,sp,-12
 8002020:	dfc00015 	stw	ra,0(sp)
 8002024:	d9800115 	stw	r6,4(sp)
 8002028:	d9c00215 	stw	r7,8(sp)
 800202c:	280d883a 	mov	r6,r5
 8002030:	21400217 	ldw	r5,8(r4)
 8002034:	d9c00104 	addi	r7,sp,4
 8002038:	80021dc0 	call	80021dc <___vfprintf_internal_r>
 800203c:	dfc00017 	ldw	ra,0(sp)
 8002040:	dec00304 	addi	sp,sp,12
 8002044:	f800283a 	ret

08002048 <printf>:
 8002048:	defffc04 	addi	sp,sp,-16
 800204c:	dfc00015 	stw	ra,0(sp)
 8002050:	d9400115 	stw	r5,4(sp)
 8002054:	d9800215 	stw	r6,8(sp)
 8002058:	d9c00315 	stw	r7,12(sp)
 800205c:	00820074 	movhi	r2,2049
 8002060:	108d7904 	addi	r2,r2,13796
 8002064:	10800017 	ldw	r2,0(r2)
 8002068:	200b883a 	mov	r5,r4
 800206c:	d9800104 	addi	r6,sp,4
 8002070:	11000217 	ldw	r4,8(r2)
 8002074:	80043300 	call	8004330 <__vfprintf_internal>
 8002078:	dfc00017 	ldw	ra,0(sp)
 800207c:	dec00404 	addi	sp,sp,16
 8002080:	f800283a 	ret

08002084 <_puts_r>:
 8002084:	defff604 	addi	sp,sp,-40
 8002088:	dc400815 	stw	r17,32(sp)
 800208c:	2023883a 	mov	r17,r4
 8002090:	2809883a 	mov	r4,r5
 8002094:	dc000715 	stw	r16,28(sp)
 8002098:	dfc00915 	stw	ra,36(sp)
 800209c:	2821883a 	mov	r16,r5
 80020a0:	80021500 	call	8002150 <strlen>
 80020a4:	00c20074 	movhi	r3,2049
 80020a8:	18cd7904 	addi	r3,r3,13796
 80020ac:	18c00017 	ldw	r3,0(r3)
 80020b0:	11000044 	addi	r4,r2,1
 80020b4:	d8800115 	stw	r2,4(sp)
 80020b8:	18c00217 	ldw	r3,8(r3)
 80020bc:	00820074 	movhi	r2,2049
 80020c0:	10860f04 	addi	r2,r2,6204
 80020c4:	d8800215 	stw	r2,8(sp)
 80020c8:	1940030b 	ldhu	r5,12(r3)
 80020cc:	00800044 	movi	r2,1
 80020d0:	d8800315 	stw	r2,12(sp)
 80020d4:	00800084 	movi	r2,2
 80020d8:	d8800515 	stw	r2,20(sp)
 80020dc:	dc000015 	stw	r16,0(sp)
 80020e0:	d9000615 	stw	r4,24(sp)
 80020e4:	dec00415 	stw	sp,16(sp)
 80020e8:	2888000c 	andi	r2,r5,8192
 80020ec:	1000061e 	bne	r2,zero,8002108 <_puts_r+0x84>
 80020f0:	19001917 	ldw	r4,100(r3)
 80020f4:	00b7ffc4 	movi	r2,-8193
 80020f8:	29480014 	ori	r5,r5,8192
 80020fc:	2084703a 	and	r2,r4,r2
 8002100:	1940030d 	sth	r5,12(r3)
 8002104:	18801915 	stw	r2,100(r3)
 8002108:	89400217 	ldw	r5,8(r17)
 800210c:	8809883a 	mov	r4,r17
 8002110:	d9800404 	addi	r6,sp,16
 8002114:	80067140 	call	8006714 <__sfvwrite_r>
 8002118:	1000061e 	bne	r2,zero,8002134 <_puts_r+0xb0>
 800211c:	00800284 	movi	r2,10
 8002120:	dfc00917 	ldw	ra,36(sp)
 8002124:	dc400817 	ldw	r17,32(sp)
 8002128:	dc000717 	ldw	r16,28(sp)
 800212c:	dec00a04 	addi	sp,sp,40
 8002130:	f800283a 	ret
 8002134:	00bfffc4 	movi	r2,-1
 8002138:	003ff906 	br	8002120 <__alt_data_end+0xf8002120>

0800213c <puts>:
 800213c:	00820074 	movhi	r2,2049
 8002140:	108d7904 	addi	r2,r2,13796
 8002144:	200b883a 	mov	r5,r4
 8002148:	11000017 	ldw	r4,0(r2)
 800214c:	80020841 	jmpi	8002084 <_puts_r>

08002150 <strlen>:
 8002150:	208000cc 	andi	r2,r4,3
 8002154:	10001d26 	beq	r2,zero,80021cc <strlen+0x7c>
 8002158:	20800007 	ldb	r2,0(r4)
 800215c:	10001d26 	beq	r2,zero,80021d4 <strlen+0x84>
 8002160:	2005883a 	mov	r2,r4
 8002164:	00000206 	br	8002170 <strlen+0x20>
 8002168:	10c00007 	ldb	r3,0(r2)
 800216c:	18001526 	beq	r3,zero,80021c4 <strlen+0x74>
 8002170:	10800044 	addi	r2,r2,1
 8002174:	10c000cc 	andi	r3,r2,3
 8002178:	183ffb1e 	bne	r3,zero,8002168 <__alt_data_end+0xf8002168>
 800217c:	10c00017 	ldw	r3,0(r2)
 8002180:	01ffbff4 	movhi	r7,65279
 8002184:	39ffbfc4 	addi	r7,r7,-257
 8002188:	01a02074 	movhi	r6,32897
 800218c:	31a02004 	addi	r6,r6,-32640
 8002190:	00000206 	br	800219c <strlen+0x4c>
 8002194:	10800104 	addi	r2,r2,4
 8002198:	10c00017 	ldw	r3,0(r2)
 800219c:	19cb883a 	add	r5,r3,r7
 80021a0:	00c6303a 	nor	r3,zero,r3
 80021a4:	28c6703a 	and	r3,r5,r3
 80021a8:	1986703a 	and	r3,r3,r6
 80021ac:	183ff926 	beq	r3,zero,8002194 <__alt_data_end+0xf8002194>
 80021b0:	10c00007 	ldb	r3,0(r2)
 80021b4:	18000326 	beq	r3,zero,80021c4 <strlen+0x74>
 80021b8:	10800044 	addi	r2,r2,1
 80021bc:	10c00007 	ldb	r3,0(r2)
 80021c0:	183ffd1e 	bne	r3,zero,80021b8 <__alt_data_end+0xf80021b8>
 80021c4:	1105c83a 	sub	r2,r2,r4
 80021c8:	f800283a 	ret
 80021cc:	2005883a 	mov	r2,r4
 80021d0:	003fea06 	br	800217c <__alt_data_end+0xf800217c>
 80021d4:	0005883a 	mov	r2,zero
 80021d8:	f800283a 	ret

080021dc <___vfprintf_internal_r>:
 80021dc:	defeb604 	addi	sp,sp,-1320
 80021e0:	dfc14915 	stw	ra,1316(sp)
 80021e4:	dcc14315 	stw	r19,1292(sp)
 80021e8:	dc414115 	stw	r17,1284(sp)
 80021ec:	d9012c15 	stw	r4,1200(sp)
 80021f0:	2827883a 	mov	r19,r5
 80021f4:	3023883a 	mov	r17,r6
 80021f8:	d9c12f15 	stw	r7,1212(sp)
 80021fc:	df014815 	stw	fp,1312(sp)
 8002200:	ddc14715 	stw	r23,1308(sp)
 8002204:	dd814615 	stw	r22,1304(sp)
 8002208:	dd414515 	stw	r21,1300(sp)
 800220c:	dd014415 	stw	r20,1296(sp)
 8002210:	dc814215 	stw	r18,1288(sp)
 8002214:	dc014015 	stw	r16,1280(sp)
 8002218:	8006dc00 	call	8006dc0 <_localeconv_r>
 800221c:	10800017 	ldw	r2,0(r2)
 8002220:	1009883a 	mov	r4,r2
 8002224:	d8813415 	stw	r2,1232(sp)
 8002228:	80021500 	call	8002150 <strlen>
 800222c:	d8813815 	stw	r2,1248(sp)
 8002230:	d8812c17 	ldw	r2,1200(sp)
 8002234:	10000226 	beq	r2,zero,8002240 <___vfprintf_internal_r+0x64>
 8002238:	10800e17 	ldw	r2,56(r2)
 800223c:	10010826 	beq	r2,zero,8002660 <___vfprintf_internal_r+0x484>
 8002240:	9880030b 	ldhu	r2,12(r19)
 8002244:	1108000c 	andi	r4,r2,8192
 8002248:	1007883a 	mov	r3,r2
 800224c:	2000071e 	bne	r4,zero,800226c <___vfprintf_internal_r+0x90>
 8002250:	99001917 	ldw	r4,100(r19)
 8002254:	10c80014 	ori	r3,r2,8192
 8002258:	00b7ffc4 	movi	r2,-8193
 800225c:	2088703a 	and	r4,r4,r2
 8002260:	98c0030d 	sth	r3,12(r19)
 8002264:	1805883a 	mov	r2,r3
 8002268:	99001915 	stw	r4,100(r19)
 800226c:	1900020c 	andi	r4,r3,8
 8002270:	2000ab26 	beq	r4,zero,8002520 <___vfprintf_internal_r+0x344>
 8002274:	99000417 	ldw	r4,16(r19)
 8002278:	2000a926 	beq	r4,zero,8002520 <___vfprintf_internal_r+0x344>
 800227c:	18c0068c 	andi	r3,r3,26
 8002280:	01000284 	movi	r4,10
 8002284:	1900af26 	beq	r3,r4,8002544 <___vfprintf_internal_r+0x368>
 8002288:	d9010dc4 	addi	r4,sp,1079
 800228c:	d9410e04 	addi	r5,sp,1080
 8002290:	d8800404 	addi	r2,sp,16
 8002294:	2907c83a 	sub	r3,r5,r4
 8002298:	d9012815 	stw	r4,1184(sp)
 800229c:	d9412915 	stw	r5,1188(sp)
 80022a0:	d8811e15 	stw	r2,1144(sp)
 80022a4:	d8012015 	stw	zero,1152(sp)
 80022a8:	d8011f15 	stw	zero,1148(sp)
 80022ac:	d8013515 	stw	zero,1236(sp)
 80022b0:	d8013715 	stw	zero,1244(sp)
 80022b4:	d8013915 	stw	zero,1252(sp)
 80022b8:	d8013b15 	stw	zero,1260(sp)
 80022bc:	d8013a15 	stw	zero,1256(sp)
 80022c0:	d8013115 	stw	zero,1220(sp)
 80022c4:	1011883a 	mov	r8,r2
 80022c8:	05c20074 	movhi	r23,2049
 80022cc:	bdc62084 	addi	r23,r23,6274
 80022d0:	d8c13d15 	stw	r3,1268(sp)
 80022d4:	88800007 	ldb	r2,0(r17)
 80022d8:	10021126 	beq	r2,zero,8002b20 <___vfprintf_internal_r+0x944>
 80022dc:	00c00944 	movi	r3,37
 80022e0:	8821883a 	mov	r16,r17
 80022e4:	10c0021e 	bne	r2,r3,80022f0 <___vfprintf_internal_r+0x114>
 80022e8:	00001406 	br	800233c <___vfprintf_internal_r+0x160>
 80022ec:	10c00326 	beq	r2,r3,80022fc <___vfprintf_internal_r+0x120>
 80022f0:	84000044 	addi	r16,r16,1
 80022f4:	80800007 	ldb	r2,0(r16)
 80022f8:	103ffc1e 	bne	r2,zero,80022ec <__alt_data_end+0xf80022ec>
 80022fc:	8465c83a 	sub	r18,r16,r17
 8002300:	90000e26 	beq	r18,zero,800233c <___vfprintf_internal_r+0x160>
 8002304:	d8c12017 	ldw	r3,1152(sp)
 8002308:	d8811f17 	ldw	r2,1148(sp)
 800230c:	44400015 	stw	r17,0(r8)
 8002310:	1c87883a 	add	r3,r3,r18
 8002314:	10800044 	addi	r2,r2,1
 8002318:	d8c12015 	stw	r3,1152(sp)
 800231c:	44800115 	stw	r18,4(r8)
 8002320:	d8811f15 	stw	r2,1148(sp)
 8002324:	00c001c4 	movi	r3,7
 8002328:	1880bb16 	blt	r3,r2,8002618 <___vfprintf_internal_r+0x43c>
 800232c:	42000204 	addi	r8,r8,8
 8002330:	d9013117 	ldw	r4,1220(sp)
 8002334:	2489883a 	add	r4,r4,r18
 8002338:	d9013115 	stw	r4,1220(sp)
 800233c:	80800007 	ldb	r2,0(r16)
 8002340:	1000bc26 	beq	r2,zero,8002634 <___vfprintf_internal_r+0x458>
 8002344:	053fffc4 	movi	r20,-1
 8002348:	84400044 	addi	r17,r16,1
 800234c:	84800047 	ldb	r18,1(r16)
 8002350:	d8012785 	stb	zero,1182(sp)
 8002354:	002d883a 	mov	r22,zero
 8002358:	d8013015 	stw	zero,1216(sp)
 800235c:	d8012a15 	stw	zero,1192(sp)
 8002360:	04001604 	movi	r16,88
 8002364:	05400244 	movi	r21,9
 8002368:	4039883a 	mov	fp,r8
 800236c:	a007883a 	mov	r3,r20
 8002370:	8c400044 	addi	r17,r17,1
 8002374:	90bff804 	addi	r2,r18,-32
 8002378:	80832036 	bltu	r16,r2,8002ffc <___vfprintf_internal_r+0xe20>
 800237c:	1085883a 	add	r2,r2,r2
 8002380:	1085883a 	add	r2,r2,r2
 8002384:	01420034 	movhi	r5,2048
 8002388:	2948e604 	addi	r5,r5,9112
 800238c:	1145883a 	add	r2,r2,r5
 8002390:	10800017 	ldw	r2,0(r2)
 8002394:	1000683a 	jmp	r2
 8002398:	08002d9c 	xori	zero,at,182
 800239c:	08002ffc 	xorhi	zero,at,191
 80023a0:	08002ffc 	xorhi	zero,at,191
 80023a4:	08002db8 	rdprs	zero,at,182
 80023a8:	08002ffc 	xorhi	zero,at,191
 80023ac:	08002ffc 	xorhi	zero,at,191
 80023b0:	08002ffc 	xorhi	zero,at,191
 80023b4:	08002ffc 	xorhi	zero,at,191
 80023b8:	08002ffc 	xorhi	zero,at,191
 80023bc:	08002ffc 	xorhi	zero,at,191
 80023c0:	08002dcc 	andi	zero,at,183
 80023c4:	0800266c 	andhi	zero,at,153
 80023c8:	08002ffc 	xorhi	zero,at,191
 80023cc:	0800250c 	andi	zero,at,148
 80023d0:	08002678 	rdprs	zero,at,153
 80023d4:	08002ffc 	xorhi	zero,at,191
 80023d8:	080026c8 	cmpgei	zero,at,155
 80023dc:	08002bd8 	cmpnei	zero,at,175
 80023e0:	08002bd8 	cmpnei	zero,at,175
 80023e4:	08002bd8 	cmpnei	zero,at,175
 80023e8:	08002bd8 	cmpnei	zero,at,175
 80023ec:	08002bd8 	cmpnei	zero,at,175
 80023f0:	08002bd8 	cmpnei	zero,at,175
 80023f4:	08002bd8 	cmpnei	zero,at,175
 80023f8:	08002bd8 	cmpnei	zero,at,175
 80023fc:	08002bd8 	cmpnei	zero,at,175
 8002400:	08002ffc 	xorhi	zero,at,191
 8002404:	08002ffc 	xorhi	zero,at,191
 8002408:	08002ffc 	xorhi	zero,at,191
 800240c:	08002ffc 	xorhi	zero,at,191
 8002410:	08002ffc 	xorhi	zero,at,191
 8002414:	08002ffc 	xorhi	zero,at,191
 8002418:	08002ffc 	xorhi	zero,at,191
 800241c:	08002ffc 	xorhi	zero,at,191
 8002420:	08002ffc 	xorhi	zero,at,191
 8002424:	08002ffc 	xorhi	zero,at,191
 8002428:	080026dc 	xori	zero,at,155
 800242c:	08002b28 	cmpgeui	zero,at,172
 8002430:	08002ffc 	xorhi	zero,at,191
 8002434:	08002b28 	cmpgeui	zero,at,172
 8002438:	08002ffc 	xorhi	zero,at,191
 800243c:	08002ffc 	xorhi	zero,at,191
 8002440:	08002ffc 	xorhi	zero,at,191
 8002444:	08002ffc 	xorhi	zero,at,191
 8002448:	08002c20 	cmpeqi	zero,at,176
 800244c:	08002ffc 	xorhi	zero,at,191
 8002450:	08002ffc 	xorhi	zero,at,191
 8002454:	08002c34 	orhi	zero,at,176
 8002458:	08002ffc 	xorhi	zero,at,191
 800245c:	08002ffc 	xorhi	zero,at,191
 8002460:	08002ffc 	xorhi	zero,at,191
 8002464:	08002ffc 	xorhi	zero,at,191
 8002468:	08002ffc 	xorhi	zero,at,191
 800246c:	08002c7c 	xorhi	zero,at,177
 8002470:	08002ffc 	xorhi	zero,at,191
 8002474:	08002ffc 	xorhi	zero,at,191
 8002478:	08002df0 	cmpltui	zero,at,183
 800247c:	08002ffc 	xorhi	zero,at,191
 8002480:	08002ffc 	xorhi	zero,at,191
 8002484:	08002ffc 	xorhi	zero,at,191
 8002488:	08002ffc 	xorhi	zero,at,191
 800248c:	08002ffc 	xorhi	zero,at,191
 8002490:	08002ffc 	xorhi	zero,at,191
 8002494:	08002ffc 	xorhi	zero,at,191
 8002498:	08002ffc 	xorhi	zero,at,191
 800249c:	08002ffc 	xorhi	zero,at,191
 80024a0:	08002ffc 	xorhi	zero,at,191
 80024a4:	08002cf4 	orhi	zero,at,179
 80024a8:	08002e6c 	andhi	zero,at,185
 80024ac:	08002b28 	cmpgeui	zero,at,172
 80024b0:	08002b28 	cmpgeui	zero,at,172
 80024b4:	08002b28 	cmpgeui	zero,at,172
 80024b8:	08002e38 	rdprs	zero,at,184
 80024bc:	08002e6c 	andhi	zero,at,185
 80024c0:	08002ffc 	xorhi	zero,at,191
 80024c4:	08002ffc 	xorhi	zero,at,191
 80024c8:	08002e4c 	andi	zero,at,185
 80024cc:	08002ffc 	xorhi	zero,at,191
 80024d0:	08002cbc 	xorhi	zero,at,178
 80024d4:	08002f7c 	xorhi	zero,at,189
 80024d8:	08002f28 	cmpgeui	zero,at,188
 80024dc:	08002eac 	andhi	zero,at,186
 80024e0:	08002ffc 	xorhi	zero,at,191
 80024e4:	08002ec0 	call	8002ec <__reset-0x77ffd14>
 80024e8:	08002ffc 	xorhi	zero,at,191
 80024ec:	08002fbc 	xorhi	zero,at,190
 80024f0:	08002ffc 	xorhi	zero,at,191
 80024f4:	08002ffc 	xorhi	zero,at,191
 80024f8:	08002d34 	orhi	zero,at,180
 80024fc:	d9413017 	ldw	r5,1216(sp)
 8002500:	d8812f15 	stw	r2,1212(sp)
 8002504:	014bc83a 	sub	r5,zero,r5
 8002508:	d9413015 	stw	r5,1216(sp)
 800250c:	d8812a17 	ldw	r2,1192(sp)
 8002510:	10800114 	ori	r2,r2,4
 8002514:	d8812a15 	stw	r2,1192(sp)
 8002518:	8c800007 	ldb	r18,0(r17)
 800251c:	003f9406 	br	8002370 <__alt_data_end+0xf8002370>
 8002520:	d9012c17 	ldw	r4,1200(sp)
 8002524:	980b883a 	mov	r5,r19
 8002528:	80043540 	call	8004354 <__swsetup_r>
 800252c:	10002d1e 	bne	r2,zero,80025e4 <___vfprintf_internal_r+0x408>
 8002530:	9880030b 	ldhu	r2,12(r19)
 8002534:	01000284 	movi	r4,10
 8002538:	1007883a 	mov	r3,r2
 800253c:	18c0068c 	andi	r3,r3,26
 8002540:	193f511e 	bne	r3,r4,8002288 <__alt_data_end+0xf8002288>
 8002544:	98c0038b 	ldhu	r3,14(r19)
 8002548:	193fffcc 	andi	r4,r3,65535
 800254c:	2120001c 	xori	r4,r4,32768
 8002550:	21200004 	addi	r4,r4,-32768
 8002554:	203f4c16 	blt	r4,zero,8002288 <__alt_data_end+0xf8002288>
 8002558:	9ac01917 	ldw	r11,100(r19)
 800255c:	9a800717 	ldw	r10,28(r19)
 8002560:	9a400917 	ldw	r9,36(r19)
 8002564:	d9012c17 	ldw	r4,1200(sp)
 8002568:	d9c12f17 	ldw	r7,1212(sp)
 800256c:	02010004 	movi	r8,1024
 8002570:	10bfff4c 	andi	r2,r2,65533
 8002574:	d8c1078d 	sth	r3,1054(sp)
 8002578:	d9410404 	addi	r5,sp,1040
 800257c:	d8c00404 	addi	r3,sp,16
 8002580:	880d883a 	mov	r6,r17
 8002584:	d881070d 	sth	r2,1052(sp)
 8002588:	dac11d15 	stw	r11,1140(sp)
 800258c:	da810b15 	stw	r10,1068(sp)
 8002590:	da410d15 	stw	r9,1076(sp)
 8002594:	d8c10415 	stw	r3,1040(sp)
 8002598:	d8c10815 	stw	r3,1056(sp)
 800259c:	da010615 	stw	r8,1048(sp)
 80025a0:	da010915 	stw	r8,1060(sp)
 80025a4:	d8010a15 	stw	zero,1064(sp)
 80025a8:	80021dc0 	call	80021dc <___vfprintf_internal_r>
 80025ac:	1021883a 	mov	r16,r2
 80025b0:	10000416 	blt	r2,zero,80025c4 <___vfprintf_internal_r+0x3e8>
 80025b4:	d9012c17 	ldw	r4,1200(sp)
 80025b8:	d9410404 	addi	r5,sp,1040
 80025bc:	8005cf00 	call	8005cf0 <_fflush_r>
 80025c0:	10072a1e 	bne	r2,zero,800426c <___vfprintf_internal_r+0x2090>
 80025c4:	d881070b 	ldhu	r2,1052(sp)
 80025c8:	1080100c 	andi	r2,r2,64
 80025cc:	10000326 	beq	r2,zero,80025dc <___vfprintf_internal_r+0x400>
 80025d0:	9880030b 	ldhu	r2,12(r19)
 80025d4:	10801014 	ori	r2,r2,64
 80025d8:	9880030d 	sth	r2,12(r19)
 80025dc:	8005883a 	mov	r2,r16
 80025e0:	00000106 	br	80025e8 <___vfprintf_internal_r+0x40c>
 80025e4:	00bfffc4 	movi	r2,-1
 80025e8:	dfc14917 	ldw	ra,1316(sp)
 80025ec:	df014817 	ldw	fp,1312(sp)
 80025f0:	ddc14717 	ldw	r23,1308(sp)
 80025f4:	dd814617 	ldw	r22,1304(sp)
 80025f8:	dd414517 	ldw	r21,1300(sp)
 80025fc:	dd014417 	ldw	r20,1296(sp)
 8002600:	dcc14317 	ldw	r19,1292(sp)
 8002604:	dc814217 	ldw	r18,1288(sp)
 8002608:	dc414117 	ldw	r17,1284(sp)
 800260c:	dc014017 	ldw	r16,1280(sp)
 8002610:	dec14a04 	addi	sp,sp,1320
 8002614:	f800283a 	ret
 8002618:	d9012c17 	ldw	r4,1200(sp)
 800261c:	980b883a 	mov	r5,r19
 8002620:	d9811e04 	addi	r6,sp,1144
 8002624:	80094e40 	call	80094e4 <__sprint_r>
 8002628:	1000081e 	bne	r2,zero,800264c <___vfprintf_internal_r+0x470>
 800262c:	da000404 	addi	r8,sp,16
 8002630:	003f3f06 	br	8002330 <__alt_data_end+0xf8002330>
 8002634:	d8812017 	ldw	r2,1152(sp)
 8002638:	10000426 	beq	r2,zero,800264c <___vfprintf_internal_r+0x470>
 800263c:	d9012c17 	ldw	r4,1200(sp)
 8002640:	980b883a 	mov	r5,r19
 8002644:	d9811e04 	addi	r6,sp,1144
 8002648:	80094e40 	call	80094e4 <__sprint_r>
 800264c:	9880030b 	ldhu	r2,12(r19)
 8002650:	1080100c 	andi	r2,r2,64
 8002654:	103fe31e 	bne	r2,zero,80025e4 <__alt_data_end+0xf80025e4>
 8002658:	d8813117 	ldw	r2,1220(sp)
 800265c:	003fe206 	br	80025e8 <__alt_data_end+0xf80025e8>
 8002660:	d9012c17 	ldw	r4,1200(sp)
 8002664:	80060100 	call	8006010 <__sinit>
 8002668:	003ef506 	br	8002240 <__alt_data_end+0xf8002240>
 800266c:	05800ac4 	movi	r22,43
 8002670:	8c800007 	ldb	r18,0(r17)
 8002674:	003f3e06 	br	8002370 <__alt_data_end+0xf8002370>
 8002678:	8c800007 	ldb	r18,0(r17)
 800267c:	00c00a84 	movi	r3,42
 8002680:	88800044 	addi	r2,r17,1
 8002684:	90c6fb26 	beq	r18,r3,8004274 <___vfprintf_internal_r+0x2098>
 8002688:	953ff404 	addi	r20,r18,-48
 800268c:	1023883a 	mov	r17,r2
 8002690:	0007883a 	mov	r3,zero
 8002694:	ad3f3736 	bltu	r21,r20,8002374 <__alt_data_end+0xf8002374>
 8002698:	0009883a 	mov	r4,zero
 800269c:	01400284 	movi	r5,10
 80026a0:	800c1240 	call	800c124 <__mulsi3>
 80026a4:	8c800007 	ldb	r18,0(r17)
 80026a8:	a089883a 	add	r4,r20,r2
 80026ac:	8c400044 	addi	r17,r17,1
 80026b0:	953ff404 	addi	r20,r18,-48
 80026b4:	ad3ff92e 	bgeu	r21,r20,800269c <__alt_data_end+0xf800269c>
 80026b8:	2007883a 	mov	r3,r4
 80026bc:	203f2d0e 	bge	r4,zero,8002374 <__alt_data_end+0xf8002374>
 80026c0:	00ffffc4 	movi	r3,-1
 80026c4:	003f2b06 	br	8002374 <__alt_data_end+0xf8002374>
 80026c8:	d9412a17 	ldw	r5,1192(sp)
 80026cc:	29402014 	ori	r5,r5,128
 80026d0:	d9412a15 	stw	r5,1192(sp)
 80026d4:	8c800007 	ldb	r18,0(r17)
 80026d8:	003f2506 	br	8002370 <__alt_data_end+0xf8002370>
 80026dc:	d9412a17 	ldw	r5,1192(sp)
 80026e0:	1829883a 	mov	r20,r3
 80026e4:	dd812785 	stb	r22,1182(sp)
 80026e8:	29400414 	ori	r5,r5,16
 80026ec:	d9412a15 	stw	r5,1192(sp)
 80026f0:	d8c12a17 	ldw	r3,1192(sp)
 80026f4:	e011883a 	mov	r8,fp
 80026f8:	1880080c 	andi	r2,r3,32
 80026fc:	1001e126 	beq	r2,zero,8002e84 <___vfprintf_internal_r+0xca8>
 8002700:	d9012f17 	ldw	r4,1212(sp)
 8002704:	20800117 	ldw	r2,4(r4)
 8002708:	25400017 	ldw	r21,0(r4)
 800270c:	21000204 	addi	r4,r4,8
 8002710:	d9012f15 	stw	r4,1212(sp)
 8002714:	102d883a 	mov	r22,r2
 8002718:	10046916 	blt	r2,zero,80038c0 <___vfprintf_internal_r+0x16e4>
 800271c:	df012783 	ldbu	fp,1182(sp)
 8002720:	00c00044 	movi	r3,1
 8002724:	ad84b03a 	or	r2,r21,r22
 8002728:	a0000416 	blt	r20,zero,800273c <___vfprintf_internal_r+0x560>
 800272c:	d9412a17 	ldw	r5,1192(sp)
 8002730:	013fdfc4 	movi	r4,-129
 8002734:	290a703a 	and	r5,r5,r4
 8002738:	d9412a15 	stw	r5,1192(sp)
 800273c:	1002491e 	bne	r2,zero,8003064 <___vfprintf_internal_r+0xe88>
 8002740:	a002481e 	bne	r20,zero,8003064 <___vfprintf_internal_r+0xe88>
 8002744:	18c03fcc 	andi	r3,r3,255
 8002748:	1803871e 	bne	r3,zero,8003568 <___vfprintf_internal_r+0x138c>
 800274c:	d9012a17 	ldw	r4,1192(sp)
 8002750:	2080004c 	andi	r2,r4,1
 8002754:	10038426 	beq	r2,zero,8003568 <___vfprintf_internal_r+0x138c>
 8002758:	d9413d17 	ldw	r5,1268(sp)
 800275c:	00800c04 	movi	r2,48
 8002760:	d8810dc5 	stb	r2,1079(sp)
 8002764:	d9412e15 	stw	r5,1208(sp)
 8002768:	dc010dc4 	addi	r16,sp,1079
 800276c:	d8812e17 	ldw	r2,1208(sp)
 8002770:	1500010e 	bge	r2,r20,8002778 <___vfprintf_internal_r+0x59c>
 8002774:	a005883a 	mov	r2,r20
 8002778:	d8812b15 	stw	r2,1196(sp)
 800277c:	d8013315 	stw	zero,1228(sp)
 8002780:	e0803fcc 	andi	r2,fp,255
 8002784:	1080201c 	xori	r2,r2,128
 8002788:	10bfe004 	addi	r2,r2,-128
 800278c:	10000326 	beq	r2,zero,800279c <___vfprintf_internal_r+0x5c0>
 8002790:	d8c12b17 	ldw	r3,1196(sp)
 8002794:	18c00044 	addi	r3,r3,1
 8002798:	d8c12b15 	stw	r3,1196(sp)
 800279c:	d8c12a17 	ldw	r3,1192(sp)
 80027a0:	18c0008c 	andi	r3,r3,2
 80027a4:	d8c12d15 	stw	r3,1204(sp)
 80027a8:	18000326 	beq	r3,zero,80027b8 <___vfprintf_internal_r+0x5dc>
 80027ac:	d8c12b17 	ldw	r3,1196(sp)
 80027b0:	18c00084 	addi	r3,r3,2
 80027b4:	d8c12b15 	stw	r3,1196(sp)
 80027b8:	d8c12a17 	ldw	r3,1192(sp)
 80027bc:	18c0210c 	andi	r3,r3,132
 80027c0:	d8c13215 	stw	r3,1224(sp)
 80027c4:	1802151e 	bne	r3,zero,800301c <___vfprintf_internal_r+0xe40>
 80027c8:	d9013017 	ldw	r4,1216(sp)
 80027cc:	d8c12b17 	ldw	r3,1196(sp)
 80027d0:	20f9c83a 	sub	fp,r4,r3
 80027d4:	0702110e 	bge	zero,fp,800301c <___vfprintf_internal_r+0xe40>
 80027d8:	02400404 	movi	r9,16
 80027dc:	d8c12017 	ldw	r3,1152(sp)
 80027e0:	d8811f17 	ldw	r2,1148(sp)
 80027e4:	4f059a0e 	bge	r9,fp,8003e50 <___vfprintf_internal_r+0x1c74>
 80027e8:	8809883a 	mov	r4,r17
 80027ec:	01420074 	movhi	r5,2049
 80027f0:	29462484 	addi	r5,r5,6290
 80027f4:	dc013c15 	stw	r16,1264(sp)
 80027f8:	e023883a 	mov	r17,fp
 80027fc:	d9413615 	stw	r5,1240(sp)
 8002800:	482d883a 	mov	r22,r9
 8002804:	054001c4 	movi	r21,7
 8002808:	dc012c17 	ldw	r16,1200(sp)
 800280c:	2039883a 	mov	fp,r4
 8002810:	00000306 	br	8002820 <___vfprintf_internal_r+0x644>
 8002814:	8c7ffc04 	addi	r17,r17,-16
 8002818:	42000204 	addi	r8,r8,8
 800281c:	b440130e 	bge	r22,r17,800286c <___vfprintf_internal_r+0x690>
 8002820:	18c00404 	addi	r3,r3,16
 8002824:	10800044 	addi	r2,r2,1
 8002828:	01020074 	movhi	r4,2049
 800282c:	21062484 	addi	r4,r4,6290
 8002830:	41000015 	stw	r4,0(r8)
 8002834:	45800115 	stw	r22,4(r8)
 8002838:	d8c12015 	stw	r3,1152(sp)
 800283c:	d8811f15 	stw	r2,1148(sp)
 8002840:	a8bff40e 	bge	r21,r2,8002814 <__alt_data_end+0xf8002814>
 8002844:	8009883a 	mov	r4,r16
 8002848:	980b883a 	mov	r5,r19
 800284c:	d9811e04 	addi	r6,sp,1144
 8002850:	80094e40 	call	80094e4 <__sprint_r>
 8002854:	103f7d1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8002858:	8c7ffc04 	addi	r17,r17,-16
 800285c:	d8c12017 	ldw	r3,1152(sp)
 8002860:	d8811f17 	ldw	r2,1148(sp)
 8002864:	da000404 	addi	r8,sp,16
 8002868:	b47fed16 	blt	r22,r17,8002820 <__alt_data_end+0xf8002820>
 800286c:	dc013c17 	ldw	r16,1264(sp)
 8002870:	e009883a 	mov	r4,fp
 8002874:	8839883a 	mov	fp,r17
 8002878:	2023883a 	mov	r17,r4
 800287c:	d9413617 	ldw	r5,1240(sp)
 8002880:	e0c7883a 	add	r3,fp,r3
 8002884:	10800044 	addi	r2,r2,1
 8002888:	41400015 	stw	r5,0(r8)
 800288c:	47000115 	stw	fp,4(r8)
 8002890:	d8c12015 	stw	r3,1152(sp)
 8002894:	d8811f15 	stw	r2,1148(sp)
 8002898:	010001c4 	movi	r4,7
 800289c:	20836b16 	blt	r4,r2,800364c <___vfprintf_internal_r+0x1470>
 80028a0:	d8812787 	ldb	r2,1182(sp)
 80028a4:	42000204 	addi	r8,r8,8
 80028a8:	10000c26 	beq	r2,zero,80028dc <___vfprintf_internal_r+0x700>
 80028ac:	d8811f17 	ldw	r2,1148(sp)
 80028b0:	d9012784 	addi	r4,sp,1182
 80028b4:	18c00044 	addi	r3,r3,1
 80028b8:	10800044 	addi	r2,r2,1
 80028bc:	41000015 	stw	r4,0(r8)
 80028c0:	01000044 	movi	r4,1
 80028c4:	41000115 	stw	r4,4(r8)
 80028c8:	d8c12015 	stw	r3,1152(sp)
 80028cc:	d8811f15 	stw	r2,1148(sp)
 80028d0:	010001c4 	movi	r4,7
 80028d4:	2082ef16 	blt	r4,r2,8003494 <___vfprintf_internal_r+0x12b8>
 80028d8:	42000204 	addi	r8,r8,8
 80028dc:	d8812d17 	ldw	r2,1204(sp)
 80028e0:	10000c26 	beq	r2,zero,8002914 <___vfprintf_internal_r+0x738>
 80028e4:	d8811f17 	ldw	r2,1148(sp)
 80028e8:	d9012704 	addi	r4,sp,1180
 80028ec:	18c00084 	addi	r3,r3,2
 80028f0:	10800044 	addi	r2,r2,1
 80028f4:	41000015 	stw	r4,0(r8)
 80028f8:	01000084 	movi	r4,2
 80028fc:	41000115 	stw	r4,4(r8)
 8002900:	d8c12015 	stw	r3,1152(sp)
 8002904:	d8811f15 	stw	r2,1148(sp)
 8002908:	010001c4 	movi	r4,7
 800290c:	2082e916 	blt	r4,r2,80034b4 <___vfprintf_internal_r+0x12d8>
 8002910:	42000204 	addi	r8,r8,8
 8002914:	d9013217 	ldw	r4,1224(sp)
 8002918:	00802004 	movi	r2,128
 800291c:	20823226 	beq	r4,r2,80031e8 <___vfprintf_internal_r+0x100c>
 8002920:	d9012e17 	ldw	r4,1208(sp)
 8002924:	a129c83a 	sub	r20,r20,r4
 8002928:	05002d0e 	bge	zero,r20,80029e0 <___vfprintf_internal_r+0x804>
 800292c:	05800404 	movi	r22,16
 8002930:	d8811f17 	ldw	r2,1148(sp)
 8002934:	05420074 	movhi	r21,2049
 8002938:	ad462084 	addi	r21,r21,6274
 800293c:	b5001f0e 	bge	r22,r20,80029bc <___vfprintf_internal_r+0x7e0>
 8002940:	8809883a 	mov	r4,r17
 8002944:	dc012d15 	stw	r16,1204(sp)
 8002948:	a023883a 	mov	r17,r20
 800294c:	070001c4 	movi	fp,7
 8002950:	dc012c17 	ldw	r16,1200(sp)
 8002954:	2029883a 	mov	r20,r4
 8002958:	00000306 	br	8002968 <___vfprintf_internal_r+0x78c>
 800295c:	8c7ffc04 	addi	r17,r17,-16
 8002960:	42000204 	addi	r8,r8,8
 8002964:	b440110e 	bge	r22,r17,80029ac <___vfprintf_internal_r+0x7d0>
 8002968:	18c00404 	addi	r3,r3,16
 800296c:	10800044 	addi	r2,r2,1
 8002970:	45c00015 	stw	r23,0(r8)
 8002974:	45800115 	stw	r22,4(r8)
 8002978:	d8c12015 	stw	r3,1152(sp)
 800297c:	d8811f15 	stw	r2,1148(sp)
 8002980:	e0bff60e 	bge	fp,r2,800295c <__alt_data_end+0xf800295c>
 8002984:	8009883a 	mov	r4,r16
 8002988:	980b883a 	mov	r5,r19
 800298c:	d9811e04 	addi	r6,sp,1144
 8002990:	80094e40 	call	80094e4 <__sprint_r>
 8002994:	103f2d1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8002998:	8c7ffc04 	addi	r17,r17,-16
 800299c:	d8c12017 	ldw	r3,1152(sp)
 80029a0:	d8811f17 	ldw	r2,1148(sp)
 80029a4:	da000404 	addi	r8,sp,16
 80029a8:	b47fef16 	blt	r22,r17,8002968 <__alt_data_end+0xf8002968>
 80029ac:	dc012d17 	ldw	r16,1204(sp)
 80029b0:	a009883a 	mov	r4,r20
 80029b4:	8829883a 	mov	r20,r17
 80029b8:	2023883a 	mov	r17,r4
 80029bc:	1d07883a 	add	r3,r3,r20
 80029c0:	10800044 	addi	r2,r2,1
 80029c4:	45400015 	stw	r21,0(r8)
 80029c8:	45000115 	stw	r20,4(r8)
 80029cc:	d8c12015 	stw	r3,1152(sp)
 80029d0:	d8811f15 	stw	r2,1148(sp)
 80029d4:	010001c4 	movi	r4,7
 80029d8:	2082a616 	blt	r4,r2,8003474 <___vfprintf_internal_r+0x1298>
 80029dc:	42000204 	addi	r8,r8,8
 80029e0:	d9412a17 	ldw	r5,1192(sp)
 80029e4:	2880400c 	andi	r2,r5,256
 80029e8:	1001b51e 	bne	r2,zero,80030c0 <___vfprintf_internal_r+0xee4>
 80029ec:	d8812e17 	ldw	r2,1208(sp)
 80029f0:	d9012e17 	ldw	r4,1208(sp)
 80029f4:	44000015 	stw	r16,0(r8)
 80029f8:	1887883a 	add	r3,r3,r2
 80029fc:	d8811f17 	ldw	r2,1148(sp)
 8002a00:	10800044 	addi	r2,r2,1
 8002a04:	41000115 	stw	r4,4(r8)
 8002a08:	d8c12015 	stw	r3,1152(sp)
 8002a0c:	d8811f15 	stw	r2,1148(sp)
 8002a10:	010001c4 	movi	r4,7
 8002a14:	20818b16 	blt	r4,r2,8003044 <___vfprintf_internal_r+0xe68>
 8002a18:	42000204 	addi	r8,r8,8
 8002a1c:	d9412a17 	ldw	r5,1192(sp)
 8002a20:	2880010c 	andi	r2,r5,4
 8002a24:	10003226 	beq	r2,zero,8002af0 <___vfprintf_internal_r+0x914>
 8002a28:	d8813017 	ldw	r2,1216(sp)
 8002a2c:	d9012b17 	ldw	r4,1196(sp)
 8002a30:	1121c83a 	sub	r16,r2,r4
 8002a34:	04002e0e 	bge	zero,r16,8002af0 <___vfprintf_internal_r+0x914>
 8002a38:	04800404 	movi	r18,16
 8002a3c:	d8811f17 	ldw	r2,1148(sp)
 8002a40:	9405240e 	bge	r18,r16,8003ed4 <___vfprintf_internal_r+0x1cf8>
 8002a44:	01020074 	movhi	r4,2049
 8002a48:	21062484 	addi	r4,r4,6290
 8002a4c:	d9013615 	stw	r4,1240(sp)
 8002a50:	050001c4 	movi	r20,7
 8002a54:	dd412c17 	ldw	r21,1200(sp)
 8002a58:	00000306 	br	8002a68 <___vfprintf_internal_r+0x88c>
 8002a5c:	843ffc04 	addi	r16,r16,-16
 8002a60:	42000204 	addi	r8,r8,8
 8002a64:	9400130e 	bge	r18,r16,8002ab4 <___vfprintf_internal_r+0x8d8>
 8002a68:	18c00404 	addi	r3,r3,16
 8002a6c:	10800044 	addi	r2,r2,1
 8002a70:	01420074 	movhi	r5,2049
 8002a74:	29462484 	addi	r5,r5,6290
 8002a78:	41400015 	stw	r5,0(r8)
 8002a7c:	44800115 	stw	r18,4(r8)
 8002a80:	d8c12015 	stw	r3,1152(sp)
 8002a84:	d8811f15 	stw	r2,1148(sp)
 8002a88:	a0bff40e 	bge	r20,r2,8002a5c <__alt_data_end+0xf8002a5c>
 8002a8c:	a809883a 	mov	r4,r21
 8002a90:	980b883a 	mov	r5,r19
 8002a94:	d9811e04 	addi	r6,sp,1144
 8002a98:	80094e40 	call	80094e4 <__sprint_r>
 8002a9c:	103eeb1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8002aa0:	843ffc04 	addi	r16,r16,-16
 8002aa4:	d8c12017 	ldw	r3,1152(sp)
 8002aa8:	d8811f17 	ldw	r2,1148(sp)
 8002aac:	da000404 	addi	r8,sp,16
 8002ab0:	943fed16 	blt	r18,r16,8002a68 <__alt_data_end+0xf8002a68>
 8002ab4:	d9013617 	ldw	r4,1240(sp)
 8002ab8:	1c07883a 	add	r3,r3,r16
 8002abc:	10800044 	addi	r2,r2,1
 8002ac0:	41000015 	stw	r4,0(r8)
 8002ac4:	44000115 	stw	r16,4(r8)
 8002ac8:	d8c12015 	stw	r3,1152(sp)
 8002acc:	d8811f15 	stw	r2,1148(sp)
 8002ad0:	010001c4 	movi	r4,7
 8002ad4:	2080060e 	bge	r4,r2,8002af0 <___vfprintf_internal_r+0x914>
 8002ad8:	d9012c17 	ldw	r4,1200(sp)
 8002adc:	980b883a 	mov	r5,r19
 8002ae0:	d9811e04 	addi	r6,sp,1144
 8002ae4:	80094e40 	call	80094e4 <__sprint_r>
 8002ae8:	103ed81e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8002aec:	d8c12017 	ldw	r3,1152(sp)
 8002af0:	d8812b17 	ldw	r2,1196(sp)
 8002af4:	d9413017 	ldw	r5,1216(sp)
 8002af8:	1140010e 	bge	r2,r5,8002b00 <___vfprintf_internal_r+0x924>
 8002afc:	2805883a 	mov	r2,r5
 8002b00:	d9013117 	ldw	r4,1220(sp)
 8002b04:	2089883a 	add	r4,r4,r2
 8002b08:	d9013115 	stw	r4,1220(sp)
 8002b0c:	1802381e 	bne	r3,zero,80033f0 <___vfprintf_internal_r+0x1214>
 8002b10:	88800007 	ldb	r2,0(r17)
 8002b14:	d8011f15 	stw	zero,1148(sp)
 8002b18:	da000404 	addi	r8,sp,16
 8002b1c:	103def1e 	bne	r2,zero,80022dc <__alt_data_end+0xf80022dc>
 8002b20:	8821883a 	mov	r16,r17
 8002b24:	003e0506 	br	800233c <__alt_data_end+0xf800233c>
 8002b28:	1829883a 	mov	r20,r3
 8002b2c:	d8c12a17 	ldw	r3,1192(sp)
 8002b30:	dd812785 	stb	r22,1182(sp)
 8002b34:	e011883a 	mov	r8,fp
 8002b38:	1880020c 	andi	r2,r3,8
 8002b3c:	1003c926 	beq	r2,zero,8003a64 <___vfprintf_internal_r+0x1888>
 8002b40:	d9012f17 	ldw	r4,1212(sp)
 8002b44:	d9412f17 	ldw	r5,1212(sp)
 8002b48:	d8812f17 	ldw	r2,1212(sp)
 8002b4c:	21000017 	ldw	r4,0(r4)
 8002b50:	29400117 	ldw	r5,4(r5)
 8002b54:	10800204 	addi	r2,r2,8
 8002b58:	d9013715 	stw	r4,1244(sp)
 8002b5c:	d9413915 	stw	r5,1252(sp)
 8002b60:	d8812f15 	stw	r2,1212(sp)
 8002b64:	d9013717 	ldw	r4,1244(sp)
 8002b68:	d9413917 	ldw	r5,1252(sp)
 8002b6c:	da013f15 	stw	r8,1276(sp)
 8002b70:	04000044 	movi	r16,1
 8002b74:	800913c0 	call	800913c <__fpclassifyd>
 8002b78:	da013f17 	ldw	r8,1276(sp)
 8002b7c:	d9013717 	ldw	r4,1244(sp)
 8002b80:	d9413917 	ldw	r5,1252(sp)
 8002b84:	1403571e 	bne	r2,r16,80038e4 <___vfprintf_internal_r+0x1708>
 8002b88:	000d883a 	mov	r6,zero
 8002b8c:	000f883a 	mov	r7,zero
 8002b90:	800d4c00 	call	800d4c0 <__ledf2>
 8002b94:	da013f17 	ldw	r8,1276(sp)
 8002b98:	1004f416 	blt	r2,zero,8003f6c <___vfprintf_internal_r+0x1d90>
 8002b9c:	df012783 	ldbu	fp,1182(sp)
 8002ba0:	008011c4 	movi	r2,71
 8002ba4:	14847a0e 	bge	r2,r18,8003d90 <___vfprintf_internal_r+0x1bb4>
 8002ba8:	04020074 	movhi	r16,2049
 8002bac:	84061104 	addi	r16,r16,6212
 8002bb0:	d9012a17 	ldw	r4,1192(sp)
 8002bb4:	00bfdfc4 	movi	r2,-129
 8002bb8:	00c000c4 	movi	r3,3
 8002bbc:	2088703a 	and	r4,r4,r2
 8002bc0:	d8c12b15 	stw	r3,1196(sp)
 8002bc4:	d9012a15 	stw	r4,1192(sp)
 8002bc8:	d8c12e15 	stw	r3,1208(sp)
 8002bcc:	0029883a 	mov	r20,zero
 8002bd0:	d8013315 	stw	zero,1228(sp)
 8002bd4:	003eea06 	br	8002780 <__alt_data_end+0xf8002780>
 8002bd8:	953ff404 	addi	r20,r18,-48
 8002bdc:	d8013015 	stw	zero,1216(sp)
 8002be0:	0009883a 	mov	r4,zero
 8002be4:	1825883a 	mov	r18,r3
 8002be8:	01400284 	movi	r5,10
 8002bec:	800c1240 	call	800c124 <__mulsi3>
 8002bf0:	88c00007 	ldb	r3,0(r17)
 8002bf4:	1509883a 	add	r4,r2,r20
 8002bf8:	8c400044 	addi	r17,r17,1
 8002bfc:	1d3ff404 	addi	r20,r3,-48
 8002c00:	8805883a 	mov	r2,r17
 8002c04:	ad3ff82e 	bgeu	r21,r20,8002be8 <__alt_data_end+0xf8002be8>
 8002c08:	d9013015 	stw	r4,1216(sp)
 8002c0c:	9009883a 	mov	r4,r18
 8002c10:	1023883a 	mov	r17,r2
 8002c14:	1825883a 	mov	r18,r3
 8002c18:	2007883a 	mov	r3,r4
 8002c1c:	003dd506 	br	8002374 <__alt_data_end+0xf8002374>
 8002c20:	d8812a17 	ldw	r2,1192(sp)
 8002c24:	10800214 	ori	r2,r2,8
 8002c28:	d8812a15 	stw	r2,1192(sp)
 8002c2c:	8c800007 	ldb	r18,0(r17)
 8002c30:	003dcf06 	br	8002370 <__alt_data_end+0xf8002370>
 8002c34:	d9012a17 	ldw	r4,1192(sp)
 8002c38:	e011883a 	mov	r8,fp
 8002c3c:	1829883a 	mov	r20,r3
 8002c40:	21000414 	ori	r4,r4,16
 8002c44:	d9012a15 	stw	r4,1192(sp)
 8002c48:	d9412a17 	ldw	r5,1192(sp)
 8002c4c:	2880080c 	andi	r2,r5,32
 8002c50:	1000cf26 	beq	r2,zero,8002f90 <___vfprintf_internal_r+0xdb4>
 8002c54:	d8812f17 	ldw	r2,1212(sp)
 8002c58:	0007883a 	mov	r3,zero
 8002c5c:	15400017 	ldw	r21,0(r2)
 8002c60:	15800117 	ldw	r22,4(r2)
 8002c64:	10800204 	addi	r2,r2,8
 8002c68:	d8812f15 	stw	r2,1212(sp)
 8002c6c:	ad84b03a 	or	r2,r21,r22
 8002c70:	d8012785 	stb	zero,1182(sp)
 8002c74:	0039883a 	mov	fp,zero
 8002c78:	003eab06 	br	8002728 <__alt_data_end+0xf8002728>
 8002c7c:	d9012a17 	ldw	r4,1192(sp)
 8002c80:	e011883a 	mov	r8,fp
 8002c84:	1829883a 	mov	r20,r3
 8002c88:	21000414 	ori	r4,r4,16
 8002c8c:	d9012a15 	stw	r4,1192(sp)
 8002c90:	d9412a17 	ldw	r5,1192(sp)
 8002c94:	2880080c 	andi	r2,r5,32
 8002c98:	1000cd26 	beq	r2,zero,8002fd0 <___vfprintf_internal_r+0xdf4>
 8002c9c:	d8812f17 	ldw	r2,1212(sp)
 8002ca0:	00c00044 	movi	r3,1
 8002ca4:	15400017 	ldw	r21,0(r2)
 8002ca8:	15800117 	ldw	r22,4(r2)
 8002cac:	10800204 	addi	r2,r2,8
 8002cb0:	d8812f15 	stw	r2,1212(sp)
 8002cb4:	ad84b03a 	or	r2,r21,r22
 8002cb8:	003fed06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8002cbc:	d9012a17 	ldw	r4,1192(sp)
 8002cc0:	dd812785 	stb	r22,1182(sp)
 8002cc4:	e011883a 	mov	r8,fp
 8002cc8:	2080080c 	andi	r2,r4,32
 8002ccc:	10039226 	beq	r2,zero,8003b18 <___vfprintf_internal_r+0x193c>
 8002cd0:	d9412f17 	ldw	r5,1212(sp)
 8002cd4:	d9013117 	ldw	r4,1220(sp)
 8002cd8:	28800017 	ldw	r2,0(r5)
 8002cdc:	2007d7fa 	srai	r3,r4,31
 8002ce0:	29400104 	addi	r5,r5,4
 8002ce4:	d9412f15 	stw	r5,1212(sp)
 8002ce8:	11000015 	stw	r4,0(r2)
 8002cec:	10c00115 	stw	r3,4(r2)
 8002cf0:	003d7806 	br	80022d4 <__alt_data_end+0xf80022d4>
 8002cf4:	d8c12f17 	ldw	r3,1212(sp)
 8002cf8:	d9012f17 	ldw	r4,1212(sp)
 8002cfc:	e011883a 	mov	r8,fp
 8002d00:	18800017 	ldw	r2,0(r3)
 8002d04:	21000104 	addi	r4,r4,4
 8002d08:	00c00044 	movi	r3,1
 8002d0c:	d8c12b15 	stw	r3,1196(sp)
 8002d10:	d8012785 	stb	zero,1182(sp)
 8002d14:	d8810405 	stb	r2,1040(sp)
 8002d18:	d9012f15 	stw	r4,1212(sp)
 8002d1c:	d8c12e15 	stw	r3,1208(sp)
 8002d20:	0029883a 	mov	r20,zero
 8002d24:	d8013315 	stw	zero,1228(sp)
 8002d28:	dc010404 	addi	r16,sp,1040
 8002d2c:	0005883a 	mov	r2,zero
 8002d30:	003e9a06 	br	800279c <__alt_data_end+0xf800279c>
 8002d34:	d9412a17 	ldw	r5,1192(sp)
 8002d38:	01020074 	movhi	r4,2049
 8002d3c:	21061904 	addi	r4,r4,6244
 8002d40:	dd812785 	stb	r22,1182(sp)
 8002d44:	d9013b15 	stw	r4,1260(sp)
 8002d48:	2880080c 	andi	r2,r5,32
 8002d4c:	e011883a 	mov	r8,fp
 8002d50:	1829883a 	mov	r20,r3
 8002d54:	10002f26 	beq	r2,zero,8002e14 <___vfprintf_internal_r+0xc38>
 8002d58:	d8812f17 	ldw	r2,1212(sp)
 8002d5c:	15400017 	ldw	r21,0(r2)
 8002d60:	15800117 	ldw	r22,4(r2)
 8002d64:	10800204 	addi	r2,r2,8
 8002d68:	d8812f15 	stw	r2,1212(sp)
 8002d6c:	d9012a17 	ldw	r4,1192(sp)
 8002d70:	2080004c 	andi	r2,r4,1
 8002d74:	10025f26 	beq	r2,zero,80036f4 <___vfprintf_internal_r+0x1518>
 8002d78:	ad84b03a 	or	r2,r21,r22
 8002d7c:	10034e26 	beq	r2,zero,8003ab8 <___vfprintf_internal_r+0x18dc>
 8002d80:	00c00c04 	movi	r3,48
 8002d84:	21000094 	ori	r4,r4,2
 8002d88:	d8c12705 	stb	r3,1180(sp)
 8002d8c:	dc812745 	stb	r18,1181(sp)
 8002d90:	d9012a15 	stw	r4,1192(sp)
 8002d94:	00c00084 	movi	r3,2
 8002d98:	003fb506 	br	8002c70 <__alt_data_end+0xf8002c70>
 8002d9c:	b0803fcc 	andi	r2,r22,255
 8002da0:	1080201c 	xori	r2,r2,128
 8002da4:	10bfe004 	addi	r2,r2,-128
 8002da8:	1003501e 	bne	r2,zero,8003aec <___vfprintf_internal_r+0x1910>
 8002dac:	05800804 	movi	r22,32
 8002db0:	8c800007 	ldb	r18,0(r17)
 8002db4:	003d6e06 	br	8002370 <__alt_data_end+0xf8002370>
 8002db8:	d9012a17 	ldw	r4,1192(sp)
 8002dbc:	21000054 	ori	r4,r4,1
 8002dc0:	d9012a15 	stw	r4,1192(sp)
 8002dc4:	8c800007 	ldb	r18,0(r17)
 8002dc8:	003d6906 	br	8002370 <__alt_data_end+0xf8002370>
 8002dcc:	d9412f17 	ldw	r5,1212(sp)
 8002dd0:	d9012f17 	ldw	r4,1212(sp)
 8002dd4:	29400017 	ldw	r5,0(r5)
 8002dd8:	20800104 	addi	r2,r4,4
 8002ddc:	d9413015 	stw	r5,1216(sp)
 8002de0:	283dc616 	blt	r5,zero,80024fc <__alt_data_end+0xf80024fc>
 8002de4:	d8812f15 	stw	r2,1212(sp)
 8002de8:	8c800007 	ldb	r18,0(r17)
 8002dec:	003d6006 	br	8002370 <__alt_data_end+0xf8002370>
 8002df0:	d9412a17 	ldw	r5,1192(sp)
 8002df4:	00820074 	movhi	r2,2049
 8002df8:	10861404 	addi	r2,r2,6224
 8002dfc:	d8813b15 	stw	r2,1260(sp)
 8002e00:	dd812785 	stb	r22,1182(sp)
 8002e04:	2880080c 	andi	r2,r5,32
 8002e08:	e011883a 	mov	r8,fp
 8002e0c:	1829883a 	mov	r20,r3
 8002e10:	103fd11e 	bne	r2,zero,8002d58 <__alt_data_end+0xf8002d58>
 8002e14:	d8c12a17 	ldw	r3,1192(sp)
 8002e18:	1880040c 	andi	r2,r3,16
 8002e1c:	10033526 	beq	r2,zero,8003af4 <___vfprintf_internal_r+0x1918>
 8002e20:	d9012f17 	ldw	r4,1212(sp)
 8002e24:	002d883a 	mov	r22,zero
 8002e28:	25400017 	ldw	r21,0(r4)
 8002e2c:	21000104 	addi	r4,r4,4
 8002e30:	d9012f15 	stw	r4,1212(sp)
 8002e34:	003fcd06 	br	8002d6c <__alt_data_end+0xf8002d6c>
 8002e38:	d9012a17 	ldw	r4,1192(sp)
 8002e3c:	21001014 	ori	r4,r4,64
 8002e40:	d9012a15 	stw	r4,1192(sp)
 8002e44:	8c800007 	ldb	r18,0(r17)
 8002e48:	003d4906 	br	8002370 <__alt_data_end+0xf8002370>
 8002e4c:	8c800007 	ldb	r18,0(r17)
 8002e50:	01401b04 	movi	r5,108
 8002e54:	8805883a 	mov	r2,r17
 8002e58:	9143db26 	beq	r18,r5,8003dc8 <___vfprintf_internal_r+0x1bec>
 8002e5c:	d9412a17 	ldw	r5,1192(sp)
 8002e60:	29400414 	ori	r5,r5,16
 8002e64:	d9412a15 	stw	r5,1192(sp)
 8002e68:	003d4106 	br	8002370 <__alt_data_end+0xf8002370>
 8002e6c:	1829883a 	mov	r20,r3
 8002e70:	d8c12a17 	ldw	r3,1192(sp)
 8002e74:	dd812785 	stb	r22,1182(sp)
 8002e78:	e011883a 	mov	r8,fp
 8002e7c:	1880080c 	andi	r2,r3,32
 8002e80:	103e1f1e 	bne	r2,zero,8002700 <__alt_data_end+0xf8002700>
 8002e84:	d9412a17 	ldw	r5,1192(sp)
 8002e88:	2880040c 	andi	r2,r5,16
 8002e8c:	10032f26 	beq	r2,zero,8003b4c <___vfprintf_internal_r+0x1970>
 8002e90:	d8812f17 	ldw	r2,1212(sp)
 8002e94:	15400017 	ldw	r21,0(r2)
 8002e98:	10800104 	addi	r2,r2,4
 8002e9c:	d8812f15 	stw	r2,1212(sp)
 8002ea0:	a82dd7fa 	srai	r22,r21,31
 8002ea4:	b005883a 	mov	r2,r22
 8002ea8:	003e1b06 	br	8002718 <__alt_data_end+0xf8002718>
 8002eac:	d8812a17 	ldw	r2,1192(sp)
 8002eb0:	10800814 	ori	r2,r2,32
 8002eb4:	d8812a15 	stw	r2,1192(sp)
 8002eb8:	8c800007 	ldb	r18,0(r17)
 8002ebc:	003d2c06 	br	8002370 <__alt_data_end+0xf8002370>
 8002ec0:	1829883a 	mov	r20,r3
 8002ec4:	d8c12f17 	ldw	r3,1212(sp)
 8002ec8:	d8012785 	stb	zero,1182(sp)
 8002ecc:	e011883a 	mov	r8,fp
 8002ed0:	1c000017 	ldw	r16,0(r3)
 8002ed4:	1d400104 	addi	r21,r3,4
 8002ed8:	80040226 	beq	r16,zero,8003ee4 <___vfprintf_internal_r+0x1d08>
 8002edc:	8009883a 	mov	r4,r16
 8002ee0:	a003c716 	blt	r20,zero,8003e00 <___vfprintf_internal_r+0x1c24>
 8002ee4:	000b883a 	mov	r5,zero
 8002ee8:	a00d883a 	mov	r6,r20
 8002eec:	df013f15 	stw	fp,1276(sp)
 8002ef0:	800776c0 	call	800776c <memchr>
 8002ef4:	da013f17 	ldw	r8,1276(sp)
 8002ef8:	10044326 	beq	r2,zero,8004008 <___vfprintf_internal_r+0x1e2c>
 8002efc:	1405c83a 	sub	r2,r2,r16
 8002f00:	d8812e15 	stw	r2,1208(sp)
 8002f04:	a0837c16 	blt	r20,r2,8003cf8 <___vfprintf_internal_r+0x1b1c>
 8002f08:	d8812e17 	ldw	r2,1208(sp)
 8002f0c:	1003c116 	blt	r2,zero,8003e14 <___vfprintf_internal_r+0x1c38>
 8002f10:	df012783 	ldbu	fp,1182(sp)
 8002f14:	d8812b15 	stw	r2,1196(sp)
 8002f18:	dd412f15 	stw	r21,1212(sp)
 8002f1c:	0029883a 	mov	r20,zero
 8002f20:	d8013315 	stw	zero,1228(sp)
 8002f24:	003e1606 	br	8002780 <__alt_data_end+0xf8002780>
 8002f28:	d9012f17 	ldw	r4,1212(sp)
 8002f2c:	d9412a17 	ldw	r5,1192(sp)
 8002f30:	00800c04 	movi	r2,48
 8002f34:	25400017 	ldw	r21,0(r4)
 8002f38:	d8812705 	stb	r2,1180(sp)
 8002f3c:	00801e04 	movi	r2,120
 8002f40:	29400094 	ori	r5,r5,2
 8002f44:	d8812745 	stb	r2,1181(sp)
 8002f48:	21000104 	addi	r4,r4,4
 8002f4c:	00820074 	movhi	r2,2049
 8002f50:	10861904 	addi	r2,r2,6244
 8002f54:	1829883a 	mov	r20,r3
 8002f58:	d8813b15 	stw	r2,1260(sp)
 8002f5c:	e011883a 	mov	r8,fp
 8002f60:	002d883a 	mov	r22,zero
 8002f64:	d9412a15 	stw	r5,1192(sp)
 8002f68:	d9012f15 	stw	r4,1212(sp)
 8002f6c:	00c00084 	movi	r3,2
 8002f70:	04801e04 	movi	r18,120
 8002f74:	a805883a 	mov	r2,r21
 8002f78:	003f3d06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8002f7c:	d9412a17 	ldw	r5,1192(sp)
 8002f80:	e011883a 	mov	r8,fp
 8002f84:	1829883a 	mov	r20,r3
 8002f88:	2880080c 	andi	r2,r5,32
 8002f8c:	103f311e 	bne	r2,zero,8002c54 <__alt_data_end+0xf8002c54>
 8002f90:	d8c12a17 	ldw	r3,1192(sp)
 8002f94:	1880040c 	andi	r2,r3,16
 8002f98:	1002c926 	beq	r2,zero,8003ac0 <___vfprintf_internal_r+0x18e4>
 8002f9c:	d9012f17 	ldw	r4,1212(sp)
 8002fa0:	002d883a 	mov	r22,zero
 8002fa4:	0007883a 	mov	r3,zero
 8002fa8:	25400017 	ldw	r21,0(r4)
 8002fac:	21000104 	addi	r4,r4,4
 8002fb0:	d9012f15 	stw	r4,1212(sp)
 8002fb4:	a805883a 	mov	r2,r21
 8002fb8:	003f2d06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8002fbc:	d9412a17 	ldw	r5,1192(sp)
 8002fc0:	e011883a 	mov	r8,fp
 8002fc4:	1829883a 	mov	r20,r3
 8002fc8:	2880080c 	andi	r2,r5,32
 8002fcc:	103f331e 	bne	r2,zero,8002c9c <__alt_data_end+0xf8002c9c>
 8002fd0:	d8c12a17 	ldw	r3,1192(sp)
 8002fd4:	1880040c 	andi	r2,r3,16
 8002fd8:	1002ac26 	beq	r2,zero,8003a8c <___vfprintf_internal_r+0x18b0>
 8002fdc:	d9012f17 	ldw	r4,1212(sp)
 8002fe0:	002d883a 	mov	r22,zero
 8002fe4:	00c00044 	movi	r3,1
 8002fe8:	25400017 	ldw	r21,0(r4)
 8002fec:	21000104 	addi	r4,r4,4
 8002ff0:	d9012f15 	stw	r4,1212(sp)
 8002ff4:	a805883a 	mov	r2,r21
 8002ff8:	003f1d06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8002ffc:	dd812785 	stb	r22,1182(sp)
 8003000:	e011883a 	mov	r8,fp
 8003004:	903d8b26 	beq	r18,zero,8002634 <__alt_data_end+0xf8002634>
 8003008:	00c00044 	movi	r3,1
 800300c:	d8c12b15 	stw	r3,1196(sp)
 8003010:	dc810405 	stb	r18,1040(sp)
 8003014:	d8012785 	stb	zero,1182(sp)
 8003018:	003f4006 	br	8002d1c <__alt_data_end+0xf8002d1c>
 800301c:	d8c12017 	ldw	r3,1152(sp)
 8003020:	003e2106 	br	80028a8 <__alt_data_end+0xf80028a8>
 8003024:	45400015 	stw	r21,0(r8)
 8003028:	44000115 	stw	r16,4(r8)
 800302c:	1c07883a 	add	r3,r3,r16
 8003030:	10800044 	addi	r2,r2,1
 8003034:	d8c12015 	stw	r3,1152(sp)
 8003038:	d8811f15 	stw	r2,1148(sp)
 800303c:	010001c4 	movi	r4,7
 8003040:	20be750e 	bge	r4,r2,8002a18 <__alt_data_end+0xf8002a18>
 8003044:	d9012c17 	ldw	r4,1200(sp)
 8003048:	980b883a 	mov	r5,r19
 800304c:	d9811e04 	addi	r6,sp,1144
 8003050:	80094e40 	call	80094e4 <__sprint_r>
 8003054:	103d7d1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003058:	d8c12017 	ldw	r3,1152(sp)
 800305c:	da000404 	addi	r8,sp,16
 8003060:	003e6e06 	br	8002a1c <__alt_data_end+0xf8002a1c>
 8003064:	18803fcc 	andi	r2,r3,255
 8003068:	00c00044 	movi	r3,1
 800306c:	10c11926 	beq	r2,r3,80034d4 <___vfprintf_internal_r+0x12f8>
 8003070:	00c00084 	movi	r3,2
 8003074:	10c0e41e 	bne	r2,r3,8003408 <___vfprintf_internal_r+0x122c>
 8003078:	d9413b17 	ldw	r5,1260(sp)
 800307c:	d8c10dc4 	addi	r3,sp,1079
 8003080:	a88003cc 	andi	r2,r21,15
 8003084:	b008973a 	slli	r4,r22,28
 8003088:	2885883a 	add	r2,r5,r2
 800308c:	a82ad13a 	srli	r21,r21,4
 8003090:	10800003 	ldbu	r2,0(r2)
 8003094:	b02cd13a 	srli	r22,r22,4
 8003098:	256ab03a 	or	r21,r4,r21
 800309c:	18800005 	stb	r2,0(r3)
 80030a0:	ad84b03a 	or	r2,r21,r22
 80030a4:	1821883a 	mov	r16,r3
 80030a8:	18ffffc4 	addi	r3,r3,-1
 80030ac:	103ff41e 	bne	r2,zero,8003080 <__alt_data_end+0xf8003080>
 80030b0:	d8c12917 	ldw	r3,1188(sp)
 80030b4:	1c07c83a 	sub	r3,r3,r16
 80030b8:	d8c12e15 	stw	r3,1208(sp)
 80030bc:	003dab06 	br	800276c <__alt_data_end+0xf800276c>
 80030c0:	00801944 	movi	r2,101
 80030c4:	14807e0e 	bge	r2,r18,80032c0 <___vfprintf_internal_r+0x10e4>
 80030c8:	d9013717 	ldw	r4,1244(sp)
 80030cc:	d9413917 	ldw	r5,1252(sp)
 80030d0:	000d883a 	mov	r6,zero
 80030d4:	000f883a 	mov	r7,zero
 80030d8:	d8c13e15 	stw	r3,1272(sp)
 80030dc:	da013f15 	stw	r8,1276(sp)
 80030e0:	800d3640 	call	800d364 <__eqdf2>
 80030e4:	d8c13e17 	ldw	r3,1272(sp)
 80030e8:	da013f17 	ldw	r8,1276(sp)
 80030ec:	1001211e 	bne	r2,zero,8003574 <___vfprintf_internal_r+0x1398>
 80030f0:	d8811f17 	ldw	r2,1148(sp)
 80030f4:	01000044 	movi	r4,1
 80030f8:	18c00044 	addi	r3,r3,1
 80030fc:	10800044 	addi	r2,r2,1
 8003100:	01420074 	movhi	r5,2049
 8003104:	29462004 	addi	r5,r5,6272
 8003108:	41000115 	stw	r4,4(r8)
 800310c:	41400015 	stw	r5,0(r8)
 8003110:	d8c12015 	stw	r3,1152(sp)
 8003114:	d8811f15 	stw	r2,1148(sp)
 8003118:	010001c4 	movi	r4,7
 800311c:	2082a316 	blt	r4,r2,8003bac <___vfprintf_internal_r+0x19d0>
 8003120:	42000204 	addi	r8,r8,8
 8003124:	d8812617 	ldw	r2,1176(sp)
 8003128:	d9013517 	ldw	r4,1236(sp)
 800312c:	11000316 	blt	r2,r4,800313c <___vfprintf_internal_r+0xf60>
 8003130:	d9412a17 	ldw	r5,1192(sp)
 8003134:	2880004c 	andi	r2,r5,1
 8003138:	103e3826 	beq	r2,zero,8002a1c <__alt_data_end+0xf8002a1c>
 800313c:	d8813817 	ldw	r2,1248(sp)
 8003140:	d9013417 	ldw	r4,1232(sp)
 8003144:	d9413817 	ldw	r5,1248(sp)
 8003148:	1887883a 	add	r3,r3,r2
 800314c:	d8811f17 	ldw	r2,1148(sp)
 8003150:	41000015 	stw	r4,0(r8)
 8003154:	41400115 	stw	r5,4(r8)
 8003158:	10800044 	addi	r2,r2,1
 800315c:	d8c12015 	stw	r3,1152(sp)
 8003160:	d8811f15 	stw	r2,1148(sp)
 8003164:	010001c4 	movi	r4,7
 8003168:	20831d16 	blt	r4,r2,8003de0 <___vfprintf_internal_r+0x1c04>
 800316c:	42000204 	addi	r8,r8,8
 8003170:	d8813517 	ldw	r2,1236(sp)
 8003174:	143fffc4 	addi	r16,r2,-1
 8003178:	043e280e 	bge	zero,r16,8002a1c <__alt_data_end+0xf8002a1c>
 800317c:	04800404 	movi	r18,16
 8003180:	d8811f17 	ldw	r2,1148(sp)
 8003184:	05420074 	movhi	r21,2049
 8003188:	ad462084 	addi	r21,r21,6274
 800318c:	943fa50e 	bge	r18,r16,8003024 <__alt_data_end+0xf8003024>
 8003190:	050001c4 	movi	r20,7
 8003194:	dd812c17 	ldw	r22,1200(sp)
 8003198:	00000306 	br	80031a8 <___vfprintf_internal_r+0xfcc>
 800319c:	42000204 	addi	r8,r8,8
 80031a0:	843ffc04 	addi	r16,r16,-16
 80031a4:	943f9f0e 	bge	r18,r16,8003024 <__alt_data_end+0xf8003024>
 80031a8:	18c00404 	addi	r3,r3,16
 80031ac:	10800044 	addi	r2,r2,1
 80031b0:	45c00015 	stw	r23,0(r8)
 80031b4:	44800115 	stw	r18,4(r8)
 80031b8:	d8c12015 	stw	r3,1152(sp)
 80031bc:	d8811f15 	stw	r2,1148(sp)
 80031c0:	a0bff60e 	bge	r20,r2,800319c <__alt_data_end+0xf800319c>
 80031c4:	b009883a 	mov	r4,r22
 80031c8:	980b883a 	mov	r5,r19
 80031cc:	d9811e04 	addi	r6,sp,1144
 80031d0:	80094e40 	call	80094e4 <__sprint_r>
 80031d4:	103d1d1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 80031d8:	d8c12017 	ldw	r3,1152(sp)
 80031dc:	d8811f17 	ldw	r2,1148(sp)
 80031e0:	da000404 	addi	r8,sp,16
 80031e4:	003fee06 	br	80031a0 <__alt_data_end+0xf80031a0>
 80031e8:	d9413017 	ldw	r5,1216(sp)
 80031ec:	d8812b17 	ldw	r2,1196(sp)
 80031f0:	28adc83a 	sub	r22,r5,r2
 80031f4:	05bdca0e 	bge	zero,r22,8002920 <__alt_data_end+0xf8002920>
 80031f8:	07000404 	movi	fp,16
 80031fc:	d8811f17 	ldw	r2,1148(sp)
 8003200:	05420074 	movhi	r21,2049
 8003204:	ad462084 	addi	r21,r21,6274
 8003208:	e580230e 	bge	fp,r22,8003298 <___vfprintf_internal_r+0x10bc>
 800320c:	a809883a 	mov	r4,r21
 8003210:	dc012d15 	stw	r16,1204(sp)
 8003214:	882b883a 	mov	r21,r17
 8003218:	01c001c4 	movi	r7,7
 800321c:	b023883a 	mov	r17,r22
 8003220:	dc012c17 	ldw	r16,1200(sp)
 8003224:	202d883a 	mov	r22,r4
 8003228:	00000306 	br	8003238 <___vfprintf_internal_r+0x105c>
 800322c:	8c7ffc04 	addi	r17,r17,-16
 8003230:	42000204 	addi	r8,r8,8
 8003234:	e440130e 	bge	fp,r17,8003284 <___vfprintf_internal_r+0x10a8>
 8003238:	18c00404 	addi	r3,r3,16
 800323c:	10800044 	addi	r2,r2,1
 8003240:	45c00015 	stw	r23,0(r8)
 8003244:	47000115 	stw	fp,4(r8)
 8003248:	d8c12015 	stw	r3,1152(sp)
 800324c:	d8811f15 	stw	r2,1148(sp)
 8003250:	38bff60e 	bge	r7,r2,800322c <__alt_data_end+0xf800322c>
 8003254:	8009883a 	mov	r4,r16
 8003258:	980b883a 	mov	r5,r19
 800325c:	d9811e04 	addi	r6,sp,1144
 8003260:	d9c13e15 	stw	r7,1272(sp)
 8003264:	80094e40 	call	80094e4 <__sprint_r>
 8003268:	d9c13e17 	ldw	r7,1272(sp)
 800326c:	103cf71e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003270:	8c7ffc04 	addi	r17,r17,-16
 8003274:	d8c12017 	ldw	r3,1152(sp)
 8003278:	d8811f17 	ldw	r2,1148(sp)
 800327c:	da000404 	addi	r8,sp,16
 8003280:	e47fed16 	blt	fp,r17,8003238 <__alt_data_end+0xf8003238>
 8003284:	dc012d17 	ldw	r16,1204(sp)
 8003288:	b009883a 	mov	r4,r22
 800328c:	882d883a 	mov	r22,r17
 8003290:	a823883a 	mov	r17,r21
 8003294:	202b883a 	mov	r21,r4
 8003298:	1d87883a 	add	r3,r3,r22
 800329c:	10800044 	addi	r2,r2,1
 80032a0:	45400015 	stw	r21,0(r8)
 80032a4:	45800115 	stw	r22,4(r8)
 80032a8:	d8c12015 	stw	r3,1152(sp)
 80032ac:	d8811f15 	stw	r2,1148(sp)
 80032b0:	010001c4 	movi	r4,7
 80032b4:	20817a16 	blt	r4,r2,80038a0 <___vfprintf_internal_r+0x16c4>
 80032b8:	42000204 	addi	r8,r8,8
 80032bc:	003d9806 	br	8002920 <__alt_data_end+0xf8002920>
 80032c0:	d9013517 	ldw	r4,1236(sp)
 80032c4:	00800044 	movi	r2,1
 80032c8:	1100340e 	bge	r2,r4,800339c <___vfprintf_internal_r+0x11c0>
 80032cc:	dc811f17 	ldw	r18,1148(sp)
 80032d0:	00800044 	movi	r2,1
 80032d4:	18c00044 	addi	r3,r3,1
 80032d8:	94800044 	addi	r18,r18,1
 80032dc:	40800115 	stw	r2,4(r8)
 80032e0:	44000015 	stw	r16,0(r8)
 80032e4:	d8c12015 	stw	r3,1152(sp)
 80032e8:	dc811f15 	stw	r18,1148(sp)
 80032ec:	008001c4 	movi	r2,7
 80032f0:	14814e16 	blt	r2,r18,800382c <___vfprintf_internal_r+0x1650>
 80032f4:	42000204 	addi	r8,r8,8
 80032f8:	d8813817 	ldw	r2,1248(sp)
 80032fc:	94800044 	addi	r18,r18,1
 8003300:	dc811f15 	stw	r18,1148(sp)
 8003304:	18ad883a 	add	r22,r3,r2
 8003308:	d8c13417 	ldw	r3,1232(sp)
 800330c:	40800115 	stw	r2,4(r8)
 8003310:	dd812015 	stw	r22,1152(sp)
 8003314:	40c00015 	stw	r3,0(r8)
 8003318:	008001c4 	movi	r2,7
 800331c:	14814c16 	blt	r2,r18,8003850 <___vfprintf_internal_r+0x1674>
 8003320:	45000204 	addi	r20,r8,8
 8003324:	d9013717 	ldw	r4,1244(sp)
 8003328:	d9413917 	ldw	r5,1252(sp)
 800332c:	000d883a 	mov	r6,zero
 8003330:	000f883a 	mov	r7,zero
 8003334:	800d3640 	call	800d364 <__eqdf2>
 8003338:	1000cd26 	beq	r2,zero,8003670 <___vfprintf_internal_r+0x1494>
 800333c:	d9013517 	ldw	r4,1236(sp)
 8003340:	84000044 	addi	r16,r16,1
 8003344:	94800044 	addi	r18,r18,1
 8003348:	20bfffc4 	addi	r2,r4,-1
 800334c:	b0ad883a 	add	r22,r22,r2
 8003350:	a0800115 	stw	r2,4(r20)
 8003354:	a4000015 	stw	r16,0(r20)
 8003358:	dd812015 	stw	r22,1152(sp)
 800335c:	dc811f15 	stw	r18,1148(sp)
 8003360:	008001c4 	movi	r2,7
 8003364:	14801916 	blt	r2,r18,80033cc <___vfprintf_internal_r+0x11f0>
 8003368:	a5000204 	addi	r20,r20,8
 800336c:	d9013a17 	ldw	r4,1256(sp)
 8003370:	d88122c4 	addi	r2,sp,1163
 8003374:	94800044 	addi	r18,r18,1
 8003378:	2587883a 	add	r3,r4,r22
 800337c:	a0800015 	stw	r2,0(r20)
 8003380:	a1000115 	stw	r4,4(r20)
 8003384:	d8c12015 	stw	r3,1152(sp)
 8003388:	dc811f15 	stw	r18,1148(sp)
 800338c:	008001c4 	movi	r2,7
 8003390:	14bf2c16 	blt	r2,r18,8003044 <__alt_data_end+0xf8003044>
 8003394:	a2000204 	addi	r8,r20,8
 8003398:	003da006 	br	8002a1c <__alt_data_end+0xf8002a1c>
 800339c:	d9412a17 	ldw	r5,1192(sp)
 80033a0:	2888703a 	and	r4,r5,r2
 80033a4:	203fc91e 	bne	r4,zero,80032cc <__alt_data_end+0xf80032cc>
 80033a8:	dc811f17 	ldw	r18,1148(sp)
 80033ac:	1d800044 	addi	r22,r3,1
 80033b0:	40800115 	stw	r2,4(r8)
 80033b4:	94800044 	addi	r18,r18,1
 80033b8:	44000015 	stw	r16,0(r8)
 80033bc:	dd812015 	stw	r22,1152(sp)
 80033c0:	dc811f15 	stw	r18,1148(sp)
 80033c4:	008001c4 	movi	r2,7
 80033c8:	1482740e 	bge	r2,r18,8003d9c <___vfprintf_internal_r+0x1bc0>
 80033cc:	d9012c17 	ldw	r4,1200(sp)
 80033d0:	980b883a 	mov	r5,r19
 80033d4:	d9811e04 	addi	r6,sp,1144
 80033d8:	80094e40 	call	80094e4 <__sprint_r>
 80033dc:	103c9b1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 80033e0:	dd812017 	ldw	r22,1152(sp)
 80033e4:	dc811f17 	ldw	r18,1148(sp)
 80033e8:	dd000404 	addi	r20,sp,16
 80033ec:	003fdf06 	br	800336c <__alt_data_end+0xf800336c>
 80033f0:	d9012c17 	ldw	r4,1200(sp)
 80033f4:	980b883a 	mov	r5,r19
 80033f8:	d9811e04 	addi	r6,sp,1144
 80033fc:	80094e40 	call	80094e4 <__sprint_r>
 8003400:	103dc326 	beq	r2,zero,8002b10 <__alt_data_end+0xf8002b10>
 8003404:	003c9106 	br	800264c <__alt_data_end+0xf800264c>
 8003408:	d8c10dc4 	addi	r3,sp,1079
 800340c:	a808d0fa 	srli	r4,r21,3
 8003410:	b00a977a 	slli	r5,r22,29
 8003414:	b02cd0fa 	srli	r22,r22,3
 8003418:	ad4001cc 	andi	r21,r21,7
 800341c:	a8800c04 	addi	r2,r21,48
 8003420:	292ab03a 	or	r21,r5,r4
 8003424:	18800005 	stb	r2,0(r3)
 8003428:	ad88b03a 	or	r4,r21,r22
 800342c:	1821883a 	mov	r16,r3
 8003430:	18ffffc4 	addi	r3,r3,-1
 8003434:	203ff51e 	bne	r4,zero,800340c <__alt_data_end+0xf800340c>
 8003438:	d9412a17 	ldw	r5,1192(sp)
 800343c:	2900004c 	andi	r4,r5,1
 8003440:	800b883a 	mov	r5,r16
 8003444:	203f1a26 	beq	r4,zero,80030b0 <__alt_data_end+0xf80030b0>
 8003448:	10803fcc 	andi	r2,r2,255
 800344c:	1080201c 	xori	r2,r2,128
 8003450:	10bfe004 	addi	r2,r2,-128
 8003454:	01000c04 	movi	r4,48
 8003458:	113f1526 	beq	r2,r4,80030b0 <__alt_data_end+0xf80030b0>
 800345c:	1821883a 	mov	r16,r3
 8003460:	d8c12917 	ldw	r3,1188(sp)
 8003464:	293fffc5 	stb	r4,-1(r5)
 8003468:	1c07c83a 	sub	r3,r3,r16
 800346c:	d8c12e15 	stw	r3,1208(sp)
 8003470:	003cbe06 	br	800276c <__alt_data_end+0xf800276c>
 8003474:	d9012c17 	ldw	r4,1200(sp)
 8003478:	980b883a 	mov	r5,r19
 800347c:	d9811e04 	addi	r6,sp,1144
 8003480:	80094e40 	call	80094e4 <__sprint_r>
 8003484:	103c711e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003488:	d8c12017 	ldw	r3,1152(sp)
 800348c:	da000404 	addi	r8,sp,16
 8003490:	003d5306 	br	80029e0 <__alt_data_end+0xf80029e0>
 8003494:	d9012c17 	ldw	r4,1200(sp)
 8003498:	980b883a 	mov	r5,r19
 800349c:	d9811e04 	addi	r6,sp,1144
 80034a0:	80094e40 	call	80094e4 <__sprint_r>
 80034a4:	103c691e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 80034a8:	d8c12017 	ldw	r3,1152(sp)
 80034ac:	da000404 	addi	r8,sp,16
 80034b0:	003d0a06 	br	80028dc <__alt_data_end+0xf80028dc>
 80034b4:	d9012c17 	ldw	r4,1200(sp)
 80034b8:	980b883a 	mov	r5,r19
 80034bc:	d9811e04 	addi	r6,sp,1144
 80034c0:	80094e40 	call	80094e4 <__sprint_r>
 80034c4:	103c611e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 80034c8:	d8c12017 	ldw	r3,1152(sp)
 80034cc:	da000404 	addi	r8,sp,16
 80034d0:	003d1006 	br	8002914 <__alt_data_end+0xf8002914>
 80034d4:	b000021e 	bne	r22,zero,80034e0 <___vfprintf_internal_r+0x1304>
 80034d8:	00800244 	movi	r2,9
 80034dc:	15401c2e 	bgeu	r2,r21,8003550 <___vfprintf_internal_r+0x1374>
 80034e0:	dc412b15 	stw	r17,1196(sp)
 80034e4:	d8810dc4 	addi	r2,sp,1079
 80034e8:	b023883a 	mov	r17,r22
 80034ec:	402d883a 	mov	r22,r8
 80034f0:	a809883a 	mov	r4,r21
 80034f4:	880b883a 	mov	r5,r17
 80034f8:	01800284 	movi	r6,10
 80034fc:	000f883a 	mov	r7,zero
 8003500:	1021883a 	mov	r16,r2
 8003504:	800b9dc0 	call	800b9dc <__umoddi3>
 8003508:	10800c04 	addi	r2,r2,48
 800350c:	a809883a 	mov	r4,r21
 8003510:	880b883a 	mov	r5,r17
 8003514:	80800005 	stb	r2,0(r16)
 8003518:	01800284 	movi	r6,10
 800351c:	000f883a 	mov	r7,zero
 8003520:	800b3880 	call	800b388 <__udivdi3>
 8003524:	1823883a 	mov	r17,r3
 8003528:	10c6b03a 	or	r3,r2,r3
 800352c:	102b883a 	mov	r21,r2
 8003530:	80bfffc4 	addi	r2,r16,-1
 8003534:	183fee1e 	bne	r3,zero,80034f0 <__alt_data_end+0xf80034f0>
 8003538:	d8c12917 	ldw	r3,1188(sp)
 800353c:	b011883a 	mov	r8,r22
 8003540:	dc412b17 	ldw	r17,1196(sp)
 8003544:	1c07c83a 	sub	r3,r3,r16
 8003548:	d8c12e15 	stw	r3,1208(sp)
 800354c:	003c8706 	br	800276c <__alt_data_end+0xf800276c>
 8003550:	d9013d17 	ldw	r4,1268(sp)
 8003554:	ad400c04 	addi	r21,r21,48
 8003558:	dd410dc5 	stb	r21,1079(sp)
 800355c:	d9012e15 	stw	r4,1208(sp)
 8003560:	dc010dc4 	addi	r16,sp,1079
 8003564:	003c8106 	br	800276c <__alt_data_end+0xf800276c>
 8003568:	d8012e15 	stw	zero,1208(sp)
 800356c:	dc010e04 	addi	r16,sp,1080
 8003570:	003c7e06 	br	800276c <__alt_data_end+0xf800276c>
 8003574:	d8812617 	ldw	r2,1176(sp)
 8003578:	0081940e 	bge	zero,r2,8003bcc <___vfprintf_internal_r+0x19f0>
 800357c:	d9413517 	ldw	r5,1236(sp)
 8003580:	d8813317 	ldw	r2,1228(sp)
 8003584:	8165883a 	add	r18,r16,r5
 8003588:	9429c83a 	sub	r20,r18,r16
 800358c:	1500010e 	bge	r2,r20,8003594 <___vfprintf_internal_r+0x13b8>
 8003590:	1029883a 	mov	r20,r2
 8003594:	05000a0e 	bge	zero,r20,80035c0 <___vfprintf_internal_r+0x13e4>
 8003598:	d8811f17 	ldw	r2,1148(sp)
 800359c:	1d07883a 	add	r3,r3,r20
 80035a0:	44000015 	stw	r16,0(r8)
 80035a4:	10800044 	addi	r2,r2,1
 80035a8:	45000115 	stw	r20,4(r8)
 80035ac:	d8c12015 	stw	r3,1152(sp)
 80035b0:	d8811f15 	stw	r2,1148(sp)
 80035b4:	010001c4 	movi	r4,7
 80035b8:	20822b16 	blt	r4,r2,8003e68 <___vfprintf_internal_r+0x1c8c>
 80035bc:	42000204 	addi	r8,r8,8
 80035c0:	a0022716 	blt	r20,zero,8003e60 <___vfprintf_internal_r+0x1c84>
 80035c4:	d9013317 	ldw	r4,1228(sp)
 80035c8:	2529c83a 	sub	r20,r4,r20
 80035cc:	0500530e 	bge	zero,r20,800371c <___vfprintf_internal_r+0x1540>
 80035d0:	05800404 	movi	r22,16
 80035d4:	d8811f17 	ldw	r2,1148(sp)
 80035d8:	05420074 	movhi	r21,2049
 80035dc:	ad462084 	addi	r21,r21,6274
 80035e0:	b501680e 	bge	r22,r20,8003b84 <___vfprintf_internal_r+0x19a8>
 80035e4:	8809883a 	mov	r4,r17
 80035e8:	dc012e15 	stw	r16,1208(sp)
 80035ec:	a023883a 	mov	r17,r20
 80035f0:	070001c4 	movi	fp,7
 80035f4:	dc012c17 	ldw	r16,1200(sp)
 80035f8:	2029883a 	mov	r20,r4
 80035fc:	00000306 	br	800360c <___vfprintf_internal_r+0x1430>
 8003600:	42000204 	addi	r8,r8,8
 8003604:	8c7ffc04 	addi	r17,r17,-16
 8003608:	b4415a0e 	bge	r22,r17,8003b74 <___vfprintf_internal_r+0x1998>
 800360c:	18c00404 	addi	r3,r3,16
 8003610:	10800044 	addi	r2,r2,1
 8003614:	45c00015 	stw	r23,0(r8)
 8003618:	45800115 	stw	r22,4(r8)
 800361c:	d8c12015 	stw	r3,1152(sp)
 8003620:	d8811f15 	stw	r2,1148(sp)
 8003624:	e0bff60e 	bge	fp,r2,8003600 <__alt_data_end+0xf8003600>
 8003628:	8009883a 	mov	r4,r16
 800362c:	980b883a 	mov	r5,r19
 8003630:	d9811e04 	addi	r6,sp,1144
 8003634:	80094e40 	call	80094e4 <__sprint_r>
 8003638:	103c041e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 800363c:	d8c12017 	ldw	r3,1152(sp)
 8003640:	d8811f17 	ldw	r2,1148(sp)
 8003644:	da000404 	addi	r8,sp,16
 8003648:	003fee06 	br	8003604 <__alt_data_end+0xf8003604>
 800364c:	d9012c17 	ldw	r4,1200(sp)
 8003650:	980b883a 	mov	r5,r19
 8003654:	d9811e04 	addi	r6,sp,1144
 8003658:	80094e40 	call	80094e4 <__sprint_r>
 800365c:	103bfb1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003660:	d8c12017 	ldw	r3,1152(sp)
 8003664:	d8812787 	ldb	r2,1182(sp)
 8003668:	da000404 	addi	r8,sp,16
 800366c:	003c8e06 	br	80028a8 <__alt_data_end+0xf80028a8>
 8003670:	d9413517 	ldw	r5,1236(sp)
 8003674:	2c3fffc4 	addi	r16,r5,-1
 8003678:	043f3c0e 	bge	zero,r16,800336c <__alt_data_end+0xf800336c>
 800367c:	07000404 	movi	fp,16
 8003680:	05420074 	movhi	r21,2049
 8003684:	ad462084 	addi	r21,r21,6274
 8003688:	e4007c0e 	bge	fp,r16,800387c <___vfprintf_internal_r+0x16a0>
 800368c:	dc412e15 	stw	r17,1208(sp)
 8003690:	00c001c4 	movi	r3,7
 8003694:	8023883a 	mov	r17,r16
 8003698:	dc012c17 	ldw	r16,1200(sp)
 800369c:	00000306 	br	80036ac <___vfprintf_internal_r+0x14d0>
 80036a0:	a5000204 	addi	r20,r20,8
 80036a4:	8c7ffc04 	addi	r17,r17,-16
 80036a8:	e440720e 	bge	fp,r17,8003874 <___vfprintf_internal_r+0x1698>
 80036ac:	b5800404 	addi	r22,r22,16
 80036b0:	94800044 	addi	r18,r18,1
 80036b4:	a5c00015 	stw	r23,0(r20)
 80036b8:	a7000115 	stw	fp,4(r20)
 80036bc:	dd812015 	stw	r22,1152(sp)
 80036c0:	dc811f15 	stw	r18,1148(sp)
 80036c4:	1cbff60e 	bge	r3,r18,80036a0 <__alt_data_end+0xf80036a0>
 80036c8:	8009883a 	mov	r4,r16
 80036cc:	980b883a 	mov	r5,r19
 80036d0:	d9811e04 	addi	r6,sp,1144
 80036d4:	d8c13e15 	stw	r3,1272(sp)
 80036d8:	80094e40 	call	80094e4 <__sprint_r>
 80036dc:	d8c13e17 	ldw	r3,1272(sp)
 80036e0:	103bda1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 80036e4:	dd812017 	ldw	r22,1152(sp)
 80036e8:	dc811f17 	ldw	r18,1148(sp)
 80036ec:	dd000404 	addi	r20,sp,16
 80036f0:	003fec06 	br	80036a4 <__alt_data_end+0xf80036a4>
 80036f4:	00c00084 	movi	r3,2
 80036f8:	ad84b03a 	or	r2,r21,r22
 80036fc:	003d5c06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8003700:	d9012c17 	ldw	r4,1200(sp)
 8003704:	980b883a 	mov	r5,r19
 8003708:	d9811e04 	addi	r6,sp,1144
 800370c:	80094e40 	call	80094e4 <__sprint_r>
 8003710:	103bce1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003714:	d8c12017 	ldw	r3,1152(sp)
 8003718:	da000404 	addi	r8,sp,16
 800371c:	d9413317 	ldw	r5,1228(sp)
 8003720:	d8812617 	ldw	r2,1176(sp)
 8003724:	d9013517 	ldw	r4,1236(sp)
 8003728:	8161883a 	add	r16,r16,r5
 800372c:	11000316 	blt	r2,r4,800373c <___vfprintf_internal_r+0x1560>
 8003730:	d9412a17 	ldw	r5,1192(sp)
 8003734:	2900004c 	andi	r4,r5,1
 8003738:	20000d26 	beq	r4,zero,8003770 <___vfprintf_internal_r+0x1594>
 800373c:	d9013817 	ldw	r4,1248(sp)
 8003740:	d9413417 	ldw	r5,1232(sp)
 8003744:	1907883a 	add	r3,r3,r4
 8003748:	d9011f17 	ldw	r4,1148(sp)
 800374c:	41400015 	stw	r5,0(r8)
 8003750:	d9413817 	ldw	r5,1248(sp)
 8003754:	21000044 	addi	r4,r4,1
 8003758:	d8c12015 	stw	r3,1152(sp)
 800375c:	41400115 	stw	r5,4(r8)
 8003760:	d9011f15 	stw	r4,1148(sp)
 8003764:	014001c4 	movi	r5,7
 8003768:	2901c716 	blt	r5,r4,8003e88 <___vfprintf_internal_r+0x1cac>
 800376c:	42000204 	addi	r8,r8,8
 8003770:	d9013517 	ldw	r4,1236(sp)
 8003774:	9425c83a 	sub	r18,r18,r16
 8003778:	2085c83a 	sub	r2,r4,r2
 800377c:	1029883a 	mov	r20,r2
 8003780:	9080010e 	bge	r18,r2,8003788 <___vfprintf_internal_r+0x15ac>
 8003784:	9029883a 	mov	r20,r18
 8003788:	05000a0e 	bge	zero,r20,80037b4 <___vfprintf_internal_r+0x15d8>
 800378c:	d9011f17 	ldw	r4,1148(sp)
 8003790:	1d07883a 	add	r3,r3,r20
 8003794:	44000015 	stw	r16,0(r8)
 8003798:	21000044 	addi	r4,r4,1
 800379c:	45000115 	stw	r20,4(r8)
 80037a0:	d8c12015 	stw	r3,1152(sp)
 80037a4:	d9011f15 	stw	r4,1148(sp)
 80037a8:	014001c4 	movi	r5,7
 80037ac:	2901dd16 	blt	r5,r4,8003f24 <___vfprintf_internal_r+0x1d48>
 80037b0:	42000204 	addi	r8,r8,8
 80037b4:	a001d916 	blt	r20,zero,8003f1c <___vfprintf_internal_r+0x1d40>
 80037b8:	1521c83a 	sub	r16,r2,r20
 80037bc:	043c970e 	bge	zero,r16,8002a1c <__alt_data_end+0xf8002a1c>
 80037c0:	04800404 	movi	r18,16
 80037c4:	d8811f17 	ldw	r2,1148(sp)
 80037c8:	05420074 	movhi	r21,2049
 80037cc:	ad462084 	addi	r21,r21,6274
 80037d0:	943e140e 	bge	r18,r16,8003024 <__alt_data_end+0xf8003024>
 80037d4:	050001c4 	movi	r20,7
 80037d8:	dd812c17 	ldw	r22,1200(sp)
 80037dc:	00000306 	br	80037ec <___vfprintf_internal_r+0x1610>
 80037e0:	42000204 	addi	r8,r8,8
 80037e4:	843ffc04 	addi	r16,r16,-16
 80037e8:	943e0e0e 	bge	r18,r16,8003024 <__alt_data_end+0xf8003024>
 80037ec:	18c00404 	addi	r3,r3,16
 80037f0:	10800044 	addi	r2,r2,1
 80037f4:	45c00015 	stw	r23,0(r8)
 80037f8:	44800115 	stw	r18,4(r8)
 80037fc:	d8c12015 	stw	r3,1152(sp)
 8003800:	d8811f15 	stw	r2,1148(sp)
 8003804:	a0bff60e 	bge	r20,r2,80037e0 <__alt_data_end+0xf80037e0>
 8003808:	b009883a 	mov	r4,r22
 800380c:	980b883a 	mov	r5,r19
 8003810:	d9811e04 	addi	r6,sp,1144
 8003814:	80094e40 	call	80094e4 <__sprint_r>
 8003818:	103b8c1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 800381c:	d8c12017 	ldw	r3,1152(sp)
 8003820:	d8811f17 	ldw	r2,1148(sp)
 8003824:	da000404 	addi	r8,sp,16
 8003828:	003fee06 	br	80037e4 <__alt_data_end+0xf80037e4>
 800382c:	d9012c17 	ldw	r4,1200(sp)
 8003830:	980b883a 	mov	r5,r19
 8003834:	d9811e04 	addi	r6,sp,1144
 8003838:	80094e40 	call	80094e4 <__sprint_r>
 800383c:	103b831e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003840:	d8c12017 	ldw	r3,1152(sp)
 8003844:	dc811f17 	ldw	r18,1148(sp)
 8003848:	da000404 	addi	r8,sp,16
 800384c:	003eaa06 	br	80032f8 <__alt_data_end+0xf80032f8>
 8003850:	d9012c17 	ldw	r4,1200(sp)
 8003854:	980b883a 	mov	r5,r19
 8003858:	d9811e04 	addi	r6,sp,1144
 800385c:	80094e40 	call	80094e4 <__sprint_r>
 8003860:	103b7a1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003864:	dd812017 	ldw	r22,1152(sp)
 8003868:	dc811f17 	ldw	r18,1148(sp)
 800386c:	dd000404 	addi	r20,sp,16
 8003870:	003eac06 	br	8003324 <__alt_data_end+0xf8003324>
 8003874:	8821883a 	mov	r16,r17
 8003878:	dc412e17 	ldw	r17,1208(sp)
 800387c:	b42d883a 	add	r22,r22,r16
 8003880:	94800044 	addi	r18,r18,1
 8003884:	a5400015 	stw	r21,0(r20)
 8003888:	a4000115 	stw	r16,4(r20)
 800388c:	dd812015 	stw	r22,1152(sp)
 8003890:	dc811f15 	stw	r18,1148(sp)
 8003894:	008001c4 	movi	r2,7
 8003898:	14beb30e 	bge	r2,r18,8003368 <__alt_data_end+0xf8003368>
 800389c:	003ecb06 	br	80033cc <__alt_data_end+0xf80033cc>
 80038a0:	d9012c17 	ldw	r4,1200(sp)
 80038a4:	980b883a 	mov	r5,r19
 80038a8:	d9811e04 	addi	r6,sp,1144
 80038ac:	80094e40 	call	80094e4 <__sprint_r>
 80038b0:	103b661e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 80038b4:	d8c12017 	ldw	r3,1152(sp)
 80038b8:	da000404 	addi	r8,sp,16
 80038bc:	003c1806 	br	8002920 <__alt_data_end+0xf8002920>
 80038c0:	056bc83a 	sub	r21,zero,r21
 80038c4:	a804c03a 	cmpne	r2,r21,zero
 80038c8:	05adc83a 	sub	r22,zero,r22
 80038cc:	07000b44 	movi	fp,45
 80038d0:	b0adc83a 	sub	r22,r22,r2
 80038d4:	df012785 	stb	fp,1182(sp)
 80038d8:	00c00044 	movi	r3,1
 80038dc:	ad84b03a 	or	r2,r21,r22
 80038e0:	003b9106 	br	8002728 <__alt_data_end+0xf8002728>
 80038e4:	da013f15 	stw	r8,1276(sp)
 80038e8:	800913c0 	call	800913c <__fpclassifyd>
 80038ec:	da013f17 	ldw	r8,1276(sp)
 80038f0:	1000f226 	beq	r2,zero,8003cbc <___vfprintf_internal_r+0x1ae0>
 80038f4:	05bff7c4 	movi	r22,-33
 80038f8:	00bfffc4 	movi	r2,-1
 80038fc:	95ac703a 	and	r22,r18,r22
 8003900:	a0820b26 	beq	r20,r2,8004130 <___vfprintf_internal_r+0x1f54>
 8003904:	008011c4 	movi	r2,71
 8003908:	b081fc26 	beq	r22,r2,80040fc <___vfprintf_internal_r+0x1f20>
 800390c:	d8c12a17 	ldw	r3,1192(sp)
 8003910:	d9013917 	ldw	r4,1252(sp)
 8003914:	18c04014 	ori	r3,r3,256
 8003918:	d8c12d15 	stw	r3,1204(sp)
 800391c:	20020616 	blt	r4,zero,8004138 <___vfprintf_internal_r+0x1f5c>
 8003920:	dd413917 	ldw	r21,1252(sp)
 8003924:	d8012b05 	stb	zero,1196(sp)
 8003928:	00801984 	movi	r2,102
 800392c:	9081a526 	beq	r18,r2,8003fc4 <___vfprintf_internal_r+0x1de8>
 8003930:	00801184 	movi	r2,70
 8003934:	9081a326 	beq	r18,r2,8003fc4 <___vfprintf_internal_r+0x1de8>
 8003938:	00801144 	movi	r2,69
 800393c:	b0820226 	beq	r22,r2,8004148 <___vfprintf_internal_r+0x1f6c>
 8003940:	a039883a 	mov	fp,r20
 8003944:	d8812604 	addi	r2,sp,1176
 8003948:	d8800115 	stw	r2,4(sp)
 800394c:	d9012c17 	ldw	r4,1200(sp)
 8003950:	d8812504 	addi	r2,sp,1172
 8003954:	d9413717 	ldw	r5,1244(sp)
 8003958:	d8800215 	stw	r2,8(sp)
 800395c:	d8812104 	addi	r2,sp,1156
 8003960:	df000015 	stw	fp,0(sp)
 8003964:	d8800315 	stw	r2,12(sp)
 8003968:	a80d883a 	mov	r6,r21
 800396c:	01c00084 	movi	r7,2
 8003970:	da013f15 	stw	r8,1276(sp)
 8003974:	80046b40 	call	80046b4 <_dtoa_r>
 8003978:	1021883a 	mov	r16,r2
 800397c:	008019c4 	movi	r2,103
 8003980:	da013f17 	ldw	r8,1276(sp)
 8003984:	90800226 	beq	r18,r2,8003990 <___vfprintf_internal_r+0x17b4>
 8003988:	008011c4 	movi	r2,71
 800398c:	9080031e 	bne	r18,r2,800399c <___vfprintf_internal_r+0x17c0>
 8003990:	d9012a17 	ldw	r4,1192(sp)
 8003994:	2080004c 	andi	r2,r4,1
 8003998:	1001fe26 	beq	r2,zero,8004194 <___vfprintf_internal_r+0x1fb8>
 800399c:	00801184 	movi	r2,70
 80039a0:	8713883a 	add	r9,r16,fp
 80039a4:	b0819f26 	beq	r22,r2,8004024 <___vfprintf_internal_r+0x1e48>
 80039a8:	d9013717 	ldw	r4,1244(sp)
 80039ac:	a80b883a 	mov	r5,r21
 80039b0:	000d883a 	mov	r6,zero
 80039b4:	000f883a 	mov	r7,zero
 80039b8:	da013f15 	stw	r8,1276(sp)
 80039bc:	da413e15 	stw	r9,1272(sp)
 80039c0:	800d3640 	call	800d364 <__eqdf2>
 80039c4:	da013f17 	ldw	r8,1276(sp)
 80039c8:	da413e17 	ldw	r9,1272(sp)
 80039cc:	10017b26 	beq	r2,zero,8003fbc <___vfprintf_internal_r+0x1de0>
 80039d0:	d8812117 	ldw	r2,1156(sp)
 80039d4:	1240062e 	bgeu	r2,r9,80039f0 <___vfprintf_internal_r+0x1814>
 80039d8:	01000c04 	movi	r4,48
 80039dc:	10c00044 	addi	r3,r2,1
 80039e0:	d8c12115 	stw	r3,1156(sp)
 80039e4:	11000005 	stb	r4,0(r2)
 80039e8:	d8812117 	ldw	r2,1156(sp)
 80039ec:	127ffb36 	bltu	r2,r9,80039dc <__alt_data_end+0xf80039dc>
 80039f0:	1405c83a 	sub	r2,r2,r16
 80039f4:	d8813515 	stw	r2,1236(sp)
 80039f8:	008011c4 	movi	r2,71
 80039fc:	b0816926 	beq	r22,r2,8003fa4 <___vfprintf_internal_r+0x1dc8>
 8003a00:	00801944 	movi	r2,101
 8003a04:	14823f0e 	bge	r2,r18,8004304 <___vfprintf_internal_r+0x2128>
 8003a08:	d8c12617 	ldw	r3,1176(sp)
 8003a0c:	00801984 	movi	r2,102
 8003a10:	d8c13315 	stw	r3,1228(sp)
 8003a14:	9081e126 	beq	r18,r2,800419c <___vfprintf_internal_r+0x1fc0>
 8003a18:	d8c13317 	ldw	r3,1228(sp)
 8003a1c:	d9013517 	ldw	r4,1236(sp)
 8003a20:	1901cb16 	blt	r3,r4,8004150 <___vfprintf_internal_r+0x1f74>
 8003a24:	d9412a17 	ldw	r5,1192(sp)
 8003a28:	2880004c 	andi	r2,r5,1
 8003a2c:	1001d11e 	bne	r2,zero,8004174 <___vfprintf_internal_r+0x1f98>
 8003a30:	1805883a 	mov	r2,r3
 8003a34:	18023116 	blt	r3,zero,80042fc <___vfprintf_internal_r+0x2120>
 8003a38:	d8c13317 	ldw	r3,1228(sp)
 8003a3c:	048019c4 	movi	r18,103
 8003a40:	d8c12e15 	stw	r3,1208(sp)
 8003a44:	df012b07 	ldb	fp,1196(sp)
 8003a48:	e0014e1e 	bne	fp,zero,8003f84 <___vfprintf_internal_r+0x1da8>
 8003a4c:	d8c12d17 	ldw	r3,1204(sp)
 8003a50:	df012783 	ldbu	fp,1182(sp)
 8003a54:	d8812b15 	stw	r2,1196(sp)
 8003a58:	d8c12a15 	stw	r3,1192(sp)
 8003a5c:	0029883a 	mov	r20,zero
 8003a60:	003b4706 	br	8002780 <__alt_data_end+0xf8002780>
 8003a64:	d8c12f17 	ldw	r3,1212(sp)
 8003a68:	d9012f17 	ldw	r4,1212(sp)
 8003a6c:	d9412f17 	ldw	r5,1212(sp)
 8003a70:	18c00017 	ldw	r3,0(r3)
 8003a74:	21000117 	ldw	r4,4(r4)
 8003a78:	29400204 	addi	r5,r5,8
 8003a7c:	d8c13715 	stw	r3,1244(sp)
 8003a80:	d9013915 	stw	r4,1252(sp)
 8003a84:	d9412f15 	stw	r5,1212(sp)
 8003a88:	003c3606 	br	8002b64 <__alt_data_end+0xf8002b64>
 8003a8c:	d9412a17 	ldw	r5,1192(sp)
 8003a90:	2880100c 	andi	r2,r5,64
 8003a94:	1000b026 	beq	r2,zero,8003d58 <___vfprintf_internal_r+0x1b7c>
 8003a98:	d8812f17 	ldw	r2,1212(sp)
 8003a9c:	002d883a 	mov	r22,zero
 8003aa0:	00c00044 	movi	r3,1
 8003aa4:	1540000b 	ldhu	r21,0(r2)
 8003aa8:	10800104 	addi	r2,r2,4
 8003aac:	d8812f15 	stw	r2,1212(sp)
 8003ab0:	a805883a 	mov	r2,r21
 8003ab4:	003c6e06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8003ab8:	00c00084 	movi	r3,2
 8003abc:	003c6c06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8003ac0:	d9412a17 	ldw	r5,1192(sp)
 8003ac4:	2880100c 	andi	r2,r5,64
 8003ac8:	10009b26 	beq	r2,zero,8003d38 <___vfprintf_internal_r+0x1b5c>
 8003acc:	d8812f17 	ldw	r2,1212(sp)
 8003ad0:	002d883a 	mov	r22,zero
 8003ad4:	0007883a 	mov	r3,zero
 8003ad8:	1540000b 	ldhu	r21,0(r2)
 8003adc:	10800104 	addi	r2,r2,4
 8003ae0:	d8812f15 	stw	r2,1212(sp)
 8003ae4:	a805883a 	mov	r2,r21
 8003ae8:	003c6106 	br	8002c70 <__alt_data_end+0xf8002c70>
 8003aec:	8c800007 	ldb	r18,0(r17)
 8003af0:	003a1f06 	br	8002370 <__alt_data_end+0xf8002370>
 8003af4:	d9412a17 	ldw	r5,1192(sp)
 8003af8:	2880100c 	andi	r2,r5,64
 8003afc:	10009e26 	beq	r2,zero,8003d78 <___vfprintf_internal_r+0x1b9c>
 8003b00:	d8812f17 	ldw	r2,1212(sp)
 8003b04:	002d883a 	mov	r22,zero
 8003b08:	1540000b 	ldhu	r21,0(r2)
 8003b0c:	10800104 	addi	r2,r2,4
 8003b10:	d8812f15 	stw	r2,1212(sp)
 8003b14:	003c9506 	br	8002d6c <__alt_data_end+0xf8002d6c>
 8003b18:	d9412a17 	ldw	r5,1192(sp)
 8003b1c:	2880040c 	andi	r2,r5,16
 8003b20:	10007e1e 	bne	r2,zero,8003d1c <___vfprintf_internal_r+0x1b40>
 8003b24:	d9412a17 	ldw	r5,1192(sp)
 8003b28:	2880100c 	andi	r2,r5,64
 8003b2c:	10010826 	beq	r2,zero,8003f50 <___vfprintf_internal_r+0x1d74>
 8003b30:	d8c12f17 	ldw	r3,1212(sp)
 8003b34:	d9013117 	ldw	r4,1220(sp)
 8003b38:	18800017 	ldw	r2,0(r3)
 8003b3c:	18c00104 	addi	r3,r3,4
 8003b40:	d8c12f15 	stw	r3,1212(sp)
 8003b44:	1100000d 	sth	r4,0(r2)
 8003b48:	0039e206 	br	80022d4 <__alt_data_end+0xf80022d4>
 8003b4c:	d8c12a17 	ldw	r3,1192(sp)
 8003b50:	1880100c 	andi	r2,r3,64
 8003b54:	10006a26 	beq	r2,zero,8003d00 <___vfprintf_internal_r+0x1b24>
 8003b58:	d9012f17 	ldw	r4,1212(sp)
 8003b5c:	2540000f 	ldh	r21,0(r4)
 8003b60:	21000104 	addi	r4,r4,4
 8003b64:	d9012f15 	stw	r4,1212(sp)
 8003b68:	a82dd7fa 	srai	r22,r21,31
 8003b6c:	b005883a 	mov	r2,r22
 8003b70:	003ae906 	br	8002718 <__alt_data_end+0xf8002718>
 8003b74:	dc012e17 	ldw	r16,1208(sp)
 8003b78:	a009883a 	mov	r4,r20
 8003b7c:	8829883a 	mov	r20,r17
 8003b80:	2023883a 	mov	r17,r4
 8003b84:	1d07883a 	add	r3,r3,r20
 8003b88:	10800044 	addi	r2,r2,1
 8003b8c:	45400015 	stw	r21,0(r8)
 8003b90:	45000115 	stw	r20,4(r8)
 8003b94:	d8c12015 	stw	r3,1152(sp)
 8003b98:	d8811f15 	stw	r2,1148(sp)
 8003b9c:	010001c4 	movi	r4,7
 8003ba0:	20bed716 	blt	r4,r2,8003700 <__alt_data_end+0xf8003700>
 8003ba4:	42000204 	addi	r8,r8,8
 8003ba8:	003edc06 	br	800371c <__alt_data_end+0xf800371c>
 8003bac:	d9012c17 	ldw	r4,1200(sp)
 8003bb0:	980b883a 	mov	r5,r19
 8003bb4:	d9811e04 	addi	r6,sp,1144
 8003bb8:	80094e40 	call	80094e4 <__sprint_r>
 8003bbc:	103aa31e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003bc0:	d8c12017 	ldw	r3,1152(sp)
 8003bc4:	da000404 	addi	r8,sp,16
 8003bc8:	003d5606 	br	8003124 <__alt_data_end+0xf8003124>
 8003bcc:	d9011f17 	ldw	r4,1148(sp)
 8003bd0:	01420074 	movhi	r5,2049
 8003bd4:	29462004 	addi	r5,r5,6272
 8003bd8:	18c00044 	addi	r3,r3,1
 8003bdc:	21000044 	addi	r4,r4,1
 8003be0:	41400015 	stw	r5,0(r8)
 8003be4:	01400044 	movi	r5,1
 8003be8:	41400115 	stw	r5,4(r8)
 8003bec:	d8c12015 	stw	r3,1152(sp)
 8003bf0:	d9011f15 	stw	r4,1148(sp)
 8003bf4:	014001c4 	movi	r5,7
 8003bf8:	29006a16 	blt	r5,r4,8003da4 <___vfprintf_internal_r+0x1bc8>
 8003bfc:	42000204 	addi	r8,r8,8
 8003c00:	1025883a 	mov	r18,r2
 8003c04:	9000051e 	bne	r18,zero,8003c1c <___vfprintf_internal_r+0x1a40>
 8003c08:	d8813517 	ldw	r2,1236(sp)
 8003c0c:	1000031e 	bne	r2,zero,8003c1c <___vfprintf_internal_r+0x1a40>
 8003c10:	d9012a17 	ldw	r4,1192(sp)
 8003c14:	2080004c 	andi	r2,r4,1
 8003c18:	103b8026 	beq	r2,zero,8002a1c <__alt_data_end+0xf8002a1c>
 8003c1c:	d8813417 	ldw	r2,1232(sp)
 8003c20:	d9413817 	ldw	r5,1248(sp)
 8003c24:	010001c4 	movi	r4,7
 8003c28:	40800015 	stw	r2,0(r8)
 8003c2c:	d8811f17 	ldw	r2,1148(sp)
 8003c30:	1947883a 	add	r3,r3,r5
 8003c34:	41400115 	stw	r5,4(r8)
 8003c38:	10800044 	addi	r2,r2,1
 8003c3c:	d8c12015 	stw	r3,1152(sp)
 8003c40:	d8811f15 	stw	r2,1148(sp)
 8003c44:	20813016 	blt	r4,r2,8004108 <___vfprintf_internal_r+0x1f2c>
 8003c48:	42000204 	addi	r8,r8,8
 8003c4c:	04a5c83a 	sub	r18,zero,r18
 8003c50:	04807a0e 	bge	zero,r18,8003e3c <___vfprintf_internal_r+0x1c60>
 8003c54:	05000404 	movi	r20,16
 8003c58:	05420074 	movhi	r21,2049
 8003c5c:	ad462084 	addi	r21,r21,6274
 8003c60:	a480920e 	bge	r20,r18,8003eac <___vfprintf_internal_r+0x1cd0>
 8003c64:	058001c4 	movi	r22,7
 8003c68:	df012c17 	ldw	fp,1200(sp)
 8003c6c:	00000306 	br	8003c7c <___vfprintf_internal_r+0x1aa0>
 8003c70:	42000204 	addi	r8,r8,8
 8003c74:	94bffc04 	addi	r18,r18,-16
 8003c78:	a4808c0e 	bge	r20,r18,8003eac <___vfprintf_internal_r+0x1cd0>
 8003c7c:	18c00404 	addi	r3,r3,16
 8003c80:	10800044 	addi	r2,r2,1
 8003c84:	45c00015 	stw	r23,0(r8)
 8003c88:	45000115 	stw	r20,4(r8)
 8003c8c:	d8c12015 	stw	r3,1152(sp)
 8003c90:	d8811f15 	stw	r2,1148(sp)
 8003c94:	b0bff60e 	bge	r22,r2,8003c70 <__alt_data_end+0xf8003c70>
 8003c98:	e009883a 	mov	r4,fp
 8003c9c:	980b883a 	mov	r5,r19
 8003ca0:	d9811e04 	addi	r6,sp,1144
 8003ca4:	80094e40 	call	80094e4 <__sprint_r>
 8003ca8:	103a681e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003cac:	d8c12017 	ldw	r3,1152(sp)
 8003cb0:	d8811f17 	ldw	r2,1148(sp)
 8003cb4:	da000404 	addi	r8,sp,16
 8003cb8:	003fee06 	br	8003c74 <__alt_data_end+0xf8003c74>
 8003cbc:	008011c4 	movi	r2,71
 8003cc0:	1480ad16 	blt	r2,r18,8003f78 <___vfprintf_internal_r+0x1d9c>
 8003cc4:	04020074 	movhi	r16,2049
 8003cc8:	84061204 	addi	r16,r16,6216
 8003ccc:	d9012a17 	ldw	r4,1192(sp)
 8003cd0:	00bfdfc4 	movi	r2,-129
 8003cd4:	00c000c4 	movi	r3,3
 8003cd8:	2088703a 	and	r4,r4,r2
 8003cdc:	d8c12b15 	stw	r3,1196(sp)
 8003ce0:	d9012a15 	stw	r4,1192(sp)
 8003ce4:	df012783 	ldbu	fp,1182(sp)
 8003ce8:	d8c12e15 	stw	r3,1208(sp)
 8003cec:	0029883a 	mov	r20,zero
 8003cf0:	d8013315 	stw	zero,1228(sp)
 8003cf4:	003aa206 	br	8002780 <__alt_data_end+0xf8002780>
 8003cf8:	dd012e15 	stw	r20,1208(sp)
 8003cfc:	003c8206 	br	8002f08 <__alt_data_end+0xf8002f08>
 8003d00:	d9412f17 	ldw	r5,1212(sp)
 8003d04:	2d400017 	ldw	r21,0(r5)
 8003d08:	29400104 	addi	r5,r5,4
 8003d0c:	d9412f15 	stw	r5,1212(sp)
 8003d10:	a82dd7fa 	srai	r22,r21,31
 8003d14:	b005883a 	mov	r2,r22
 8003d18:	003a7f06 	br	8002718 <__alt_data_end+0xf8002718>
 8003d1c:	d8c12f17 	ldw	r3,1212(sp)
 8003d20:	d9013117 	ldw	r4,1220(sp)
 8003d24:	18800017 	ldw	r2,0(r3)
 8003d28:	18c00104 	addi	r3,r3,4
 8003d2c:	d8c12f15 	stw	r3,1212(sp)
 8003d30:	11000015 	stw	r4,0(r2)
 8003d34:	00396706 	br	80022d4 <__alt_data_end+0xf80022d4>
 8003d38:	d8c12f17 	ldw	r3,1212(sp)
 8003d3c:	002d883a 	mov	r22,zero
 8003d40:	1d400017 	ldw	r21,0(r3)
 8003d44:	18c00104 	addi	r3,r3,4
 8003d48:	d8c12f15 	stw	r3,1212(sp)
 8003d4c:	a805883a 	mov	r2,r21
 8003d50:	0007883a 	mov	r3,zero
 8003d54:	003bc606 	br	8002c70 <__alt_data_end+0xf8002c70>
 8003d58:	d8c12f17 	ldw	r3,1212(sp)
 8003d5c:	002d883a 	mov	r22,zero
 8003d60:	1d400017 	ldw	r21,0(r3)
 8003d64:	18c00104 	addi	r3,r3,4
 8003d68:	d8c12f15 	stw	r3,1212(sp)
 8003d6c:	a805883a 	mov	r2,r21
 8003d70:	00c00044 	movi	r3,1
 8003d74:	003bbe06 	br	8002c70 <__alt_data_end+0xf8002c70>
 8003d78:	d8c12f17 	ldw	r3,1212(sp)
 8003d7c:	002d883a 	mov	r22,zero
 8003d80:	1d400017 	ldw	r21,0(r3)
 8003d84:	18c00104 	addi	r3,r3,4
 8003d88:	d8c12f15 	stw	r3,1212(sp)
 8003d8c:	003bf706 	br	8002d6c <__alt_data_end+0xf8002d6c>
 8003d90:	04020074 	movhi	r16,2049
 8003d94:	84061004 	addi	r16,r16,6208
 8003d98:	003b8506 	br	8002bb0 <__alt_data_end+0xf8002bb0>
 8003d9c:	45000204 	addi	r20,r8,8
 8003da0:	003d7206 	br	800336c <__alt_data_end+0xf800336c>
 8003da4:	d9012c17 	ldw	r4,1200(sp)
 8003da8:	980b883a 	mov	r5,r19
 8003dac:	d9811e04 	addi	r6,sp,1144
 8003db0:	80094e40 	call	80094e4 <__sprint_r>
 8003db4:	103a251e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003db8:	dc812617 	ldw	r18,1176(sp)
 8003dbc:	d8c12017 	ldw	r3,1152(sp)
 8003dc0:	da000404 	addi	r8,sp,16
 8003dc4:	003f8f06 	br	8003c04 <__alt_data_end+0xf8003c04>
 8003dc8:	d9012a17 	ldw	r4,1192(sp)
 8003dcc:	8c400044 	addi	r17,r17,1
 8003dd0:	14800047 	ldb	r18,1(r2)
 8003dd4:	21000814 	ori	r4,r4,32
 8003dd8:	d9012a15 	stw	r4,1192(sp)
 8003ddc:	00396406 	br	8002370 <__alt_data_end+0xf8002370>
 8003de0:	d9012c17 	ldw	r4,1200(sp)
 8003de4:	980b883a 	mov	r5,r19
 8003de8:	d9811e04 	addi	r6,sp,1144
 8003dec:	80094e40 	call	80094e4 <__sprint_r>
 8003df0:	103a161e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003df4:	d8c12017 	ldw	r3,1152(sp)
 8003df8:	da000404 	addi	r8,sp,16
 8003dfc:	003cdc06 	br	8003170 <__alt_data_end+0xf8003170>
 8003e00:	df013f15 	stw	fp,1276(sp)
 8003e04:	80021500 	call	8002150 <strlen>
 8003e08:	d8812e15 	stw	r2,1208(sp)
 8003e0c:	da013f17 	ldw	r8,1276(sp)
 8003e10:	103c3f0e 	bge	r2,zero,8002f10 <__alt_data_end+0xf8002f10>
 8003e14:	0005883a 	mov	r2,zero
 8003e18:	003c3d06 	br	8002f10 <__alt_data_end+0xf8002f10>
 8003e1c:	d9012c17 	ldw	r4,1200(sp)
 8003e20:	980b883a 	mov	r5,r19
 8003e24:	d9811e04 	addi	r6,sp,1144
 8003e28:	80094e40 	call	80094e4 <__sprint_r>
 8003e2c:	103a071e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003e30:	d8c12017 	ldw	r3,1152(sp)
 8003e34:	d8811f17 	ldw	r2,1148(sp)
 8003e38:	da000404 	addi	r8,sp,16
 8003e3c:	d9013517 	ldw	r4,1236(sp)
 8003e40:	10800044 	addi	r2,r2,1
 8003e44:	44000015 	stw	r16,0(r8)
 8003e48:	20c7883a 	add	r3,r4,r3
 8003e4c:	003aed06 	br	8002a04 <__alt_data_end+0xf8002a04>
 8003e50:	01020074 	movhi	r4,2049
 8003e54:	21062484 	addi	r4,r4,6290
 8003e58:	d9013615 	stw	r4,1240(sp)
 8003e5c:	003a8706 	br	800287c <__alt_data_end+0xf800287c>
 8003e60:	0029883a 	mov	r20,zero
 8003e64:	003dd706 	br	80035c4 <__alt_data_end+0xf80035c4>
 8003e68:	d9012c17 	ldw	r4,1200(sp)
 8003e6c:	980b883a 	mov	r5,r19
 8003e70:	d9811e04 	addi	r6,sp,1144
 8003e74:	80094e40 	call	80094e4 <__sprint_r>
 8003e78:	1039f41e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003e7c:	d8c12017 	ldw	r3,1152(sp)
 8003e80:	da000404 	addi	r8,sp,16
 8003e84:	003dce06 	br	80035c0 <__alt_data_end+0xf80035c0>
 8003e88:	d9012c17 	ldw	r4,1200(sp)
 8003e8c:	980b883a 	mov	r5,r19
 8003e90:	d9811e04 	addi	r6,sp,1144
 8003e94:	80094e40 	call	80094e4 <__sprint_r>
 8003e98:	1039ec1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003e9c:	d8812617 	ldw	r2,1176(sp)
 8003ea0:	d8c12017 	ldw	r3,1152(sp)
 8003ea4:	da000404 	addi	r8,sp,16
 8003ea8:	003e3106 	br	8003770 <__alt_data_end+0xf8003770>
 8003eac:	1c87883a 	add	r3,r3,r18
 8003eb0:	10800044 	addi	r2,r2,1
 8003eb4:	45400015 	stw	r21,0(r8)
 8003eb8:	44800115 	stw	r18,4(r8)
 8003ebc:	d8c12015 	stw	r3,1152(sp)
 8003ec0:	d8811f15 	stw	r2,1148(sp)
 8003ec4:	010001c4 	movi	r4,7
 8003ec8:	20bfd416 	blt	r4,r2,8003e1c <__alt_data_end+0xf8003e1c>
 8003ecc:	42000204 	addi	r8,r8,8
 8003ed0:	003fda06 	br	8003e3c <__alt_data_end+0xf8003e3c>
 8003ed4:	01420074 	movhi	r5,2049
 8003ed8:	29462484 	addi	r5,r5,6290
 8003edc:	d9413615 	stw	r5,1240(sp)
 8003ee0:	003af406 	br	8002ab4 <__alt_data_end+0xf8002ab4>
 8003ee4:	00800184 	movi	r2,6
 8003ee8:	1500012e 	bgeu	r2,r20,8003ef0 <___vfprintf_internal_r+0x1d14>
 8003eec:	1029883a 	mov	r20,r2
 8003ef0:	dd012e15 	stw	r20,1208(sp)
 8003ef4:	a005883a 	mov	r2,r20
 8003ef8:	a000d216 	blt	r20,zero,8004244 <___vfprintf_internal_r+0x2068>
 8003efc:	d8812b15 	stw	r2,1196(sp)
 8003f00:	dd412f15 	stw	r21,1212(sp)
 8003f04:	0029883a 	mov	r20,zero
 8003f08:	d8013315 	stw	zero,1228(sp)
 8003f0c:	04020074 	movhi	r16,2049
 8003f10:	84061e04 	addi	r16,r16,6264
 8003f14:	0005883a 	mov	r2,zero
 8003f18:	003a2006 	br	800279c <__alt_data_end+0xf800279c>
 8003f1c:	0029883a 	mov	r20,zero
 8003f20:	003e2506 	br	80037b8 <__alt_data_end+0xf80037b8>
 8003f24:	d9012c17 	ldw	r4,1200(sp)
 8003f28:	980b883a 	mov	r5,r19
 8003f2c:	d9811e04 	addi	r6,sp,1144
 8003f30:	80094e40 	call	80094e4 <__sprint_r>
 8003f34:	1039c51e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 8003f38:	d8812617 	ldw	r2,1176(sp)
 8003f3c:	d9413517 	ldw	r5,1236(sp)
 8003f40:	d8c12017 	ldw	r3,1152(sp)
 8003f44:	da000404 	addi	r8,sp,16
 8003f48:	2885c83a 	sub	r2,r5,r2
 8003f4c:	003e1906 	br	80037b4 <__alt_data_end+0xf80037b4>
 8003f50:	d9412f17 	ldw	r5,1212(sp)
 8003f54:	d8c13117 	ldw	r3,1220(sp)
 8003f58:	28800017 	ldw	r2,0(r5)
 8003f5c:	29400104 	addi	r5,r5,4
 8003f60:	d9412f15 	stw	r5,1212(sp)
 8003f64:	10c00015 	stw	r3,0(r2)
 8003f68:	0038da06 	br	80022d4 <__alt_data_end+0xf80022d4>
 8003f6c:	07000b44 	movi	fp,45
 8003f70:	df012785 	stb	fp,1182(sp)
 8003f74:	003b0a06 	br	8002ba0 <__alt_data_end+0xf8002ba0>
 8003f78:	04020074 	movhi	r16,2049
 8003f7c:	84061304 	addi	r16,r16,6220
 8003f80:	003f5206 	br	8003ccc <__alt_data_end+0xf8003ccc>
 8003f84:	00c00b44 	movi	r3,45
 8003f88:	d8c12785 	stb	r3,1182(sp)
 8003f8c:	d8c12d17 	ldw	r3,1204(sp)
 8003f90:	d8812b15 	stw	r2,1196(sp)
 8003f94:	0029883a 	mov	r20,zero
 8003f98:	d8c12a15 	stw	r3,1192(sp)
 8003f9c:	00800b44 	movi	r2,45
 8003fa0:	0039fb06 	br	8002790 <__alt_data_end+0xf8002790>
 8003fa4:	d8812617 	ldw	r2,1176(sp)
 8003fa8:	00ffff44 	movi	r3,-3
 8003fac:	10c03216 	blt	r2,r3,8004078 <___vfprintf_internal_r+0x1e9c>
 8003fb0:	a0803116 	blt	r20,r2,8004078 <___vfprintf_internal_r+0x1e9c>
 8003fb4:	d8813315 	stw	r2,1228(sp)
 8003fb8:	003e9706 	br	8003a18 <__alt_data_end+0xf8003a18>
 8003fbc:	4805883a 	mov	r2,r9
 8003fc0:	003e8b06 	br	80039f0 <__alt_data_end+0xf80039f0>
 8003fc4:	d8812604 	addi	r2,sp,1176
 8003fc8:	d8800115 	stw	r2,4(sp)
 8003fcc:	d9012c17 	ldw	r4,1200(sp)
 8003fd0:	d8812504 	addi	r2,sp,1172
 8003fd4:	d9413717 	ldw	r5,1244(sp)
 8003fd8:	d8800215 	stw	r2,8(sp)
 8003fdc:	d8812104 	addi	r2,sp,1156
 8003fe0:	dd000015 	stw	r20,0(sp)
 8003fe4:	d8800315 	stw	r2,12(sp)
 8003fe8:	a80d883a 	mov	r6,r21
 8003fec:	01c000c4 	movi	r7,3
 8003ff0:	da013f15 	stw	r8,1276(sp)
 8003ff4:	80046b40 	call	80046b4 <_dtoa_r>
 8003ff8:	1021883a 	mov	r16,r2
 8003ffc:	a039883a 	mov	fp,r20
 8004000:	da013f17 	ldw	r8,1276(sp)
 8004004:	003e6506 	br	800399c <__alt_data_end+0xf800399c>
 8004008:	dd012b15 	stw	r20,1196(sp)
 800400c:	dd012e15 	stw	r20,1208(sp)
 8004010:	df012783 	ldbu	fp,1182(sp)
 8004014:	dd412f15 	stw	r21,1212(sp)
 8004018:	0029883a 	mov	r20,zero
 800401c:	d8013315 	stw	zero,1228(sp)
 8004020:	0039d706 	br	8002780 <__alt_data_end+0xf8002780>
 8004024:	81000007 	ldb	r4,0(r16)
 8004028:	00800c04 	movi	r2,48
 800402c:	20800326 	beq	r4,r2,800403c <___vfprintf_internal_r+0x1e60>
 8004030:	d8c12617 	ldw	r3,1176(sp)
 8004034:	48d3883a 	add	r9,r9,r3
 8004038:	003e5b06 	br	80039a8 <__alt_data_end+0xf80039a8>
 800403c:	d9013717 	ldw	r4,1244(sp)
 8004040:	a80b883a 	mov	r5,r21
 8004044:	000d883a 	mov	r6,zero
 8004048:	000f883a 	mov	r7,zero
 800404c:	da013f15 	stw	r8,1276(sp)
 8004050:	da413e15 	stw	r9,1272(sp)
 8004054:	800d3640 	call	800d364 <__eqdf2>
 8004058:	da013f17 	ldw	r8,1276(sp)
 800405c:	da413e17 	ldw	r9,1272(sp)
 8004060:	103ff326 	beq	r2,zero,8004030 <__alt_data_end+0xf8004030>
 8004064:	00800044 	movi	r2,1
 8004068:	1707c83a 	sub	r3,r2,fp
 800406c:	d8c12615 	stw	r3,1176(sp)
 8004070:	48d3883a 	add	r9,r9,r3
 8004074:	003e4c06 	br	80039a8 <__alt_data_end+0xf80039a8>
 8004078:	94bfff84 	addi	r18,r18,-2
 800407c:	157fffc4 	addi	r21,r2,-1
 8004080:	dd412615 	stw	r21,1176(sp)
 8004084:	dc8122c5 	stb	r18,1163(sp)
 8004088:	a8009016 	blt	r21,zero,80042cc <___vfprintf_internal_r+0x20f0>
 800408c:	00800ac4 	movi	r2,43
 8004090:	d8812305 	stb	r2,1164(sp)
 8004094:	05000244 	movi	r20,9
 8004098:	a5404a16 	blt	r20,r21,80041c4 <___vfprintf_internal_r+0x1fe8>
 800409c:	00800c04 	movi	r2,48
 80040a0:	ad400c04 	addi	r21,r21,48
 80040a4:	d8812345 	stb	r2,1165(sp)
 80040a8:	dd412385 	stb	r21,1166(sp)
 80040ac:	d8c123c4 	addi	r3,sp,1167
 80040b0:	d88122c4 	addi	r2,sp,1163
 80040b4:	1885c83a 	sub	r2,r3,r2
 80040b8:	d8c13517 	ldw	r3,1236(sp)
 80040bc:	d9013517 	ldw	r4,1236(sp)
 80040c0:	d8813a15 	stw	r2,1256(sp)
 80040c4:	1887883a 	add	r3,r3,r2
 80040c8:	d8c12e15 	stw	r3,1208(sp)
 80040cc:	00800044 	movi	r2,1
 80040d0:	11007a0e 	bge	r2,r4,80042bc <___vfprintf_internal_r+0x20e0>
 80040d4:	d8c12e17 	ldw	r3,1208(sp)
 80040d8:	18c00044 	addi	r3,r3,1
 80040dc:	d8c12e15 	stw	r3,1208(sp)
 80040e0:	1805883a 	mov	r2,r3
 80040e4:	18000216 	blt	r3,zero,80040f0 <___vfprintf_internal_r+0x1f14>
 80040e8:	d8013315 	stw	zero,1228(sp)
 80040ec:	003e5506 	br	8003a44 <__alt_data_end+0xf8003a44>
 80040f0:	0005883a 	mov	r2,zero
 80040f4:	d8013315 	stw	zero,1228(sp)
 80040f8:	003e5206 	br	8003a44 <__alt_data_end+0xf8003a44>
 80040fc:	a03e031e 	bne	r20,zero,800390c <__alt_data_end+0xf800390c>
 8004100:	8029883a 	mov	r20,r16
 8004104:	003e0106 	br	800390c <__alt_data_end+0xf800390c>
 8004108:	d9012c17 	ldw	r4,1200(sp)
 800410c:	980b883a 	mov	r5,r19
 8004110:	d9811e04 	addi	r6,sp,1144
 8004114:	80094e40 	call	80094e4 <__sprint_r>
 8004118:	10394c1e 	bne	r2,zero,800264c <__alt_data_end+0xf800264c>
 800411c:	dc812617 	ldw	r18,1176(sp)
 8004120:	d8c12017 	ldw	r3,1152(sp)
 8004124:	d8811f17 	ldw	r2,1148(sp)
 8004128:	da000404 	addi	r8,sp,16
 800412c:	003ec706 	br	8003c4c <__alt_data_end+0xf8003c4c>
 8004130:	05000184 	movi	r20,6
 8004134:	003df506 	br	800390c <__alt_data_end+0xf800390c>
 8004138:	00c00b44 	movi	r3,45
 800413c:	2560003c 	xorhi	r21,r4,32768
 8004140:	d8c12b05 	stb	r3,1196(sp)
 8004144:	003df806 	br	8003928 <__alt_data_end+0xf8003928>
 8004148:	a7000044 	addi	fp,r20,1
 800414c:	003dfd06 	br	8003944 <__alt_data_end+0xf8003944>
 8004150:	d8c13317 	ldw	r3,1228(sp)
 8004154:	00c0610e 	bge	zero,r3,80042dc <___vfprintf_internal_r+0x2100>
 8004158:	00800044 	movi	r2,1
 800415c:	d9013517 	ldw	r4,1236(sp)
 8004160:	1105883a 	add	r2,r2,r4
 8004164:	d8812e15 	stw	r2,1208(sp)
 8004168:	10000716 	blt	r2,zero,8004188 <___vfprintf_internal_r+0x1fac>
 800416c:	048019c4 	movi	r18,103
 8004170:	003e3406 	br	8003a44 <__alt_data_end+0xf8003a44>
 8004174:	d8c13317 	ldw	r3,1228(sp)
 8004178:	18c00044 	addi	r3,r3,1
 800417c:	d8c12e15 	stw	r3,1208(sp)
 8004180:	1805883a 	mov	r2,r3
 8004184:	183ff90e 	bge	r3,zero,800416c <__alt_data_end+0xf800416c>
 8004188:	0005883a 	mov	r2,zero
 800418c:	048019c4 	movi	r18,103
 8004190:	003e2c06 	br	8003a44 <__alt_data_end+0xf8003a44>
 8004194:	d8812117 	ldw	r2,1156(sp)
 8004198:	003e1506 	br	80039f0 <__alt_data_end+0xf80039f0>
 800419c:	00c0400e 	bge	zero,r3,80042a0 <___vfprintf_internal_r+0x20c4>
 80041a0:	a0002a1e 	bne	r20,zero,800424c <___vfprintf_internal_r+0x2070>
 80041a4:	d9012a17 	ldw	r4,1192(sp)
 80041a8:	2080004c 	andi	r2,r4,1
 80041ac:	1000271e 	bne	r2,zero,800424c <___vfprintf_internal_r+0x2070>
 80041b0:	1805883a 	mov	r2,r3
 80041b4:	18005a16 	blt	r3,zero,8004320 <___vfprintf_internal_r+0x2144>
 80041b8:	d8c13317 	ldw	r3,1228(sp)
 80041bc:	d8c12e15 	stw	r3,1208(sp)
 80041c0:	003e2006 	br	8003a44 <__alt_data_end+0xf8003a44>
 80041c4:	d8c12284 	addi	r3,sp,1162
 80041c8:	4039883a 	mov	fp,r8
 80041cc:	a809883a 	mov	r4,r21
 80041d0:	01400284 	movi	r5,10
 80041d4:	182d883a 	mov	r22,r3
 80041d8:	800c0c80 	call	800c0c8 <__modsi3>
 80041dc:	10800c04 	addi	r2,r2,48
 80041e0:	a809883a 	mov	r4,r21
 80041e4:	b0800005 	stb	r2,0(r22)
 80041e8:	01400284 	movi	r5,10
 80041ec:	800c0800 	call	800c080 <__divsi3>
 80041f0:	102b883a 	mov	r21,r2
 80041f4:	b0ffffc4 	addi	r3,r22,-1
 80041f8:	a0bff416 	blt	r20,r2,80041cc <__alt_data_end+0xf80041cc>
 80041fc:	11400c04 	addi	r5,r2,48
 8004200:	b17fffc5 	stb	r5,-1(r22)
 8004204:	d88122c4 	addi	r2,sp,1163
 8004208:	e011883a 	mov	r8,fp
 800420c:	1880462e 	bgeu	r3,r2,8004328 <___vfprintf_internal_r+0x214c>
 8004210:	d9012344 	addi	r4,sp,1165
 8004214:	b007883a 	mov	r3,r22
 8004218:	00000206 	br	8004224 <___vfprintf_internal_r+0x2048>
 800421c:	19400003 	ldbu	r5,0(r3)
 8004220:	18c00044 	addi	r3,r3,1
 8004224:	21400005 	stb	r5,0(r4)
 8004228:	21000044 	addi	r4,r4,1
 800422c:	10fffb1e 	bne	r2,r3,800421c <__alt_data_end+0xf800421c>
 8004230:	d8c12304 	addi	r3,sp,1164
 8004234:	1d87c83a 	sub	r3,r3,r22
 8004238:	d9412344 	addi	r5,sp,1165
 800423c:	28c7883a 	add	r3,r5,r3
 8004240:	003f9c06 	br	80040b4 <__alt_data_end+0xf80040b4>
 8004244:	0005883a 	mov	r2,zero
 8004248:	003f2c06 	br	8003efc <__alt_data_end+0xf8003efc>
 800424c:	d8c13317 	ldw	r3,1228(sp)
 8004250:	a5000044 	addi	r20,r20,1
 8004254:	1d29883a 	add	r20,r3,r20
 8004258:	dd012e15 	stw	r20,1208(sp)
 800425c:	a005883a 	mov	r2,r20
 8004260:	a03df80e 	bge	r20,zero,8003a44 <__alt_data_end+0xf8003a44>
 8004264:	0005883a 	mov	r2,zero
 8004268:	003df606 	br	8003a44 <__alt_data_end+0xf8003a44>
 800426c:	043fffc4 	movi	r16,-1
 8004270:	0038d406 	br	80025c4 <__alt_data_end+0xf80025c4>
 8004274:	d9012f17 	ldw	r4,1212(sp)
 8004278:	8c800043 	ldbu	r18,1(r17)
 800427c:	1023883a 	mov	r17,r2
 8004280:	20c00017 	ldw	r3,0(r4)
 8004284:	21000104 	addi	r4,r4,4
 8004288:	d9012f15 	stw	r4,1212(sp)
 800428c:	18001f16 	blt	r3,zero,800430c <___vfprintf_internal_r+0x2130>
 8004290:	94803fcc 	andi	r18,r18,255
 8004294:	9480201c 	xori	r18,r18,128
 8004298:	94bfe004 	addi	r18,r18,-128
 800429c:	00383406 	br	8002370 <__alt_data_end+0xf8002370>
 80042a0:	a000111e 	bne	r20,zero,80042e8 <___vfprintf_internal_r+0x210c>
 80042a4:	d9012a17 	ldw	r4,1192(sp)
 80042a8:	2080004c 	andi	r2,r4,1
 80042ac:	10000e1e 	bne	r2,zero,80042e8 <___vfprintf_internal_r+0x210c>
 80042b0:	00800044 	movi	r2,1
 80042b4:	d8812e15 	stw	r2,1208(sp)
 80042b8:	003de206 	br	8003a44 <__alt_data_end+0xf8003a44>
 80042bc:	d9412a17 	ldw	r5,1192(sp)
 80042c0:	2884703a 	and	r2,r5,r2
 80042c4:	103f831e 	bne	r2,zero,80040d4 <__alt_data_end+0xf80040d4>
 80042c8:	003f8506 	br	80040e0 <__alt_data_end+0xf80040e0>
 80042cc:	00800b44 	movi	r2,45
 80042d0:	056bc83a 	sub	r21,zero,r21
 80042d4:	d8812305 	stb	r2,1164(sp)
 80042d8:	003f6e06 	br	8004094 <__alt_data_end+0xf8004094>
 80042dc:	00800084 	movi	r2,2
 80042e0:	10c5c83a 	sub	r2,r2,r3
 80042e4:	003f9d06 	br	800415c <__alt_data_end+0xf800415c>
 80042e8:	a5000084 	addi	r20,r20,2
 80042ec:	dd012e15 	stw	r20,1208(sp)
 80042f0:	a005883a 	mov	r2,r20
 80042f4:	a03dd30e 	bge	r20,zero,8003a44 <__alt_data_end+0xf8003a44>
 80042f8:	003fda06 	br	8004264 <__alt_data_end+0xf8004264>
 80042fc:	0005883a 	mov	r2,zero
 8004300:	003dcd06 	br	8003a38 <__alt_data_end+0xf8003a38>
 8004304:	d8812617 	ldw	r2,1176(sp)
 8004308:	003f5c06 	br	800407c <__alt_data_end+0xf800407c>
 800430c:	94803fcc 	andi	r18,r18,255
 8004310:	9480201c 	xori	r18,r18,128
 8004314:	00ffffc4 	movi	r3,-1
 8004318:	94bfe004 	addi	r18,r18,-128
 800431c:	00381406 	br	8002370 <__alt_data_end+0xf8002370>
 8004320:	0005883a 	mov	r2,zero
 8004324:	003fa406 	br	80041b8 <__alt_data_end+0xf80041b8>
 8004328:	d8c12344 	addi	r3,sp,1165
 800432c:	003f6106 	br	80040b4 <__alt_data_end+0xf80040b4>

08004330 <__vfprintf_internal>:
 8004330:	00820074 	movhi	r2,2049
 8004334:	108d7904 	addi	r2,r2,13796
 8004338:	2007883a 	mov	r3,r4
 800433c:	11000017 	ldw	r4,0(r2)
 8004340:	2805883a 	mov	r2,r5
 8004344:	300f883a 	mov	r7,r6
 8004348:	180b883a 	mov	r5,r3
 800434c:	100d883a 	mov	r6,r2
 8004350:	80021dc1 	jmpi	80021dc <___vfprintf_internal_r>

08004354 <__swsetup_r>:
 8004354:	00820074 	movhi	r2,2049
 8004358:	108d7904 	addi	r2,r2,13796
 800435c:	10800017 	ldw	r2,0(r2)
 8004360:	defffd04 	addi	sp,sp,-12
 8004364:	dc400115 	stw	r17,4(sp)
 8004368:	dc000015 	stw	r16,0(sp)
 800436c:	dfc00215 	stw	ra,8(sp)
 8004370:	2023883a 	mov	r17,r4
 8004374:	2821883a 	mov	r16,r5
 8004378:	10000226 	beq	r2,zero,8004384 <__swsetup_r+0x30>
 800437c:	10c00e17 	ldw	r3,56(r2)
 8004380:	18002e26 	beq	r3,zero,800443c <__swsetup_r+0xe8>
 8004384:	8080030b 	ldhu	r2,12(r16)
 8004388:	10c0020c 	andi	r3,r2,8
 800438c:	100d883a 	mov	r6,r2
 8004390:	18000f26 	beq	r3,zero,80043d0 <__swsetup_r+0x7c>
 8004394:	80c00417 	ldw	r3,16(r16)
 8004398:	18001526 	beq	r3,zero,80043f0 <__swsetup_r+0x9c>
 800439c:	1100004c 	andi	r4,r2,1
 80043a0:	20001c1e 	bne	r4,zero,8004414 <__swsetup_r+0xc0>
 80043a4:	1080008c 	andi	r2,r2,2
 80043a8:	1000271e 	bne	r2,zero,8004448 <__swsetup_r+0xf4>
 80043ac:	80800517 	ldw	r2,20(r16)
 80043b0:	80800215 	stw	r2,8(r16)
 80043b4:	18001c26 	beq	r3,zero,8004428 <__swsetup_r+0xd4>
 80043b8:	0005883a 	mov	r2,zero
 80043bc:	dfc00217 	ldw	ra,8(sp)
 80043c0:	dc400117 	ldw	r17,4(sp)
 80043c4:	dc000017 	ldw	r16,0(sp)
 80043c8:	dec00304 	addi	sp,sp,12
 80043cc:	f800283a 	ret
 80043d0:	3080040c 	andi	r2,r6,16
 80043d4:	10001726 	beq	r2,zero,8004434 <__swsetup_r+0xe0>
 80043d8:	3080010c 	andi	r2,r6,4
 80043dc:	10001d1e 	bne	r2,zero,8004454 <__swsetup_r+0x100>
 80043e0:	80c00417 	ldw	r3,16(r16)
 80043e4:	30800214 	ori	r2,r6,8
 80043e8:	8080030d 	sth	r2,12(r16)
 80043ec:	183feb1e 	bne	r3,zero,800439c <__alt_data_end+0xf800439c>
 80043f0:	1140a00c 	andi	r5,r2,640
 80043f4:	01008004 	movi	r4,512
 80043f8:	293fe826 	beq	r5,r4,800439c <__alt_data_end+0xf800439c>
 80043fc:	8809883a 	mov	r4,r17
 8004400:	800b883a 	mov	r5,r16
 8004404:	8006df40 	call	8006df4 <__smakebuf_r>
 8004408:	8080030b 	ldhu	r2,12(r16)
 800440c:	80c00417 	ldw	r3,16(r16)
 8004410:	003fe206 	br	800439c <__alt_data_end+0xf800439c>
 8004414:	80800517 	ldw	r2,20(r16)
 8004418:	80000215 	stw	zero,8(r16)
 800441c:	0085c83a 	sub	r2,zero,r2
 8004420:	80800615 	stw	r2,24(r16)
 8004424:	183fe41e 	bne	r3,zero,80043b8 <__alt_data_end+0xf80043b8>
 8004428:	8080030b 	ldhu	r2,12(r16)
 800442c:	1080200c 	andi	r2,r2,128
 8004430:	103fe226 	beq	r2,zero,80043bc <__alt_data_end+0xf80043bc>
 8004434:	00bfffc4 	movi	r2,-1
 8004438:	003fe006 	br	80043bc <__alt_data_end+0xf80043bc>
 800443c:	1009883a 	mov	r4,r2
 8004440:	80060100 	call	8006010 <__sinit>
 8004444:	003fcf06 	br	8004384 <__alt_data_end+0xf8004384>
 8004448:	0005883a 	mov	r2,zero
 800444c:	80800215 	stw	r2,8(r16)
 8004450:	003fd806 	br	80043b4 <__alt_data_end+0xf80043b4>
 8004454:	81400c17 	ldw	r5,48(r16)
 8004458:	28000626 	beq	r5,zero,8004474 <__swsetup_r+0x120>
 800445c:	80801004 	addi	r2,r16,64
 8004460:	28800326 	beq	r5,r2,8004470 <__swsetup_r+0x11c>
 8004464:	8809883a 	mov	r4,r17
 8004468:	80064440 	call	8006444 <_free_r>
 800446c:	8180030b 	ldhu	r6,12(r16)
 8004470:	80000c15 	stw	zero,48(r16)
 8004474:	80c00417 	ldw	r3,16(r16)
 8004478:	00bff6c4 	movi	r2,-37
 800447c:	118c703a 	and	r6,r2,r6
 8004480:	80000115 	stw	zero,4(r16)
 8004484:	80c00015 	stw	r3,0(r16)
 8004488:	003fd606 	br	80043e4 <__alt_data_end+0xf80043e4>

0800448c <quorem>:
 800448c:	defff204 	addi	sp,sp,-56
 8004490:	dd400915 	stw	r21,36(sp)
 8004494:	20800417 	ldw	r2,16(r4)
 8004498:	2d400417 	ldw	r21,16(r5)
 800449c:	dfc00d15 	stw	ra,52(sp)
 80044a0:	df000c15 	stw	fp,48(sp)
 80044a4:	ddc00b15 	stw	r23,44(sp)
 80044a8:	dd800a15 	stw	r22,40(sp)
 80044ac:	dd000815 	stw	r20,32(sp)
 80044b0:	dcc00715 	stw	r19,28(sp)
 80044b4:	dc800615 	stw	r18,24(sp)
 80044b8:	dc400515 	stw	r17,20(sp)
 80044bc:	dc000415 	stw	r16,16(sp)
 80044c0:	d9000015 	stw	r4,0(sp)
 80044c4:	d9400115 	stw	r5,4(sp)
 80044c8:	15407816 	blt	r2,r21,80046ac <quorem+0x220>
 80044cc:	ad7fffc4 	addi	r21,r21,-1
 80044d0:	ad79883a 	add	fp,r21,r21
 80044d4:	28c00504 	addi	r3,r5,20
 80044d8:	e739883a 	add	fp,fp,fp
 80044dc:	1f2f883a 	add	r23,r3,fp
 80044e0:	24400504 	addi	r17,r4,20
 80044e4:	8f39883a 	add	fp,r17,fp
 80044e8:	b9400017 	ldw	r5,0(r23)
 80044ec:	e1000017 	ldw	r4,0(fp)
 80044f0:	d8c00215 	stw	r3,8(sp)
 80044f4:	29400044 	addi	r5,r5,1
 80044f8:	df000315 	stw	fp,12(sp)
 80044fc:	800c1140 	call	800c114 <__udivsi3>
 8004500:	1021883a 	mov	r16,r2
 8004504:	10003026 	beq	r2,zero,80045c8 <quorem+0x13c>
 8004508:	dcc00217 	ldw	r19,8(sp)
 800450c:	8829883a 	mov	r20,r17
 8004510:	002d883a 	mov	r22,zero
 8004514:	0039883a 	mov	fp,zero
 8004518:	9c800017 	ldw	r18,0(r19)
 800451c:	800b883a 	mov	r5,r16
 8004520:	9cc00104 	addi	r19,r19,4
 8004524:	913fffcc 	andi	r4,r18,65535
 8004528:	800c1240 	call	800c124 <__mulsi3>
 800452c:	9008d43a 	srli	r4,r18,16
 8004530:	800b883a 	mov	r5,r16
 8004534:	b0ad883a 	add	r22,r22,r2
 8004538:	800c1240 	call	800c124 <__mulsi3>
 800453c:	a1400017 	ldw	r5,0(r20)
 8004540:	b010d43a 	srli	r8,r22,16
 8004544:	b0ffffcc 	andi	r3,r22,65535
 8004548:	293fffcc 	andi	r4,r5,65535
 800454c:	2709883a 	add	r4,r4,fp
 8004550:	280cd43a 	srli	r6,r5,16
 8004554:	20c9c83a 	sub	r4,r4,r3
 8004558:	4085883a 	add	r2,r8,r2
 800455c:	2007d43a 	srai	r3,r4,16
 8004560:	117fffcc 	andi	r5,r2,65535
 8004564:	314bc83a 	sub	r5,r6,r5
 8004568:	28cb883a 	add	r5,r5,r3
 800456c:	280c943a 	slli	r6,r5,16
 8004570:	213fffcc 	andi	r4,r4,65535
 8004574:	102cd43a 	srli	r22,r2,16
 8004578:	3108b03a 	or	r4,r6,r4
 800457c:	a1000015 	stw	r4,0(r20)
 8004580:	2839d43a 	srai	fp,r5,16
 8004584:	a5000104 	addi	r20,r20,4
 8004588:	bcffe32e 	bgeu	r23,r19,8004518 <__alt_data_end+0xf8004518>
 800458c:	d8c00317 	ldw	r3,12(sp)
 8004590:	18800017 	ldw	r2,0(r3)
 8004594:	10000c1e 	bne	r2,zero,80045c8 <quorem+0x13c>
 8004598:	18bfff04 	addi	r2,r3,-4
 800459c:	8880082e 	bgeu	r17,r2,80045c0 <quorem+0x134>
 80045a0:	18ffff17 	ldw	r3,-4(r3)
 80045a4:	18000326 	beq	r3,zero,80045b4 <quorem+0x128>
 80045a8:	00000506 	br	80045c0 <quorem+0x134>
 80045ac:	10c00017 	ldw	r3,0(r2)
 80045b0:	1800031e 	bne	r3,zero,80045c0 <quorem+0x134>
 80045b4:	10bfff04 	addi	r2,r2,-4
 80045b8:	ad7fffc4 	addi	r21,r21,-1
 80045bc:	88bffb36 	bltu	r17,r2,80045ac <__alt_data_end+0xf80045ac>
 80045c0:	d8c00017 	ldw	r3,0(sp)
 80045c4:	1d400415 	stw	r21,16(r3)
 80045c8:	d9000017 	ldw	r4,0(sp)
 80045cc:	d9400117 	ldw	r5,4(sp)
 80045d0:	80085200 	call	8008520 <__mcmp>
 80045d4:	10002816 	blt	r2,zero,8004678 <quorem+0x1ec>
 80045d8:	d8c00217 	ldw	r3,8(sp)
 80045dc:	84000044 	addi	r16,r16,1
 80045e0:	880d883a 	mov	r6,r17
 80045e4:	000f883a 	mov	r7,zero
 80045e8:	32800017 	ldw	r10,0(r6)
 80045ec:	1a400017 	ldw	r9,0(r3)
 80045f0:	31800104 	addi	r6,r6,4
 80045f4:	523fffcc 	andi	r8,r10,65535
 80045f8:	48bfffcc 	andi	r2,r9,65535
 80045fc:	41cf883a 	add	r7,r8,r7
 8004600:	3891c83a 	sub	r8,r7,r2
 8004604:	4812d43a 	srli	r9,r9,16
 8004608:	500ed43a 	srli	r7,r10,16
 800460c:	4005d43a 	srai	r2,r8,16
 8004610:	423fffcc 	andi	r8,r8,65535
 8004614:	3a4fc83a 	sub	r7,r7,r9
 8004618:	388f883a 	add	r7,r7,r2
 800461c:	3804943a 	slli	r2,r7,16
 8004620:	18c00104 	addi	r3,r3,4
 8004624:	380fd43a 	srai	r7,r7,16
 8004628:	1210b03a 	or	r8,r2,r8
 800462c:	323fff15 	stw	r8,-4(r6)
 8004630:	b8ffed2e 	bgeu	r23,r3,80045e8 <__alt_data_end+0xf80045e8>
 8004634:	ad45883a 	add	r2,r21,r21
 8004638:	1085883a 	add	r2,r2,r2
 800463c:	8887883a 	add	r3,r17,r2
 8004640:	18800017 	ldw	r2,0(r3)
 8004644:	10000c1e 	bne	r2,zero,8004678 <quorem+0x1ec>
 8004648:	18bfff04 	addi	r2,r3,-4
 800464c:	8880082e 	bgeu	r17,r2,8004670 <quorem+0x1e4>
 8004650:	18ffff17 	ldw	r3,-4(r3)
 8004654:	18000326 	beq	r3,zero,8004664 <quorem+0x1d8>
 8004658:	00000506 	br	8004670 <quorem+0x1e4>
 800465c:	10c00017 	ldw	r3,0(r2)
 8004660:	1800031e 	bne	r3,zero,8004670 <quorem+0x1e4>
 8004664:	10bfff04 	addi	r2,r2,-4
 8004668:	ad7fffc4 	addi	r21,r21,-1
 800466c:	88bffb36 	bltu	r17,r2,800465c <__alt_data_end+0xf800465c>
 8004670:	d8c00017 	ldw	r3,0(sp)
 8004674:	1d400415 	stw	r21,16(r3)
 8004678:	8005883a 	mov	r2,r16
 800467c:	dfc00d17 	ldw	ra,52(sp)
 8004680:	df000c17 	ldw	fp,48(sp)
 8004684:	ddc00b17 	ldw	r23,44(sp)
 8004688:	dd800a17 	ldw	r22,40(sp)
 800468c:	dd400917 	ldw	r21,36(sp)
 8004690:	dd000817 	ldw	r20,32(sp)
 8004694:	dcc00717 	ldw	r19,28(sp)
 8004698:	dc800617 	ldw	r18,24(sp)
 800469c:	dc400517 	ldw	r17,20(sp)
 80046a0:	dc000417 	ldw	r16,16(sp)
 80046a4:	dec00e04 	addi	sp,sp,56
 80046a8:	f800283a 	ret
 80046ac:	0005883a 	mov	r2,zero
 80046b0:	003ff206 	br	800467c <__alt_data_end+0xf800467c>

080046b4 <_dtoa_r>:
 80046b4:	20801017 	ldw	r2,64(r4)
 80046b8:	deffdf04 	addi	sp,sp,-132
 80046bc:	dcc01a15 	stw	r19,104(sp)
 80046c0:	dc801915 	stw	r18,100(sp)
 80046c4:	dc401815 	stw	r17,96(sp)
 80046c8:	dc001715 	stw	r16,92(sp)
 80046cc:	dfc02015 	stw	ra,128(sp)
 80046d0:	df001f15 	stw	fp,124(sp)
 80046d4:	ddc01e15 	stw	r23,120(sp)
 80046d8:	dd801d15 	stw	r22,116(sp)
 80046dc:	dd401c15 	stw	r21,112(sp)
 80046e0:	dd001b15 	stw	r20,108(sp)
 80046e4:	d9400315 	stw	r5,12(sp)
 80046e8:	d9c00415 	stw	r7,16(sp)
 80046ec:	2021883a 	mov	r16,r4
 80046f0:	3023883a 	mov	r17,r6
 80046f4:	dcc02317 	ldw	r19,140(sp)
 80046f8:	3025883a 	mov	r18,r6
 80046fc:	10000826 	beq	r2,zero,8004720 <_dtoa_r+0x6c>
 8004700:	20c01117 	ldw	r3,68(r4)
 8004704:	01800044 	movi	r6,1
 8004708:	100b883a 	mov	r5,r2
 800470c:	30cc983a 	sll	r6,r6,r3
 8004710:	10c00115 	stw	r3,4(r2)
 8004714:	11800215 	stw	r6,8(r2)
 8004718:	8007c580 	call	8007c58 <_Bfree>
 800471c:	80001015 	stw	zero,64(r16)
 8004720:	88002e16 	blt	r17,zero,80047dc <_dtoa_r+0x128>
 8004724:	98000015 	stw	zero,0(r19)
 8004728:	88dffc2c 	andhi	r3,r17,32752
 800472c:	009ffc34 	movhi	r2,32752
 8004730:	18801b26 	beq	r3,r2,80047a0 <_dtoa_r+0xec>
 8004734:	d9000317 	ldw	r4,12(sp)
 8004738:	900b883a 	mov	r5,r18
 800473c:	000d883a 	mov	r6,zero
 8004740:	000f883a 	mov	r7,zero
 8004744:	800d3640 	call	800d364 <__eqdf2>
 8004748:	10002b1e 	bne	r2,zero,80047f8 <_dtoa_r+0x144>
 800474c:	d8c02217 	ldw	r3,136(sp)
 8004750:	d9002417 	ldw	r4,144(sp)
 8004754:	00800044 	movi	r2,1
 8004758:	18800015 	stw	r2,0(r3)
 800475c:	2001a026 	beq	r4,zero,8004de0 <_dtoa_r+0x72c>
 8004760:	00820074 	movhi	r2,2049
 8004764:	10862044 	addi	r2,r2,6273
 8004768:	20800015 	stw	r2,0(r4)
 800476c:	10bfffc4 	addi	r2,r2,-1
 8004770:	dfc02017 	ldw	ra,128(sp)
 8004774:	df001f17 	ldw	fp,124(sp)
 8004778:	ddc01e17 	ldw	r23,120(sp)
 800477c:	dd801d17 	ldw	r22,116(sp)
 8004780:	dd401c17 	ldw	r21,112(sp)
 8004784:	dd001b17 	ldw	r20,108(sp)
 8004788:	dcc01a17 	ldw	r19,104(sp)
 800478c:	dc801917 	ldw	r18,100(sp)
 8004790:	dc401817 	ldw	r17,96(sp)
 8004794:	dc001717 	ldw	r16,92(sp)
 8004798:	dec02104 	addi	sp,sp,132
 800479c:	f800283a 	ret
 80047a0:	d8c02217 	ldw	r3,136(sp)
 80047a4:	d9000317 	ldw	r4,12(sp)
 80047a8:	0089c3c4 	movi	r2,9999
 80047ac:	18800015 	stw	r2,0(r3)
 80047b0:	20017926 	beq	r4,zero,8004d98 <_dtoa_r+0x6e4>
 80047b4:	00820074 	movhi	r2,2049
 80047b8:	10862c04 	addi	r2,r2,6320
 80047bc:	d9802417 	ldw	r6,144(sp)
 80047c0:	303feb26 	beq	r6,zero,8004770 <__alt_data_end+0xf8004770>
 80047c4:	10c000c7 	ldb	r3,3(r2)
 80047c8:	18017a1e 	bne	r3,zero,8004db4 <_dtoa_r+0x700>
 80047cc:	10c000c4 	addi	r3,r2,3
 80047d0:	d9c02417 	ldw	r7,144(sp)
 80047d4:	38c00015 	stw	r3,0(r7)
 80047d8:	003fe506 	br	8004770 <__alt_data_end+0xf8004770>
 80047dc:	04a00034 	movhi	r18,32768
 80047e0:	94bfffc4 	addi	r18,r18,-1
 80047e4:	8ca4703a 	and	r18,r17,r18
 80047e8:	00800044 	movi	r2,1
 80047ec:	98800015 	stw	r2,0(r19)
 80047f0:	9023883a 	mov	r17,r18
 80047f4:	003fcc06 	br	8004728 <__alt_data_end+0xf8004728>
 80047f8:	d9400317 	ldw	r5,12(sp)
 80047fc:	d8800204 	addi	r2,sp,8
 8004800:	8828d53a 	srli	r20,r17,20
 8004804:	d8800015 	stw	r2,0(sp)
 8004808:	8009883a 	mov	r4,r16
 800480c:	900d883a 	mov	r6,r18
 8004810:	d9c00104 	addi	r7,sp,4
 8004814:	80088800 	call	8008880 <__d2b>
 8004818:	1039883a 	mov	fp,r2
 800481c:	a001671e 	bne	r20,zero,8004dbc <_dtoa_r+0x708>
 8004820:	dd400217 	ldw	r21,8(sp)
 8004824:	dd000117 	ldw	r20,4(sp)
 8004828:	00befbc4 	movi	r2,-1041
 800482c:	ad29883a 	add	r20,r21,r20
 8004830:	a082d616 	blt	r20,r2,800538c <_dtoa_r+0xcd8>
 8004834:	d9800317 	ldw	r6,12(sp)
 8004838:	013f0384 	movi	r4,-1010
 800483c:	2509c83a 	sub	r4,r4,r20
 8004840:	a0810484 	addi	r2,r20,1042
 8004844:	8922983a 	sll	r17,r17,r4
 8004848:	3084d83a 	srl	r2,r6,r2
 800484c:	8888b03a 	or	r4,r17,r2
 8004850:	800e7840 	call	800e784 <__floatunsidf>
 8004854:	1009883a 	mov	r4,r2
 8004858:	017f8434 	movhi	r5,65040
 800485c:	00800044 	movi	r2,1
 8004860:	194b883a 	add	r5,r3,r5
 8004864:	a53fffc4 	addi	r20,r20,-1
 8004868:	d8800f15 	stw	r2,60(sp)
 800486c:	000d883a 	mov	r6,zero
 8004870:	01cffe34 	movhi	r7,16376
 8004874:	800ddac0 	call	800ddac <__subdf3>
 8004878:	1009883a 	mov	r4,r2
 800487c:	180b883a 	mov	r5,r3
 8004880:	0198dbf4 	movhi	r6,25455
 8004884:	3190d844 	addi	r6,r6,17249
 8004888:	01cff4f4 	movhi	r7,16339
 800488c:	39e1e9c4 	addi	r7,r7,-30809
 8004890:	800d5ac0 	call	800d5ac <__muldf3>
 8004894:	180b883a 	mov	r5,r3
 8004898:	01a2d874 	movhi	r6,35681
 800489c:	31b22cc4 	addi	r6,r6,-14157
 80048a0:	01cff1f4 	movhi	r7,16327
 80048a4:	39e28a04 	addi	r7,r7,-30168
 80048a8:	1009883a 	mov	r4,r2
 80048ac:	800c14c0 	call	800c14c <__adddf3>
 80048b0:	a009883a 	mov	r4,r20
 80048b4:	1027883a 	mov	r19,r2
 80048b8:	1823883a 	mov	r17,r3
 80048bc:	800e6b40 	call	800e6b4 <__floatsidf>
 80048c0:	1009883a 	mov	r4,r2
 80048c4:	180b883a 	mov	r5,r3
 80048c8:	019427f4 	movhi	r6,20639
 80048cc:	319e7ec4 	addi	r6,r6,31227
 80048d0:	01cff4f4 	movhi	r7,16339
 80048d4:	39d104c4 	addi	r7,r7,17427
 80048d8:	800d5ac0 	call	800d5ac <__muldf3>
 80048dc:	9809883a 	mov	r4,r19
 80048e0:	880b883a 	mov	r5,r17
 80048e4:	100d883a 	mov	r6,r2
 80048e8:	180f883a 	mov	r7,r3
 80048ec:	800c14c0 	call	800c14c <__adddf3>
 80048f0:	1009883a 	mov	r4,r2
 80048f4:	180b883a 	mov	r5,r3
 80048f8:	1027883a 	mov	r19,r2
 80048fc:	1823883a 	mov	r17,r3
 8004900:	800e6340 	call	800e634 <__fixdfsi>
 8004904:	9809883a 	mov	r4,r19
 8004908:	880b883a 	mov	r5,r17
 800490c:	000d883a 	mov	r6,zero
 8004910:	000f883a 	mov	r7,zero
 8004914:	d8800615 	stw	r2,24(sp)
 8004918:	800d4c00 	call	800d4c0 <__ledf2>
 800491c:	10028416 	blt	r2,zero,8005330 <_dtoa_r+0xc7c>
 8004920:	d9000617 	ldw	r4,24(sp)
 8004924:	00800584 	movi	r2,22
 8004928:	11027236 	bltu	r2,r4,80052f4 <_dtoa_r+0xc40>
 800492c:	200490fa 	slli	r2,r4,3
 8004930:	00c20074 	movhi	r3,2049
 8004934:	18c64804 	addi	r3,r3,6432
 8004938:	d9800317 	ldw	r6,12(sp)
 800493c:	1885883a 	add	r2,r3,r2
 8004940:	11000017 	ldw	r4,0(r2)
 8004944:	11400117 	ldw	r5,4(r2)
 8004948:	900f883a 	mov	r7,r18
 800494c:	800d3e80 	call	800d3e8 <__gedf2>
 8004950:	0082930e 	bge	zero,r2,80053a0 <_dtoa_r+0xcec>
 8004954:	d9800617 	ldw	r6,24(sp)
 8004958:	d8000e15 	stw	zero,56(sp)
 800495c:	31bfffc4 	addi	r6,r6,-1
 8004960:	d9800615 	stw	r6,24(sp)
 8004964:	ad2bc83a 	sub	r21,r21,r20
 8004968:	ad7fffc4 	addi	r21,r21,-1
 800496c:	a8026c16 	blt	r21,zero,8005320 <_dtoa_r+0xc6c>
 8004970:	d8000815 	stw	zero,32(sp)
 8004974:	d8800617 	ldw	r2,24(sp)
 8004978:	10026116 	blt	r2,zero,8005300 <_dtoa_r+0xc4c>
 800497c:	a8ab883a 	add	r21,r21,r2
 8004980:	d8800b15 	stw	r2,44(sp)
 8004984:	d8000a15 	stw	zero,40(sp)
 8004988:	d9c00417 	ldw	r7,16(sp)
 800498c:	00800244 	movi	r2,9
 8004990:	11c11636 	bltu	r2,r7,8004dec <_dtoa_r+0x738>
 8004994:	00800144 	movi	r2,5
 8004998:	11c4cc0e 	bge	r2,r7,8005ccc <_dtoa_r+0x1618>
 800499c:	39ffff04 	addi	r7,r7,-4
 80049a0:	d9c00415 	stw	r7,16(sp)
 80049a4:	0027883a 	mov	r19,zero
 80049a8:	d8c00417 	ldw	r3,16(sp)
 80049ac:	008000c4 	movi	r2,3
 80049b0:	1883aa26 	beq	r3,r2,800585c <_dtoa_r+0x11a8>
 80049b4:	10c35b0e 	bge	r2,r3,8005724 <_dtoa_r+0x1070>
 80049b8:	d9000417 	ldw	r4,16(sp)
 80049bc:	00800104 	movi	r2,4
 80049c0:	2082da26 	beq	r4,r2,800552c <_dtoa_r+0xe78>
 80049c4:	00800144 	movi	r2,5
 80049c8:	2081091e 	bne	r4,r2,8004df0 <_dtoa_r+0x73c>
 80049cc:	01c00044 	movi	r7,1
 80049d0:	d9c00c15 	stw	r7,48(sp)
 80049d4:	d8c02117 	ldw	r3,132(sp)
 80049d8:	d9000617 	ldw	r4,24(sp)
 80049dc:	1907883a 	add	r3,r3,r4
 80049e0:	19800044 	addi	r6,r3,1
 80049e4:	d8c00d15 	stw	r3,52(sp)
 80049e8:	d9800915 	stw	r6,36(sp)
 80049ec:	0183a90e 	bge	zero,r6,8005894 <_dtoa_r+0x11e0>
 80049f0:	d9800917 	ldw	r6,36(sp)
 80049f4:	80001115 	stw	zero,68(r16)
 80049f8:	008005c4 	movi	r2,23
 80049fc:	1184b52e 	bgeu	r2,r6,8005cd4 <_dtoa_r+0x1620>
 8004a00:	00c00044 	movi	r3,1
 8004a04:	00800104 	movi	r2,4
 8004a08:	1085883a 	add	r2,r2,r2
 8004a0c:	11000504 	addi	r4,r2,20
 8004a10:	180b883a 	mov	r5,r3
 8004a14:	18c00044 	addi	r3,r3,1
 8004a18:	313ffb2e 	bgeu	r6,r4,8004a08 <__alt_data_end+0xf8004a08>
 8004a1c:	81401115 	stw	r5,68(r16)
 8004a20:	3023883a 	mov	r17,r6
 8004a24:	8009883a 	mov	r4,r16
 8004a28:	8007bb00 	call	8007bb0 <_Balloc>
 8004a2c:	d8800715 	stw	r2,28(sp)
 8004a30:	80801015 	stw	r2,64(r16)
 8004a34:	00800384 	movi	r2,14
 8004a38:	1440f936 	bltu	r2,r17,8004e20 <_dtoa_r+0x76c>
 8004a3c:	9800f826 	beq	r19,zero,8004e20 <_dtoa_r+0x76c>
 8004a40:	d9c00617 	ldw	r7,24(sp)
 8004a44:	01c39c0e 	bge	zero,r7,80058b8 <_dtoa_r+0x1204>
 8004a48:	388003cc 	andi	r2,r7,15
 8004a4c:	100490fa 	slli	r2,r2,3
 8004a50:	382dd13a 	srai	r22,r7,4
 8004a54:	00c20074 	movhi	r3,2049
 8004a58:	18c64804 	addi	r3,r3,6432
 8004a5c:	1885883a 	add	r2,r3,r2
 8004a60:	b0c0040c 	andi	r3,r22,16
 8004a64:	12800017 	ldw	r10,0(r2)
 8004a68:	12400117 	ldw	r9,4(r2)
 8004a6c:	18038526 	beq	r3,zero,8005884 <_dtoa_r+0x11d0>
 8004a70:	00820074 	movhi	r2,2049
 8004a74:	10863e04 	addi	r2,r2,6392
 8004a78:	11800817 	ldw	r6,32(r2)
 8004a7c:	11c00917 	ldw	r7,36(r2)
 8004a80:	d9000317 	ldw	r4,12(sp)
 8004a84:	900b883a 	mov	r5,r18
 8004a88:	da401515 	stw	r9,84(sp)
 8004a8c:	da801615 	stw	r10,88(sp)
 8004a90:	800c9c80 	call	800c9c8 <__divdf3>
 8004a94:	da401517 	ldw	r9,84(sp)
 8004a98:	da801617 	ldw	r10,88(sp)
 8004a9c:	1027883a 	mov	r19,r2
 8004aa0:	1829883a 	mov	r20,r3
 8004aa4:	b58003cc 	andi	r22,r22,15
 8004aa8:	044000c4 	movi	r17,3
 8004aac:	b0001126 	beq	r22,zero,8004af4 <_dtoa_r+0x440>
 8004ab0:	05c20074 	movhi	r23,2049
 8004ab4:	bdc63e04 	addi	r23,r23,6392
 8004ab8:	5005883a 	mov	r2,r10
 8004abc:	4807883a 	mov	r3,r9
 8004ac0:	b180004c 	andi	r6,r22,1
 8004ac4:	1009883a 	mov	r4,r2
 8004ac8:	b02dd07a 	srai	r22,r22,1
 8004acc:	180b883a 	mov	r5,r3
 8004ad0:	30000426 	beq	r6,zero,8004ae4 <_dtoa_r+0x430>
 8004ad4:	b9800017 	ldw	r6,0(r23)
 8004ad8:	b9c00117 	ldw	r7,4(r23)
 8004adc:	8c400044 	addi	r17,r17,1
 8004ae0:	800d5ac0 	call	800d5ac <__muldf3>
 8004ae4:	bdc00204 	addi	r23,r23,8
 8004ae8:	b03ff51e 	bne	r22,zero,8004ac0 <__alt_data_end+0xf8004ac0>
 8004aec:	1015883a 	mov	r10,r2
 8004af0:	1813883a 	mov	r9,r3
 8004af4:	9809883a 	mov	r4,r19
 8004af8:	a00b883a 	mov	r5,r20
 8004afc:	500d883a 	mov	r6,r10
 8004b00:	480f883a 	mov	r7,r9
 8004b04:	800c9c80 	call	800c9c8 <__divdf3>
 8004b08:	1027883a 	mov	r19,r2
 8004b0c:	1829883a 	mov	r20,r3
 8004b10:	d8c00e17 	ldw	r3,56(sp)
 8004b14:	18000626 	beq	r3,zero,8004b30 <_dtoa_r+0x47c>
 8004b18:	9809883a 	mov	r4,r19
 8004b1c:	a00b883a 	mov	r5,r20
 8004b20:	000d883a 	mov	r6,zero
 8004b24:	01cffc34 	movhi	r7,16368
 8004b28:	800d4c00 	call	800d4c0 <__ledf2>
 8004b2c:	10041516 	blt	r2,zero,8005b84 <_dtoa_r+0x14d0>
 8004b30:	8809883a 	mov	r4,r17
 8004b34:	800e6b40 	call	800e6b4 <__floatsidf>
 8004b38:	1009883a 	mov	r4,r2
 8004b3c:	180b883a 	mov	r5,r3
 8004b40:	980d883a 	mov	r6,r19
 8004b44:	a00f883a 	mov	r7,r20
 8004b48:	800d5ac0 	call	800d5ac <__muldf3>
 8004b4c:	1009883a 	mov	r4,r2
 8004b50:	180b883a 	mov	r5,r3
 8004b54:	000d883a 	mov	r6,zero
 8004b58:	01d00734 	movhi	r7,16412
 8004b5c:	800c14c0 	call	800c14c <__adddf3>
 8004b60:	1023883a 	mov	r17,r2
 8004b64:	d8800917 	ldw	r2,36(sp)
 8004b68:	05bf3034 	movhi	r22,64704
 8004b6c:	1daf883a 	add	r23,r3,r22
 8004b70:	10031e26 	beq	r2,zero,80057ec <_dtoa_r+0x1138>
 8004b74:	d8c00617 	ldw	r3,24(sp)
 8004b78:	dac00917 	ldw	r11,36(sp)
 8004b7c:	d8c01315 	stw	r3,76(sp)
 8004b80:	d9000c17 	ldw	r4,48(sp)
 8004b84:	20039626 	beq	r4,zero,80059e0 <_dtoa_r+0x132c>
 8004b88:	58bfffc4 	addi	r2,r11,-1
 8004b8c:	100490fa 	slli	r2,r2,3
 8004b90:	00c20074 	movhi	r3,2049
 8004b94:	18c64804 	addi	r3,r3,6432
 8004b98:	0009883a 	mov	r4,zero
 8004b9c:	1885883a 	add	r2,r3,r2
 8004ba0:	11800017 	ldw	r6,0(r2)
 8004ba4:	11c00117 	ldw	r7,4(r2)
 8004ba8:	d8800717 	ldw	r2,28(sp)
 8004bac:	014ff834 	movhi	r5,16352
 8004bb0:	dac01615 	stw	r11,88(sp)
 8004bb4:	15800044 	addi	r22,r2,1
 8004bb8:	800c9c80 	call	800c9c8 <__divdf3>
 8004bbc:	880d883a 	mov	r6,r17
 8004bc0:	b80f883a 	mov	r7,r23
 8004bc4:	1009883a 	mov	r4,r2
 8004bc8:	180b883a 	mov	r5,r3
 8004bcc:	800ddac0 	call	800ddac <__subdf3>
 8004bd0:	a00b883a 	mov	r5,r20
 8004bd4:	9809883a 	mov	r4,r19
 8004bd8:	102f883a 	mov	r23,r2
 8004bdc:	d8c01015 	stw	r3,64(sp)
 8004be0:	800e6340 	call	800e634 <__fixdfsi>
 8004be4:	1009883a 	mov	r4,r2
 8004be8:	d8801515 	stw	r2,84(sp)
 8004bec:	800e6b40 	call	800e6b4 <__floatsidf>
 8004bf0:	9809883a 	mov	r4,r19
 8004bf4:	a00b883a 	mov	r5,r20
 8004bf8:	100d883a 	mov	r6,r2
 8004bfc:	180f883a 	mov	r7,r3
 8004c00:	800ddac0 	call	800ddac <__subdf3>
 8004c04:	da401517 	ldw	r9,84(sp)
 8004c08:	1827883a 	mov	r19,r3
 8004c0c:	d8c00717 	ldw	r3,28(sp)
 8004c10:	d9401017 	ldw	r5,64(sp)
 8004c14:	4a400c04 	addi	r9,r9,48
 8004c18:	1023883a 	mov	r17,r2
 8004c1c:	1a400005 	stb	r9,0(r3)
 8004c20:	b809883a 	mov	r4,r23
 8004c24:	880d883a 	mov	r6,r17
 8004c28:	980f883a 	mov	r7,r19
 8004c2c:	4829883a 	mov	r20,r9
 8004c30:	800d3e80 	call	800d3e8 <__gedf2>
 8004c34:	00842216 	blt	zero,r2,8005cc0 <_dtoa_r+0x160c>
 8004c38:	0009883a 	mov	r4,zero
 8004c3c:	014ffc34 	movhi	r5,16368
 8004c40:	880d883a 	mov	r6,r17
 8004c44:	980f883a 	mov	r7,r19
 8004c48:	800ddac0 	call	800ddac <__subdf3>
 8004c4c:	d9401017 	ldw	r5,64(sp)
 8004c50:	b809883a 	mov	r4,r23
 8004c54:	100d883a 	mov	r6,r2
 8004c58:	180f883a 	mov	r7,r3
 8004c5c:	800d3e80 	call	800d3e8 <__gedf2>
 8004c60:	dac01617 	ldw	r11,88(sp)
 8004c64:	00841316 	blt	zero,r2,8005cb4 <_dtoa_r+0x1600>
 8004c68:	00800044 	movi	r2,1
 8004c6c:	12c06c0e 	bge	r2,r11,8004e20 <_dtoa_r+0x76c>
 8004c70:	d9000717 	ldw	r4,28(sp)
 8004c74:	dd401215 	stw	r21,72(sp)
 8004c78:	dc001115 	stw	r16,68(sp)
 8004c7c:	22d7883a 	add	r11,r4,r11
 8004c80:	dc801415 	stw	r18,80(sp)
 8004c84:	582b883a 	mov	r21,r11
 8004c88:	b021883a 	mov	r16,r22
 8004c8c:	dc801017 	ldw	r18,64(sp)
 8004c90:	00000906 	br	8004cb8 <_dtoa_r+0x604>
 8004c94:	800ddac0 	call	800ddac <__subdf3>
 8004c98:	1009883a 	mov	r4,r2
 8004c9c:	180b883a 	mov	r5,r3
 8004ca0:	b80d883a 	mov	r6,r23
 8004ca4:	900f883a 	mov	r7,r18
 8004ca8:	800d4c00 	call	800d4c0 <__ledf2>
 8004cac:	1003ea16 	blt	r2,zero,8005c58 <_dtoa_r+0x15a4>
 8004cb0:	b543ed26 	beq	r22,r21,8005c68 <_dtoa_r+0x15b4>
 8004cb4:	b021883a 	mov	r16,r22
 8004cb8:	b809883a 	mov	r4,r23
 8004cbc:	900b883a 	mov	r5,r18
 8004cc0:	000d883a 	mov	r6,zero
 8004cc4:	01d00934 	movhi	r7,16420
 8004cc8:	800d5ac0 	call	800d5ac <__muldf3>
 8004ccc:	000d883a 	mov	r6,zero
 8004cd0:	01d00934 	movhi	r7,16420
 8004cd4:	8809883a 	mov	r4,r17
 8004cd8:	980b883a 	mov	r5,r19
 8004cdc:	102f883a 	mov	r23,r2
 8004ce0:	1825883a 	mov	r18,r3
 8004ce4:	800d5ac0 	call	800d5ac <__muldf3>
 8004ce8:	180b883a 	mov	r5,r3
 8004cec:	1009883a 	mov	r4,r2
 8004cf0:	1823883a 	mov	r17,r3
 8004cf4:	1027883a 	mov	r19,r2
 8004cf8:	800e6340 	call	800e634 <__fixdfsi>
 8004cfc:	1009883a 	mov	r4,r2
 8004d00:	1029883a 	mov	r20,r2
 8004d04:	800e6b40 	call	800e6b4 <__floatsidf>
 8004d08:	9809883a 	mov	r4,r19
 8004d0c:	880b883a 	mov	r5,r17
 8004d10:	100d883a 	mov	r6,r2
 8004d14:	180f883a 	mov	r7,r3
 8004d18:	800ddac0 	call	800ddac <__subdf3>
 8004d1c:	a5000c04 	addi	r20,r20,48
 8004d20:	1009883a 	mov	r4,r2
 8004d24:	180b883a 	mov	r5,r3
 8004d28:	b80d883a 	mov	r6,r23
 8004d2c:	900f883a 	mov	r7,r18
 8004d30:	85000005 	stb	r20,0(r16)
 8004d34:	1023883a 	mov	r17,r2
 8004d38:	1827883a 	mov	r19,r3
 8004d3c:	800d4c00 	call	800d4c0 <__ledf2>
 8004d40:	b5800044 	addi	r22,r22,1
 8004d44:	0009883a 	mov	r4,zero
 8004d48:	014ffc34 	movhi	r5,16368
 8004d4c:	880d883a 	mov	r6,r17
 8004d50:	980f883a 	mov	r7,r19
 8004d54:	103fcf0e 	bge	r2,zero,8004c94 <__alt_data_end+0xf8004c94>
 8004d58:	d8c01317 	ldw	r3,76(sp)
 8004d5c:	dc001117 	ldw	r16,68(sp)
 8004d60:	d8c00615 	stw	r3,24(sp)
 8004d64:	8009883a 	mov	r4,r16
 8004d68:	e00b883a 	mov	r5,fp
 8004d6c:	8007c580 	call	8007c58 <_Bfree>
 8004d70:	d9800617 	ldw	r6,24(sp)
 8004d74:	d9c02217 	ldw	r7,136(sp)
 8004d78:	b0000005 	stb	zero,0(r22)
 8004d7c:	30800044 	addi	r2,r6,1
 8004d80:	38800015 	stw	r2,0(r7)
 8004d84:	d8802417 	ldw	r2,144(sp)
 8004d88:	10026426 	beq	r2,zero,800571c <_dtoa_r+0x1068>
 8004d8c:	15800015 	stw	r22,0(r2)
 8004d90:	d8800717 	ldw	r2,28(sp)
 8004d94:	003e7606 	br	8004770 <__alt_data_end+0xf8004770>
 8004d98:	00800434 	movhi	r2,16
 8004d9c:	10bfffc4 	addi	r2,r2,-1
 8004da0:	88a2703a 	and	r17,r17,r2
 8004da4:	883e831e 	bne	r17,zero,80047b4 <__alt_data_end+0xf80047b4>
 8004da8:	00820074 	movhi	r2,2049
 8004dac:	10862904 	addi	r2,r2,6308
 8004db0:	003e8206 	br	80047bc <__alt_data_end+0xf80047bc>
 8004db4:	10c00204 	addi	r3,r2,8
 8004db8:	003e8506 	br	80047d0 <__alt_data_end+0xf80047d0>
 8004dbc:	01400434 	movhi	r5,16
 8004dc0:	297fffc4 	addi	r5,r5,-1
 8004dc4:	914a703a 	and	r5,r18,r5
 8004dc8:	d9000317 	ldw	r4,12(sp)
 8004dcc:	294ffc34 	orhi	r5,r5,16368
 8004dd0:	a53f0044 	addi	r20,r20,-1023
 8004dd4:	dd400217 	ldw	r21,8(sp)
 8004dd8:	d8000f15 	stw	zero,60(sp)
 8004ddc:	003ea306 	br	800486c <__alt_data_end+0xf800486c>
 8004de0:	00820074 	movhi	r2,2049
 8004de4:	10862004 	addi	r2,r2,6272
 8004de8:	003e6106 	br	8004770 <__alt_data_end+0xf8004770>
 8004dec:	d8000415 	stw	zero,16(sp)
 8004df0:	8009883a 	mov	r4,r16
 8004df4:	80001115 	stw	zero,68(r16)
 8004df8:	000b883a 	mov	r5,zero
 8004dfc:	8007bb00 	call	8007bb0 <_Balloc>
 8004e00:	00ffffc4 	movi	r3,-1
 8004e04:	01000044 	movi	r4,1
 8004e08:	d8800715 	stw	r2,28(sp)
 8004e0c:	d8c00d15 	stw	r3,52(sp)
 8004e10:	80801015 	stw	r2,64(r16)
 8004e14:	d8002115 	stw	zero,132(sp)
 8004e18:	d8c00915 	stw	r3,36(sp)
 8004e1c:	d9000c15 	stw	r4,48(sp)
 8004e20:	d8800117 	ldw	r2,4(sp)
 8004e24:	10008e16 	blt	r2,zero,8005060 <_dtoa_r+0x9ac>
 8004e28:	d9000617 	ldw	r4,24(sp)
 8004e2c:	00c00384 	movi	r3,14
 8004e30:	19008b16 	blt	r3,r4,8005060 <_dtoa_r+0x9ac>
 8004e34:	200490fa 	slli	r2,r4,3
 8004e38:	d9802117 	ldw	r6,132(sp)
 8004e3c:	00c20074 	movhi	r3,2049
 8004e40:	18c64804 	addi	r3,r3,6432
 8004e44:	1885883a 	add	r2,r3,r2
 8004e48:	14400017 	ldw	r17,0(r2)
 8004e4c:	14c00117 	ldw	r19,4(r2)
 8004e50:	3001be16 	blt	r6,zero,800554c <_dtoa_r+0xe98>
 8004e54:	d9000317 	ldw	r4,12(sp)
 8004e58:	880d883a 	mov	r6,r17
 8004e5c:	980f883a 	mov	r7,r19
 8004e60:	900b883a 	mov	r5,r18
 8004e64:	800c9c80 	call	800c9c8 <__divdf3>
 8004e68:	180b883a 	mov	r5,r3
 8004e6c:	1009883a 	mov	r4,r2
 8004e70:	800e6340 	call	800e634 <__fixdfsi>
 8004e74:	1009883a 	mov	r4,r2
 8004e78:	102f883a 	mov	r23,r2
 8004e7c:	800e6b40 	call	800e6b4 <__floatsidf>
 8004e80:	1009883a 	mov	r4,r2
 8004e84:	180b883a 	mov	r5,r3
 8004e88:	880d883a 	mov	r6,r17
 8004e8c:	980f883a 	mov	r7,r19
 8004e90:	800d5ac0 	call	800d5ac <__muldf3>
 8004e94:	d9000317 	ldw	r4,12(sp)
 8004e98:	900b883a 	mov	r5,r18
 8004e9c:	100d883a 	mov	r6,r2
 8004ea0:	180f883a 	mov	r7,r3
 8004ea4:	800ddac0 	call	800ddac <__subdf3>
 8004ea8:	d9c00717 	ldw	r7,28(sp)
 8004eac:	1009883a 	mov	r4,r2
 8004eb0:	b8800c04 	addi	r2,r23,48
 8004eb4:	38800005 	stb	r2,0(r7)
 8004eb8:	3d800044 	addi	r22,r7,1
 8004ebc:	d9c00917 	ldw	r7,36(sp)
 8004ec0:	01800044 	movi	r6,1
 8004ec4:	180b883a 	mov	r5,r3
 8004ec8:	2005883a 	mov	r2,r4
 8004ecc:	39803e26 	beq	r7,r6,8004fc8 <_dtoa_r+0x914>
 8004ed0:	000d883a 	mov	r6,zero
 8004ed4:	01d00934 	movhi	r7,16420
 8004ed8:	800d5ac0 	call	800d5ac <__muldf3>
 8004edc:	1009883a 	mov	r4,r2
 8004ee0:	180b883a 	mov	r5,r3
 8004ee4:	000d883a 	mov	r6,zero
 8004ee8:	000f883a 	mov	r7,zero
 8004eec:	1029883a 	mov	r20,r2
 8004ef0:	182b883a 	mov	r21,r3
 8004ef4:	800d3640 	call	800d364 <__eqdf2>
 8004ef8:	103f9a26 	beq	r2,zero,8004d64 <__alt_data_end+0xf8004d64>
 8004efc:	d8c00717 	ldw	r3,28(sp)
 8004f00:	d9000917 	ldw	r4,36(sp)
 8004f04:	b025883a 	mov	r18,r22
 8004f08:	df000415 	stw	fp,16(sp)
 8004f0c:	1905883a 	add	r2,r3,r4
 8004f10:	15ffffc4 	addi	r23,r2,-1
 8004f14:	dc000315 	stw	r16,12(sp)
 8004f18:	00000a06 	br	8004f44 <_dtoa_r+0x890>
 8004f1c:	800d5ac0 	call	800d5ac <__muldf3>
 8004f20:	1009883a 	mov	r4,r2
 8004f24:	180b883a 	mov	r5,r3
 8004f28:	000d883a 	mov	r6,zero
 8004f2c:	000f883a 	mov	r7,zero
 8004f30:	1029883a 	mov	r20,r2
 8004f34:	182b883a 	mov	r21,r3
 8004f38:	800d3640 	call	800d364 <__eqdf2>
 8004f3c:	10021926 	beq	r2,zero,80057a4 <_dtoa_r+0x10f0>
 8004f40:	e025883a 	mov	r18,fp
 8004f44:	880d883a 	mov	r6,r17
 8004f48:	980f883a 	mov	r7,r19
 8004f4c:	a009883a 	mov	r4,r20
 8004f50:	a80b883a 	mov	r5,r21
 8004f54:	800c9c80 	call	800c9c8 <__divdf3>
 8004f58:	180b883a 	mov	r5,r3
 8004f5c:	1009883a 	mov	r4,r2
 8004f60:	800e6340 	call	800e634 <__fixdfsi>
 8004f64:	1009883a 	mov	r4,r2
 8004f68:	1021883a 	mov	r16,r2
 8004f6c:	800e6b40 	call	800e6b4 <__floatsidf>
 8004f70:	1009883a 	mov	r4,r2
 8004f74:	180b883a 	mov	r5,r3
 8004f78:	880d883a 	mov	r6,r17
 8004f7c:	980f883a 	mov	r7,r19
 8004f80:	800d5ac0 	call	800d5ac <__muldf3>
 8004f84:	a009883a 	mov	r4,r20
 8004f88:	a80b883a 	mov	r5,r21
 8004f8c:	100d883a 	mov	r6,r2
 8004f90:	180f883a 	mov	r7,r3
 8004f94:	800ddac0 	call	800ddac <__subdf3>
 8004f98:	82800c04 	addi	r10,r16,48
 8004f9c:	97000044 	addi	fp,r18,1
 8004fa0:	92800005 	stb	r10,0(r18)
 8004fa4:	000d883a 	mov	r6,zero
 8004fa8:	01d00934 	movhi	r7,16420
 8004fac:	1009883a 	mov	r4,r2
 8004fb0:	180b883a 	mov	r5,r3
 8004fb4:	e02d883a 	mov	r22,fp
 8004fb8:	95ffd81e 	bne	r18,r23,8004f1c <__alt_data_end+0xf8004f1c>
 8004fbc:	802f883a 	mov	r23,r16
 8004fc0:	df000417 	ldw	fp,16(sp)
 8004fc4:	dc000317 	ldw	r16,12(sp)
 8004fc8:	1009883a 	mov	r4,r2
 8004fcc:	180b883a 	mov	r5,r3
 8004fd0:	100d883a 	mov	r6,r2
 8004fd4:	180f883a 	mov	r7,r3
 8004fd8:	800c14c0 	call	800c14c <__adddf3>
 8004fdc:	8809883a 	mov	r4,r17
 8004fe0:	980b883a 	mov	r5,r19
 8004fe4:	100d883a 	mov	r6,r2
 8004fe8:	180f883a 	mov	r7,r3
 8004fec:	1025883a 	mov	r18,r2
 8004ff0:	1829883a 	mov	r20,r3
 8004ff4:	800d4c00 	call	800d4c0 <__ledf2>
 8004ff8:	10000816 	blt	r2,zero,800501c <_dtoa_r+0x968>
 8004ffc:	8809883a 	mov	r4,r17
 8005000:	980b883a 	mov	r5,r19
 8005004:	900d883a 	mov	r6,r18
 8005008:	a00f883a 	mov	r7,r20
 800500c:	800d3640 	call	800d364 <__eqdf2>
 8005010:	103f541e 	bne	r2,zero,8004d64 <__alt_data_end+0xf8004d64>
 8005014:	bdc0004c 	andi	r23,r23,1
 8005018:	b83f5226 	beq	r23,zero,8004d64 <__alt_data_end+0xf8004d64>
 800501c:	b53fffc3 	ldbu	r20,-1(r22)
 8005020:	b0ffff84 	addi	r3,r22,-2
 8005024:	01400e44 	movi	r5,57
 8005028:	d9800717 	ldw	r6,28(sp)
 800502c:	00000406 	br	8005040 <_dtoa_r+0x98c>
 8005030:	30824326 	beq	r6,r2,8005940 <_dtoa_r+0x128c>
 8005034:	1d000003 	ldbu	r20,0(r3)
 8005038:	102d883a 	mov	r22,r2
 800503c:	18ffffc4 	addi	r3,r3,-1
 8005040:	a1003fcc 	andi	r4,r20,255
 8005044:	2100201c 	xori	r4,r4,128
 8005048:	213fe004 	addi	r4,r4,-128
 800504c:	b0bfffc4 	addi	r2,r22,-1
 8005050:	217ff726 	beq	r4,r5,8005030 <__alt_data_end+0xf8005030>
 8005054:	a2400044 	addi	r9,r20,1
 8005058:	12400005 	stb	r9,0(r2)
 800505c:	003f4106 	br	8004d64 <__alt_data_end+0xf8004d64>
 8005060:	d9000c17 	ldw	r4,48(sp)
 8005064:	2000be26 	beq	r4,zero,8005360 <_dtoa_r+0xcac>
 8005068:	d9800417 	ldw	r6,16(sp)
 800506c:	00c00044 	movi	r3,1
 8005070:	19815e0e 	bge	r3,r6,80055ec <_dtoa_r+0xf38>
 8005074:	d8800917 	ldw	r2,36(sp)
 8005078:	d8c00a17 	ldw	r3,40(sp)
 800507c:	153fffc4 	addi	r20,r2,-1
 8005080:	1d01f816 	blt	r3,r20,8005864 <_dtoa_r+0x11b0>
 8005084:	1d29c83a 	sub	r20,r3,r20
 8005088:	d9c00917 	ldw	r7,36(sp)
 800508c:	3802ad16 	blt	r7,zero,8005b44 <_dtoa_r+0x1490>
 8005090:	dcc00817 	ldw	r19,32(sp)
 8005094:	d8800917 	ldw	r2,36(sp)
 8005098:	d8c00817 	ldw	r3,32(sp)
 800509c:	8009883a 	mov	r4,r16
 80050a0:	01400044 	movi	r5,1
 80050a4:	1887883a 	add	r3,r3,r2
 80050a8:	d8c00815 	stw	r3,32(sp)
 80050ac:	a8ab883a 	add	r21,r21,r2
 80050b0:	8007fe00 	call	8007fe0 <__i2b>
 80050b4:	1023883a 	mov	r17,r2
 80050b8:	98000826 	beq	r19,zero,80050dc <_dtoa_r+0xa28>
 80050bc:	0540070e 	bge	zero,r21,80050dc <_dtoa_r+0xa28>
 80050c0:	a805883a 	mov	r2,r21
 80050c4:	9d411716 	blt	r19,r21,8005524 <_dtoa_r+0xe70>
 80050c8:	d9000817 	ldw	r4,32(sp)
 80050cc:	98a7c83a 	sub	r19,r19,r2
 80050d0:	a8abc83a 	sub	r21,r21,r2
 80050d4:	2089c83a 	sub	r4,r4,r2
 80050d8:	d9000815 	stw	r4,32(sp)
 80050dc:	d9800a17 	ldw	r6,40(sp)
 80050e0:	0180140e 	bge	zero,r6,8005134 <_dtoa_r+0xa80>
 80050e4:	d9c00c17 	ldw	r7,48(sp)
 80050e8:	3801d626 	beq	r7,zero,8005844 <_dtoa_r+0x1190>
 80050ec:	05000e0e 	bge	zero,r20,8005128 <_dtoa_r+0xa74>
 80050f0:	880b883a 	mov	r5,r17
 80050f4:	8009883a 	mov	r4,r16
 80050f8:	a00d883a 	mov	r6,r20
 80050fc:	80082880 	call	8008288 <__pow5mult>
 8005100:	e00d883a 	mov	r6,fp
 8005104:	8009883a 	mov	r4,r16
 8005108:	100b883a 	mov	r5,r2
 800510c:	1023883a 	mov	r17,r2
 8005110:	800801c0 	call	800801c <__multiply>
 8005114:	102d883a 	mov	r22,r2
 8005118:	e00b883a 	mov	r5,fp
 800511c:	8009883a 	mov	r4,r16
 8005120:	8007c580 	call	8007c58 <_Bfree>
 8005124:	b039883a 	mov	fp,r22
 8005128:	d8800a17 	ldw	r2,40(sp)
 800512c:	150dc83a 	sub	r6,r2,r20
 8005130:	30011f1e 	bne	r6,zero,80055b0 <_dtoa_r+0xefc>
 8005134:	8009883a 	mov	r4,r16
 8005138:	01400044 	movi	r5,1
 800513c:	8007fe00 	call	8007fe0 <__i2b>
 8005140:	d8c00b17 	ldw	r3,44(sp)
 8005144:	1029883a 	mov	r20,r2
 8005148:	00c0050e 	bge	zero,r3,8005160 <_dtoa_r+0xaac>
 800514c:	8009883a 	mov	r4,r16
 8005150:	100b883a 	mov	r5,r2
 8005154:	180d883a 	mov	r6,r3
 8005158:	80082880 	call	8008288 <__pow5mult>
 800515c:	1029883a 	mov	r20,r2
 8005160:	d9000417 	ldw	r4,16(sp)
 8005164:	00800044 	movi	r2,1
 8005168:	1100e00e 	bge	r2,r4,80054ec <_dtoa_r+0xe38>
 800516c:	0025883a 	mov	r18,zero
 8005170:	d8800b17 	ldw	r2,44(sp)
 8005174:	10015f1e 	bne	r2,zero,80056f4 <_dtoa_r+0x1040>
 8005178:	00800044 	movi	r2,1
 800517c:	1545883a 	add	r2,r2,r21
 8005180:	108007cc 	andi	r2,r2,31
 8005184:	10007a26 	beq	r2,zero,8005370 <_dtoa_r+0xcbc>
 8005188:	01000804 	movi	r4,32
 800518c:	2089c83a 	sub	r4,r4,r2
 8005190:	00c00104 	movi	r3,4
 8005194:	1902d20e 	bge	r3,r4,8005ce0 <_dtoa_r+0x162c>
 8005198:	00c00704 	movi	r3,28
 800519c:	1885c83a 	sub	r2,r3,r2
 80051a0:	d8c00817 	ldw	r3,32(sp)
 80051a4:	98a7883a 	add	r19,r19,r2
 80051a8:	a8ab883a 	add	r21,r21,r2
 80051ac:	1887883a 	add	r3,r3,r2
 80051b0:	d8c00815 	stw	r3,32(sp)
 80051b4:	d9800817 	ldw	r6,32(sp)
 80051b8:	0180040e 	bge	zero,r6,80051cc <_dtoa_r+0xb18>
 80051bc:	e00b883a 	mov	r5,fp
 80051c0:	8009883a 	mov	r4,r16
 80051c4:	80083d00 	call	80083d0 <__lshift>
 80051c8:	1039883a 	mov	fp,r2
 80051cc:	0540050e 	bge	zero,r21,80051e4 <_dtoa_r+0xb30>
 80051d0:	a00b883a 	mov	r5,r20
 80051d4:	8009883a 	mov	r4,r16
 80051d8:	a80d883a 	mov	r6,r21
 80051dc:	80083d00 	call	80083d0 <__lshift>
 80051e0:	1029883a 	mov	r20,r2
 80051e4:	d9c00e17 	ldw	r7,56(sp)
 80051e8:	3801301e 	bne	r7,zero,80056ac <_dtoa_r+0xff8>
 80051ec:	d9c00917 	ldw	r7,36(sp)
 80051f0:	01c1500e 	bge	zero,r7,8005734 <_dtoa_r+0x1080>
 80051f4:	d8800c17 	ldw	r2,48(sp)
 80051f8:	10006b1e 	bne	r2,zero,80053a8 <_dtoa_r+0xcf4>
 80051fc:	dc800717 	ldw	r18,28(sp)
 8005200:	dcc00917 	ldw	r19,36(sp)
 8005204:	902b883a 	mov	r21,r18
 8005208:	00000206 	br	8005214 <_dtoa_r+0xb60>
 800520c:	8007c800 	call	8007c80 <__multadd>
 8005210:	1039883a 	mov	fp,r2
 8005214:	e009883a 	mov	r4,fp
 8005218:	a00b883a 	mov	r5,r20
 800521c:	800448c0 	call	800448c <quorem>
 8005220:	10800c04 	addi	r2,r2,48
 8005224:	90800005 	stb	r2,0(r18)
 8005228:	94800044 	addi	r18,r18,1
 800522c:	9547c83a 	sub	r3,r18,r21
 8005230:	8009883a 	mov	r4,r16
 8005234:	e00b883a 	mov	r5,fp
 8005238:	01800284 	movi	r6,10
 800523c:	000f883a 	mov	r7,zero
 8005240:	1cfff216 	blt	r3,r19,800520c <__alt_data_end+0xf800520c>
 8005244:	102f883a 	mov	r23,r2
 8005248:	d8800917 	ldw	r2,36(sp)
 800524c:	0082410e 	bge	zero,r2,8005b54 <_dtoa_r+0x14a0>
 8005250:	d9000717 	ldw	r4,28(sp)
 8005254:	002b883a 	mov	r21,zero
 8005258:	20ad883a 	add	r22,r4,r2
 800525c:	e00b883a 	mov	r5,fp
 8005260:	8009883a 	mov	r4,r16
 8005264:	01800044 	movi	r6,1
 8005268:	80083d00 	call	80083d0 <__lshift>
 800526c:	1009883a 	mov	r4,r2
 8005270:	a00b883a 	mov	r5,r20
 8005274:	1039883a 	mov	fp,r2
 8005278:	80085200 	call	8008520 <__mcmp>
 800527c:	0080d10e 	bge	zero,r2,80055c4 <_dtoa_r+0xf10>
 8005280:	b13fffc3 	ldbu	r4,-1(r22)
 8005284:	b0ffff84 	addi	r3,r22,-2
 8005288:	01800e44 	movi	r6,57
 800528c:	d9c00717 	ldw	r7,28(sp)
 8005290:	00000406 	br	80052a4 <_dtoa_r+0xbf0>
 8005294:	38813c26 	beq	r7,r2,8005788 <_dtoa_r+0x10d4>
 8005298:	19000003 	ldbu	r4,0(r3)
 800529c:	102d883a 	mov	r22,r2
 80052a0:	18ffffc4 	addi	r3,r3,-1
 80052a4:	21403fcc 	andi	r5,r4,255
 80052a8:	2940201c 	xori	r5,r5,128
 80052ac:	297fe004 	addi	r5,r5,-128
 80052b0:	b0bfffc4 	addi	r2,r22,-1
 80052b4:	29bff726 	beq	r5,r6,8005294 <__alt_data_end+0xf8005294>
 80052b8:	21000044 	addi	r4,r4,1
 80052bc:	11000005 	stb	r4,0(r2)
 80052c0:	8009883a 	mov	r4,r16
 80052c4:	a00b883a 	mov	r5,r20
 80052c8:	8007c580 	call	8007c58 <_Bfree>
 80052cc:	883ea526 	beq	r17,zero,8004d64 <__alt_data_end+0xf8004d64>
 80052d0:	a8000426 	beq	r21,zero,80052e4 <_dtoa_r+0xc30>
 80052d4:	ac400326 	beq	r21,r17,80052e4 <_dtoa_r+0xc30>
 80052d8:	8009883a 	mov	r4,r16
 80052dc:	a80b883a 	mov	r5,r21
 80052e0:	8007c580 	call	8007c58 <_Bfree>
 80052e4:	8009883a 	mov	r4,r16
 80052e8:	880b883a 	mov	r5,r17
 80052ec:	8007c580 	call	8007c58 <_Bfree>
 80052f0:	003e9c06 	br	8004d64 <__alt_data_end+0xf8004d64>
 80052f4:	01c00044 	movi	r7,1
 80052f8:	d9c00e15 	stw	r7,56(sp)
 80052fc:	003d9906 	br	8004964 <__alt_data_end+0xf8004964>
 8005300:	d8c00817 	ldw	r3,32(sp)
 8005304:	d9000617 	ldw	r4,24(sp)
 8005308:	d8000b15 	stw	zero,44(sp)
 800530c:	1907c83a 	sub	r3,r3,r4
 8005310:	010dc83a 	sub	r6,zero,r4
 8005314:	d8c00815 	stw	r3,32(sp)
 8005318:	d9800a15 	stw	r6,40(sp)
 800531c:	003d9a06 	br	8004988 <__alt_data_end+0xf8004988>
 8005320:	056bc83a 	sub	r21,zero,r21
 8005324:	dd400815 	stw	r21,32(sp)
 8005328:	002b883a 	mov	r21,zero
 800532c:	003d9106 	br	8004974 <__alt_data_end+0xf8004974>
 8005330:	d9000617 	ldw	r4,24(sp)
 8005334:	800e6b40 	call	800e6b4 <__floatsidf>
 8005338:	1009883a 	mov	r4,r2
 800533c:	180b883a 	mov	r5,r3
 8005340:	980d883a 	mov	r6,r19
 8005344:	880f883a 	mov	r7,r17
 8005348:	800d3640 	call	800d364 <__eqdf2>
 800534c:	103d7426 	beq	r2,zero,8004920 <__alt_data_end+0xf8004920>
 8005350:	d8c00617 	ldw	r3,24(sp)
 8005354:	18ffffc4 	addi	r3,r3,-1
 8005358:	d8c00615 	stw	r3,24(sp)
 800535c:	003d7006 	br	8004920 <__alt_data_end+0xf8004920>
 8005360:	dd000a17 	ldw	r20,40(sp)
 8005364:	dcc00817 	ldw	r19,32(sp)
 8005368:	0023883a 	mov	r17,zero
 800536c:	003f5206 	br	80050b8 <__alt_data_end+0xf80050b8>
 8005370:	00800704 	movi	r2,28
 8005374:	d9000817 	ldw	r4,32(sp)
 8005378:	98a7883a 	add	r19,r19,r2
 800537c:	a8ab883a 	add	r21,r21,r2
 8005380:	2089883a 	add	r4,r4,r2
 8005384:	d9000815 	stw	r4,32(sp)
 8005388:	003f8a06 	br	80051b4 <__alt_data_end+0xf80051b4>
 800538c:	d9c00317 	ldw	r7,12(sp)
 8005390:	013efb84 	movi	r4,-1042
 8005394:	2509c83a 	sub	r4,r4,r20
 8005398:	3908983a 	sll	r4,r7,r4
 800539c:	003d2c06 	br	8004850 <__alt_data_end+0xf8004850>
 80053a0:	d8000e15 	stw	zero,56(sp)
 80053a4:	003d6f06 	br	8004964 <__alt_data_end+0xf8004964>
 80053a8:	04c0050e 	bge	zero,r19,80053c0 <_dtoa_r+0xd0c>
 80053ac:	880b883a 	mov	r5,r17
 80053b0:	8009883a 	mov	r4,r16
 80053b4:	980d883a 	mov	r6,r19
 80053b8:	80083d00 	call	80083d0 <__lshift>
 80053bc:	1023883a 	mov	r17,r2
 80053c0:	9001681e 	bne	r18,zero,8005964 <_dtoa_r+0x12b0>
 80053c4:	8827883a 	mov	r19,r17
 80053c8:	d8c00717 	ldw	r3,28(sp)
 80053cc:	d9000917 	ldw	r4,36(sp)
 80053d0:	1dffffc4 	addi	r23,r3,-1
 80053d4:	1825883a 	mov	r18,r3
 80053d8:	d8c00317 	ldw	r3,12(sp)
 80053dc:	b92f883a 	add	r23,r23,r4
 80053e0:	ddc00515 	stw	r23,20(sp)
 80053e4:	18c0004c 	andi	r3,r3,1
 80053e8:	d8c00315 	stw	r3,12(sp)
 80053ec:	e009883a 	mov	r4,fp
 80053f0:	a00b883a 	mov	r5,r20
 80053f4:	800448c0 	call	800448c <quorem>
 80053f8:	e009883a 	mov	r4,fp
 80053fc:	880b883a 	mov	r5,r17
 8005400:	102d883a 	mov	r22,r2
 8005404:	80085200 	call	8008520 <__mcmp>
 8005408:	8009883a 	mov	r4,r16
 800540c:	a00b883a 	mov	r5,r20
 8005410:	980d883a 	mov	r6,r19
 8005414:	102b883a 	mov	r21,r2
 8005418:	80085800 	call	8008580 <__mdiff>
 800541c:	1007883a 	mov	r3,r2
 8005420:	10800317 	ldw	r2,12(r2)
 8005424:	b5c00c04 	addi	r23,r22,48
 8005428:	10009b1e 	bne	r2,zero,8005698 <_dtoa_r+0xfe4>
 800542c:	180b883a 	mov	r5,r3
 8005430:	e009883a 	mov	r4,fp
 8005434:	d8c01515 	stw	r3,84(sp)
 8005438:	80085200 	call	8008520 <__mcmp>
 800543c:	d8c01517 	ldw	r3,84(sp)
 8005440:	8009883a 	mov	r4,r16
 8005444:	d8801515 	stw	r2,84(sp)
 8005448:	180b883a 	mov	r5,r3
 800544c:	8007c580 	call	8007c58 <_Bfree>
 8005450:	d8801517 	ldw	r2,84(sp)
 8005454:	1000041e 	bne	r2,zero,8005468 <_dtoa_r+0xdb4>
 8005458:	d9000417 	ldw	r4,16(sp)
 800545c:	2000021e 	bne	r4,zero,8005468 <_dtoa_r+0xdb4>
 8005460:	d8c00317 	ldw	r3,12(sp)
 8005464:	18007926 	beq	r3,zero,800564c <_dtoa_r+0xf98>
 8005468:	a8006616 	blt	r21,zero,8005604 <_dtoa_r+0xf50>
 800546c:	a800041e 	bne	r21,zero,8005480 <_dtoa_r+0xdcc>
 8005470:	d9000417 	ldw	r4,16(sp)
 8005474:	2000021e 	bne	r4,zero,8005480 <_dtoa_r+0xdcc>
 8005478:	d8c00317 	ldw	r3,12(sp)
 800547c:	18006126 	beq	r3,zero,8005604 <_dtoa_r+0xf50>
 8005480:	00814916 	blt	zero,r2,80059a8 <_dtoa_r+0x12f4>
 8005484:	d8c00517 	ldw	r3,20(sp)
 8005488:	95400044 	addi	r21,r18,1
 800548c:	95c00005 	stb	r23,0(r18)
 8005490:	a82d883a 	mov	r22,r21
 8005494:	90c14c26 	beq	r18,r3,80059c8 <_dtoa_r+0x1314>
 8005498:	e00b883a 	mov	r5,fp
 800549c:	8009883a 	mov	r4,r16
 80054a0:	01800284 	movi	r6,10
 80054a4:	000f883a 	mov	r7,zero
 80054a8:	8007c800 	call	8007c80 <__multadd>
 80054ac:	1039883a 	mov	fp,r2
 80054b0:	8cc07026 	beq	r17,r19,8005674 <_dtoa_r+0xfc0>
 80054b4:	880b883a 	mov	r5,r17
 80054b8:	01800284 	movi	r6,10
 80054bc:	000f883a 	mov	r7,zero
 80054c0:	8009883a 	mov	r4,r16
 80054c4:	8007c800 	call	8007c80 <__multadd>
 80054c8:	980b883a 	mov	r5,r19
 80054cc:	8009883a 	mov	r4,r16
 80054d0:	01800284 	movi	r6,10
 80054d4:	000f883a 	mov	r7,zero
 80054d8:	1023883a 	mov	r17,r2
 80054dc:	8007c800 	call	8007c80 <__multadd>
 80054e0:	1027883a 	mov	r19,r2
 80054e4:	a825883a 	mov	r18,r21
 80054e8:	003fc006 	br	80053ec <__alt_data_end+0xf80053ec>
 80054ec:	d9800317 	ldw	r6,12(sp)
 80054f0:	303f1e1e 	bne	r6,zero,800516c <__alt_data_end+0xf800516c>
 80054f4:	00c00434 	movhi	r3,16
 80054f8:	18ffffc4 	addi	r3,r3,-1
 80054fc:	90c6703a 	and	r3,r18,r3
 8005500:	183f1a1e 	bne	r3,zero,800516c <__alt_data_end+0xf800516c>
 8005504:	949ffc2c 	andhi	r18,r18,32752
 8005508:	903f1826 	beq	r18,zero,800516c <__alt_data_end+0xf800516c>
 800550c:	d9c00817 	ldw	r7,32(sp)
 8005510:	a8ab883a 	add	r21,r21,r2
 8005514:	1025883a 	mov	r18,r2
 8005518:	388f883a 	add	r7,r7,r2
 800551c:	d9c00815 	stw	r7,32(sp)
 8005520:	003f1306 	br	8005170 <__alt_data_end+0xf8005170>
 8005524:	9805883a 	mov	r2,r19
 8005528:	003ee706 	br	80050c8 <__alt_data_end+0xf80050c8>
 800552c:	01800044 	movi	r6,1
 8005530:	d9800c15 	stw	r6,48(sp)
 8005534:	d8802117 	ldw	r2,132(sp)
 8005538:	0080da0e 	bge	zero,r2,80058a4 <_dtoa_r+0x11f0>
 800553c:	100d883a 	mov	r6,r2
 8005540:	d8800d15 	stw	r2,52(sp)
 8005544:	d8800915 	stw	r2,36(sp)
 8005548:	003d2a06 	br	80049f4 <__alt_data_end+0xf80049f4>
 800554c:	d8800917 	ldw	r2,36(sp)
 8005550:	00be4016 	blt	zero,r2,8004e54 <__alt_data_end+0xf8004e54>
 8005554:	1000b81e 	bne	r2,zero,8005838 <_dtoa_r+0x1184>
 8005558:	8809883a 	mov	r4,r17
 800555c:	980b883a 	mov	r5,r19
 8005560:	000d883a 	mov	r6,zero
 8005564:	01d00534 	movhi	r7,16404
 8005568:	800d5ac0 	call	800d5ac <__muldf3>
 800556c:	d9800317 	ldw	r6,12(sp)
 8005570:	1009883a 	mov	r4,r2
 8005574:	180b883a 	mov	r5,r3
 8005578:	900f883a 	mov	r7,r18
 800557c:	800d3e80 	call	800d3e8 <__gedf2>
 8005580:	0029883a 	mov	r20,zero
 8005584:	0023883a 	mov	r17,zero
 8005588:	10007716 	blt	r2,zero,8005768 <_dtoa_r+0x10b4>
 800558c:	d9002117 	ldw	r4,132(sp)
 8005590:	dd800717 	ldw	r22,28(sp)
 8005594:	0108303a 	nor	r4,zero,r4
 8005598:	d9000615 	stw	r4,24(sp)
 800559c:	8009883a 	mov	r4,r16
 80055a0:	a00b883a 	mov	r5,r20
 80055a4:	8007c580 	call	8007c58 <_Bfree>
 80055a8:	883f4e1e 	bne	r17,zero,80052e4 <__alt_data_end+0xf80052e4>
 80055ac:	003ded06 	br	8004d64 <__alt_data_end+0xf8004d64>
 80055b0:	e00b883a 	mov	r5,fp
 80055b4:	8009883a 	mov	r4,r16
 80055b8:	80082880 	call	8008288 <__pow5mult>
 80055bc:	1039883a 	mov	fp,r2
 80055c0:	003edc06 	br	8005134 <__alt_data_end+0xf8005134>
 80055c4:	1000021e 	bne	r2,zero,80055d0 <_dtoa_r+0xf1c>
 80055c8:	ba40004c 	andi	r9,r23,1
 80055cc:	483f2c1e 	bne	r9,zero,8005280 <__alt_data_end+0xf8005280>
 80055d0:	01000c04 	movi	r4,48
 80055d4:	00000106 	br	80055dc <_dtoa_r+0xf28>
 80055d8:	102d883a 	mov	r22,r2
 80055dc:	b0bfffc4 	addi	r2,r22,-1
 80055e0:	10c00007 	ldb	r3,0(r2)
 80055e4:	193ffc26 	beq	r3,r4,80055d8 <__alt_data_end+0xf80055d8>
 80055e8:	003f3506 	br	80052c0 <__alt_data_end+0xf80052c0>
 80055ec:	d9c00f17 	ldw	r7,60(sp)
 80055f0:	38015a26 	beq	r7,zero,8005b5c <_dtoa_r+0x14a8>
 80055f4:	10810cc4 	addi	r2,r2,1075
 80055f8:	dd000a17 	ldw	r20,40(sp)
 80055fc:	dcc00817 	ldw	r19,32(sp)
 8005600:	003ea506 	br	8005098 <__alt_data_end+0xf8005098>
 8005604:	00800c0e 	bge	zero,r2,8005638 <_dtoa_r+0xf84>
 8005608:	e00b883a 	mov	r5,fp
 800560c:	8009883a 	mov	r4,r16
 8005610:	01800044 	movi	r6,1
 8005614:	80083d00 	call	80083d0 <__lshift>
 8005618:	1009883a 	mov	r4,r2
 800561c:	a00b883a 	mov	r5,r20
 8005620:	1039883a 	mov	fp,r2
 8005624:	80085200 	call	8008520 <__mcmp>
 8005628:	0081930e 	bge	zero,r2,8005c78 <_dtoa_r+0x15c4>
 800562c:	00800e44 	movi	r2,57
 8005630:	b8800a26 	beq	r23,r2,800565c <_dtoa_r+0xfa8>
 8005634:	b5c00c44 	addi	r23,r22,49
 8005638:	882b883a 	mov	r21,r17
 800563c:	95800044 	addi	r22,r18,1
 8005640:	95c00005 	stb	r23,0(r18)
 8005644:	9823883a 	mov	r17,r19
 8005648:	003f1d06 	br	80052c0 <__alt_data_end+0xf80052c0>
 800564c:	00800e44 	movi	r2,57
 8005650:	b8800226 	beq	r23,r2,800565c <_dtoa_r+0xfa8>
 8005654:	057ff716 	blt	zero,r21,8005634 <__alt_data_end+0xf8005634>
 8005658:	003ff706 	br	8005638 <__alt_data_end+0xf8005638>
 800565c:	01000e44 	movi	r4,57
 8005660:	882b883a 	mov	r21,r17
 8005664:	95800044 	addi	r22,r18,1
 8005668:	91000005 	stb	r4,0(r18)
 800566c:	9823883a 	mov	r17,r19
 8005670:	003f0406 	br	8005284 <__alt_data_end+0xf8005284>
 8005674:	880b883a 	mov	r5,r17
 8005678:	8009883a 	mov	r4,r16
 800567c:	01800284 	movi	r6,10
 8005680:	000f883a 	mov	r7,zero
 8005684:	8007c800 	call	8007c80 <__multadd>
 8005688:	1023883a 	mov	r17,r2
 800568c:	1027883a 	mov	r19,r2
 8005690:	a825883a 	mov	r18,r21
 8005694:	003f5506 	br	80053ec <__alt_data_end+0xf80053ec>
 8005698:	8009883a 	mov	r4,r16
 800569c:	180b883a 	mov	r5,r3
 80056a0:	8007c580 	call	8007c58 <_Bfree>
 80056a4:	00800044 	movi	r2,1
 80056a8:	003f6f06 	br	8005468 <__alt_data_end+0xf8005468>
 80056ac:	e009883a 	mov	r4,fp
 80056b0:	a00b883a 	mov	r5,r20
 80056b4:	80085200 	call	8008520 <__mcmp>
 80056b8:	103ecc0e 	bge	r2,zero,80051ec <__alt_data_end+0xf80051ec>
 80056bc:	e00b883a 	mov	r5,fp
 80056c0:	8009883a 	mov	r4,r16
 80056c4:	01800284 	movi	r6,10
 80056c8:	000f883a 	mov	r7,zero
 80056cc:	8007c800 	call	8007c80 <__multadd>
 80056d0:	1039883a 	mov	fp,r2
 80056d4:	d8800617 	ldw	r2,24(sp)
 80056d8:	d8c00c17 	ldw	r3,48(sp)
 80056dc:	10bfffc4 	addi	r2,r2,-1
 80056e0:	d8800615 	stw	r2,24(sp)
 80056e4:	1801681e 	bne	r3,zero,8005c88 <_dtoa_r+0x15d4>
 80056e8:	d9800d17 	ldw	r6,52(sp)
 80056ec:	d9800915 	stw	r6,36(sp)
 80056f0:	003ebe06 	br	80051ec <__alt_data_end+0xf80051ec>
 80056f4:	a0800417 	ldw	r2,16(r20)
 80056f8:	10800104 	addi	r2,r2,4
 80056fc:	1085883a 	add	r2,r2,r2
 8005700:	1085883a 	add	r2,r2,r2
 8005704:	a085883a 	add	r2,r20,r2
 8005708:	11000017 	ldw	r4,0(r2)
 800570c:	8007ec80 	call	8007ec8 <__hi0bits>
 8005710:	00c00804 	movi	r3,32
 8005714:	1885c83a 	sub	r2,r3,r2
 8005718:	003e9806 	br	800517c <__alt_data_end+0xf800517c>
 800571c:	d8800717 	ldw	r2,28(sp)
 8005720:	003c1306 	br	8004770 <__alt_data_end+0xf8004770>
 8005724:	00800084 	movi	r2,2
 8005728:	18bdb11e 	bne	r3,r2,8004df0 <__alt_data_end+0xf8004df0>
 800572c:	d8000c15 	stw	zero,48(sp)
 8005730:	003f8006 	br	8005534 <__alt_data_end+0xf8005534>
 8005734:	d8c00417 	ldw	r3,16(sp)
 8005738:	00800084 	movi	r2,2
 800573c:	10fead0e 	bge	r2,r3,80051f4 <__alt_data_end+0xf80051f4>
 8005740:	383f921e 	bne	r7,zero,800558c <__alt_data_end+0xf800558c>
 8005744:	a00b883a 	mov	r5,r20
 8005748:	8009883a 	mov	r4,r16
 800574c:	01800144 	movi	r6,5
 8005750:	8007c800 	call	8007c80 <__multadd>
 8005754:	e009883a 	mov	r4,fp
 8005758:	100b883a 	mov	r5,r2
 800575c:	1029883a 	mov	r20,r2
 8005760:	80085200 	call	8008520 <__mcmp>
 8005764:	00bf890e 	bge	zero,r2,800558c <__alt_data_end+0xf800558c>
 8005768:	d9c00617 	ldw	r7,24(sp)
 800576c:	d9800717 	ldw	r6,28(sp)
 8005770:	00800c44 	movi	r2,49
 8005774:	39c00044 	addi	r7,r7,1
 8005778:	35800044 	addi	r22,r6,1
 800577c:	30800005 	stb	r2,0(r6)
 8005780:	d9c00615 	stw	r7,24(sp)
 8005784:	003f8506 	br	800559c <__alt_data_end+0xf800559c>
 8005788:	d9800617 	ldw	r6,24(sp)
 800578c:	d9c00717 	ldw	r7,28(sp)
 8005790:	00800c44 	movi	r2,49
 8005794:	31800044 	addi	r6,r6,1
 8005798:	d9800615 	stw	r6,24(sp)
 800579c:	38800005 	stb	r2,0(r7)
 80057a0:	003ec706 	br	80052c0 <__alt_data_end+0xf80052c0>
 80057a4:	df000417 	ldw	fp,16(sp)
 80057a8:	dc000317 	ldw	r16,12(sp)
 80057ac:	003d6d06 	br	8004d64 <__alt_data_end+0xf8004d64>
 80057b0:	8809883a 	mov	r4,r17
 80057b4:	800e6b40 	call	800e6b4 <__floatsidf>
 80057b8:	9809883a 	mov	r4,r19
 80057bc:	a00b883a 	mov	r5,r20
 80057c0:	100d883a 	mov	r6,r2
 80057c4:	180f883a 	mov	r7,r3
 80057c8:	800d5ac0 	call	800d5ac <__muldf3>
 80057cc:	1009883a 	mov	r4,r2
 80057d0:	180b883a 	mov	r5,r3
 80057d4:	000d883a 	mov	r6,zero
 80057d8:	01d00734 	movhi	r7,16412
 80057dc:	800c14c0 	call	800c14c <__adddf3>
 80057e0:	05bf3034 	movhi	r22,64704
 80057e4:	1023883a 	mov	r17,r2
 80057e8:	1daf883a 	add	r23,r3,r22
 80057ec:	9809883a 	mov	r4,r19
 80057f0:	a00b883a 	mov	r5,r20
 80057f4:	000d883a 	mov	r6,zero
 80057f8:	01d00534 	movhi	r7,16404
 80057fc:	800ddac0 	call	800ddac <__subdf3>
 8005800:	1009883a 	mov	r4,r2
 8005804:	180b883a 	mov	r5,r3
 8005808:	880d883a 	mov	r6,r17
 800580c:	b80f883a 	mov	r7,r23
 8005810:	1027883a 	mov	r19,r2
 8005814:	1829883a 	mov	r20,r3
 8005818:	800d3e80 	call	800d3e8 <__gedf2>
 800581c:	00806d16 	blt	zero,r2,80059d4 <_dtoa_r+0x1320>
 8005820:	b9e0003c 	xorhi	r7,r23,32768
 8005824:	9809883a 	mov	r4,r19
 8005828:	a00b883a 	mov	r5,r20
 800582c:	880d883a 	mov	r6,r17
 8005830:	800d4c00 	call	800d4c0 <__ledf2>
 8005834:	103d7a0e 	bge	r2,zero,8004e20 <__alt_data_end+0xf8004e20>
 8005838:	0029883a 	mov	r20,zero
 800583c:	0023883a 	mov	r17,zero
 8005840:	003f5206 	br	800558c <__alt_data_end+0xf800558c>
 8005844:	d9800a17 	ldw	r6,40(sp)
 8005848:	e00b883a 	mov	r5,fp
 800584c:	8009883a 	mov	r4,r16
 8005850:	80082880 	call	8008288 <__pow5mult>
 8005854:	1039883a 	mov	fp,r2
 8005858:	003e3606 	br	8005134 <__alt_data_end+0xf8005134>
 800585c:	d8000c15 	stw	zero,48(sp)
 8005860:	003c5c06 	br	80049d4 <__alt_data_end+0xf80049d4>
 8005864:	d9000a17 	ldw	r4,40(sp)
 8005868:	d9800b17 	ldw	r6,44(sp)
 800586c:	dd000a15 	stw	r20,40(sp)
 8005870:	a105c83a 	sub	r2,r20,r4
 8005874:	308d883a 	add	r6,r6,r2
 8005878:	d9800b15 	stw	r6,44(sp)
 800587c:	0029883a 	mov	r20,zero
 8005880:	003e0106 	br	8005088 <__alt_data_end+0xf8005088>
 8005884:	dcc00317 	ldw	r19,12(sp)
 8005888:	9029883a 	mov	r20,r18
 800588c:	04400084 	movi	r17,2
 8005890:	003c8606 	br	8004aac <__alt_data_end+0xf8004aac>
 8005894:	3023883a 	mov	r17,r6
 8005898:	80001115 	stw	zero,68(r16)
 800589c:	000b883a 	mov	r5,zero
 80058a0:	003c6006 	br	8004a24 <__alt_data_end+0xf8004a24>
 80058a4:	04400044 	movi	r17,1
 80058a8:	dc400d15 	stw	r17,52(sp)
 80058ac:	dc400915 	stw	r17,36(sp)
 80058b0:	dc402115 	stw	r17,132(sp)
 80058b4:	003ff806 	br	8005898 <__alt_data_end+0xf8005898>
 80058b8:	d8800617 	ldw	r2,24(sp)
 80058bc:	00adc83a 	sub	r22,zero,r2
 80058c0:	b000ac26 	beq	r22,zero,8005b74 <_dtoa_r+0x14c0>
 80058c4:	b08003cc 	andi	r2,r22,15
 80058c8:	100490fa 	slli	r2,r2,3
 80058cc:	00c20074 	movhi	r3,2049
 80058d0:	18c64804 	addi	r3,r3,6432
 80058d4:	d9000317 	ldw	r4,12(sp)
 80058d8:	1885883a 	add	r2,r3,r2
 80058dc:	11800017 	ldw	r6,0(r2)
 80058e0:	11c00117 	ldw	r7,4(r2)
 80058e4:	b02dd13a 	srai	r22,r22,4
 80058e8:	900b883a 	mov	r5,r18
 80058ec:	800d5ac0 	call	800d5ac <__muldf3>
 80058f0:	1027883a 	mov	r19,r2
 80058f4:	1829883a 	mov	r20,r3
 80058f8:	b000ec26 	beq	r22,zero,8005cac <_dtoa_r+0x15f8>
 80058fc:	05c20074 	movhi	r23,2049
 8005900:	bdc63e04 	addi	r23,r23,6392
 8005904:	04400084 	movi	r17,2
 8005908:	b180004c 	andi	r6,r22,1
 800590c:	1009883a 	mov	r4,r2
 8005910:	b02dd07a 	srai	r22,r22,1
 8005914:	180b883a 	mov	r5,r3
 8005918:	30000426 	beq	r6,zero,800592c <_dtoa_r+0x1278>
 800591c:	b9800017 	ldw	r6,0(r23)
 8005920:	b9c00117 	ldw	r7,4(r23)
 8005924:	8c400044 	addi	r17,r17,1
 8005928:	800d5ac0 	call	800d5ac <__muldf3>
 800592c:	bdc00204 	addi	r23,r23,8
 8005930:	b03ff51e 	bne	r22,zero,8005908 <__alt_data_end+0xf8005908>
 8005934:	1027883a 	mov	r19,r2
 8005938:	1829883a 	mov	r20,r3
 800593c:	003c7406 	br	8004b10 <__alt_data_end+0xf8004b10>
 8005940:	d9800617 	ldw	r6,24(sp)
 8005944:	d9c00717 	ldw	r7,28(sp)
 8005948:	00c00c04 	movi	r3,48
 800594c:	31800044 	addi	r6,r6,1
 8005950:	38c00005 	stb	r3,0(r7)
 8005954:	02400c44 	movi	r9,49
 8005958:	d9800615 	stw	r6,24(sp)
 800595c:	12400005 	stb	r9,0(r2)
 8005960:	003d0006 	br	8004d64 <__alt_data_end+0xf8004d64>
 8005964:	89400117 	ldw	r5,4(r17)
 8005968:	8009883a 	mov	r4,r16
 800596c:	8007bb00 	call	8007bb0 <_Balloc>
 8005970:	89800417 	ldw	r6,16(r17)
 8005974:	11000304 	addi	r4,r2,12
 8005978:	89400304 	addi	r5,r17,12
 800597c:	31800084 	addi	r6,r6,2
 8005980:	318d883a 	add	r6,r6,r6
 8005984:	318d883a 	add	r6,r6,r6
 8005988:	1025883a 	mov	r18,r2
 800598c:	80078540 	call	8007854 <memcpy>
 8005990:	8009883a 	mov	r4,r16
 8005994:	900b883a 	mov	r5,r18
 8005998:	01800044 	movi	r6,1
 800599c:	80083d00 	call	80083d0 <__lshift>
 80059a0:	1027883a 	mov	r19,r2
 80059a4:	003e8806 	br	80053c8 <__alt_data_end+0xf80053c8>
 80059a8:	00800e44 	movi	r2,57
 80059ac:	b8bf2b26 	beq	r23,r2,800565c <__alt_data_end+0xf800565c>
 80059b0:	ba400044 	addi	r9,r23,1
 80059b4:	882b883a 	mov	r21,r17
 80059b8:	95800044 	addi	r22,r18,1
 80059bc:	92400005 	stb	r9,0(r18)
 80059c0:	9823883a 	mov	r17,r19
 80059c4:	003e3e06 	br	80052c0 <__alt_data_end+0xf80052c0>
 80059c8:	882b883a 	mov	r21,r17
 80059cc:	9823883a 	mov	r17,r19
 80059d0:	003e2206 	br	800525c <__alt_data_end+0xf800525c>
 80059d4:	0029883a 	mov	r20,zero
 80059d8:	0023883a 	mov	r17,zero
 80059dc:	003f6206 	br	8005768 <__alt_data_end+0xf8005768>
 80059e0:	59bfffc4 	addi	r6,r11,-1
 80059e4:	300490fa 	slli	r2,r6,3
 80059e8:	00c20074 	movhi	r3,2049
 80059ec:	18c64804 	addi	r3,r3,6432
 80059f0:	b80f883a 	mov	r7,r23
 80059f4:	1885883a 	add	r2,r3,r2
 80059f8:	11000017 	ldw	r4,0(r2)
 80059fc:	11400117 	ldw	r5,4(r2)
 8005a00:	d8800717 	ldw	r2,28(sp)
 8005a04:	d9801015 	stw	r6,64(sp)
 8005a08:	880d883a 	mov	r6,r17
 8005a0c:	dac01615 	stw	r11,88(sp)
 8005a10:	15800044 	addi	r22,r2,1
 8005a14:	800d5ac0 	call	800d5ac <__muldf3>
 8005a18:	a00b883a 	mov	r5,r20
 8005a1c:	9809883a 	mov	r4,r19
 8005a20:	d8c01215 	stw	r3,72(sp)
 8005a24:	d8801115 	stw	r2,68(sp)
 8005a28:	800e6340 	call	800e634 <__fixdfsi>
 8005a2c:	1009883a 	mov	r4,r2
 8005a30:	1023883a 	mov	r17,r2
 8005a34:	800e6b40 	call	800e6b4 <__floatsidf>
 8005a38:	9809883a 	mov	r4,r19
 8005a3c:	a00b883a 	mov	r5,r20
 8005a40:	100d883a 	mov	r6,r2
 8005a44:	180f883a 	mov	r7,r3
 8005a48:	800ddac0 	call	800ddac <__subdf3>
 8005a4c:	1815883a 	mov	r10,r3
 8005a50:	d8c00717 	ldw	r3,28(sp)
 8005a54:	8c400c04 	addi	r17,r17,48
 8005a58:	102f883a 	mov	r23,r2
 8005a5c:	1c400005 	stb	r17,0(r3)
 8005a60:	dac01617 	ldw	r11,88(sp)
 8005a64:	00800044 	movi	r2,1
 8005a68:	58802426 	beq	r11,r2,8005afc <_dtoa_r+0x1448>
 8005a6c:	d9800717 	ldw	r6,28(sp)
 8005a70:	dc001415 	stw	r16,80(sp)
 8005a74:	b805883a 	mov	r2,r23
 8005a78:	32d7883a 	add	r11,r6,r11
 8005a7c:	b027883a 	mov	r19,r22
 8005a80:	5821883a 	mov	r16,r11
 8005a84:	5007883a 	mov	r3,r10
 8005a88:	902f883a 	mov	r23,r18
 8005a8c:	000d883a 	mov	r6,zero
 8005a90:	01d00934 	movhi	r7,16420
 8005a94:	1009883a 	mov	r4,r2
 8005a98:	180b883a 	mov	r5,r3
 8005a9c:	800d5ac0 	call	800d5ac <__muldf3>
 8005aa0:	180b883a 	mov	r5,r3
 8005aa4:	1009883a 	mov	r4,r2
 8005aa8:	1829883a 	mov	r20,r3
 8005aac:	1025883a 	mov	r18,r2
 8005ab0:	800e6340 	call	800e634 <__fixdfsi>
 8005ab4:	1009883a 	mov	r4,r2
 8005ab8:	1023883a 	mov	r17,r2
 8005abc:	800e6b40 	call	800e6b4 <__floatsidf>
 8005ac0:	9009883a 	mov	r4,r18
 8005ac4:	a00b883a 	mov	r5,r20
 8005ac8:	100d883a 	mov	r6,r2
 8005acc:	180f883a 	mov	r7,r3
 8005ad0:	8c400c04 	addi	r17,r17,48
 8005ad4:	800ddac0 	call	800ddac <__subdf3>
 8005ad8:	9cc00044 	addi	r19,r19,1
 8005adc:	9c7fffc5 	stb	r17,-1(r19)
 8005ae0:	9c3fea1e 	bne	r19,r16,8005a8c <__alt_data_end+0xf8005a8c>
 8005ae4:	d9c01017 	ldw	r7,64(sp)
 8005ae8:	dc001417 	ldw	r16,80(sp)
 8005aec:	b825883a 	mov	r18,r23
 8005af0:	1815883a 	mov	r10,r3
 8005af4:	102f883a 	mov	r23,r2
 8005af8:	b1ed883a 	add	r22,r22,r7
 8005afc:	d9001117 	ldw	r4,68(sp)
 8005b00:	d9401217 	ldw	r5,72(sp)
 8005b04:	000d883a 	mov	r6,zero
 8005b08:	01cff834 	movhi	r7,16352
 8005b0c:	da801615 	stw	r10,88(sp)
 8005b10:	800c14c0 	call	800c14c <__adddf3>
 8005b14:	da801617 	ldw	r10,88(sp)
 8005b18:	1009883a 	mov	r4,r2
 8005b1c:	180b883a 	mov	r5,r3
 8005b20:	500f883a 	mov	r7,r10
 8005b24:	b80d883a 	mov	r6,r23
 8005b28:	800d4c00 	call	800d4c0 <__ledf2>
 8005b2c:	da801617 	ldw	r10,88(sp)
 8005b30:	1000330e 	bge	r2,zero,8005c00 <_dtoa_r+0x154c>
 8005b34:	d9001317 	ldw	r4,76(sp)
 8005b38:	b53fffc3 	ldbu	r20,-1(r22)
 8005b3c:	d9000615 	stw	r4,24(sp)
 8005b40:	003d3706 	br	8005020 <__alt_data_end+0xf8005020>
 8005b44:	d8800817 	ldw	r2,32(sp)
 8005b48:	11e7c83a 	sub	r19,r2,r7
 8005b4c:	0005883a 	mov	r2,zero
 8005b50:	003d5106 	br	8005098 <__alt_data_end+0xf8005098>
 8005b54:	00800044 	movi	r2,1
 8005b58:	003dbd06 	br	8005250 <__alt_data_end+0xf8005250>
 8005b5c:	d8800217 	ldw	r2,8(sp)
 8005b60:	00c00d84 	movi	r3,54
 8005b64:	dd000a17 	ldw	r20,40(sp)
 8005b68:	1885c83a 	sub	r2,r3,r2
 8005b6c:	dcc00817 	ldw	r19,32(sp)
 8005b70:	003d4906 	br	8005098 <__alt_data_end+0xf8005098>
 8005b74:	dcc00317 	ldw	r19,12(sp)
 8005b78:	9029883a 	mov	r20,r18
 8005b7c:	04400084 	movi	r17,2
 8005b80:	003be306 	br	8004b10 <__alt_data_end+0xf8004b10>
 8005b84:	d9000917 	ldw	r4,36(sp)
 8005b88:	203f0926 	beq	r4,zero,80057b0 <__alt_data_end+0xf80057b0>
 8005b8c:	d9800d17 	ldw	r6,52(sp)
 8005b90:	01bca30e 	bge	zero,r6,8004e20 <__alt_data_end+0xf8004e20>
 8005b94:	a00b883a 	mov	r5,r20
 8005b98:	9809883a 	mov	r4,r19
 8005b9c:	000d883a 	mov	r6,zero
 8005ba0:	01d00934 	movhi	r7,16420
 8005ba4:	800d5ac0 	call	800d5ac <__muldf3>
 8005ba8:	89000044 	addi	r4,r17,1
 8005bac:	1027883a 	mov	r19,r2
 8005bb0:	1829883a 	mov	r20,r3
 8005bb4:	800e6b40 	call	800e6b4 <__floatsidf>
 8005bb8:	9809883a 	mov	r4,r19
 8005bbc:	a00b883a 	mov	r5,r20
 8005bc0:	100d883a 	mov	r6,r2
 8005bc4:	180f883a 	mov	r7,r3
 8005bc8:	800d5ac0 	call	800d5ac <__muldf3>
 8005bcc:	01d00734 	movhi	r7,16412
 8005bd0:	1009883a 	mov	r4,r2
 8005bd4:	180b883a 	mov	r5,r3
 8005bd8:	000d883a 	mov	r6,zero
 8005bdc:	800c14c0 	call	800c14c <__adddf3>
 8005be0:	d9c00617 	ldw	r7,24(sp)
 8005be4:	05bf3034 	movhi	r22,64704
 8005be8:	1023883a 	mov	r17,r2
 8005bec:	39ffffc4 	addi	r7,r7,-1
 8005bf0:	d9c01315 	stw	r7,76(sp)
 8005bf4:	1daf883a 	add	r23,r3,r22
 8005bf8:	dac00d17 	ldw	r11,52(sp)
 8005bfc:	003be006 	br	8004b80 <__alt_data_end+0xf8004b80>
 8005c00:	d9801117 	ldw	r6,68(sp)
 8005c04:	d9c01217 	ldw	r7,72(sp)
 8005c08:	0009883a 	mov	r4,zero
 8005c0c:	014ff834 	movhi	r5,16352
 8005c10:	da801615 	stw	r10,88(sp)
 8005c14:	800ddac0 	call	800ddac <__subdf3>
 8005c18:	da801617 	ldw	r10,88(sp)
 8005c1c:	1009883a 	mov	r4,r2
 8005c20:	180b883a 	mov	r5,r3
 8005c24:	b80d883a 	mov	r6,r23
 8005c28:	500f883a 	mov	r7,r10
 8005c2c:	800d3e80 	call	800d3e8 <__gedf2>
 8005c30:	00bc7b0e 	bge	zero,r2,8004e20 <__alt_data_end+0xf8004e20>
 8005c34:	01000c04 	movi	r4,48
 8005c38:	00000106 	br	8005c40 <_dtoa_r+0x158c>
 8005c3c:	102d883a 	mov	r22,r2
 8005c40:	b0bfffc4 	addi	r2,r22,-1
 8005c44:	10c00007 	ldb	r3,0(r2)
 8005c48:	193ffc26 	beq	r3,r4,8005c3c <__alt_data_end+0xf8005c3c>
 8005c4c:	d9001317 	ldw	r4,76(sp)
 8005c50:	d9000615 	stw	r4,24(sp)
 8005c54:	003c4306 	br	8004d64 <__alt_data_end+0xf8004d64>
 8005c58:	d8c01317 	ldw	r3,76(sp)
 8005c5c:	dc001117 	ldw	r16,68(sp)
 8005c60:	d8c00615 	stw	r3,24(sp)
 8005c64:	003cee06 	br	8005020 <__alt_data_end+0xf8005020>
 8005c68:	dd401217 	ldw	r21,72(sp)
 8005c6c:	dc001117 	ldw	r16,68(sp)
 8005c70:	dc801417 	ldw	r18,80(sp)
 8005c74:	003c6a06 	br	8004e20 <__alt_data_end+0xf8004e20>
 8005c78:	103e6f1e 	bne	r2,zero,8005638 <__alt_data_end+0xf8005638>
 8005c7c:	b880004c 	andi	r2,r23,1
 8005c80:	103e6d26 	beq	r2,zero,8005638 <__alt_data_end+0xf8005638>
 8005c84:	003e6906 	br	800562c <__alt_data_end+0xf800562c>
 8005c88:	8009883a 	mov	r4,r16
 8005c8c:	880b883a 	mov	r5,r17
 8005c90:	01800284 	movi	r6,10
 8005c94:	000f883a 	mov	r7,zero
 8005c98:	8007c800 	call	8007c80 <__multadd>
 8005c9c:	d9000d17 	ldw	r4,52(sp)
 8005ca0:	1023883a 	mov	r17,r2
 8005ca4:	d9000915 	stw	r4,36(sp)
 8005ca8:	003d5006 	br	80051ec <__alt_data_end+0xf80051ec>
 8005cac:	04400084 	movi	r17,2
 8005cb0:	003b9706 	br	8004b10 <__alt_data_end+0xf8004b10>
 8005cb4:	d8801317 	ldw	r2,76(sp)
 8005cb8:	d8800615 	stw	r2,24(sp)
 8005cbc:	003cd806 	br	8005020 <__alt_data_end+0xf8005020>
 8005cc0:	d8801317 	ldw	r2,76(sp)
 8005cc4:	d8800615 	stw	r2,24(sp)
 8005cc8:	003c2606 	br	8004d64 <__alt_data_end+0xf8004d64>
 8005ccc:	04c00044 	movi	r19,1
 8005cd0:	003b3506 	br	80049a8 <__alt_data_end+0xf80049a8>
 8005cd4:	3023883a 	mov	r17,r6
 8005cd8:	000b883a 	mov	r5,zero
 8005cdc:	003b5106 	br	8004a24 <__alt_data_end+0xf8004a24>
 8005ce0:	20fd3426 	beq	r4,r3,80051b4 <__alt_data_end+0xf80051b4>
 8005ce4:	00c00f04 	movi	r3,60
 8005ce8:	1885c83a 	sub	r2,r3,r2
 8005cec:	003da106 	br	8005374 <__alt_data_end+0xf8005374>

08005cf0 <_fflush_r>:
 8005cf0:	defffb04 	addi	sp,sp,-20
 8005cf4:	dcc00315 	stw	r19,12(sp)
 8005cf8:	dc400115 	stw	r17,4(sp)
 8005cfc:	dfc00415 	stw	ra,16(sp)
 8005d00:	dc800215 	stw	r18,8(sp)
 8005d04:	dc000015 	stw	r16,0(sp)
 8005d08:	2027883a 	mov	r19,r4
 8005d0c:	2823883a 	mov	r17,r5
 8005d10:	20000226 	beq	r4,zero,8005d1c <_fflush_r+0x2c>
 8005d14:	20800e17 	ldw	r2,56(r4)
 8005d18:	10005826 	beq	r2,zero,8005e7c <_fflush_r+0x18c>
 8005d1c:	8880030b 	ldhu	r2,12(r17)
 8005d20:	10ffffcc 	andi	r3,r2,65535
 8005d24:	18e0001c 	xori	r3,r3,32768
 8005d28:	18e00004 	addi	r3,r3,-32768
 8005d2c:	18002b26 	beq	r3,zero,8005ddc <_fflush_r+0xec>
 8005d30:	10c0020c 	andi	r3,r2,8
 8005d34:	1800311e 	bne	r3,zero,8005dfc <_fflush_r+0x10c>
 8005d38:	88c00117 	ldw	r3,4(r17)
 8005d3c:	10820014 	ori	r2,r2,2048
 8005d40:	8880030d 	sth	r2,12(r17)
 8005d44:	00c05c0e 	bge	zero,r3,8005eb8 <_fflush_r+0x1c8>
 8005d48:	88c00a17 	ldw	r3,40(r17)
 8005d4c:	18002326 	beq	r3,zero,8005ddc <_fflush_r+0xec>
 8005d50:	9c000017 	ldw	r16,0(r19)
 8005d54:	1104000c 	andi	r4,r2,4096
 8005d58:	98000015 	stw	zero,0(r19)
 8005d5c:	20004b26 	beq	r4,zero,8005e8c <_fflush_r+0x19c>
 8005d60:	89801417 	ldw	r6,80(r17)
 8005d64:	1080010c 	andi	r2,r2,4
 8005d68:	10000626 	beq	r2,zero,8005d84 <_fflush_r+0x94>
 8005d6c:	89000117 	ldw	r4,4(r17)
 8005d70:	88800c17 	ldw	r2,48(r17)
 8005d74:	310dc83a 	sub	r6,r6,r4
 8005d78:	10000226 	beq	r2,zero,8005d84 <_fflush_r+0x94>
 8005d7c:	88800f17 	ldw	r2,60(r17)
 8005d80:	308dc83a 	sub	r6,r6,r2
 8005d84:	89400717 	ldw	r5,28(r17)
 8005d88:	9809883a 	mov	r4,r19
 8005d8c:	000f883a 	mov	r7,zero
 8005d90:	183ee83a 	callr	r3
 8005d94:	00ffffc4 	movi	r3,-1
 8005d98:	10c04a26 	beq	r2,r3,8005ec4 <_fflush_r+0x1d4>
 8005d9c:	88c0030b 	ldhu	r3,12(r17)
 8005da0:	89000417 	ldw	r4,16(r17)
 8005da4:	88000115 	stw	zero,4(r17)
 8005da8:	197dffcc 	andi	r5,r3,63487
 8005dac:	8940030d 	sth	r5,12(r17)
 8005db0:	89000015 	stw	r4,0(r17)
 8005db4:	18c4000c 	andi	r3,r3,4096
 8005db8:	1800581e 	bne	r3,zero,8005f1c <_fflush_r+0x22c>
 8005dbc:	89400c17 	ldw	r5,48(r17)
 8005dc0:	9c000015 	stw	r16,0(r19)
 8005dc4:	28000526 	beq	r5,zero,8005ddc <_fflush_r+0xec>
 8005dc8:	88801004 	addi	r2,r17,64
 8005dcc:	28800226 	beq	r5,r2,8005dd8 <_fflush_r+0xe8>
 8005dd0:	9809883a 	mov	r4,r19
 8005dd4:	80064440 	call	8006444 <_free_r>
 8005dd8:	88000c15 	stw	zero,48(r17)
 8005ddc:	0005883a 	mov	r2,zero
 8005de0:	dfc00417 	ldw	ra,16(sp)
 8005de4:	dcc00317 	ldw	r19,12(sp)
 8005de8:	dc800217 	ldw	r18,8(sp)
 8005dec:	dc400117 	ldw	r17,4(sp)
 8005df0:	dc000017 	ldw	r16,0(sp)
 8005df4:	dec00504 	addi	sp,sp,20
 8005df8:	f800283a 	ret
 8005dfc:	8c800417 	ldw	r18,16(r17)
 8005e00:	903ff626 	beq	r18,zero,8005ddc <__alt_data_end+0xf8005ddc>
 8005e04:	8c000017 	ldw	r16,0(r17)
 8005e08:	108000cc 	andi	r2,r2,3
 8005e0c:	8c800015 	stw	r18,0(r17)
 8005e10:	84a1c83a 	sub	r16,r16,r18
 8005e14:	10001b26 	beq	r2,zero,8005e84 <_fflush_r+0x194>
 8005e18:	0005883a 	mov	r2,zero
 8005e1c:	88800215 	stw	r2,8(r17)
 8005e20:	04000316 	blt	zero,r16,8005e30 <_fflush_r+0x140>
 8005e24:	003fed06 	br	8005ddc <__alt_data_end+0xf8005ddc>
 8005e28:	90a5883a 	add	r18,r18,r2
 8005e2c:	043feb0e 	bge	zero,r16,8005ddc <__alt_data_end+0xf8005ddc>
 8005e30:	88800917 	ldw	r2,36(r17)
 8005e34:	89400717 	ldw	r5,28(r17)
 8005e38:	800f883a 	mov	r7,r16
 8005e3c:	900d883a 	mov	r6,r18
 8005e40:	9809883a 	mov	r4,r19
 8005e44:	103ee83a 	callr	r2
 8005e48:	80a1c83a 	sub	r16,r16,r2
 8005e4c:	00bff616 	blt	zero,r2,8005e28 <__alt_data_end+0xf8005e28>
 8005e50:	88c0030b 	ldhu	r3,12(r17)
 8005e54:	00bfffc4 	movi	r2,-1
 8005e58:	18c01014 	ori	r3,r3,64
 8005e5c:	88c0030d 	sth	r3,12(r17)
 8005e60:	dfc00417 	ldw	ra,16(sp)
 8005e64:	dcc00317 	ldw	r19,12(sp)
 8005e68:	dc800217 	ldw	r18,8(sp)
 8005e6c:	dc400117 	ldw	r17,4(sp)
 8005e70:	dc000017 	ldw	r16,0(sp)
 8005e74:	dec00504 	addi	sp,sp,20
 8005e78:	f800283a 	ret
 8005e7c:	80060100 	call	8006010 <__sinit>
 8005e80:	003fa606 	br	8005d1c <__alt_data_end+0xf8005d1c>
 8005e84:	88800517 	ldw	r2,20(r17)
 8005e88:	003fe406 	br	8005e1c <__alt_data_end+0xf8005e1c>
 8005e8c:	89400717 	ldw	r5,28(r17)
 8005e90:	000d883a 	mov	r6,zero
 8005e94:	9809883a 	mov	r4,r19
 8005e98:	01c00044 	movi	r7,1
 8005e9c:	183ee83a 	callr	r3
 8005ea0:	100d883a 	mov	r6,r2
 8005ea4:	00bfffc4 	movi	r2,-1
 8005ea8:	30801326 	beq	r6,r2,8005ef8 <_fflush_r+0x208>
 8005eac:	8880030b 	ldhu	r2,12(r17)
 8005eb0:	88c00a17 	ldw	r3,40(r17)
 8005eb4:	003fab06 	br	8005d64 <__alt_data_end+0xf8005d64>
 8005eb8:	88c00f17 	ldw	r3,60(r17)
 8005ebc:	00ffa216 	blt	zero,r3,8005d48 <__alt_data_end+0xf8005d48>
 8005ec0:	003fc606 	br	8005ddc <__alt_data_end+0xf8005ddc>
 8005ec4:	98c00017 	ldw	r3,0(r19)
 8005ec8:	183fb426 	beq	r3,zero,8005d9c <__alt_data_end+0xf8005d9c>
 8005ecc:	01000744 	movi	r4,29
 8005ed0:	19000226 	beq	r3,r4,8005edc <_fflush_r+0x1ec>
 8005ed4:	01000584 	movi	r4,22
 8005ed8:	1900121e 	bne	r3,r4,8005f24 <_fflush_r+0x234>
 8005edc:	88c0030b 	ldhu	r3,12(r17)
 8005ee0:	88800417 	ldw	r2,16(r17)
 8005ee4:	88000115 	stw	zero,4(r17)
 8005ee8:	18fdffcc 	andi	r3,r3,63487
 8005eec:	88c0030d 	sth	r3,12(r17)
 8005ef0:	88800015 	stw	r2,0(r17)
 8005ef4:	003fb106 	br	8005dbc <__alt_data_end+0xf8005dbc>
 8005ef8:	98800017 	ldw	r2,0(r19)
 8005efc:	103feb26 	beq	r2,zero,8005eac <__alt_data_end+0xf8005eac>
 8005f00:	00c00744 	movi	r3,29
 8005f04:	10c00226 	beq	r2,r3,8005f10 <_fflush_r+0x220>
 8005f08:	00c00584 	movi	r3,22
 8005f0c:	10ffd01e 	bne	r2,r3,8005e50 <__alt_data_end+0xf8005e50>
 8005f10:	9c000015 	stw	r16,0(r19)
 8005f14:	0005883a 	mov	r2,zero
 8005f18:	003fb106 	br	8005de0 <__alt_data_end+0xf8005de0>
 8005f1c:	88801415 	stw	r2,80(r17)
 8005f20:	003fa606 	br	8005dbc <__alt_data_end+0xf8005dbc>
 8005f24:	88c0030b 	ldhu	r3,12(r17)
 8005f28:	18c01014 	ori	r3,r3,64
 8005f2c:	88c0030d 	sth	r3,12(r17)
 8005f30:	003fab06 	br	8005de0 <__alt_data_end+0xf8005de0>

08005f34 <fflush>:
 8005f34:	200b883a 	mov	r5,r4
 8005f38:	20000426 	beq	r4,zero,8005f4c <fflush+0x18>
 8005f3c:	00820074 	movhi	r2,2049
 8005f40:	108d7904 	addi	r2,r2,13796
 8005f44:	11000017 	ldw	r4,0(r2)
 8005f48:	8005cf01 	jmpi	8005cf0 <_fflush_r>
 8005f4c:	00820074 	movhi	r2,2049
 8005f50:	108d7804 	addi	r2,r2,13792
 8005f54:	11000017 	ldw	r4,0(r2)
 8005f58:	01420034 	movhi	r5,2048
 8005f5c:	29573c04 	addi	r5,r5,23792
 8005f60:	8006c681 	jmpi	8006c68 <_fwalk_reent>

08005f64 <__fp_lock>:
 8005f64:	0005883a 	mov	r2,zero
 8005f68:	f800283a 	ret

08005f6c <__fp_unlock>:
 8005f6c:	0005883a 	mov	r2,zero
 8005f70:	f800283a 	ret

08005f74 <_cleanup_r>:
 8005f74:	01420074 	movhi	r5,2049
 8005f78:	296b0e04 	addi	r5,r5,-21448
 8005f7c:	8006bc01 	jmpi	8006bc0 <_fwalk>

08005f80 <__sfmoreglue>:
 8005f80:	defffc04 	addi	sp,sp,-16
 8005f84:	dc800215 	stw	r18,8(sp)
 8005f88:	2825883a 	mov	r18,r5
 8005f8c:	dc000015 	stw	r16,0(sp)
 8005f90:	01401a04 	movi	r5,104
 8005f94:	2021883a 	mov	r16,r4
 8005f98:	9009883a 	mov	r4,r18
 8005f9c:	dfc00315 	stw	ra,12(sp)
 8005fa0:	dc400115 	stw	r17,4(sp)
 8005fa4:	800c1240 	call	800c124 <__mulsi3>
 8005fa8:	8009883a 	mov	r4,r16
 8005fac:	11400304 	addi	r5,r2,12
 8005fb0:	1023883a 	mov	r17,r2
 8005fb4:	8006fa80 	call	8006fa8 <_malloc_r>
 8005fb8:	1021883a 	mov	r16,r2
 8005fbc:	10000726 	beq	r2,zero,8005fdc <__sfmoreglue+0x5c>
 8005fc0:	11000304 	addi	r4,r2,12
 8005fc4:	10000015 	stw	zero,0(r2)
 8005fc8:	14800115 	stw	r18,4(r2)
 8005fcc:	11000215 	stw	r4,8(r2)
 8005fd0:	000b883a 	mov	r5,zero
 8005fd4:	880d883a 	mov	r6,r17
 8005fd8:	8007a9c0 	call	8007a9c <memset>
 8005fdc:	8005883a 	mov	r2,r16
 8005fe0:	dfc00317 	ldw	ra,12(sp)
 8005fe4:	dc800217 	ldw	r18,8(sp)
 8005fe8:	dc400117 	ldw	r17,4(sp)
 8005fec:	dc000017 	ldw	r16,0(sp)
 8005ff0:	dec00404 	addi	sp,sp,16
 8005ff4:	f800283a 	ret

08005ff8 <_cleanup>:
 8005ff8:	00820074 	movhi	r2,2049
 8005ffc:	108d7804 	addi	r2,r2,13792
 8006000:	11000017 	ldw	r4,0(r2)
 8006004:	01420074 	movhi	r5,2049
 8006008:	296b0e04 	addi	r5,r5,-21448
 800600c:	8006bc01 	jmpi	8006bc0 <_fwalk>

08006010 <__sinit>:
 8006010:	20800e17 	ldw	r2,56(r4)
 8006014:	defff704 	addi	sp,sp,-36
 8006018:	dc800215 	stw	r18,8(sp)
 800601c:	dfc00815 	stw	ra,32(sp)
 8006020:	ddc00715 	stw	r23,28(sp)
 8006024:	dd800615 	stw	r22,24(sp)
 8006028:	dd400515 	stw	r21,20(sp)
 800602c:	dd000415 	stw	r20,16(sp)
 8006030:	dcc00315 	stw	r19,12(sp)
 8006034:	dc400115 	stw	r17,4(sp)
 8006038:	dc000015 	stw	r16,0(sp)
 800603c:	2025883a 	mov	r18,r4
 8006040:	10004f1e 	bne	r2,zero,8006180 <__sinit+0x170>
 8006044:	24000117 	ldw	r16,4(r4)
 8006048:	00c20034 	movhi	r3,2048
 800604c:	18d7dd04 	addi	r3,r3,24436
 8006050:	20c00f15 	stw	r3,60(r4)
 8006054:	2080bb04 	addi	r2,r4,748
 8006058:	00c000c4 	movi	r3,3
 800605c:	05c00044 	movi	r23,1
 8006060:	20c0b915 	stw	r3,740(r4)
 8006064:	2080ba15 	stw	r2,744(r4)
 8006068:	25c00e15 	stw	r23,56(r4)
 800606c:	2000b815 	stw	zero,736(r4)
 8006070:	00800104 	movi	r2,4
 8006074:	81001704 	addi	r4,r16,92
 8006078:	000b883a 	mov	r5,zero
 800607c:	01800204 	movi	r6,8
 8006080:	80000015 	stw	zero,0(r16)
 8006084:	80000115 	stw	zero,4(r16)
 8006088:	80000215 	stw	zero,8(r16)
 800608c:	8080030d 	sth	r2,12(r16)
 8006090:	80001915 	stw	zero,100(r16)
 8006094:	8000038d 	sth	zero,14(r16)
 8006098:	80000415 	stw	zero,16(r16)
 800609c:	80000515 	stw	zero,20(r16)
 80060a0:	80000615 	stw	zero,24(r16)
 80060a4:	8007a9c0 	call	8007a9c <memset>
 80060a8:	94400217 	ldw	r17,8(r18)
 80060ac:	05820074 	movhi	r22,2049
 80060b0:	b5a48204 	addi	r22,r22,-28152
 80060b4:	05420074 	movhi	r21,2049
 80060b8:	ad649904 	addi	r21,r21,-28060
 80060bc:	05020074 	movhi	r20,2049
 80060c0:	a524b804 	addi	r20,r20,-27936
 80060c4:	04c20074 	movhi	r19,2049
 80060c8:	9ce4cf04 	addi	r19,r19,-27844
 80060cc:	84000715 	stw	r16,28(r16)
 80060d0:	85800815 	stw	r22,32(r16)
 80060d4:	85400915 	stw	r21,36(r16)
 80060d8:	85000a15 	stw	r20,40(r16)
 80060dc:	84c00b15 	stw	r19,44(r16)
 80060e0:	00800284 	movi	r2,10
 80060e4:	89001704 	addi	r4,r17,92
 80060e8:	000b883a 	mov	r5,zero
 80060ec:	01800204 	movi	r6,8
 80060f0:	88000015 	stw	zero,0(r17)
 80060f4:	88000115 	stw	zero,4(r17)
 80060f8:	88000215 	stw	zero,8(r17)
 80060fc:	8880030d 	sth	r2,12(r17)
 8006100:	88001915 	stw	zero,100(r17)
 8006104:	8dc0038d 	sth	r23,14(r17)
 8006108:	88000415 	stw	zero,16(r17)
 800610c:	88000515 	stw	zero,20(r17)
 8006110:	88000615 	stw	zero,24(r17)
 8006114:	8007a9c0 	call	8007a9c <memset>
 8006118:	94000317 	ldw	r16,12(r18)
 800611c:	00800484 	movi	r2,18
 8006120:	8c400715 	stw	r17,28(r17)
 8006124:	8d800815 	stw	r22,32(r17)
 8006128:	8d400915 	stw	r21,36(r17)
 800612c:	8d000a15 	stw	r20,40(r17)
 8006130:	8cc00b15 	stw	r19,44(r17)
 8006134:	8080030d 	sth	r2,12(r16)
 8006138:	00800084 	movi	r2,2
 800613c:	80000015 	stw	zero,0(r16)
 8006140:	80000115 	stw	zero,4(r16)
 8006144:	80000215 	stw	zero,8(r16)
 8006148:	80001915 	stw	zero,100(r16)
 800614c:	8080038d 	sth	r2,14(r16)
 8006150:	80000415 	stw	zero,16(r16)
 8006154:	80000515 	stw	zero,20(r16)
 8006158:	80000615 	stw	zero,24(r16)
 800615c:	81001704 	addi	r4,r16,92
 8006160:	000b883a 	mov	r5,zero
 8006164:	01800204 	movi	r6,8
 8006168:	8007a9c0 	call	8007a9c <memset>
 800616c:	84000715 	stw	r16,28(r16)
 8006170:	85800815 	stw	r22,32(r16)
 8006174:	85400915 	stw	r21,36(r16)
 8006178:	85000a15 	stw	r20,40(r16)
 800617c:	84c00b15 	stw	r19,44(r16)
 8006180:	dfc00817 	ldw	ra,32(sp)
 8006184:	ddc00717 	ldw	r23,28(sp)
 8006188:	dd800617 	ldw	r22,24(sp)
 800618c:	dd400517 	ldw	r21,20(sp)
 8006190:	dd000417 	ldw	r20,16(sp)
 8006194:	dcc00317 	ldw	r19,12(sp)
 8006198:	dc800217 	ldw	r18,8(sp)
 800619c:	dc400117 	ldw	r17,4(sp)
 80061a0:	dc000017 	ldw	r16,0(sp)
 80061a4:	dec00904 	addi	sp,sp,36
 80061a8:	f800283a 	ret

080061ac <__sfp>:
 80061ac:	defffb04 	addi	sp,sp,-20
 80061b0:	00820074 	movhi	r2,2049
 80061b4:	108d7804 	addi	r2,r2,13792
 80061b8:	dc800215 	stw	r18,8(sp)
 80061bc:	14800017 	ldw	r18,0(r2)
 80061c0:	dcc00315 	stw	r19,12(sp)
 80061c4:	dfc00415 	stw	ra,16(sp)
 80061c8:	90800e17 	ldw	r2,56(r18)
 80061cc:	dc400115 	stw	r17,4(sp)
 80061d0:	dc000015 	stw	r16,0(sp)
 80061d4:	2027883a 	mov	r19,r4
 80061d8:	10002f26 	beq	r2,zero,8006298 <__sfp+0xec>
 80061dc:	9480b804 	addi	r18,r18,736
 80061e0:	047fffc4 	movi	r17,-1
 80061e4:	91400117 	ldw	r5,4(r18)
 80061e8:	94000217 	ldw	r16,8(r18)
 80061ec:	297fffc4 	addi	r5,r5,-1
 80061f0:	28000a16 	blt	r5,zero,800621c <__sfp+0x70>
 80061f4:	8080030f 	ldh	r2,12(r16)
 80061f8:	10000c26 	beq	r2,zero,800622c <__sfp+0x80>
 80061fc:	80c01d04 	addi	r3,r16,116
 8006200:	00000206 	br	800620c <__sfp+0x60>
 8006204:	18bfe60f 	ldh	r2,-104(r3)
 8006208:	10000826 	beq	r2,zero,800622c <__sfp+0x80>
 800620c:	297fffc4 	addi	r5,r5,-1
 8006210:	1c3ffd04 	addi	r16,r3,-12
 8006214:	18c01a04 	addi	r3,r3,104
 8006218:	2c7ffa1e 	bne	r5,r17,8006204 <__alt_data_end+0xf8006204>
 800621c:	90800017 	ldw	r2,0(r18)
 8006220:	10002026 	beq	r2,zero,80062a4 <__sfp+0xf8>
 8006224:	1025883a 	mov	r18,r2
 8006228:	003fee06 	br	80061e4 <__alt_data_end+0xf80061e4>
 800622c:	00bfffc4 	movi	r2,-1
 8006230:	8080038d 	sth	r2,14(r16)
 8006234:	00800044 	movi	r2,1
 8006238:	8080030d 	sth	r2,12(r16)
 800623c:	80001915 	stw	zero,100(r16)
 8006240:	80000015 	stw	zero,0(r16)
 8006244:	80000215 	stw	zero,8(r16)
 8006248:	80000115 	stw	zero,4(r16)
 800624c:	80000415 	stw	zero,16(r16)
 8006250:	80000515 	stw	zero,20(r16)
 8006254:	80000615 	stw	zero,24(r16)
 8006258:	81001704 	addi	r4,r16,92
 800625c:	000b883a 	mov	r5,zero
 8006260:	01800204 	movi	r6,8
 8006264:	8007a9c0 	call	8007a9c <memset>
 8006268:	8005883a 	mov	r2,r16
 800626c:	80000c15 	stw	zero,48(r16)
 8006270:	80000d15 	stw	zero,52(r16)
 8006274:	80001115 	stw	zero,68(r16)
 8006278:	80001215 	stw	zero,72(r16)
 800627c:	dfc00417 	ldw	ra,16(sp)
 8006280:	dcc00317 	ldw	r19,12(sp)
 8006284:	dc800217 	ldw	r18,8(sp)
 8006288:	dc400117 	ldw	r17,4(sp)
 800628c:	dc000017 	ldw	r16,0(sp)
 8006290:	dec00504 	addi	sp,sp,20
 8006294:	f800283a 	ret
 8006298:	9009883a 	mov	r4,r18
 800629c:	80060100 	call	8006010 <__sinit>
 80062a0:	003fce06 	br	80061dc <__alt_data_end+0xf80061dc>
 80062a4:	9809883a 	mov	r4,r19
 80062a8:	01400104 	movi	r5,4
 80062ac:	8005f800 	call	8005f80 <__sfmoreglue>
 80062b0:	90800015 	stw	r2,0(r18)
 80062b4:	103fdb1e 	bne	r2,zero,8006224 <__alt_data_end+0xf8006224>
 80062b8:	00800304 	movi	r2,12
 80062bc:	98800015 	stw	r2,0(r19)
 80062c0:	0005883a 	mov	r2,zero
 80062c4:	003fed06 	br	800627c <__alt_data_end+0xf800627c>

080062c8 <__sfp_lock_acquire>:
 80062c8:	f800283a 	ret

080062cc <__sfp_lock_release>:
 80062cc:	f800283a 	ret

080062d0 <__sinit_lock_acquire>:
 80062d0:	f800283a 	ret

080062d4 <__sinit_lock_release>:
 80062d4:	f800283a 	ret

080062d8 <__fp_lock_all>:
 80062d8:	00820074 	movhi	r2,2049
 80062dc:	108d7904 	addi	r2,r2,13796
 80062e0:	11000017 	ldw	r4,0(r2)
 80062e4:	01420034 	movhi	r5,2048
 80062e8:	2957d904 	addi	r5,r5,24420
 80062ec:	8006bc01 	jmpi	8006bc0 <_fwalk>

080062f0 <__fp_unlock_all>:
 80062f0:	00820074 	movhi	r2,2049
 80062f4:	108d7904 	addi	r2,r2,13796
 80062f8:	11000017 	ldw	r4,0(r2)
 80062fc:	01420034 	movhi	r5,2048
 8006300:	2957db04 	addi	r5,r5,24428
 8006304:	8006bc01 	jmpi	8006bc0 <_fwalk>

08006308 <_malloc_trim_r>:
 8006308:	defffb04 	addi	sp,sp,-20
 800630c:	dcc00315 	stw	r19,12(sp)
 8006310:	dc800215 	stw	r18,8(sp)
 8006314:	dc400115 	stw	r17,4(sp)
 8006318:	dc000015 	stw	r16,0(sp)
 800631c:	2827883a 	mov	r19,r5
 8006320:	dfc00415 	stw	ra,16(sp)
 8006324:	04420074 	movhi	r17,2049
 8006328:	8c47f404 	addi	r17,r17,8144
 800632c:	2021883a 	mov	r16,r4
 8006330:	800ee9c0 	call	800ee9c <__malloc_lock>
 8006334:	88800217 	ldw	r2,8(r17)
 8006338:	14800117 	ldw	r18,4(r2)
 800633c:	00bfff04 	movi	r2,-4
 8006340:	90a4703a 	and	r18,r18,r2
 8006344:	94e7c83a 	sub	r19,r18,r19
 8006348:	9cc3fbc4 	addi	r19,r19,4079
 800634c:	9826d33a 	srli	r19,r19,12
 8006350:	0083ffc4 	movi	r2,4095
 8006354:	9cffffc4 	addi	r19,r19,-1
 8006358:	9826933a 	slli	r19,r19,12
 800635c:	14c0060e 	bge	r2,r19,8006378 <_malloc_trim_r+0x70>
 8006360:	8009883a 	mov	r4,r16
 8006364:	000b883a 	mov	r5,zero
 8006368:	80091a40 	call	80091a4 <_sbrk_r>
 800636c:	88c00217 	ldw	r3,8(r17)
 8006370:	1c87883a 	add	r3,r3,r18
 8006374:	10c00a26 	beq	r2,r3,80063a0 <_malloc_trim_r+0x98>
 8006378:	8009883a 	mov	r4,r16
 800637c:	800eebc0 	call	800eebc <__malloc_unlock>
 8006380:	0005883a 	mov	r2,zero
 8006384:	dfc00417 	ldw	ra,16(sp)
 8006388:	dcc00317 	ldw	r19,12(sp)
 800638c:	dc800217 	ldw	r18,8(sp)
 8006390:	dc400117 	ldw	r17,4(sp)
 8006394:	dc000017 	ldw	r16,0(sp)
 8006398:	dec00504 	addi	sp,sp,20
 800639c:	f800283a 	ret
 80063a0:	8009883a 	mov	r4,r16
 80063a4:	04cbc83a 	sub	r5,zero,r19
 80063a8:	80091a40 	call	80091a4 <_sbrk_r>
 80063ac:	00ffffc4 	movi	r3,-1
 80063b0:	10c01326 	beq	r2,r3,8006400 <_malloc_trim_r+0xf8>
 80063b4:	00820074 	movhi	r2,2049
 80063b8:	10945104 	addi	r2,r2,20804
 80063bc:	11000017 	ldw	r4,0(r2)
 80063c0:	88c00217 	ldw	r3,8(r17)
 80063c4:	94e5c83a 	sub	r18,r18,r19
 80063c8:	94800054 	ori	r18,r18,1
 80063cc:	24e7c83a 	sub	r19,r4,r19
 80063d0:	1c800115 	stw	r18,4(r3)
 80063d4:	8009883a 	mov	r4,r16
 80063d8:	14c00015 	stw	r19,0(r2)
 80063dc:	800eebc0 	call	800eebc <__malloc_unlock>
 80063e0:	00800044 	movi	r2,1
 80063e4:	dfc00417 	ldw	ra,16(sp)
 80063e8:	dcc00317 	ldw	r19,12(sp)
 80063ec:	dc800217 	ldw	r18,8(sp)
 80063f0:	dc400117 	ldw	r17,4(sp)
 80063f4:	dc000017 	ldw	r16,0(sp)
 80063f8:	dec00504 	addi	sp,sp,20
 80063fc:	f800283a 	ret
 8006400:	8009883a 	mov	r4,r16
 8006404:	000b883a 	mov	r5,zero
 8006408:	80091a40 	call	80091a4 <_sbrk_r>
 800640c:	88c00217 	ldw	r3,8(r17)
 8006410:	014003c4 	movi	r5,15
 8006414:	10c9c83a 	sub	r4,r2,r3
 8006418:	293fd70e 	bge	r5,r4,8006378 <__alt_data_end+0xf8006378>
 800641c:	01420074 	movhi	r5,2049
 8006420:	294d7b04 	addi	r5,r5,13804
 8006424:	29400017 	ldw	r5,0(r5)
 8006428:	21000054 	ori	r4,r4,1
 800642c:	19000115 	stw	r4,4(r3)
 8006430:	1145c83a 	sub	r2,r2,r5
 8006434:	01420074 	movhi	r5,2049
 8006438:	29545104 	addi	r5,r5,20804
 800643c:	28800015 	stw	r2,0(r5)
 8006440:	003fcd06 	br	8006378 <__alt_data_end+0xf8006378>

08006444 <_free_r>:
 8006444:	defffd04 	addi	sp,sp,-12
 8006448:	dc000015 	stw	r16,0(sp)
 800644c:	dfc00215 	stw	ra,8(sp)
 8006450:	dc400115 	stw	r17,4(sp)
 8006454:	2821883a 	mov	r16,r5
 8006458:	28004c26 	beq	r5,zero,800658c <_free_r+0x148>
 800645c:	2023883a 	mov	r17,r4
 8006460:	800ee9c0 	call	800ee9c <__malloc_lock>
 8006464:	823fff17 	ldw	r8,-4(r16)
 8006468:	00bfff84 	movi	r2,-2
 800646c:	81bffe04 	addi	r6,r16,-8
 8006470:	4084703a 	and	r2,r8,r2
 8006474:	3087883a 	add	r3,r6,r2
 8006478:	01420074 	movhi	r5,2049
 800647c:	2947f404 	addi	r5,r5,8144
 8006480:	1a400117 	ldw	r9,4(r3)
 8006484:	29000217 	ldw	r4,8(r5)
 8006488:	01ffff04 	movi	r7,-4
 800648c:	49ce703a 	and	r7,r9,r7
 8006490:	20c06526 	beq	r4,r3,8006628 <_free_r+0x1e4>
 8006494:	19c00115 	stw	r7,4(r3)
 8006498:	4200004c 	andi	r8,r8,1
 800649c:	40003026 	beq	r8,zero,8006560 <_free_r+0x11c>
 80064a0:	0009883a 	mov	r4,zero
 80064a4:	19d1883a 	add	r8,r3,r7
 80064a8:	42000117 	ldw	r8,4(r8)
 80064ac:	4200004c 	andi	r8,r8,1
 80064b0:	4000061e 	bne	r8,zero,80064cc <_free_r+0x88>
 80064b4:	11c5883a 	add	r2,r2,r7
 80064b8:	19c00217 	ldw	r7,8(r3)
 80064bc:	20004e26 	beq	r4,zero,80065f8 <_free_r+0x1b4>
 80064c0:	18c00317 	ldw	r3,12(r3)
 80064c4:	38c00315 	stw	r3,12(r7)
 80064c8:	19c00215 	stw	r7,8(r3)
 80064cc:	10c00054 	ori	r3,r2,1
 80064d0:	30c00115 	stw	r3,4(r6)
 80064d4:	3087883a 	add	r3,r6,r2
 80064d8:	18800015 	stw	r2,0(r3)
 80064dc:	20001a1e 	bne	r4,zero,8006548 <_free_r+0x104>
 80064e0:	00c07fc4 	movi	r3,511
 80064e4:	18802e2e 	bgeu	r3,r2,80065a0 <_free_r+0x15c>
 80064e8:	1006d27a 	srli	r3,r2,9
 80064ec:	01000104 	movi	r4,4
 80064f0:	20c06636 	bltu	r4,r3,800668c <_free_r+0x248>
 80064f4:	1008d1ba 	srli	r4,r2,6
 80064f8:	21000e04 	addi	r4,r4,56
 80064fc:	210f883a 	add	r7,r4,r4
 8006500:	39cf883a 	add	r7,r7,r7
 8006504:	39cf883a 	add	r7,r7,r7
 8006508:	29cf883a 	add	r7,r5,r7
 800650c:	38c00217 	ldw	r3,8(r7)
 8006510:	01420074 	movhi	r5,2049
 8006514:	2947f404 	addi	r5,r5,8144
 8006518:	19c06126 	beq	r3,r7,80066a0 <_free_r+0x25c>
 800651c:	013fff04 	movi	r4,-4
 8006520:	19400117 	ldw	r5,4(r3)
 8006524:	290a703a 	and	r5,r5,r4
 8006528:	1140022e 	bgeu	r2,r5,8006534 <_free_r+0xf0>
 800652c:	18c00217 	ldw	r3,8(r3)
 8006530:	38fffb1e 	bne	r7,r3,8006520 <__alt_data_end+0xf8006520>
 8006534:	18800317 	ldw	r2,12(r3)
 8006538:	30800315 	stw	r2,12(r6)
 800653c:	30c00215 	stw	r3,8(r6)
 8006540:	11800215 	stw	r6,8(r2)
 8006544:	19800315 	stw	r6,12(r3)
 8006548:	8809883a 	mov	r4,r17
 800654c:	dfc00217 	ldw	ra,8(sp)
 8006550:	dc400117 	ldw	r17,4(sp)
 8006554:	dc000017 	ldw	r16,0(sp)
 8006558:	dec00304 	addi	sp,sp,12
 800655c:	800eebc1 	jmpi	800eebc <__malloc_unlock>
 8006560:	813ffe17 	ldw	r4,-8(r16)
 8006564:	2a400204 	addi	r9,r5,8
 8006568:	310dc83a 	sub	r6,r6,r4
 800656c:	32000217 	ldw	r8,8(r6)
 8006570:	1105883a 	add	r2,r2,r4
 8006574:	42404326 	beq	r8,r9,8006684 <_free_r+0x240>
 8006578:	32400317 	ldw	r9,12(r6)
 800657c:	0009883a 	mov	r4,zero
 8006580:	42400315 	stw	r9,12(r8)
 8006584:	4a000215 	stw	r8,8(r9)
 8006588:	003fc606 	br	80064a4 <__alt_data_end+0xf80064a4>
 800658c:	dfc00217 	ldw	ra,8(sp)
 8006590:	dc400117 	ldw	r17,4(sp)
 8006594:	dc000017 	ldw	r16,0(sp)
 8006598:	dec00304 	addi	sp,sp,12
 800659c:	f800283a 	ret
 80065a0:	1004d0fa 	srli	r2,r2,3
 80065a4:	02000044 	movi	r8,1
 80065a8:	29c00117 	ldw	r7,4(r5)
 80065ac:	1087883a 	add	r3,r2,r2
 80065b0:	18c7883a 	add	r3,r3,r3
 80065b4:	18c7883a 	add	r3,r3,r3
 80065b8:	28c7883a 	add	r3,r5,r3
 80065bc:	1005d0ba 	srai	r2,r2,2
 80065c0:	19000217 	ldw	r4,8(r3)
 80065c4:	30c00315 	stw	r3,12(r6)
 80065c8:	4084983a 	sll	r2,r8,r2
 80065cc:	31000215 	stw	r4,8(r6)
 80065d0:	19800215 	stw	r6,8(r3)
 80065d4:	11c4b03a 	or	r2,r2,r7
 80065d8:	21800315 	stw	r6,12(r4)
 80065dc:	8809883a 	mov	r4,r17
 80065e0:	28800115 	stw	r2,4(r5)
 80065e4:	dfc00217 	ldw	ra,8(sp)
 80065e8:	dc400117 	ldw	r17,4(sp)
 80065ec:	dc000017 	ldw	r16,0(sp)
 80065f0:	dec00304 	addi	sp,sp,12
 80065f4:	800eebc1 	jmpi	800eebc <__malloc_unlock>
 80065f8:	02020074 	movhi	r8,2049
 80065fc:	4207f604 	addi	r8,r8,8152
 8006600:	3a3faf1e 	bne	r7,r8,80064c0 <__alt_data_end+0xf80064c0>
 8006604:	29800515 	stw	r6,20(r5)
 8006608:	29800415 	stw	r6,16(r5)
 800660c:	10c00054 	ori	r3,r2,1
 8006610:	31c00315 	stw	r7,12(r6)
 8006614:	31c00215 	stw	r7,8(r6)
 8006618:	30c00115 	stw	r3,4(r6)
 800661c:	308d883a 	add	r6,r6,r2
 8006620:	30800015 	stw	r2,0(r6)
 8006624:	003fc806 	br	8006548 <__alt_data_end+0xf8006548>
 8006628:	4200004c 	andi	r8,r8,1
 800662c:	3885883a 	add	r2,r7,r2
 8006630:	4000071e 	bne	r8,zero,8006650 <_free_r+0x20c>
 8006634:	81fffe17 	ldw	r7,-8(r16)
 8006638:	31cdc83a 	sub	r6,r6,r7
 800663c:	30c00317 	ldw	r3,12(r6)
 8006640:	31000217 	ldw	r4,8(r6)
 8006644:	11c5883a 	add	r2,r2,r7
 8006648:	20c00315 	stw	r3,12(r4)
 800664c:	19000215 	stw	r4,8(r3)
 8006650:	00c20074 	movhi	r3,2049
 8006654:	18cd7c04 	addi	r3,r3,13808
 8006658:	11000054 	ori	r4,r2,1
 800665c:	18c00017 	ldw	r3,0(r3)
 8006660:	31000115 	stw	r4,4(r6)
 8006664:	29800215 	stw	r6,8(r5)
 8006668:	10ffb736 	bltu	r2,r3,8006548 <__alt_data_end+0xf8006548>
 800666c:	00820074 	movhi	r2,2049
 8006670:	10944904 	addi	r2,r2,20772
 8006674:	11400017 	ldw	r5,0(r2)
 8006678:	8809883a 	mov	r4,r17
 800667c:	80063080 	call	8006308 <_malloc_trim_r>
 8006680:	003fb106 	br	8006548 <__alt_data_end+0xf8006548>
 8006684:	01000044 	movi	r4,1
 8006688:	003f8606 	br	80064a4 <__alt_data_end+0xf80064a4>
 800668c:	01000504 	movi	r4,20
 8006690:	20c00b36 	bltu	r4,r3,80066c0 <_free_r+0x27c>
 8006694:	190016c4 	addi	r4,r3,91
 8006698:	210f883a 	add	r7,r4,r4
 800669c:	003f9806 	br	8006500 <__alt_data_end+0xf8006500>
 80066a0:	2009d0ba 	srai	r4,r4,2
 80066a4:	00800044 	movi	r2,1
 80066a8:	29c00117 	ldw	r7,4(r5)
 80066ac:	1108983a 	sll	r4,r2,r4
 80066b0:	1805883a 	mov	r2,r3
 80066b4:	21c8b03a 	or	r4,r4,r7
 80066b8:	29000115 	stw	r4,4(r5)
 80066bc:	003f9e06 	br	8006538 <__alt_data_end+0xf8006538>
 80066c0:	01001504 	movi	r4,84
 80066c4:	20c00436 	bltu	r4,r3,80066d8 <_free_r+0x294>
 80066c8:	1008d33a 	srli	r4,r2,12
 80066cc:	21001b84 	addi	r4,r4,110
 80066d0:	210f883a 	add	r7,r4,r4
 80066d4:	003f8a06 	br	8006500 <__alt_data_end+0xf8006500>
 80066d8:	01005504 	movi	r4,340
 80066dc:	20c00436 	bltu	r4,r3,80066f0 <_free_r+0x2ac>
 80066e0:	1008d3fa 	srli	r4,r2,15
 80066e4:	21001dc4 	addi	r4,r4,119
 80066e8:	210f883a 	add	r7,r4,r4
 80066ec:	003f8406 	br	8006500 <__alt_data_end+0xf8006500>
 80066f0:	01015504 	movi	r4,1364
 80066f4:	20c00436 	bltu	r4,r3,8006708 <_free_r+0x2c4>
 80066f8:	1008d4ba 	srli	r4,r2,18
 80066fc:	21001f04 	addi	r4,r4,124
 8006700:	210f883a 	add	r7,r4,r4
 8006704:	003f7e06 	br	8006500 <__alt_data_end+0xf8006500>
 8006708:	01c03f04 	movi	r7,252
 800670c:	01001f84 	movi	r4,126
 8006710:	003f7b06 	br	8006500 <__alt_data_end+0xf8006500>

08006714 <__sfvwrite_r>:
 8006714:	30800217 	ldw	r2,8(r6)
 8006718:	defff404 	addi	sp,sp,-48
 800671c:	dcc00515 	stw	r19,20(sp)
 8006720:	dfc00b15 	stw	ra,44(sp)
 8006724:	df000a15 	stw	fp,40(sp)
 8006728:	ddc00915 	stw	r23,36(sp)
 800672c:	dd800815 	stw	r22,32(sp)
 8006730:	dd400715 	stw	r21,28(sp)
 8006734:	dd000615 	stw	r20,24(sp)
 8006738:	dc800415 	stw	r18,16(sp)
 800673c:	dc400315 	stw	r17,12(sp)
 8006740:	dc000215 	stw	r16,8(sp)
 8006744:	3027883a 	mov	r19,r6
 8006748:	10001d26 	beq	r2,zero,80067c0 <__sfvwrite_r+0xac>
 800674c:	2880030b 	ldhu	r2,12(r5)
 8006750:	202b883a 	mov	r21,r4
 8006754:	2821883a 	mov	r16,r5
 8006758:	10c0020c 	andi	r3,r2,8
 800675c:	18002526 	beq	r3,zero,80067f4 <__sfvwrite_r+0xe0>
 8006760:	28c00417 	ldw	r3,16(r5)
 8006764:	18002326 	beq	r3,zero,80067f4 <__sfvwrite_r+0xe0>
 8006768:	10c0008c 	andi	r3,r2,2
 800676c:	9c400017 	ldw	r17,0(r19)
 8006770:	18002826 	beq	r3,zero,8006814 <__sfvwrite_r+0x100>
 8006774:	0029883a 	mov	r20,zero
 8006778:	0025883a 	mov	r18,zero
 800677c:	05810004 	movi	r22,1024
 8006780:	a00d883a 	mov	r6,r20
 8006784:	a809883a 	mov	r4,r21
 8006788:	90004726 	beq	r18,zero,80068a8 <__sfvwrite_r+0x194>
 800678c:	900f883a 	mov	r7,r18
 8006790:	81400717 	ldw	r5,28(r16)
 8006794:	b480012e 	bgeu	r22,r18,800679c <__sfvwrite_r+0x88>
 8006798:	01c10004 	movi	r7,1024
 800679c:	80800917 	ldw	r2,36(r16)
 80067a0:	103ee83a 	callr	r2
 80067a4:	00804c0e 	bge	zero,r2,80068d8 <__sfvwrite_r+0x1c4>
 80067a8:	98c00217 	ldw	r3,8(r19)
 80067ac:	a0a9883a 	add	r20,r20,r2
 80067b0:	90a5c83a 	sub	r18,r18,r2
 80067b4:	1885c83a 	sub	r2,r3,r2
 80067b8:	98800215 	stw	r2,8(r19)
 80067bc:	103ff01e 	bne	r2,zero,8006780 <__alt_data_end+0xf8006780>
 80067c0:	0005883a 	mov	r2,zero
 80067c4:	dfc00b17 	ldw	ra,44(sp)
 80067c8:	df000a17 	ldw	fp,40(sp)
 80067cc:	ddc00917 	ldw	r23,36(sp)
 80067d0:	dd800817 	ldw	r22,32(sp)
 80067d4:	dd400717 	ldw	r21,28(sp)
 80067d8:	dd000617 	ldw	r20,24(sp)
 80067dc:	dcc00517 	ldw	r19,20(sp)
 80067e0:	dc800417 	ldw	r18,16(sp)
 80067e4:	dc400317 	ldw	r17,12(sp)
 80067e8:	dc000217 	ldw	r16,8(sp)
 80067ec:	dec00c04 	addi	sp,sp,48
 80067f0:	f800283a 	ret
 80067f4:	a809883a 	mov	r4,r21
 80067f8:	800b883a 	mov	r5,r16
 80067fc:	80043540 	call	8004354 <__swsetup_r>
 8006800:	1000e81e 	bne	r2,zero,8006ba4 <__sfvwrite_r+0x490>
 8006804:	8080030b 	ldhu	r2,12(r16)
 8006808:	9c400017 	ldw	r17,0(r19)
 800680c:	10c0008c 	andi	r3,r2,2
 8006810:	183fd81e 	bne	r3,zero,8006774 <__alt_data_end+0xf8006774>
 8006814:	10c0004c 	andi	r3,r2,1
 8006818:	002d883a 	mov	r22,zero
 800681c:	1800331e 	bne	r3,zero,80068ec <__sfvwrite_r+0x1d8>
 8006820:	0025883a 	mov	r18,zero
 8006824:	90001c26 	beq	r18,zero,8006898 <__sfvwrite_r+0x184>
 8006828:	10c0800c 	andi	r3,r2,512
 800682c:	85000217 	ldw	r20,8(r16)
 8006830:	18006f26 	beq	r3,zero,80069f0 <__sfvwrite_r+0x2dc>
 8006834:	95008936 	bltu	r18,r20,8006a5c <__sfvwrite_r+0x348>
 8006838:	10c1200c 	andi	r3,r2,1152
 800683c:	1800a11e 	bne	r3,zero,8006ac4 <__sfvwrite_r+0x3b0>
 8006840:	81000017 	ldw	r4,0(r16)
 8006844:	a02f883a 	mov	r23,r20
 8006848:	a039883a 	mov	fp,r20
 800684c:	9029883a 	mov	r20,r18
 8006850:	b00b883a 	mov	r5,r22
 8006854:	b80d883a 	mov	r6,r23
 8006858:	80079600 	call	8007960 <memmove>
 800685c:	81400217 	ldw	r5,8(r16)
 8006860:	81000017 	ldw	r4,0(r16)
 8006864:	9005883a 	mov	r2,r18
 8006868:	2f39c83a 	sub	fp,r5,fp
 800686c:	25c7883a 	add	r3,r4,r23
 8006870:	87000215 	stw	fp,8(r16)
 8006874:	80c00015 	stw	r3,0(r16)
 8006878:	98c00217 	ldw	r3,8(r19)
 800687c:	b0ad883a 	add	r22,r22,r2
 8006880:	90a5c83a 	sub	r18,r18,r2
 8006884:	1d29c83a 	sub	r20,r3,r20
 8006888:	9d000215 	stw	r20,8(r19)
 800688c:	a03fcc26 	beq	r20,zero,80067c0 <__alt_data_end+0xf80067c0>
 8006890:	8080030b 	ldhu	r2,12(r16)
 8006894:	903fe41e 	bne	r18,zero,8006828 <__alt_data_end+0xf8006828>
 8006898:	8d800017 	ldw	r22,0(r17)
 800689c:	8c800117 	ldw	r18,4(r17)
 80068a0:	8c400204 	addi	r17,r17,8
 80068a4:	003fdf06 	br	8006824 <__alt_data_end+0xf8006824>
 80068a8:	8d000017 	ldw	r20,0(r17)
 80068ac:	8c800117 	ldw	r18,4(r17)
 80068b0:	8c400204 	addi	r17,r17,8
 80068b4:	003fb206 	br	8006780 <__alt_data_end+0xf8006780>
 80068b8:	8008bd80 	call	8008bd8 <_realloc_r>
 80068bc:	1039883a 	mov	fp,r2
 80068c0:	10009d1e 	bne	r2,zero,8006b38 <__sfvwrite_r+0x424>
 80068c4:	81400417 	ldw	r5,16(r16)
 80068c8:	a809883a 	mov	r4,r21
 80068cc:	80064440 	call	8006444 <_free_r>
 80068d0:	00800304 	movi	r2,12
 80068d4:	a8800015 	stw	r2,0(r21)
 80068d8:	80c0030b 	ldhu	r3,12(r16)
 80068dc:	00bfffc4 	movi	r2,-1
 80068e0:	18c01014 	ori	r3,r3,64
 80068e4:	80c0030d 	sth	r3,12(r16)
 80068e8:	003fb606 	br	80067c4 <__alt_data_end+0xf80067c4>
 80068ec:	0007883a 	mov	r3,zero
 80068f0:	0039883a 	mov	fp,zero
 80068f4:	0025883a 	mov	r18,zero
 80068f8:	90001f26 	beq	r18,zero,8006978 <__sfvwrite_r+0x264>
 80068fc:	18006826 	beq	r3,zero,8006aa0 <__sfvwrite_r+0x38c>
 8006900:	b02f883a 	mov	r23,r22
 8006904:	9580012e 	bgeu	r18,r22,800690c <__sfvwrite_r+0x1f8>
 8006908:	902f883a 	mov	r23,r18
 800690c:	81000017 	ldw	r4,0(r16)
 8006910:	80800417 	ldw	r2,16(r16)
 8006914:	b829883a 	mov	r20,r23
 8006918:	81800217 	ldw	r6,8(r16)
 800691c:	81c00517 	ldw	r7,20(r16)
 8006920:	1100022e 	bgeu	r2,r4,800692c <__sfvwrite_r+0x218>
 8006924:	31d1883a 	add	r8,r6,r7
 8006928:	45c01816 	blt	r8,r23,800698c <__sfvwrite_r+0x278>
 800692c:	b9c03f16 	blt	r23,r7,8006a2c <__sfvwrite_r+0x318>
 8006930:	80800917 	ldw	r2,36(r16)
 8006934:	81400717 	ldw	r5,28(r16)
 8006938:	a809883a 	mov	r4,r21
 800693c:	d8c00115 	stw	r3,4(sp)
 8006940:	e00d883a 	mov	r6,fp
 8006944:	103ee83a 	callr	r2
 8006948:	1029883a 	mov	r20,r2
 800694c:	d8c00117 	ldw	r3,4(sp)
 8006950:	00bfe10e 	bge	zero,r2,80068d8 <__alt_data_end+0xf80068d8>
 8006954:	b52dc83a 	sub	r22,r22,r20
 8006958:	b0001f26 	beq	r22,zero,80069d8 <__sfvwrite_r+0x2c4>
 800695c:	98800217 	ldw	r2,8(r19)
 8006960:	e539883a 	add	fp,fp,r20
 8006964:	9525c83a 	sub	r18,r18,r20
 8006968:	1529c83a 	sub	r20,r2,r20
 800696c:	9d000215 	stw	r20,8(r19)
 8006970:	a03f9326 	beq	r20,zero,80067c0 <__alt_data_end+0xf80067c0>
 8006974:	903fe11e 	bne	r18,zero,80068fc <__alt_data_end+0xf80068fc>
 8006978:	8f000017 	ldw	fp,0(r17)
 800697c:	8c800117 	ldw	r18,4(r17)
 8006980:	0007883a 	mov	r3,zero
 8006984:	8c400204 	addi	r17,r17,8
 8006988:	003fdb06 	br	80068f8 <__alt_data_end+0xf80068f8>
 800698c:	400d883a 	mov	r6,r8
 8006990:	e00b883a 	mov	r5,fp
 8006994:	d8c00115 	stw	r3,4(sp)
 8006998:	da000015 	stw	r8,0(sp)
 800699c:	80079600 	call	8007960 <memmove>
 80069a0:	da000017 	ldw	r8,0(sp)
 80069a4:	80800017 	ldw	r2,0(r16)
 80069a8:	a809883a 	mov	r4,r21
 80069ac:	800b883a 	mov	r5,r16
 80069b0:	1205883a 	add	r2,r2,r8
 80069b4:	80800015 	stw	r2,0(r16)
 80069b8:	da000015 	stw	r8,0(sp)
 80069bc:	8005cf00 	call	8005cf0 <_fflush_r>
 80069c0:	d8c00117 	ldw	r3,4(sp)
 80069c4:	da000017 	ldw	r8,0(sp)
 80069c8:	103fc31e 	bne	r2,zero,80068d8 <__alt_data_end+0xf80068d8>
 80069cc:	4029883a 	mov	r20,r8
 80069d0:	b52dc83a 	sub	r22,r22,r20
 80069d4:	b03fe11e 	bne	r22,zero,800695c <__alt_data_end+0xf800695c>
 80069d8:	a809883a 	mov	r4,r21
 80069dc:	800b883a 	mov	r5,r16
 80069e0:	8005cf00 	call	8005cf0 <_fflush_r>
 80069e4:	103fbc1e 	bne	r2,zero,80068d8 <__alt_data_end+0xf80068d8>
 80069e8:	0007883a 	mov	r3,zero
 80069ec:	003fdb06 	br	800695c <__alt_data_end+0xf800695c>
 80069f0:	81000017 	ldw	r4,0(r16)
 80069f4:	80800417 	ldw	r2,16(r16)
 80069f8:	1100012e 	bgeu	r2,r4,8006a00 <__sfvwrite_r+0x2ec>
 80069fc:	a4805836 	bltu	r20,r18,8006b60 <__sfvwrite_r+0x44c>
 8006a00:	81c00517 	ldw	r7,20(r16)
 8006a04:	91c01a36 	bltu	r18,r7,8006a70 <__sfvwrite_r+0x35c>
 8006a08:	80800917 	ldw	r2,36(r16)
 8006a0c:	81400717 	ldw	r5,28(r16)
 8006a10:	a809883a 	mov	r4,r21
 8006a14:	b00d883a 	mov	r6,r22
 8006a18:	103ee83a 	callr	r2
 8006a1c:	1029883a 	mov	r20,r2
 8006a20:	00bfad0e 	bge	zero,r2,80068d8 <__alt_data_end+0xf80068d8>
 8006a24:	a005883a 	mov	r2,r20
 8006a28:	003f9306 	br	8006878 <__alt_data_end+0xf8006878>
 8006a2c:	b80d883a 	mov	r6,r23
 8006a30:	e00b883a 	mov	r5,fp
 8006a34:	d8c00115 	stw	r3,4(sp)
 8006a38:	80079600 	call	8007960 <memmove>
 8006a3c:	80800217 	ldw	r2,8(r16)
 8006a40:	81000017 	ldw	r4,0(r16)
 8006a44:	d8c00117 	ldw	r3,4(sp)
 8006a48:	15c5c83a 	sub	r2,r2,r23
 8006a4c:	25ef883a 	add	r23,r4,r23
 8006a50:	80800215 	stw	r2,8(r16)
 8006a54:	85c00015 	stw	r23,0(r16)
 8006a58:	003fbe06 	br	8006954 <__alt_data_end+0xf8006954>
 8006a5c:	81000017 	ldw	r4,0(r16)
 8006a60:	9039883a 	mov	fp,r18
 8006a64:	9029883a 	mov	r20,r18
 8006a68:	902f883a 	mov	r23,r18
 8006a6c:	003f7806 	br	8006850 <__alt_data_end+0xf8006850>
 8006a70:	b00b883a 	mov	r5,r22
 8006a74:	900d883a 	mov	r6,r18
 8006a78:	80079600 	call	8007960 <memmove>
 8006a7c:	80c00217 	ldw	r3,8(r16)
 8006a80:	80800017 	ldw	r2,0(r16)
 8006a84:	9029883a 	mov	r20,r18
 8006a88:	1c87c83a 	sub	r3,r3,r18
 8006a8c:	1485883a 	add	r2,r2,r18
 8006a90:	80800015 	stw	r2,0(r16)
 8006a94:	80c00215 	stw	r3,8(r16)
 8006a98:	9005883a 	mov	r2,r18
 8006a9c:	003f7606 	br	8006878 <__alt_data_end+0xf8006878>
 8006aa0:	e009883a 	mov	r4,fp
 8006aa4:	01400284 	movi	r5,10
 8006aa8:	900d883a 	mov	r6,r18
 8006aac:	800776c0 	call	800776c <memchr>
 8006ab0:	10003926 	beq	r2,zero,8006b98 <__sfvwrite_r+0x484>
 8006ab4:	15800044 	addi	r22,r2,1
 8006ab8:	b72dc83a 	sub	r22,r22,fp
 8006abc:	00c00044 	movi	r3,1
 8006ac0:	003f8f06 	br	8006900 <__alt_data_end+0xf8006900>
 8006ac4:	81000517 	ldw	r4,20(r16)
 8006ac8:	81400417 	ldw	r5,16(r16)
 8006acc:	80c00017 	ldw	r3,0(r16)
 8006ad0:	210d883a 	add	r6,r4,r4
 8006ad4:	3109883a 	add	r4,r6,r4
 8006ad8:	2028d7fa 	srli	r20,r4,31
 8006adc:	196fc83a 	sub	r23,r3,r5
 8006ae0:	b9800044 	addi	r6,r23,1
 8006ae4:	a109883a 	add	r4,r20,r4
 8006ae8:	2029d07a 	srai	r20,r4,1
 8006aec:	348d883a 	add	r6,r6,r18
 8006af0:	a180272e 	bgeu	r20,r6,8006b90 <__sfvwrite_r+0x47c>
 8006af4:	3029883a 	mov	r20,r6
 8006af8:	1081000c 	andi	r2,r2,1024
 8006afc:	a809883a 	mov	r4,r21
 8006b00:	103f6d26 	beq	r2,zero,80068b8 <__alt_data_end+0xf80068b8>
 8006b04:	300b883a 	mov	r5,r6
 8006b08:	8006fa80 	call	8006fa8 <_malloc_r>
 8006b0c:	1039883a 	mov	fp,r2
 8006b10:	103f6f26 	beq	r2,zero,80068d0 <__alt_data_end+0xf80068d0>
 8006b14:	81400417 	ldw	r5,16(r16)
 8006b18:	1009883a 	mov	r4,r2
 8006b1c:	b80d883a 	mov	r6,r23
 8006b20:	80078540 	call	8007854 <memcpy>
 8006b24:	8080030b 	ldhu	r2,12(r16)
 8006b28:	00fedfc4 	movi	r3,-1153
 8006b2c:	10c4703a 	and	r2,r2,r3
 8006b30:	10802014 	ori	r2,r2,128
 8006b34:	8080030d 	sth	r2,12(r16)
 8006b38:	e5c9883a 	add	r4,fp,r23
 8006b3c:	a5c7c83a 	sub	r3,r20,r23
 8006b40:	87000415 	stw	fp,16(r16)
 8006b44:	85000515 	stw	r20,20(r16)
 8006b48:	81000015 	stw	r4,0(r16)
 8006b4c:	9039883a 	mov	fp,r18
 8006b50:	80c00215 	stw	r3,8(r16)
 8006b54:	9029883a 	mov	r20,r18
 8006b58:	902f883a 	mov	r23,r18
 8006b5c:	003f3c06 	br	8006850 <__alt_data_end+0xf8006850>
 8006b60:	b00b883a 	mov	r5,r22
 8006b64:	a00d883a 	mov	r6,r20
 8006b68:	80079600 	call	8007960 <memmove>
 8006b6c:	80800017 	ldw	r2,0(r16)
 8006b70:	a809883a 	mov	r4,r21
 8006b74:	800b883a 	mov	r5,r16
 8006b78:	1505883a 	add	r2,r2,r20
 8006b7c:	80800015 	stw	r2,0(r16)
 8006b80:	8005cf00 	call	8005cf0 <_fflush_r>
 8006b84:	103f541e 	bne	r2,zero,80068d8 <__alt_data_end+0xf80068d8>
 8006b88:	a005883a 	mov	r2,r20
 8006b8c:	003f3a06 	br	8006878 <__alt_data_end+0xf8006878>
 8006b90:	a00d883a 	mov	r6,r20
 8006b94:	003fd806 	br	8006af8 <__alt_data_end+0xf8006af8>
 8006b98:	95800044 	addi	r22,r18,1
 8006b9c:	00c00044 	movi	r3,1
 8006ba0:	003f5706 	br	8006900 <__alt_data_end+0xf8006900>
 8006ba4:	80c0030b 	ldhu	r3,12(r16)
 8006ba8:	00bfffc4 	movi	r2,-1
 8006bac:	18c01014 	ori	r3,r3,64
 8006bb0:	80c0030d 	sth	r3,12(r16)
 8006bb4:	00c00244 	movi	r3,9
 8006bb8:	a8c00015 	stw	r3,0(r21)
 8006bbc:	003f0106 	br	80067c4 <__alt_data_end+0xf80067c4>

08006bc0 <_fwalk>:
 8006bc0:	defff904 	addi	sp,sp,-28
 8006bc4:	dcc00315 	stw	r19,12(sp)
 8006bc8:	24c0b804 	addi	r19,r4,736
 8006bcc:	dd400515 	stw	r21,20(sp)
 8006bd0:	dd000415 	stw	r20,16(sp)
 8006bd4:	dfc00615 	stw	ra,24(sp)
 8006bd8:	dc800215 	stw	r18,8(sp)
 8006bdc:	dc400115 	stw	r17,4(sp)
 8006be0:	dc000015 	stw	r16,0(sp)
 8006be4:	282b883a 	mov	r21,r5
 8006be8:	0029883a 	mov	r20,zero
 8006bec:	80062c80 	call	80062c8 <__sfp_lock_acquire>
 8006bf0:	98001226 	beq	r19,zero,8006c3c <_fwalk+0x7c>
 8006bf4:	04bfffc4 	movi	r18,-1
 8006bf8:	9c400117 	ldw	r17,4(r19)
 8006bfc:	9c000217 	ldw	r16,8(r19)
 8006c00:	8c7fffc4 	addi	r17,r17,-1
 8006c04:	88000b16 	blt	r17,zero,8006c34 <_fwalk+0x74>
 8006c08:	84000304 	addi	r16,r16,12
 8006c0c:	80c0000f 	ldh	r3,0(r16)
 8006c10:	8c7fffc4 	addi	r17,r17,-1
 8006c14:	813ffd04 	addi	r4,r16,-12
 8006c18:	18000426 	beq	r3,zero,8006c2c <_fwalk+0x6c>
 8006c1c:	80c0008f 	ldh	r3,2(r16)
 8006c20:	1c800226 	beq	r3,r18,8006c2c <_fwalk+0x6c>
 8006c24:	a83ee83a 	callr	r21
 8006c28:	a0a8b03a 	or	r20,r20,r2
 8006c2c:	84001a04 	addi	r16,r16,104
 8006c30:	8cbff61e 	bne	r17,r18,8006c0c <__alt_data_end+0xf8006c0c>
 8006c34:	9cc00017 	ldw	r19,0(r19)
 8006c38:	983fef1e 	bne	r19,zero,8006bf8 <__alt_data_end+0xf8006bf8>
 8006c3c:	80062cc0 	call	80062cc <__sfp_lock_release>
 8006c40:	a005883a 	mov	r2,r20
 8006c44:	dfc00617 	ldw	ra,24(sp)
 8006c48:	dd400517 	ldw	r21,20(sp)
 8006c4c:	dd000417 	ldw	r20,16(sp)
 8006c50:	dcc00317 	ldw	r19,12(sp)
 8006c54:	dc800217 	ldw	r18,8(sp)
 8006c58:	dc400117 	ldw	r17,4(sp)
 8006c5c:	dc000017 	ldw	r16,0(sp)
 8006c60:	dec00704 	addi	sp,sp,28
 8006c64:	f800283a 	ret

08006c68 <_fwalk_reent>:
 8006c68:	defff804 	addi	sp,sp,-32
 8006c6c:	dcc00315 	stw	r19,12(sp)
 8006c70:	24c0b804 	addi	r19,r4,736
 8006c74:	dd800615 	stw	r22,24(sp)
 8006c78:	dd400515 	stw	r21,20(sp)
 8006c7c:	dd000415 	stw	r20,16(sp)
 8006c80:	dfc00715 	stw	ra,28(sp)
 8006c84:	dc800215 	stw	r18,8(sp)
 8006c88:	dc400115 	stw	r17,4(sp)
 8006c8c:	dc000015 	stw	r16,0(sp)
 8006c90:	2029883a 	mov	r20,r4
 8006c94:	282b883a 	mov	r21,r5
 8006c98:	002d883a 	mov	r22,zero
 8006c9c:	80062c80 	call	80062c8 <__sfp_lock_acquire>
 8006ca0:	98001326 	beq	r19,zero,8006cf0 <_fwalk_reent+0x88>
 8006ca4:	04bfffc4 	movi	r18,-1
 8006ca8:	9c400117 	ldw	r17,4(r19)
 8006cac:	9c000217 	ldw	r16,8(r19)
 8006cb0:	8c7fffc4 	addi	r17,r17,-1
 8006cb4:	88000c16 	blt	r17,zero,8006ce8 <_fwalk_reent+0x80>
 8006cb8:	84000304 	addi	r16,r16,12
 8006cbc:	80c0000f 	ldh	r3,0(r16)
 8006cc0:	8c7fffc4 	addi	r17,r17,-1
 8006cc4:	817ffd04 	addi	r5,r16,-12
 8006cc8:	18000526 	beq	r3,zero,8006ce0 <_fwalk_reent+0x78>
 8006ccc:	80c0008f 	ldh	r3,2(r16)
 8006cd0:	a009883a 	mov	r4,r20
 8006cd4:	1c800226 	beq	r3,r18,8006ce0 <_fwalk_reent+0x78>
 8006cd8:	a83ee83a 	callr	r21
 8006cdc:	b0acb03a 	or	r22,r22,r2
 8006ce0:	84001a04 	addi	r16,r16,104
 8006ce4:	8cbff51e 	bne	r17,r18,8006cbc <__alt_data_end+0xf8006cbc>
 8006ce8:	9cc00017 	ldw	r19,0(r19)
 8006cec:	983fee1e 	bne	r19,zero,8006ca8 <__alt_data_end+0xf8006ca8>
 8006cf0:	80062cc0 	call	80062cc <__sfp_lock_release>
 8006cf4:	b005883a 	mov	r2,r22
 8006cf8:	dfc00717 	ldw	ra,28(sp)
 8006cfc:	dd800617 	ldw	r22,24(sp)
 8006d00:	dd400517 	ldw	r21,20(sp)
 8006d04:	dd000417 	ldw	r20,16(sp)
 8006d08:	dcc00317 	ldw	r19,12(sp)
 8006d0c:	dc800217 	ldw	r18,8(sp)
 8006d10:	dc400117 	ldw	r17,4(sp)
 8006d14:	dc000017 	ldw	r16,0(sp)
 8006d18:	dec00804 	addi	sp,sp,32
 8006d1c:	f800283a 	ret

08006d20 <_setlocale_r>:
 8006d20:	defffe04 	addi	sp,sp,-8
 8006d24:	dc000015 	stw	r16,0(sp)
 8006d28:	dfc00115 	stw	ra,4(sp)
 8006d2c:	3021883a 	mov	r16,r6
 8006d30:	30000526 	beq	r6,zero,8006d48 <_setlocale_r+0x28>
 8006d34:	3009883a 	mov	r4,r6
 8006d38:	01420074 	movhi	r5,2049
 8006d3c:	29462e04 	addi	r5,r5,6328
 8006d40:	80093440 	call	8009344 <strcmp>
 8006d44:	1000061e 	bne	r2,zero,8006d60 <_setlocale_r+0x40>
 8006d48:	00820074 	movhi	r2,2049
 8006d4c:	10862d04 	addi	r2,r2,6324
 8006d50:	dfc00117 	ldw	ra,4(sp)
 8006d54:	dc000017 	ldw	r16,0(sp)
 8006d58:	dec00204 	addi	sp,sp,8
 8006d5c:	f800283a 	ret
 8006d60:	8009883a 	mov	r4,r16
 8006d64:	01420074 	movhi	r5,2049
 8006d68:	29462d04 	addi	r5,r5,6324
 8006d6c:	80093440 	call	8009344 <strcmp>
 8006d70:	103ff526 	beq	r2,zero,8006d48 <__alt_data_end+0xf8006d48>
 8006d74:	8009883a 	mov	r4,r16
 8006d78:	01420074 	movhi	r5,2049
 8006d7c:	29461804 	addi	r5,r5,6240
 8006d80:	80093440 	call	8009344 <strcmp>
 8006d84:	103ff026 	beq	r2,zero,8006d48 <__alt_data_end+0xf8006d48>
 8006d88:	0005883a 	mov	r2,zero
 8006d8c:	003ff006 	br	8006d50 <__alt_data_end+0xf8006d50>

08006d90 <__locale_charset>:
 8006d90:	00820074 	movhi	r2,2049
 8006d94:	1087de04 	addi	r2,r2,8056
 8006d98:	f800283a 	ret

08006d9c <__locale_mb_cur_max>:
 8006d9c:	00820074 	movhi	r2,2049
 8006da0:	108d7a04 	addi	r2,r2,13800
 8006da4:	10800017 	ldw	r2,0(r2)
 8006da8:	f800283a 	ret

08006dac <__locale_msgcharset>:
 8006dac:	00820074 	movhi	r2,2049
 8006db0:	1087d604 	addi	r2,r2,8024
 8006db4:	f800283a 	ret

08006db8 <__locale_cjk_lang>:
 8006db8:	0005883a 	mov	r2,zero
 8006dbc:	f800283a 	ret

08006dc0 <_localeconv_r>:
 8006dc0:	00820074 	movhi	r2,2049
 8006dc4:	1087e604 	addi	r2,r2,8088
 8006dc8:	f800283a 	ret

08006dcc <setlocale>:
 8006dcc:	00c20074 	movhi	r3,2049
 8006dd0:	18cd7904 	addi	r3,r3,13796
 8006dd4:	2005883a 	mov	r2,r4
 8006dd8:	19000017 	ldw	r4,0(r3)
 8006ddc:	280d883a 	mov	r6,r5
 8006de0:	100b883a 	mov	r5,r2
 8006de4:	8006d201 	jmpi	8006d20 <_setlocale_r>

08006de8 <localeconv>:
 8006de8:	00820074 	movhi	r2,2049
 8006dec:	1087e604 	addi	r2,r2,8088
 8006df0:	f800283a 	ret

08006df4 <__smakebuf_r>:
 8006df4:	2880030b 	ldhu	r2,12(r5)
 8006df8:	deffec04 	addi	sp,sp,-80
 8006dfc:	dc000f15 	stw	r16,60(sp)
 8006e00:	dfc01315 	stw	ra,76(sp)
 8006e04:	dcc01215 	stw	r19,72(sp)
 8006e08:	dc801115 	stw	r18,68(sp)
 8006e0c:	dc401015 	stw	r17,64(sp)
 8006e10:	10c0008c 	andi	r3,r2,2
 8006e14:	2821883a 	mov	r16,r5
 8006e18:	18003a1e 	bne	r3,zero,8006f04 <__smakebuf_r+0x110>
 8006e1c:	2940038f 	ldh	r5,14(r5)
 8006e20:	2023883a 	mov	r17,r4
 8006e24:	28001b16 	blt	r5,zero,8006e94 <__smakebuf_r+0xa0>
 8006e28:	d80d883a 	mov	r6,sp
 8006e2c:	800ae480 	call	800ae48 <_fstat_r>
 8006e30:	10001716 	blt	r2,zero,8006e90 <__smakebuf_r+0x9c>
 8006e34:	d8800117 	ldw	r2,4(sp)
 8006e38:	00e00014 	movui	r3,32768
 8006e3c:	10bc000c 	andi	r2,r2,61440
 8006e40:	10c03e26 	beq	r2,r3,8006f3c <__smakebuf_r+0x148>
 8006e44:	80c0030b 	ldhu	r3,12(r16)
 8006e48:	18c20014 	ori	r3,r3,2048
 8006e4c:	80c0030d 	sth	r3,12(r16)
 8006e50:	00c80004 	movi	r3,8192
 8006e54:	10c0431e 	bne	r2,r3,8006f64 <__smakebuf_r+0x170>
 8006e58:	8140038f 	ldh	r5,14(r16)
 8006e5c:	8809883a 	mov	r4,r17
 8006e60:	800aeb00 	call	800aeb0 <_isatty_r>
 8006e64:	10004d26 	beq	r2,zero,8006f9c <__smakebuf_r+0x1a8>
 8006e68:	80c0030b 	ldhu	r3,12(r16)
 8006e6c:	04c00044 	movi	r19,1
 8006e70:	808010c4 	addi	r2,r16,67
 8006e74:	1cc6b03a 	or	r3,r3,r19
 8006e78:	80c0030d 	sth	r3,12(r16)
 8006e7c:	80800015 	stw	r2,0(r16)
 8006e80:	80800415 	stw	r2,16(r16)
 8006e84:	84c00515 	stw	r19,20(r16)
 8006e88:	04810004 	movi	r18,1024
 8006e8c:	00000706 	br	8006eac <__smakebuf_r+0xb8>
 8006e90:	8080030b 	ldhu	r2,12(r16)
 8006e94:	10c0200c 	andi	r3,r2,128
 8006e98:	1800261e 	bne	r3,zero,8006f34 <__smakebuf_r+0x140>
 8006e9c:	04810004 	movi	r18,1024
 8006ea0:	10820014 	ori	r2,r2,2048
 8006ea4:	8080030d 	sth	r2,12(r16)
 8006ea8:	0027883a 	mov	r19,zero
 8006eac:	8809883a 	mov	r4,r17
 8006eb0:	900b883a 	mov	r5,r18
 8006eb4:	8006fa80 	call	8006fa8 <_malloc_r>
 8006eb8:	10002d26 	beq	r2,zero,8006f70 <__smakebuf_r+0x17c>
 8006ebc:	80c0030b 	ldhu	r3,12(r16)
 8006ec0:	01020034 	movhi	r4,2048
 8006ec4:	2117dd04 	addi	r4,r4,24436
 8006ec8:	89000f15 	stw	r4,60(r17)
 8006ecc:	18c02014 	ori	r3,r3,128
 8006ed0:	80c0030d 	sth	r3,12(r16)
 8006ed4:	80800015 	stw	r2,0(r16)
 8006ed8:	80800415 	stw	r2,16(r16)
 8006edc:	84800515 	stw	r18,20(r16)
 8006ee0:	98000d26 	beq	r19,zero,8006f18 <__smakebuf_r+0x124>
 8006ee4:	8140038f 	ldh	r5,14(r16)
 8006ee8:	8809883a 	mov	r4,r17
 8006eec:	800aeb00 	call	800aeb0 <_isatty_r>
 8006ef0:	10000926 	beq	r2,zero,8006f18 <__smakebuf_r+0x124>
 8006ef4:	8080030b 	ldhu	r2,12(r16)
 8006ef8:	10800054 	ori	r2,r2,1
 8006efc:	8080030d 	sth	r2,12(r16)
 8006f00:	00000506 	br	8006f18 <__smakebuf_r+0x124>
 8006f04:	288010c4 	addi	r2,r5,67
 8006f08:	28800015 	stw	r2,0(r5)
 8006f0c:	28800415 	stw	r2,16(r5)
 8006f10:	00800044 	movi	r2,1
 8006f14:	28800515 	stw	r2,20(r5)
 8006f18:	dfc01317 	ldw	ra,76(sp)
 8006f1c:	dcc01217 	ldw	r19,72(sp)
 8006f20:	dc801117 	ldw	r18,68(sp)
 8006f24:	dc401017 	ldw	r17,64(sp)
 8006f28:	dc000f17 	ldw	r16,60(sp)
 8006f2c:	dec01404 	addi	sp,sp,80
 8006f30:	f800283a 	ret
 8006f34:	04801004 	movi	r18,64
 8006f38:	003fd906 	br	8006ea0 <__alt_data_end+0xf8006ea0>
 8006f3c:	81000a17 	ldw	r4,40(r16)
 8006f40:	00c20074 	movhi	r3,2049
 8006f44:	18e4b804 	addi	r3,r3,-27936
 8006f48:	20ffbe1e 	bne	r4,r3,8006e44 <__alt_data_end+0xf8006e44>
 8006f4c:	80c0030b 	ldhu	r3,12(r16)
 8006f50:	01010004 	movi	r4,1024
 8006f54:	81001315 	stw	r4,76(r16)
 8006f58:	1906b03a 	or	r3,r3,r4
 8006f5c:	80c0030d 	sth	r3,12(r16)
 8006f60:	003fbb06 	br	8006e50 <__alt_data_end+0xf8006e50>
 8006f64:	0027883a 	mov	r19,zero
 8006f68:	04810004 	movi	r18,1024
 8006f6c:	003fcf06 	br	8006eac <__alt_data_end+0xf8006eac>
 8006f70:	8080030b 	ldhu	r2,12(r16)
 8006f74:	10c0800c 	andi	r3,r2,512
 8006f78:	183fe71e 	bne	r3,zero,8006f18 <__alt_data_end+0xf8006f18>
 8006f7c:	10800094 	ori	r2,r2,2
 8006f80:	80c010c4 	addi	r3,r16,67
 8006f84:	8080030d 	sth	r2,12(r16)
 8006f88:	00800044 	movi	r2,1
 8006f8c:	80c00015 	stw	r3,0(r16)
 8006f90:	80c00415 	stw	r3,16(r16)
 8006f94:	80800515 	stw	r2,20(r16)
 8006f98:	003fdf06 	br	8006f18 <__alt_data_end+0xf8006f18>
 8006f9c:	04c00044 	movi	r19,1
 8006fa0:	04810004 	movi	r18,1024
 8006fa4:	003fc106 	br	8006eac <__alt_data_end+0xf8006eac>

08006fa8 <_malloc_r>:
 8006fa8:	defff504 	addi	sp,sp,-44
 8006fac:	dc800315 	stw	r18,12(sp)
 8006fb0:	dfc00a15 	stw	ra,40(sp)
 8006fb4:	df000915 	stw	fp,36(sp)
 8006fb8:	ddc00815 	stw	r23,32(sp)
 8006fbc:	dd800715 	stw	r22,28(sp)
 8006fc0:	dd400615 	stw	r21,24(sp)
 8006fc4:	dd000515 	stw	r20,20(sp)
 8006fc8:	dcc00415 	stw	r19,16(sp)
 8006fcc:	dc400215 	stw	r17,8(sp)
 8006fd0:	dc000115 	stw	r16,4(sp)
 8006fd4:	288002c4 	addi	r2,r5,11
 8006fd8:	00c00584 	movi	r3,22
 8006fdc:	2025883a 	mov	r18,r4
 8006fe0:	18802b2e 	bgeu	r3,r2,8007090 <_malloc_r+0xe8>
 8006fe4:	047ffe04 	movi	r17,-8
 8006fe8:	1462703a 	and	r17,r2,r17
 8006fec:	88002a16 	blt	r17,zero,8007098 <_malloc_r+0xf0>
 8006ff0:	89402936 	bltu	r17,r5,8007098 <_malloc_r+0xf0>
 8006ff4:	9009883a 	mov	r4,r18
 8006ff8:	800ee9c0 	call	800ee9c <__malloc_lock>
 8006ffc:	00807dc4 	movi	r2,503
 8007000:	14402936 	bltu	r2,r17,80070a8 <_malloc_r+0x100>
 8007004:	8808d0fa 	srli	r4,r17,3
 8007008:	04c20074 	movhi	r19,2049
 800700c:	9cc7f404 	addi	r19,r19,8144
 8007010:	2105883a 	add	r2,r4,r4
 8007014:	1085883a 	add	r2,r2,r2
 8007018:	1085883a 	add	r2,r2,r2
 800701c:	9885883a 	add	r2,r19,r2
 8007020:	14000317 	ldw	r16,12(r2)
 8007024:	80815226 	beq	r16,r2,8007570 <_malloc_r+0x5c8>
 8007028:	81000117 	ldw	r4,4(r16)
 800702c:	00bfff04 	movi	r2,-4
 8007030:	80c00317 	ldw	r3,12(r16)
 8007034:	2084703a 	and	r2,r4,r2
 8007038:	8085883a 	add	r2,r16,r2
 800703c:	81000217 	ldw	r4,8(r16)
 8007040:	11400117 	ldw	r5,4(r2)
 8007044:	20c00315 	stw	r3,12(r4)
 8007048:	19000215 	stw	r4,8(r3)
 800704c:	28c00054 	ori	r3,r5,1
 8007050:	10c00115 	stw	r3,4(r2)
 8007054:	9009883a 	mov	r4,r18
 8007058:	800eebc0 	call	800eebc <__malloc_unlock>
 800705c:	80800204 	addi	r2,r16,8
 8007060:	dfc00a17 	ldw	ra,40(sp)
 8007064:	df000917 	ldw	fp,36(sp)
 8007068:	ddc00817 	ldw	r23,32(sp)
 800706c:	dd800717 	ldw	r22,28(sp)
 8007070:	dd400617 	ldw	r21,24(sp)
 8007074:	dd000517 	ldw	r20,20(sp)
 8007078:	dcc00417 	ldw	r19,16(sp)
 800707c:	dc800317 	ldw	r18,12(sp)
 8007080:	dc400217 	ldw	r17,8(sp)
 8007084:	dc000117 	ldw	r16,4(sp)
 8007088:	dec00b04 	addi	sp,sp,44
 800708c:	f800283a 	ret
 8007090:	04400404 	movi	r17,16
 8007094:	897fd72e 	bgeu	r17,r5,8006ff4 <__alt_data_end+0xf8006ff4>
 8007098:	00800304 	movi	r2,12
 800709c:	90800015 	stw	r2,0(r18)
 80070a0:	0005883a 	mov	r2,zero
 80070a4:	003fee06 	br	8007060 <__alt_data_end+0xf8007060>
 80070a8:	8808d27a 	srli	r4,r17,9
 80070ac:	20007126 	beq	r4,zero,8007274 <_malloc_r+0x2cc>
 80070b0:	00800104 	movi	r2,4
 80070b4:	1100f536 	bltu	r2,r4,800748c <_malloc_r+0x4e4>
 80070b8:	8808d1ba 	srli	r4,r17,6
 80070bc:	21000e04 	addi	r4,r4,56
 80070c0:	210b883a 	add	r5,r4,r4
 80070c4:	294b883a 	add	r5,r5,r5
 80070c8:	294b883a 	add	r5,r5,r5
 80070cc:	04c20074 	movhi	r19,2049
 80070d0:	9cc7f404 	addi	r19,r19,8144
 80070d4:	994b883a 	add	r5,r19,r5
 80070d8:	2c000317 	ldw	r16,12(r5)
 80070dc:	2c000e26 	beq	r5,r16,8007118 <_malloc_r+0x170>
 80070e0:	80c00117 	ldw	r3,4(r16)
 80070e4:	01ffff04 	movi	r7,-4
 80070e8:	018003c4 	movi	r6,15
 80070ec:	19c6703a 	and	r3,r3,r7
 80070f0:	1c45c83a 	sub	r2,r3,r17
 80070f4:	30800716 	blt	r6,r2,8007114 <_malloc_r+0x16c>
 80070f8:	1000610e 	bge	r2,zero,8007280 <_malloc_r+0x2d8>
 80070fc:	84000317 	ldw	r16,12(r16)
 8007100:	2c000526 	beq	r5,r16,8007118 <_malloc_r+0x170>
 8007104:	80c00117 	ldw	r3,4(r16)
 8007108:	19c6703a 	and	r3,r3,r7
 800710c:	1c45c83a 	sub	r2,r3,r17
 8007110:	30bff90e 	bge	r6,r2,80070f8 <__alt_data_end+0xf80070f8>
 8007114:	213fffc4 	addi	r4,r4,-1
 8007118:	21000044 	addi	r4,r4,1
 800711c:	9c000417 	ldw	r16,16(r19)
 8007120:	00c20074 	movhi	r3,2049
 8007124:	18c7f404 	addi	r3,r3,8144
 8007128:	1a400204 	addi	r9,r3,8
 800712c:	82410926 	beq	r16,r9,8007554 <_malloc_r+0x5ac>
 8007130:	81400117 	ldw	r5,4(r16)
 8007134:	00bfff04 	movi	r2,-4
 8007138:	018003c4 	movi	r6,15
 800713c:	2884703a 	and	r2,r5,r2
 8007140:	144bc83a 	sub	r5,r2,r17
 8007144:	3140f416 	blt	r6,r5,8007518 <_malloc_r+0x570>
 8007148:	1a400515 	stw	r9,20(r3)
 800714c:	1a400415 	stw	r9,16(r3)
 8007150:	2800570e 	bge	r5,zero,80072b0 <_malloc_r+0x308>
 8007154:	01407fc4 	movi	r5,511
 8007158:	2880d436 	bltu	r5,r2,80074ac <_malloc_r+0x504>
 800715c:	1004d0fa 	srli	r2,r2,3
 8007160:	02000044 	movi	r8,1
 8007164:	19c00117 	ldw	r7,4(r3)
 8007168:	108b883a 	add	r5,r2,r2
 800716c:	294b883a 	add	r5,r5,r5
 8007170:	1005d0ba 	srai	r2,r2,2
 8007174:	294b883a 	add	r5,r5,r5
 8007178:	28cb883a 	add	r5,r5,r3
 800717c:	29800217 	ldw	r6,8(r5)
 8007180:	4084983a 	sll	r2,r8,r2
 8007184:	81400315 	stw	r5,12(r16)
 8007188:	81800215 	stw	r6,8(r16)
 800718c:	11c4b03a 	or	r2,r2,r7
 8007190:	2c000215 	stw	r16,8(r5)
 8007194:	18800115 	stw	r2,4(r3)
 8007198:	34000315 	stw	r16,12(r6)
 800719c:	2007d0ba 	srai	r3,r4,2
 80071a0:	01400044 	movi	r5,1
 80071a4:	28ca983a 	sll	r5,r5,r3
 80071a8:	11404936 	bltu	r2,r5,80072d0 <_malloc_r+0x328>
 80071ac:	1146703a 	and	r3,r2,r5
 80071b0:	18000a1e 	bne	r3,zero,80071dc <_malloc_r+0x234>
 80071b4:	00ffff04 	movi	r3,-4
 80071b8:	294b883a 	add	r5,r5,r5
 80071bc:	20c8703a 	and	r4,r4,r3
 80071c0:	1146703a 	and	r3,r2,r5
 80071c4:	21000104 	addi	r4,r4,4
 80071c8:	1800041e 	bne	r3,zero,80071dc <_malloc_r+0x234>
 80071cc:	294b883a 	add	r5,r5,r5
 80071d0:	1146703a 	and	r3,r2,r5
 80071d4:	21000104 	addi	r4,r4,4
 80071d8:	183ffc26 	beq	r3,zero,80071cc <__alt_data_end+0xf80071cc>
 80071dc:	023fff04 	movi	r8,-4
 80071e0:	01c003c4 	movi	r7,15
 80071e4:	2105883a 	add	r2,r4,r4
 80071e8:	1085883a 	add	r2,r2,r2
 80071ec:	1085883a 	add	r2,r2,r2
 80071f0:	9897883a 	add	r11,r19,r2
 80071f4:	5a800304 	addi	r10,r11,12
 80071f8:	2019883a 	mov	r12,r4
 80071fc:	54000017 	ldw	r16,0(r10)
 8007200:	51bffd04 	addi	r6,r10,-12
 8007204:	8180041e 	bne	r16,r6,8007218 <_malloc_r+0x270>
 8007208:	0000d406 	br	800755c <_malloc_r+0x5b4>
 800720c:	1000dd0e 	bge	r2,zero,8007584 <_malloc_r+0x5dc>
 8007210:	84000317 	ldw	r16,12(r16)
 8007214:	8180d126 	beq	r16,r6,800755c <_malloc_r+0x5b4>
 8007218:	80c00117 	ldw	r3,4(r16)
 800721c:	1a06703a 	and	r3,r3,r8
 8007220:	1c45c83a 	sub	r2,r3,r17
 8007224:	38bff90e 	bge	r7,r2,800720c <__alt_data_end+0xf800720c>
 8007228:	80c00317 	ldw	r3,12(r16)
 800722c:	81000217 	ldw	r4,8(r16)
 8007230:	89400054 	ori	r5,r17,1
 8007234:	81400115 	stw	r5,4(r16)
 8007238:	20c00315 	stw	r3,12(r4)
 800723c:	19000215 	stw	r4,8(r3)
 8007240:	8463883a 	add	r17,r16,r17
 8007244:	9c400515 	stw	r17,20(r19)
 8007248:	9c400415 	stw	r17,16(r19)
 800724c:	10c00054 	ori	r3,r2,1
 8007250:	8a400315 	stw	r9,12(r17)
 8007254:	8a400215 	stw	r9,8(r17)
 8007258:	88c00115 	stw	r3,4(r17)
 800725c:	88a3883a 	add	r17,r17,r2
 8007260:	88800015 	stw	r2,0(r17)
 8007264:	9009883a 	mov	r4,r18
 8007268:	800eebc0 	call	800eebc <__malloc_unlock>
 800726c:	80800204 	addi	r2,r16,8
 8007270:	003f7b06 	br	8007060 <__alt_data_end+0xf8007060>
 8007274:	01401f84 	movi	r5,126
 8007278:	01000fc4 	movi	r4,63
 800727c:	003f9106 	br	80070c4 <__alt_data_end+0xf80070c4>
 8007280:	80800317 	ldw	r2,12(r16)
 8007284:	81000217 	ldw	r4,8(r16)
 8007288:	80c7883a 	add	r3,r16,r3
 800728c:	19400117 	ldw	r5,4(r3)
 8007290:	20800315 	stw	r2,12(r4)
 8007294:	11000215 	stw	r4,8(r2)
 8007298:	28800054 	ori	r2,r5,1
 800729c:	18800115 	stw	r2,4(r3)
 80072a0:	9009883a 	mov	r4,r18
 80072a4:	800eebc0 	call	800eebc <__malloc_unlock>
 80072a8:	80800204 	addi	r2,r16,8
 80072ac:	003f6c06 	br	8007060 <__alt_data_end+0xf8007060>
 80072b0:	8085883a 	add	r2,r16,r2
 80072b4:	10c00117 	ldw	r3,4(r2)
 80072b8:	9009883a 	mov	r4,r18
 80072bc:	18c00054 	ori	r3,r3,1
 80072c0:	10c00115 	stw	r3,4(r2)
 80072c4:	800eebc0 	call	800eebc <__malloc_unlock>
 80072c8:	80800204 	addi	r2,r16,8
 80072cc:	003f6406 	br	8007060 <__alt_data_end+0xf8007060>
 80072d0:	9c000217 	ldw	r16,8(r19)
 80072d4:	00bfff04 	movi	r2,-4
 80072d8:	85400117 	ldw	r21,4(r16)
 80072dc:	a8aa703a 	and	r21,r21,r2
 80072e0:	ac400336 	bltu	r21,r17,80072f0 <_malloc_r+0x348>
 80072e4:	ac45c83a 	sub	r2,r21,r17
 80072e8:	00c003c4 	movi	r3,15
 80072ec:	18805d16 	blt	r3,r2,8007464 <_malloc_r+0x4bc>
 80072f0:	00820074 	movhi	r2,2049
 80072f4:	10944904 	addi	r2,r2,20772
 80072f8:	00c20074 	movhi	r3,2049
 80072fc:	18cd7b04 	addi	r3,r3,13804
 8007300:	15c00017 	ldw	r23,0(r2)
 8007304:	19000017 	ldw	r4,0(r3)
 8007308:	00bfffc4 	movi	r2,-1
 800730c:	8579883a 	add	fp,r16,r21
 8007310:	8def883a 	add	r23,r17,r23
 8007314:	2080e426 	beq	r4,r2,80076a8 <_malloc_r+0x700>
 8007318:	bdc403c4 	addi	r23,r23,4111
 800731c:	00bc0004 	movi	r2,-4096
 8007320:	b8ae703a 	and	r23,r23,r2
 8007324:	9009883a 	mov	r4,r18
 8007328:	b80b883a 	mov	r5,r23
 800732c:	d8c00015 	stw	r3,0(sp)
 8007330:	80091a40 	call	80091a4 <_sbrk_r>
 8007334:	1029883a 	mov	r20,r2
 8007338:	00bfffc4 	movi	r2,-1
 800733c:	d8c00017 	ldw	r3,0(sp)
 8007340:	a080a426 	beq	r20,r2,80075d4 <_malloc_r+0x62c>
 8007344:	a700a236 	bltu	r20,fp,80075d0 <_malloc_r+0x628>
 8007348:	05820074 	movhi	r22,2049
 800734c:	b5945104 	addi	r22,r22,20804
 8007350:	b0800017 	ldw	r2,0(r22)
 8007354:	b885883a 	add	r2,r23,r2
 8007358:	b0800015 	stw	r2,0(r22)
 800735c:	e500da26 	beq	fp,r20,80076c8 <_malloc_r+0x720>
 8007360:	19000017 	ldw	r4,0(r3)
 8007364:	00ffffc4 	movi	r3,-1
 8007368:	20c0e426 	beq	r4,r3,80076fc <_malloc_r+0x754>
 800736c:	a739c83a 	sub	fp,r20,fp
 8007370:	1705883a 	add	r2,r2,fp
 8007374:	b0800015 	stw	r2,0(r22)
 8007378:	a08001cc 	andi	r2,r20,7
 800737c:	1000b526 	beq	r2,zero,8007654 <_malloc_r+0x6ac>
 8007380:	a0a9c83a 	sub	r20,r20,r2
 8007384:	00c40204 	movi	r3,4104
 8007388:	a5000204 	addi	r20,r20,8
 800738c:	1885c83a 	sub	r2,r3,r2
 8007390:	a5c7883a 	add	r3,r20,r23
 8007394:	18c3ffcc 	andi	r3,r3,4095
 8007398:	10efc83a 	sub	r23,r2,r3
 800739c:	9009883a 	mov	r4,r18
 80073a0:	b80b883a 	mov	r5,r23
 80073a4:	80091a40 	call	80091a4 <_sbrk_r>
 80073a8:	00ffffc4 	movi	r3,-1
 80073ac:	10c0d026 	beq	r2,r3,80076f0 <_malloc_r+0x748>
 80073b0:	1505c83a 	sub	r2,r2,r20
 80073b4:	b887883a 	add	r3,r23,r2
 80073b8:	18c00054 	ori	r3,r3,1
 80073bc:	b0800017 	ldw	r2,0(r22)
 80073c0:	9d000215 	stw	r20,8(r19)
 80073c4:	a0c00115 	stw	r3,4(r20)
 80073c8:	b885883a 	add	r2,r23,r2
 80073cc:	b0800015 	stw	r2,0(r22)
 80073d0:	84c00e26 	beq	r16,r19,800740c <_malloc_r+0x464>
 80073d4:	00c003c4 	movi	r3,15
 80073d8:	1d40a02e 	bgeu	r3,r21,800765c <_malloc_r+0x6b4>
 80073dc:	81400117 	ldw	r5,4(r16)
 80073e0:	ad7ffd04 	addi	r21,r21,-12
 80073e4:	013ffe04 	movi	r4,-8
 80073e8:	a908703a 	and	r4,r21,r4
 80073ec:	2940004c 	andi	r5,r5,1
 80073f0:	214ab03a 	or	r5,r4,r5
 80073f4:	81400115 	stw	r5,4(r16)
 80073f8:	01800144 	movi	r6,5
 80073fc:	810b883a 	add	r5,r16,r4
 8007400:	29800115 	stw	r6,4(r5)
 8007404:	29800215 	stw	r6,8(r5)
 8007408:	1900c036 	bltu	r3,r4,800770c <_malloc_r+0x764>
 800740c:	00c20074 	movhi	r3,2049
 8007410:	18d44804 	addi	r3,r3,20768
 8007414:	19000017 	ldw	r4,0(r3)
 8007418:	2080012e 	bgeu	r4,r2,8007420 <_malloc_r+0x478>
 800741c:	18800015 	stw	r2,0(r3)
 8007420:	00c20074 	movhi	r3,2049
 8007424:	18d44704 	addi	r3,r3,20764
 8007428:	19000017 	ldw	r4,0(r3)
 800742c:	9c000217 	ldw	r16,8(r19)
 8007430:	2080012e 	bgeu	r4,r2,8007438 <_malloc_r+0x490>
 8007434:	18800015 	stw	r2,0(r3)
 8007438:	80c00117 	ldw	r3,4(r16)
 800743c:	00bfff04 	movi	r2,-4
 8007440:	1886703a 	and	r3,r3,r2
 8007444:	1c45c83a 	sub	r2,r3,r17
 8007448:	1c400236 	bltu	r3,r17,8007454 <_malloc_r+0x4ac>
 800744c:	00c003c4 	movi	r3,15
 8007450:	18800416 	blt	r3,r2,8007464 <_malloc_r+0x4bc>
 8007454:	9009883a 	mov	r4,r18
 8007458:	800eebc0 	call	800eebc <__malloc_unlock>
 800745c:	0005883a 	mov	r2,zero
 8007460:	003eff06 	br	8007060 <__alt_data_end+0xf8007060>
 8007464:	88c00054 	ori	r3,r17,1
 8007468:	80c00115 	stw	r3,4(r16)
 800746c:	8463883a 	add	r17,r16,r17
 8007470:	10800054 	ori	r2,r2,1
 8007474:	9c400215 	stw	r17,8(r19)
 8007478:	88800115 	stw	r2,4(r17)
 800747c:	9009883a 	mov	r4,r18
 8007480:	800eebc0 	call	800eebc <__malloc_unlock>
 8007484:	80800204 	addi	r2,r16,8
 8007488:	003ef506 	br	8007060 <__alt_data_end+0xf8007060>
 800748c:	00800504 	movi	r2,20
 8007490:	1100482e 	bgeu	r2,r4,80075b4 <_malloc_r+0x60c>
 8007494:	00801504 	movi	r2,84
 8007498:	11006836 	bltu	r2,r4,800763c <_malloc_r+0x694>
 800749c:	8808d33a 	srli	r4,r17,12
 80074a0:	21001b84 	addi	r4,r4,110
 80074a4:	210b883a 	add	r5,r4,r4
 80074a8:	003f0606 	br	80070c4 <__alt_data_end+0xf80070c4>
 80074ac:	1006d27a 	srli	r3,r2,9
 80074b0:	01400104 	movi	r5,4
 80074b4:	28c0422e 	bgeu	r5,r3,80075c0 <_malloc_r+0x618>
 80074b8:	01400504 	movi	r5,20
 80074bc:	28c07c36 	bltu	r5,r3,80076b0 <_malloc_r+0x708>
 80074c0:	194016c4 	addi	r5,r3,91
 80074c4:	294d883a 	add	r6,r5,r5
 80074c8:	318d883a 	add	r6,r6,r6
 80074cc:	318d883a 	add	r6,r6,r6
 80074d0:	998d883a 	add	r6,r19,r6
 80074d4:	30c00217 	ldw	r3,8(r6)
 80074d8:	01c20074 	movhi	r7,2049
 80074dc:	39c7f404 	addi	r7,r7,8144
 80074e0:	19806326 	beq	r3,r6,8007670 <_malloc_r+0x6c8>
 80074e4:	01ffff04 	movi	r7,-4
 80074e8:	19400117 	ldw	r5,4(r3)
 80074ec:	29ca703a 	and	r5,r5,r7
 80074f0:	1140022e 	bgeu	r2,r5,80074fc <_malloc_r+0x554>
 80074f4:	18c00217 	ldw	r3,8(r3)
 80074f8:	30fffb1e 	bne	r6,r3,80074e8 <__alt_data_end+0xf80074e8>
 80074fc:	19400317 	ldw	r5,12(r3)
 8007500:	98800117 	ldw	r2,4(r19)
 8007504:	81400315 	stw	r5,12(r16)
 8007508:	80c00215 	stw	r3,8(r16)
 800750c:	2c000215 	stw	r16,8(r5)
 8007510:	1c000315 	stw	r16,12(r3)
 8007514:	003f2106 	br	800719c <__alt_data_end+0xf800719c>
 8007518:	88800054 	ori	r2,r17,1
 800751c:	80800115 	stw	r2,4(r16)
 8007520:	8463883a 	add	r17,r16,r17
 8007524:	1c400515 	stw	r17,20(r3)
 8007528:	1c400415 	stw	r17,16(r3)
 800752c:	28800054 	ori	r2,r5,1
 8007530:	88800115 	stw	r2,4(r17)
 8007534:	8a400315 	stw	r9,12(r17)
 8007538:	8a400215 	stw	r9,8(r17)
 800753c:	8963883a 	add	r17,r17,r5
 8007540:	89400015 	stw	r5,0(r17)
 8007544:	9009883a 	mov	r4,r18
 8007548:	800eebc0 	call	800eebc <__malloc_unlock>
 800754c:	80800204 	addi	r2,r16,8
 8007550:	003ec306 	br	8007060 <__alt_data_end+0xf8007060>
 8007554:	18800117 	ldw	r2,4(r3)
 8007558:	003f1006 	br	800719c <__alt_data_end+0xf800719c>
 800755c:	63000044 	addi	r12,r12,1
 8007560:	608000cc 	andi	r2,r12,3
 8007564:	52800204 	addi	r10,r10,8
 8007568:	103f241e 	bne	r2,zero,80071fc <__alt_data_end+0xf80071fc>
 800756c:	00002106 	br	80075f4 <_malloc_r+0x64c>
 8007570:	80800204 	addi	r2,r16,8
 8007574:	84000517 	ldw	r16,20(r16)
 8007578:	143eab1e 	bne	r2,r16,8007028 <__alt_data_end+0xf8007028>
 800757c:	21000084 	addi	r4,r4,2
 8007580:	003ee606 	br	800711c <__alt_data_end+0xf800711c>
 8007584:	80c7883a 	add	r3,r16,r3
 8007588:	19400117 	ldw	r5,4(r3)
 800758c:	80800317 	ldw	r2,12(r16)
 8007590:	81000217 	ldw	r4,8(r16)
 8007594:	29400054 	ori	r5,r5,1
 8007598:	19400115 	stw	r5,4(r3)
 800759c:	20800315 	stw	r2,12(r4)
 80075a0:	11000215 	stw	r4,8(r2)
 80075a4:	9009883a 	mov	r4,r18
 80075a8:	800eebc0 	call	800eebc <__malloc_unlock>
 80075ac:	80800204 	addi	r2,r16,8
 80075b0:	003eab06 	br	8007060 <__alt_data_end+0xf8007060>
 80075b4:	210016c4 	addi	r4,r4,91
 80075b8:	210b883a 	add	r5,r4,r4
 80075bc:	003ec106 	br	80070c4 <__alt_data_end+0xf80070c4>
 80075c0:	100ad1ba 	srli	r5,r2,6
 80075c4:	29400e04 	addi	r5,r5,56
 80075c8:	294d883a 	add	r6,r5,r5
 80075cc:	003fbe06 	br	80074c8 <__alt_data_end+0xf80074c8>
 80075d0:	84ff5d26 	beq	r16,r19,8007348 <__alt_data_end+0xf8007348>
 80075d4:	9c000217 	ldw	r16,8(r19)
 80075d8:	00bfff04 	movi	r2,-4
 80075dc:	80c00117 	ldw	r3,4(r16)
 80075e0:	1886703a 	and	r3,r3,r2
 80075e4:	003f9706 	br	8007444 <__alt_data_end+0xf8007444>
 80075e8:	5ac00017 	ldw	r11,0(r11)
 80075ec:	213fffc4 	addi	r4,r4,-1
 80075f0:	58805c1e 	bne	r11,r2,8007764 <_malloc_r+0x7bc>
 80075f4:	20c000cc 	andi	r3,r4,3
 80075f8:	58bffe04 	addi	r2,r11,-8
 80075fc:	183ffa1e 	bne	r3,zero,80075e8 <__alt_data_end+0xf80075e8>
 8007600:	98800117 	ldw	r2,4(r19)
 8007604:	0146303a 	nor	r3,zero,r5
 8007608:	1884703a 	and	r2,r3,r2
 800760c:	98800115 	stw	r2,4(r19)
 8007610:	294b883a 	add	r5,r5,r5
 8007614:	117f2e36 	bltu	r2,r5,80072d0 <__alt_data_end+0xf80072d0>
 8007618:	283f2d26 	beq	r5,zero,80072d0 <__alt_data_end+0xf80072d0>
 800761c:	1146703a 	and	r3,r2,r5
 8007620:	6009883a 	mov	r4,r12
 8007624:	183eef1e 	bne	r3,zero,80071e4 <__alt_data_end+0xf80071e4>
 8007628:	294b883a 	add	r5,r5,r5
 800762c:	1146703a 	and	r3,r2,r5
 8007630:	21000104 	addi	r4,r4,4
 8007634:	183ffc26 	beq	r3,zero,8007628 <__alt_data_end+0xf8007628>
 8007638:	003eea06 	br	80071e4 <__alt_data_end+0xf80071e4>
 800763c:	00805504 	movi	r2,340
 8007640:	11001336 	bltu	r2,r4,8007690 <_malloc_r+0x6e8>
 8007644:	8808d3fa 	srli	r4,r17,15
 8007648:	21001dc4 	addi	r4,r4,119
 800764c:	210b883a 	add	r5,r4,r4
 8007650:	003e9c06 	br	80070c4 <__alt_data_end+0xf80070c4>
 8007654:	00840004 	movi	r2,4096
 8007658:	003f4d06 	br	8007390 <__alt_data_end+0xf8007390>
 800765c:	00800044 	movi	r2,1
 8007660:	a0800115 	stw	r2,4(r20)
 8007664:	a021883a 	mov	r16,r20
 8007668:	0007883a 	mov	r3,zero
 800766c:	003f7506 	br	8007444 <__alt_data_end+0xf8007444>
 8007670:	280bd0ba 	srai	r5,r5,2
 8007674:	01800044 	movi	r6,1
 8007678:	38800117 	ldw	r2,4(r7)
 800767c:	314c983a 	sll	r6,r6,r5
 8007680:	180b883a 	mov	r5,r3
 8007684:	3084b03a 	or	r2,r6,r2
 8007688:	38800115 	stw	r2,4(r7)
 800768c:	003f9d06 	br	8007504 <__alt_data_end+0xf8007504>
 8007690:	00815504 	movi	r2,1364
 8007694:	11001336 	bltu	r2,r4,80076e4 <_malloc_r+0x73c>
 8007698:	8808d4ba 	srli	r4,r17,18
 800769c:	21001f04 	addi	r4,r4,124
 80076a0:	210b883a 	add	r5,r4,r4
 80076a4:	003e8706 	br	80070c4 <__alt_data_end+0xf80070c4>
 80076a8:	bdc00404 	addi	r23,r23,16
 80076ac:	003f1d06 	br	8007324 <__alt_data_end+0xf8007324>
 80076b0:	01401504 	movi	r5,84
 80076b4:	28c01c36 	bltu	r5,r3,8007728 <_malloc_r+0x780>
 80076b8:	100ad33a 	srli	r5,r2,12
 80076bc:	29401b84 	addi	r5,r5,110
 80076c0:	294d883a 	add	r6,r5,r5
 80076c4:	003f8006 	br	80074c8 <__alt_data_end+0xf80074c8>
 80076c8:	e103ffcc 	andi	r4,fp,4095
 80076cc:	203f241e 	bne	r4,zero,8007360 <__alt_data_end+0xf8007360>
 80076d0:	98c00217 	ldw	r3,8(r19)
 80076d4:	bd49883a 	add	r4,r23,r21
 80076d8:	21000054 	ori	r4,r4,1
 80076dc:	19000115 	stw	r4,4(r3)
 80076e0:	003f4a06 	br	800740c <__alt_data_end+0xf800740c>
 80076e4:	01403f04 	movi	r5,252
 80076e8:	01001f84 	movi	r4,126
 80076ec:	003e7506 	br	80070c4 <__alt_data_end+0xf80070c4>
 80076f0:	00c00044 	movi	r3,1
 80076f4:	002f883a 	mov	r23,zero
 80076f8:	003f3006 	br	80073bc <__alt_data_end+0xf80073bc>
 80076fc:	00820074 	movhi	r2,2049
 8007700:	108d7b04 	addi	r2,r2,13804
 8007704:	15000015 	stw	r20,0(r2)
 8007708:	003f1b06 	br	8007378 <__alt_data_end+0xf8007378>
 800770c:	9009883a 	mov	r4,r18
 8007710:	81400204 	addi	r5,r16,8
 8007714:	80064440 	call	8006444 <_free_r>
 8007718:	00820074 	movhi	r2,2049
 800771c:	10945104 	addi	r2,r2,20804
 8007720:	10800017 	ldw	r2,0(r2)
 8007724:	003f3906 	br	800740c <__alt_data_end+0xf800740c>
 8007728:	01405504 	movi	r5,340
 800772c:	28c00436 	bltu	r5,r3,8007740 <_malloc_r+0x798>
 8007730:	100ad3fa 	srli	r5,r2,15
 8007734:	29401dc4 	addi	r5,r5,119
 8007738:	294d883a 	add	r6,r5,r5
 800773c:	003f6206 	br	80074c8 <__alt_data_end+0xf80074c8>
 8007740:	01415504 	movi	r5,1364
 8007744:	28c00436 	bltu	r5,r3,8007758 <_malloc_r+0x7b0>
 8007748:	100ad4ba 	srli	r5,r2,18
 800774c:	29401f04 	addi	r5,r5,124
 8007750:	294d883a 	add	r6,r5,r5
 8007754:	003f5c06 	br	80074c8 <__alt_data_end+0xf80074c8>
 8007758:	01803f04 	movi	r6,252
 800775c:	01401f84 	movi	r5,126
 8007760:	003f5906 	br	80074c8 <__alt_data_end+0xf80074c8>
 8007764:	98800117 	ldw	r2,4(r19)
 8007768:	003fa906 	br	8007610 <__alt_data_end+0xf8007610>

0800776c <memchr>:
 800776c:	208000cc 	andi	r2,r4,3
 8007770:	2811883a 	mov	r8,r5
 8007774:	10003526 	beq	r2,zero,800784c <memchr+0xe0>
 8007778:	30bfffc4 	addi	r2,r6,-1
 800777c:	30001b26 	beq	r6,zero,80077ec <memchr+0x80>
 8007780:	21800003 	ldbu	r6,0(r4)
 8007784:	28c03fcc 	andi	r3,r5,255
 8007788:	30c01a26 	beq	r6,r3,80077f4 <memchr+0x88>
 800778c:	180d883a 	mov	r6,r3
 8007790:	00000406 	br	80077a4 <memchr+0x38>
 8007794:	10001526 	beq	r2,zero,80077ec <memchr+0x80>
 8007798:	20c00003 	ldbu	r3,0(r4)
 800779c:	10bfffc4 	addi	r2,r2,-1
 80077a0:	19801426 	beq	r3,r6,80077f4 <memchr+0x88>
 80077a4:	21000044 	addi	r4,r4,1
 80077a8:	20c000cc 	andi	r3,r4,3
 80077ac:	183ff91e 	bne	r3,zero,8007794 <__alt_data_end+0xf8007794>
 80077b0:	02c000c4 	movi	r11,3
 80077b4:	58801136 	bltu	r11,r2,80077fc <memchr+0x90>
 80077b8:	10000c26 	beq	r2,zero,80077ec <memchr+0x80>
 80077bc:	20c00003 	ldbu	r3,0(r4)
 80077c0:	29403fcc 	andi	r5,r5,255
 80077c4:	19400b26 	beq	r3,r5,80077f4 <memchr+0x88>
 80077c8:	20c00044 	addi	r3,r4,1
 80077cc:	2085883a 	add	r2,r4,r2
 80077d0:	41803fcc 	andi	r6,r8,255
 80077d4:	00000306 	br	80077e4 <memchr+0x78>
 80077d8:	18c00044 	addi	r3,r3,1
 80077dc:	197fffc3 	ldbu	r5,-1(r3)
 80077e0:	29800426 	beq	r5,r6,80077f4 <memchr+0x88>
 80077e4:	1809883a 	mov	r4,r3
 80077e8:	18bffb1e 	bne	r3,r2,80077d8 <__alt_data_end+0xf80077d8>
 80077ec:	0005883a 	mov	r2,zero
 80077f0:	f800283a 	ret
 80077f4:	2005883a 	mov	r2,r4
 80077f8:	f800283a 	ret
 80077fc:	28c03fcc 	andi	r3,r5,255
 8007800:	180c923a 	slli	r6,r3,8
 8007804:	02bfbff4 	movhi	r10,65279
 8007808:	52bfbfc4 	addi	r10,r10,-257
 800780c:	02602074 	movhi	r9,32897
 8007810:	4a602004 	addi	r9,r9,-32640
 8007814:	30c6b03a 	or	r3,r6,r3
 8007818:	180c943a 	slli	r6,r3,16
 800781c:	30ccb03a 	or	r6,r6,r3
 8007820:	20c00017 	ldw	r3,0(r4)
 8007824:	30c6f03a 	xor	r3,r6,r3
 8007828:	1a8f883a 	add	r7,r3,r10
 800782c:	00c6303a 	nor	r3,zero,r3
 8007830:	38c6703a 	and	r3,r7,r3
 8007834:	1a46703a 	and	r3,r3,r9
 8007838:	183fdf1e 	bne	r3,zero,80077b8 <__alt_data_end+0xf80077b8>
 800783c:	10bfff04 	addi	r2,r2,-4
 8007840:	21000104 	addi	r4,r4,4
 8007844:	58bff636 	bltu	r11,r2,8007820 <__alt_data_end+0xf8007820>
 8007848:	003fdb06 	br	80077b8 <__alt_data_end+0xf80077b8>
 800784c:	3005883a 	mov	r2,r6
 8007850:	003fd706 	br	80077b0 <__alt_data_end+0xf80077b0>

08007854 <memcpy>:
 8007854:	00c003c4 	movi	r3,15
 8007858:	2005883a 	mov	r2,r4
 800785c:	1980372e 	bgeu	r3,r6,800793c <memcpy+0xe8>
 8007860:	2146b03a 	or	r3,r4,r5
 8007864:	18c000cc 	andi	r3,r3,3
 8007868:	1800371e 	bne	r3,zero,8007948 <memcpy+0xf4>
 800786c:	327ffc04 	addi	r9,r6,-16
 8007870:	4812d13a 	srli	r9,r9,4
 8007874:	2007883a 	mov	r3,r4
 8007878:	280f883a 	mov	r7,r5
 800787c:	4808913a 	slli	r4,r9,4
 8007880:	1109883a 	add	r4,r2,r4
 8007884:	21000404 	addi	r4,r4,16
 8007888:	3a000017 	ldw	r8,0(r7)
 800788c:	18c00404 	addi	r3,r3,16
 8007890:	39c00404 	addi	r7,r7,16
 8007894:	1a3ffc15 	stw	r8,-16(r3)
 8007898:	3a3ffd17 	ldw	r8,-12(r7)
 800789c:	1a3ffd15 	stw	r8,-12(r3)
 80078a0:	3a3ffe17 	ldw	r8,-8(r7)
 80078a4:	1a3ffe15 	stw	r8,-8(r3)
 80078a8:	3a3fff17 	ldw	r8,-4(r7)
 80078ac:	1a3fff15 	stw	r8,-4(r3)
 80078b0:	193ff51e 	bne	r3,r4,8007888 <__alt_data_end+0xf8007888>
 80078b4:	49000044 	addi	r4,r9,1
 80078b8:	2008913a 	slli	r4,r4,4
 80078bc:	328003cc 	andi	r10,r6,15
 80078c0:	1107883a 	add	r3,r2,r4
 80078c4:	290b883a 	add	r5,r5,r4
 80078c8:	010000c4 	movi	r4,3
 80078cc:	2280212e 	bgeu	r4,r10,8007954 <memcpy+0x100>
 80078d0:	52bfff04 	addi	r10,r10,-4
 80078d4:	5014d0ba 	srli	r10,r10,2
 80078d8:	180f883a 	mov	r7,r3
 80078dc:	2811883a 	mov	r8,r5
 80078e0:	5289883a 	add	r4,r10,r10
 80078e4:	2109883a 	add	r4,r4,r4
 80078e8:	21000104 	addi	r4,r4,4
 80078ec:	1909883a 	add	r4,r3,r4
 80078f0:	42400017 	ldw	r9,0(r8)
 80078f4:	39c00104 	addi	r7,r7,4
 80078f8:	42000104 	addi	r8,r8,4
 80078fc:	3a7fff15 	stw	r9,-4(r7)
 8007900:	393ffb1e 	bne	r7,r4,80078f0 <__alt_data_end+0xf80078f0>
 8007904:	51000044 	addi	r4,r10,1
 8007908:	2109883a 	add	r4,r4,r4
 800790c:	2109883a 	add	r4,r4,r4
 8007910:	318000cc 	andi	r6,r6,3
 8007914:	1907883a 	add	r3,r3,r4
 8007918:	290b883a 	add	r5,r5,r4
 800791c:	30000c26 	beq	r6,zero,8007950 <memcpy+0xfc>
 8007920:	298d883a 	add	r6,r5,r6
 8007924:	29c00003 	ldbu	r7,0(r5)
 8007928:	18c00044 	addi	r3,r3,1
 800792c:	29400044 	addi	r5,r5,1
 8007930:	19ffffc5 	stb	r7,-1(r3)
 8007934:	29bffb1e 	bne	r5,r6,8007924 <__alt_data_end+0xf8007924>
 8007938:	f800283a 	ret
 800793c:	2007883a 	mov	r3,r4
 8007940:	303ff71e 	bne	r6,zero,8007920 <__alt_data_end+0xf8007920>
 8007944:	00000206 	br	8007950 <memcpy+0xfc>
 8007948:	2007883a 	mov	r3,r4
 800794c:	003ff406 	br	8007920 <__alt_data_end+0xf8007920>
 8007950:	f800283a 	ret
 8007954:	500d883a 	mov	r6,r10
 8007958:	303ff11e 	bne	r6,zero,8007920 <__alt_data_end+0xf8007920>
 800795c:	003ffc06 	br	8007950 <__alt_data_end+0xf8007950>

08007960 <memmove>:
 8007960:	2005883a 	mov	r2,r4
 8007964:	29000b2e 	bgeu	r5,r4,8007994 <memmove+0x34>
 8007968:	298f883a 	add	r7,r5,r6
 800796c:	21c0092e 	bgeu	r4,r7,8007994 <memmove+0x34>
 8007970:	2187883a 	add	r3,r4,r6
 8007974:	198bc83a 	sub	r5,r3,r6
 8007978:	30003e26 	beq	r6,zero,8007a74 <memmove+0x114>
 800797c:	39ffffc4 	addi	r7,r7,-1
 8007980:	39000003 	ldbu	r4,0(r7)
 8007984:	18ffffc4 	addi	r3,r3,-1
 8007988:	19000005 	stb	r4,0(r3)
 800798c:	197ffb1e 	bne	r3,r5,800797c <__alt_data_end+0xf800797c>
 8007990:	f800283a 	ret
 8007994:	00c003c4 	movi	r3,15
 8007998:	1980372e 	bgeu	r3,r6,8007a78 <memmove+0x118>
 800799c:	1146b03a 	or	r3,r2,r5
 80079a0:	18c000cc 	andi	r3,r3,3
 80079a4:	1800371e 	bne	r3,zero,8007a84 <memmove+0x124>
 80079a8:	327ffc04 	addi	r9,r6,-16
 80079ac:	4812d13a 	srli	r9,r9,4
 80079b0:	280f883a 	mov	r7,r5
 80079b4:	1007883a 	mov	r3,r2
 80079b8:	4810913a 	slli	r8,r9,4
 80079bc:	1211883a 	add	r8,r2,r8
 80079c0:	42000404 	addi	r8,r8,16
 80079c4:	39000017 	ldw	r4,0(r7)
 80079c8:	18c00404 	addi	r3,r3,16
 80079cc:	39c00404 	addi	r7,r7,16
 80079d0:	193ffc15 	stw	r4,-16(r3)
 80079d4:	393ffd17 	ldw	r4,-12(r7)
 80079d8:	193ffd15 	stw	r4,-12(r3)
 80079dc:	393ffe17 	ldw	r4,-8(r7)
 80079e0:	193ffe15 	stw	r4,-8(r3)
 80079e4:	393fff17 	ldw	r4,-4(r7)
 80079e8:	193fff15 	stw	r4,-4(r3)
 80079ec:	1a3ff51e 	bne	r3,r8,80079c4 <__alt_data_end+0xf80079c4>
 80079f0:	49000044 	addi	r4,r9,1
 80079f4:	2008913a 	slli	r4,r4,4
 80079f8:	328003cc 	andi	r10,r6,15
 80079fc:	1107883a 	add	r3,r2,r4
 8007a00:	290b883a 	add	r5,r5,r4
 8007a04:	010000c4 	movi	r4,3
 8007a08:	2280212e 	bgeu	r4,r10,8007a90 <memmove+0x130>
 8007a0c:	52bfff04 	addi	r10,r10,-4
 8007a10:	5014d0ba 	srli	r10,r10,2
 8007a14:	180f883a 	mov	r7,r3
 8007a18:	2809883a 	mov	r4,r5
 8007a1c:	5291883a 	add	r8,r10,r10
 8007a20:	4211883a 	add	r8,r8,r8
 8007a24:	42400104 	addi	r9,r8,4
 8007a28:	1a53883a 	add	r9,r3,r9
 8007a2c:	22000017 	ldw	r8,0(r4)
 8007a30:	39c00104 	addi	r7,r7,4
 8007a34:	21000104 	addi	r4,r4,4
 8007a38:	3a3fff15 	stw	r8,-4(r7)
 8007a3c:	3a7ffb1e 	bne	r7,r9,8007a2c <__alt_data_end+0xf8007a2c>
 8007a40:	51000044 	addi	r4,r10,1
 8007a44:	2109883a 	add	r4,r4,r4
 8007a48:	2109883a 	add	r4,r4,r4
 8007a4c:	318000cc 	andi	r6,r6,3
 8007a50:	1907883a 	add	r3,r3,r4
 8007a54:	290b883a 	add	r5,r5,r4
 8007a58:	30000c26 	beq	r6,zero,8007a8c <memmove+0x12c>
 8007a5c:	198d883a 	add	r6,r3,r6
 8007a60:	29c00003 	ldbu	r7,0(r5)
 8007a64:	18c00044 	addi	r3,r3,1
 8007a68:	29400044 	addi	r5,r5,1
 8007a6c:	19ffffc5 	stb	r7,-1(r3)
 8007a70:	19bffb1e 	bne	r3,r6,8007a60 <__alt_data_end+0xf8007a60>
 8007a74:	f800283a 	ret
 8007a78:	1007883a 	mov	r3,r2
 8007a7c:	303ff71e 	bne	r6,zero,8007a5c <__alt_data_end+0xf8007a5c>
 8007a80:	00000206 	br	8007a8c <memmove+0x12c>
 8007a84:	1007883a 	mov	r3,r2
 8007a88:	003ff406 	br	8007a5c <__alt_data_end+0xf8007a5c>
 8007a8c:	f800283a 	ret
 8007a90:	500d883a 	mov	r6,r10
 8007a94:	303ff11e 	bne	r6,zero,8007a5c <__alt_data_end+0xf8007a5c>
 8007a98:	003ffc06 	br	8007a8c <__alt_data_end+0xf8007a8c>

08007a9c <memset>:
 8007a9c:	20c000cc 	andi	r3,r4,3
 8007aa0:	2005883a 	mov	r2,r4
 8007aa4:	18003f26 	beq	r3,zero,8007ba4 <memset+0x108>
 8007aa8:	31ffffc4 	addi	r7,r6,-1
 8007aac:	30003b26 	beq	r6,zero,8007b9c <memset+0x100>
 8007ab0:	2813883a 	mov	r9,r5
 8007ab4:	200d883a 	mov	r6,r4
 8007ab8:	2007883a 	mov	r3,r4
 8007abc:	00000406 	br	8007ad0 <memset+0x34>
 8007ac0:	3a3fffc4 	addi	r8,r7,-1
 8007ac4:	31800044 	addi	r6,r6,1
 8007ac8:	38003426 	beq	r7,zero,8007b9c <memset+0x100>
 8007acc:	400f883a 	mov	r7,r8
 8007ad0:	18c00044 	addi	r3,r3,1
 8007ad4:	32400005 	stb	r9,0(r6)
 8007ad8:	1a0000cc 	andi	r8,r3,3
 8007adc:	403ff81e 	bne	r8,zero,8007ac0 <__alt_data_end+0xf8007ac0>
 8007ae0:	010000c4 	movi	r4,3
 8007ae4:	21c0282e 	bgeu	r4,r7,8007b88 <memset+0xec>
 8007ae8:	29003fcc 	andi	r4,r5,255
 8007aec:	2010923a 	slli	r8,r4,8
 8007af0:	4108b03a 	or	r4,r8,r4
 8007af4:	2010943a 	slli	r8,r4,16
 8007af8:	4110b03a 	or	r8,r8,r4
 8007afc:	010003c4 	movi	r4,15
 8007b00:	21c0122e 	bgeu	r4,r7,8007b4c <memset+0xb0>
 8007b04:	3a7ffc04 	addi	r9,r7,-16
 8007b08:	4812d13a 	srli	r9,r9,4
 8007b0c:	19000404 	addi	r4,r3,16
 8007b10:	180d883a 	mov	r6,r3
 8007b14:	4814913a 	slli	r10,r9,4
 8007b18:	2289883a 	add	r4,r4,r10
 8007b1c:	32000015 	stw	r8,0(r6)
 8007b20:	32000115 	stw	r8,4(r6)
 8007b24:	32000215 	stw	r8,8(r6)
 8007b28:	32000315 	stw	r8,12(r6)
 8007b2c:	31800404 	addi	r6,r6,16
 8007b30:	313ffa1e 	bne	r6,r4,8007b1c <__alt_data_end+0xf8007b1c>
 8007b34:	4a400044 	addi	r9,r9,1
 8007b38:	4812913a 	slli	r9,r9,4
 8007b3c:	39c003cc 	andi	r7,r7,15
 8007b40:	010000c4 	movi	r4,3
 8007b44:	1a47883a 	add	r3,r3,r9
 8007b48:	21c00f2e 	bgeu	r4,r7,8007b88 <memset+0xec>
 8007b4c:	3a7fff04 	addi	r9,r7,-4
 8007b50:	4812d0ba 	srli	r9,r9,2
 8007b54:	19000104 	addi	r4,r3,4
 8007b58:	180d883a 	mov	r6,r3
 8007b5c:	4a55883a 	add	r10,r9,r9
 8007b60:	5295883a 	add	r10,r10,r10
 8007b64:	2289883a 	add	r4,r4,r10
 8007b68:	32000015 	stw	r8,0(r6)
 8007b6c:	31800104 	addi	r6,r6,4
 8007b70:	313ffd1e 	bne	r6,r4,8007b68 <__alt_data_end+0xf8007b68>
 8007b74:	4a400044 	addi	r9,r9,1
 8007b78:	4a53883a 	add	r9,r9,r9
 8007b7c:	4a53883a 	add	r9,r9,r9
 8007b80:	1a47883a 	add	r3,r3,r9
 8007b84:	39c000cc 	andi	r7,r7,3
 8007b88:	38000526 	beq	r7,zero,8007ba0 <memset+0x104>
 8007b8c:	19cf883a 	add	r7,r3,r7
 8007b90:	19400005 	stb	r5,0(r3)
 8007b94:	18c00044 	addi	r3,r3,1
 8007b98:	19fffd1e 	bne	r3,r7,8007b90 <__alt_data_end+0xf8007b90>
 8007b9c:	f800283a 	ret
 8007ba0:	f800283a 	ret
 8007ba4:	2007883a 	mov	r3,r4
 8007ba8:	300f883a 	mov	r7,r6
 8007bac:	003fcc06 	br	8007ae0 <__alt_data_end+0xf8007ae0>

08007bb0 <_Balloc>:
 8007bb0:	20801317 	ldw	r2,76(r4)
 8007bb4:	defffc04 	addi	sp,sp,-16
 8007bb8:	dc400115 	stw	r17,4(sp)
 8007bbc:	dc000015 	stw	r16,0(sp)
 8007bc0:	dfc00315 	stw	ra,12(sp)
 8007bc4:	dc800215 	stw	r18,8(sp)
 8007bc8:	2023883a 	mov	r17,r4
 8007bcc:	2821883a 	mov	r16,r5
 8007bd0:	10000f26 	beq	r2,zero,8007c10 <_Balloc+0x60>
 8007bd4:	8407883a 	add	r3,r16,r16
 8007bd8:	18c7883a 	add	r3,r3,r3
 8007bdc:	10c7883a 	add	r3,r2,r3
 8007be0:	18800017 	ldw	r2,0(r3)
 8007be4:	10001126 	beq	r2,zero,8007c2c <_Balloc+0x7c>
 8007be8:	11000017 	ldw	r4,0(r2)
 8007bec:	19000015 	stw	r4,0(r3)
 8007bf0:	10000415 	stw	zero,16(r2)
 8007bf4:	10000315 	stw	zero,12(r2)
 8007bf8:	dfc00317 	ldw	ra,12(sp)
 8007bfc:	dc800217 	ldw	r18,8(sp)
 8007c00:	dc400117 	ldw	r17,4(sp)
 8007c04:	dc000017 	ldw	r16,0(sp)
 8007c08:	dec00404 	addi	sp,sp,16
 8007c0c:	f800283a 	ret
 8007c10:	01400104 	movi	r5,4
 8007c14:	01800844 	movi	r6,33
 8007c18:	800aa380 	call	800aa38 <_calloc_r>
 8007c1c:	88801315 	stw	r2,76(r17)
 8007c20:	103fec1e 	bne	r2,zero,8007bd4 <__alt_data_end+0xf8007bd4>
 8007c24:	0005883a 	mov	r2,zero
 8007c28:	003ff306 	br	8007bf8 <__alt_data_end+0xf8007bf8>
 8007c2c:	01400044 	movi	r5,1
 8007c30:	2c24983a 	sll	r18,r5,r16
 8007c34:	8809883a 	mov	r4,r17
 8007c38:	91800144 	addi	r6,r18,5
 8007c3c:	318d883a 	add	r6,r6,r6
 8007c40:	318d883a 	add	r6,r6,r6
 8007c44:	800aa380 	call	800aa38 <_calloc_r>
 8007c48:	103ff626 	beq	r2,zero,8007c24 <__alt_data_end+0xf8007c24>
 8007c4c:	14000115 	stw	r16,4(r2)
 8007c50:	14800215 	stw	r18,8(r2)
 8007c54:	003fe606 	br	8007bf0 <__alt_data_end+0xf8007bf0>

08007c58 <_Bfree>:
 8007c58:	28000826 	beq	r5,zero,8007c7c <_Bfree+0x24>
 8007c5c:	28c00117 	ldw	r3,4(r5)
 8007c60:	20801317 	ldw	r2,76(r4)
 8007c64:	18c7883a 	add	r3,r3,r3
 8007c68:	18c7883a 	add	r3,r3,r3
 8007c6c:	10c5883a 	add	r2,r2,r3
 8007c70:	10c00017 	ldw	r3,0(r2)
 8007c74:	28c00015 	stw	r3,0(r5)
 8007c78:	11400015 	stw	r5,0(r2)
 8007c7c:	f800283a 	ret

08007c80 <__multadd>:
 8007c80:	defff604 	addi	sp,sp,-40
 8007c84:	dd400515 	stw	r21,20(sp)
 8007c88:	2d400417 	ldw	r21,16(r5)
 8007c8c:	df000815 	stw	fp,32(sp)
 8007c90:	ddc00715 	stw	r23,28(sp)
 8007c94:	dd800615 	stw	r22,24(sp)
 8007c98:	dd000415 	stw	r20,16(sp)
 8007c9c:	dc400115 	stw	r17,4(sp)
 8007ca0:	dc000015 	stw	r16,0(sp)
 8007ca4:	dfc00915 	stw	ra,36(sp)
 8007ca8:	dcc00315 	stw	r19,12(sp)
 8007cac:	dc800215 	stw	r18,8(sp)
 8007cb0:	282d883a 	mov	r22,r5
 8007cb4:	202f883a 	mov	r23,r4
 8007cb8:	3029883a 	mov	r20,r6
 8007cbc:	3839883a 	mov	fp,r7
 8007cc0:	2c000504 	addi	r16,r5,20
 8007cc4:	0023883a 	mov	r17,zero
 8007cc8:	84c00017 	ldw	r19,0(r16)
 8007ccc:	a00b883a 	mov	r5,r20
 8007cd0:	8c400044 	addi	r17,r17,1
 8007cd4:	993fffcc 	andi	r4,r19,65535
 8007cd8:	800c1240 	call	800c124 <__mulsi3>
 8007cdc:	1725883a 	add	r18,r2,fp
 8007ce0:	9808d43a 	srli	r4,r19,16
 8007ce4:	9026d43a 	srli	r19,r18,16
 8007ce8:	a00b883a 	mov	r5,r20
 8007cec:	800c1240 	call	800c124 <__mulsi3>
 8007cf0:	988f883a 	add	r7,r19,r2
 8007cf4:	3804943a 	slli	r2,r7,16
 8007cf8:	94bfffcc 	andi	r18,r18,65535
 8007cfc:	3838d43a 	srli	fp,r7,16
 8007d00:	14a5883a 	add	r18,r2,r18
 8007d04:	84800015 	stw	r18,0(r16)
 8007d08:	84000104 	addi	r16,r16,4
 8007d0c:	8d7fee16 	blt	r17,r21,8007cc8 <__alt_data_end+0xf8007cc8>
 8007d10:	e0000926 	beq	fp,zero,8007d38 <__multadd+0xb8>
 8007d14:	b0800217 	ldw	r2,8(r22)
 8007d18:	a880140e 	bge	r21,r2,8007d6c <__multadd+0xec>
 8007d1c:	a8800144 	addi	r2,r21,5
 8007d20:	1085883a 	add	r2,r2,r2
 8007d24:	1085883a 	add	r2,r2,r2
 8007d28:	b085883a 	add	r2,r22,r2
 8007d2c:	17000015 	stw	fp,0(r2)
 8007d30:	ad400044 	addi	r21,r21,1
 8007d34:	b5400415 	stw	r21,16(r22)
 8007d38:	b005883a 	mov	r2,r22
 8007d3c:	dfc00917 	ldw	ra,36(sp)
 8007d40:	df000817 	ldw	fp,32(sp)
 8007d44:	ddc00717 	ldw	r23,28(sp)
 8007d48:	dd800617 	ldw	r22,24(sp)
 8007d4c:	dd400517 	ldw	r21,20(sp)
 8007d50:	dd000417 	ldw	r20,16(sp)
 8007d54:	dcc00317 	ldw	r19,12(sp)
 8007d58:	dc800217 	ldw	r18,8(sp)
 8007d5c:	dc400117 	ldw	r17,4(sp)
 8007d60:	dc000017 	ldw	r16,0(sp)
 8007d64:	dec00a04 	addi	sp,sp,40
 8007d68:	f800283a 	ret
 8007d6c:	b1400117 	ldw	r5,4(r22)
 8007d70:	b809883a 	mov	r4,r23
 8007d74:	29400044 	addi	r5,r5,1
 8007d78:	8007bb00 	call	8007bb0 <_Balloc>
 8007d7c:	b1800417 	ldw	r6,16(r22)
 8007d80:	b1400304 	addi	r5,r22,12
 8007d84:	11000304 	addi	r4,r2,12
 8007d88:	31800084 	addi	r6,r6,2
 8007d8c:	318d883a 	add	r6,r6,r6
 8007d90:	318d883a 	add	r6,r6,r6
 8007d94:	1021883a 	mov	r16,r2
 8007d98:	80078540 	call	8007854 <memcpy>
 8007d9c:	b0c00117 	ldw	r3,4(r22)
 8007da0:	b8801317 	ldw	r2,76(r23)
 8007da4:	18c7883a 	add	r3,r3,r3
 8007da8:	18c7883a 	add	r3,r3,r3
 8007dac:	10c5883a 	add	r2,r2,r3
 8007db0:	10c00017 	ldw	r3,0(r2)
 8007db4:	b0c00015 	stw	r3,0(r22)
 8007db8:	15800015 	stw	r22,0(r2)
 8007dbc:	802d883a 	mov	r22,r16
 8007dc0:	003fd606 	br	8007d1c <__alt_data_end+0xf8007d1c>

08007dc4 <__s2b>:
 8007dc4:	defff904 	addi	sp,sp,-28
 8007dc8:	dd000415 	stw	r20,16(sp)
 8007dcc:	dc400115 	stw	r17,4(sp)
 8007dd0:	2829883a 	mov	r20,r5
 8007dd4:	2023883a 	mov	r17,r4
 8007dd8:	01400244 	movi	r5,9
 8007ddc:	39000204 	addi	r4,r7,8
 8007de0:	dcc00315 	stw	r19,12(sp)
 8007de4:	dc800215 	stw	r18,8(sp)
 8007de8:	dfc00615 	stw	ra,24(sp)
 8007dec:	dd400515 	stw	r21,20(sp)
 8007df0:	dc000015 	stw	r16,0(sp)
 8007df4:	3827883a 	mov	r19,r7
 8007df8:	3025883a 	mov	r18,r6
 8007dfc:	800c0800 	call	800c080 <__divsi3>
 8007e00:	00c00044 	movi	r3,1
 8007e04:	000b883a 	mov	r5,zero
 8007e08:	1880030e 	bge	r3,r2,8007e18 <__s2b+0x54>
 8007e0c:	18c7883a 	add	r3,r3,r3
 8007e10:	29400044 	addi	r5,r5,1
 8007e14:	18bffd16 	blt	r3,r2,8007e0c <__alt_data_end+0xf8007e0c>
 8007e18:	8809883a 	mov	r4,r17
 8007e1c:	8007bb00 	call	8007bb0 <_Balloc>
 8007e20:	d8c00717 	ldw	r3,28(sp)
 8007e24:	10c00515 	stw	r3,20(r2)
 8007e28:	00c00044 	movi	r3,1
 8007e2c:	10c00415 	stw	r3,16(r2)
 8007e30:	00c00244 	movi	r3,9
 8007e34:	1c80210e 	bge	r3,r18,8007ebc <__s2b+0xf8>
 8007e38:	a0eb883a 	add	r21,r20,r3
 8007e3c:	a821883a 	mov	r16,r21
 8007e40:	a4a9883a 	add	r20,r20,r18
 8007e44:	81c00007 	ldb	r7,0(r16)
 8007e48:	8809883a 	mov	r4,r17
 8007e4c:	84000044 	addi	r16,r16,1
 8007e50:	100b883a 	mov	r5,r2
 8007e54:	01800284 	movi	r6,10
 8007e58:	39fff404 	addi	r7,r7,-48
 8007e5c:	8007c800 	call	8007c80 <__multadd>
 8007e60:	853ff81e 	bne	r16,r20,8007e44 <__alt_data_end+0xf8007e44>
 8007e64:	aca1883a 	add	r16,r21,r18
 8007e68:	843ffe04 	addi	r16,r16,-8
 8007e6c:	94c00a0e 	bge	r18,r19,8007e98 <__s2b+0xd4>
 8007e70:	84e7883a 	add	r19,r16,r19
 8007e74:	9ca5c83a 	sub	r18,r19,r18
 8007e78:	81c00007 	ldb	r7,0(r16)
 8007e7c:	8809883a 	mov	r4,r17
 8007e80:	84000044 	addi	r16,r16,1
 8007e84:	100b883a 	mov	r5,r2
 8007e88:	01800284 	movi	r6,10
 8007e8c:	39fff404 	addi	r7,r7,-48
 8007e90:	8007c800 	call	8007c80 <__multadd>
 8007e94:	84bff81e 	bne	r16,r18,8007e78 <__alt_data_end+0xf8007e78>
 8007e98:	dfc00617 	ldw	ra,24(sp)
 8007e9c:	dd400517 	ldw	r21,20(sp)
 8007ea0:	dd000417 	ldw	r20,16(sp)
 8007ea4:	dcc00317 	ldw	r19,12(sp)
 8007ea8:	dc800217 	ldw	r18,8(sp)
 8007eac:	dc400117 	ldw	r17,4(sp)
 8007eb0:	dc000017 	ldw	r16,0(sp)
 8007eb4:	dec00704 	addi	sp,sp,28
 8007eb8:	f800283a 	ret
 8007ebc:	a4000284 	addi	r16,r20,10
 8007ec0:	1825883a 	mov	r18,r3
 8007ec4:	003fe906 	br	8007e6c <__alt_data_end+0xf8007e6c>

08007ec8 <__hi0bits>:
 8007ec8:	20bfffec 	andhi	r2,r4,65535
 8007ecc:	1000141e 	bne	r2,zero,8007f20 <__hi0bits+0x58>
 8007ed0:	2008943a 	slli	r4,r4,16
 8007ed4:	00800404 	movi	r2,16
 8007ed8:	20ffc02c 	andhi	r3,r4,65280
 8007edc:	1800021e 	bne	r3,zero,8007ee8 <__hi0bits+0x20>
 8007ee0:	2008923a 	slli	r4,r4,8
 8007ee4:	10800204 	addi	r2,r2,8
 8007ee8:	20fc002c 	andhi	r3,r4,61440
 8007eec:	1800021e 	bne	r3,zero,8007ef8 <__hi0bits+0x30>
 8007ef0:	2008913a 	slli	r4,r4,4
 8007ef4:	10800104 	addi	r2,r2,4
 8007ef8:	20f0002c 	andhi	r3,r4,49152
 8007efc:	1800031e 	bne	r3,zero,8007f0c <__hi0bits+0x44>
 8007f00:	2109883a 	add	r4,r4,r4
 8007f04:	10800084 	addi	r2,r2,2
 8007f08:	2109883a 	add	r4,r4,r4
 8007f0c:	20000316 	blt	r4,zero,8007f1c <__hi0bits+0x54>
 8007f10:	2110002c 	andhi	r4,r4,16384
 8007f14:	2000041e 	bne	r4,zero,8007f28 <__hi0bits+0x60>
 8007f18:	00800804 	movi	r2,32
 8007f1c:	f800283a 	ret
 8007f20:	0005883a 	mov	r2,zero
 8007f24:	003fec06 	br	8007ed8 <__alt_data_end+0xf8007ed8>
 8007f28:	10800044 	addi	r2,r2,1
 8007f2c:	f800283a 	ret

08007f30 <__lo0bits>:
 8007f30:	20c00017 	ldw	r3,0(r4)
 8007f34:	188001cc 	andi	r2,r3,7
 8007f38:	10000826 	beq	r2,zero,8007f5c <__lo0bits+0x2c>
 8007f3c:	1880004c 	andi	r2,r3,1
 8007f40:	1000211e 	bne	r2,zero,8007fc8 <__lo0bits+0x98>
 8007f44:	1880008c 	andi	r2,r3,2
 8007f48:	1000211e 	bne	r2,zero,8007fd0 <__lo0bits+0xa0>
 8007f4c:	1806d0ba 	srli	r3,r3,2
 8007f50:	00800084 	movi	r2,2
 8007f54:	20c00015 	stw	r3,0(r4)
 8007f58:	f800283a 	ret
 8007f5c:	18bfffcc 	andi	r2,r3,65535
 8007f60:	10001326 	beq	r2,zero,8007fb0 <__lo0bits+0x80>
 8007f64:	0005883a 	mov	r2,zero
 8007f68:	19403fcc 	andi	r5,r3,255
 8007f6c:	2800021e 	bne	r5,zero,8007f78 <__lo0bits+0x48>
 8007f70:	1806d23a 	srli	r3,r3,8
 8007f74:	10800204 	addi	r2,r2,8
 8007f78:	194003cc 	andi	r5,r3,15
 8007f7c:	2800021e 	bne	r5,zero,8007f88 <__lo0bits+0x58>
 8007f80:	1806d13a 	srli	r3,r3,4
 8007f84:	10800104 	addi	r2,r2,4
 8007f88:	194000cc 	andi	r5,r3,3
 8007f8c:	2800021e 	bne	r5,zero,8007f98 <__lo0bits+0x68>
 8007f90:	1806d0ba 	srli	r3,r3,2
 8007f94:	10800084 	addi	r2,r2,2
 8007f98:	1940004c 	andi	r5,r3,1
 8007f9c:	2800081e 	bne	r5,zero,8007fc0 <__lo0bits+0x90>
 8007fa0:	1806d07a 	srli	r3,r3,1
 8007fa4:	1800051e 	bne	r3,zero,8007fbc <__lo0bits+0x8c>
 8007fa8:	00800804 	movi	r2,32
 8007fac:	f800283a 	ret
 8007fb0:	1806d43a 	srli	r3,r3,16
 8007fb4:	00800404 	movi	r2,16
 8007fb8:	003feb06 	br	8007f68 <__alt_data_end+0xf8007f68>
 8007fbc:	10800044 	addi	r2,r2,1
 8007fc0:	20c00015 	stw	r3,0(r4)
 8007fc4:	f800283a 	ret
 8007fc8:	0005883a 	mov	r2,zero
 8007fcc:	f800283a 	ret
 8007fd0:	1806d07a 	srli	r3,r3,1
 8007fd4:	00800044 	movi	r2,1
 8007fd8:	20c00015 	stw	r3,0(r4)
 8007fdc:	f800283a 	ret

08007fe0 <__i2b>:
 8007fe0:	defffd04 	addi	sp,sp,-12
 8007fe4:	dc000015 	stw	r16,0(sp)
 8007fe8:	04000044 	movi	r16,1
 8007fec:	dc400115 	stw	r17,4(sp)
 8007ff0:	2823883a 	mov	r17,r5
 8007ff4:	800b883a 	mov	r5,r16
 8007ff8:	dfc00215 	stw	ra,8(sp)
 8007ffc:	8007bb00 	call	8007bb0 <_Balloc>
 8008000:	14400515 	stw	r17,20(r2)
 8008004:	14000415 	stw	r16,16(r2)
 8008008:	dfc00217 	ldw	ra,8(sp)
 800800c:	dc400117 	ldw	r17,4(sp)
 8008010:	dc000017 	ldw	r16,0(sp)
 8008014:	dec00304 	addi	sp,sp,12
 8008018:	f800283a 	ret

0800801c <__multiply>:
 800801c:	defff004 	addi	sp,sp,-64
 8008020:	dc400715 	stw	r17,28(sp)
 8008024:	dc000615 	stw	r16,24(sp)
 8008028:	34400417 	ldw	r17,16(r6)
 800802c:	2c000417 	ldw	r16,16(r5)
 8008030:	df000e15 	stw	fp,56(sp)
 8008034:	dd000a15 	stw	r20,40(sp)
 8008038:	dfc00f15 	stw	ra,60(sp)
 800803c:	ddc00d15 	stw	r23,52(sp)
 8008040:	dd800c15 	stw	r22,48(sp)
 8008044:	dd400b15 	stw	r21,44(sp)
 8008048:	dcc00915 	stw	r19,36(sp)
 800804c:	dc800815 	stw	r18,32(sp)
 8008050:	2839883a 	mov	fp,r5
 8008054:	3029883a 	mov	r20,r6
 8008058:	8440050e 	bge	r16,r17,8008070 <__multiply+0x54>
 800805c:	8007883a 	mov	r3,r16
 8008060:	3039883a 	mov	fp,r6
 8008064:	8821883a 	mov	r16,r17
 8008068:	2829883a 	mov	r20,r5
 800806c:	1823883a 	mov	r17,r3
 8008070:	e0800217 	ldw	r2,8(fp)
 8008074:	8447883a 	add	r3,r16,r17
 8008078:	d8c00115 	stw	r3,4(sp)
 800807c:	e1400117 	ldw	r5,4(fp)
 8008080:	10c0010e 	bge	r2,r3,8008088 <__multiply+0x6c>
 8008084:	29400044 	addi	r5,r5,1
 8008088:	8007bb00 	call	8007bb0 <_Balloc>
 800808c:	d8c00117 	ldw	r3,4(sp)
 8008090:	d8800515 	stw	r2,20(sp)
 8008094:	18ef883a 	add	r23,r3,r3
 8008098:	bdef883a 	add	r23,r23,r23
 800809c:	10c00504 	addi	r3,r2,20
 80080a0:	1def883a 	add	r23,r3,r23
 80080a4:	d8c00015 	stw	r3,0(sp)
 80080a8:	ddc00215 	stw	r23,8(sp)
 80080ac:	1805883a 	mov	r2,r3
 80080b0:	1dc0042e 	bgeu	r3,r23,80080c4 <__multiply+0xa8>
 80080b4:	d8c00217 	ldw	r3,8(sp)
 80080b8:	10000015 	stw	zero,0(r2)
 80080bc:	10800104 	addi	r2,r2,4
 80080c0:	10fffc36 	bltu	r2,r3,80080b4 <__alt_data_end+0xf80080b4>
 80080c4:	8c63883a 	add	r17,r17,r17
 80080c8:	a5000504 	addi	r20,r20,20
 80080cc:	8c63883a 	add	r17,r17,r17
 80080d0:	e7000504 	addi	fp,fp,20
 80080d4:	8421883a 	add	r16,r16,r16
 80080d8:	a463883a 	add	r17,r20,r17
 80080dc:	8421883a 	add	r16,r16,r16
 80080e0:	df000315 	stw	fp,12(sp)
 80080e4:	dc400415 	stw	r17,16(sp)
 80080e8:	e425883a 	add	r18,fp,r16
 80080ec:	a440482e 	bgeu	r20,r17,8008210 <__multiply+0x1f4>
 80080f0:	a4000017 	ldw	r16,0(r20)
 80080f4:	847fffcc 	andi	r17,r16,65535
 80080f8:	88001d26 	beq	r17,zero,8008170 <__multiply+0x154>
 80080fc:	dc000017 	ldw	r16,0(sp)
 8008100:	dcc00317 	ldw	r19,12(sp)
 8008104:	002b883a 	mov	r21,zero
 8008108:	9dc00017 	ldw	r23,0(r19)
 800810c:	85800017 	ldw	r22,0(r16)
 8008110:	880b883a 	mov	r5,r17
 8008114:	b93fffcc 	andi	r4,r23,65535
 8008118:	800c1240 	call	800c124 <__mulsi3>
 800811c:	b808d43a 	srli	r4,r23,16
 8008120:	b0ffffcc 	andi	r3,r22,65535
 8008124:	1885883a 	add	r2,r3,r2
 8008128:	880b883a 	mov	r5,r17
 800812c:	156b883a 	add	r21,r2,r21
 8008130:	b02cd43a 	srli	r22,r22,16
 8008134:	800c1240 	call	800c124 <__mulsi3>
 8008138:	a808d43a 	srli	r4,r21,16
 800813c:	b085883a 	add	r2,r22,r2
 8008140:	a8ffffcc 	andi	r3,r21,65535
 8008144:	110d883a 	add	r6,r2,r4
 8008148:	3004943a 	slli	r2,r6,16
 800814c:	9cc00104 	addi	r19,r19,4
 8008150:	8009883a 	mov	r4,r16
 8008154:	10c6b03a 	or	r3,r2,r3
 8008158:	80c00015 	stw	r3,0(r16)
 800815c:	302ad43a 	srli	r21,r6,16
 8008160:	84000104 	addi	r16,r16,4
 8008164:	9cbfe836 	bltu	r19,r18,8008108 <__alt_data_end+0xf8008108>
 8008168:	25400115 	stw	r21,4(r4)
 800816c:	a4000017 	ldw	r16,0(r20)
 8008170:	8020d43a 	srli	r16,r16,16
 8008174:	80002026 	beq	r16,zero,80081f8 <__multiply+0x1dc>
 8008178:	d8c00017 	ldw	r3,0(sp)
 800817c:	dd400317 	ldw	r21,12(sp)
 8008180:	002f883a 	mov	r23,zero
 8008184:	1f000017 	ldw	fp,0(r3)
 8008188:	182d883a 	mov	r22,r3
 800818c:	e023883a 	mov	r17,fp
 8008190:	a900000b 	ldhu	r4,0(r21)
 8008194:	8822d43a 	srli	r17,r17,16
 8008198:	800b883a 	mov	r5,r16
 800819c:	800c1240 	call	800c124 <__mulsi3>
 80081a0:	1445883a 	add	r2,r2,r17
 80081a4:	15ef883a 	add	r23,r2,r23
 80081a8:	b804943a 	slli	r2,r23,16
 80081ac:	e1ffffcc 	andi	r7,fp,65535
 80081b0:	ad400104 	addi	r21,r21,4
 80081b4:	11ceb03a 	or	r7,r2,r7
 80081b8:	b1c00015 	stw	r7,0(r22)
 80081bc:	a93fff17 	ldw	r4,-4(r21)
 80081c0:	b7000117 	ldw	fp,4(r22)
 80081c4:	800b883a 	mov	r5,r16
 80081c8:	2008d43a 	srli	r4,r4,16
 80081cc:	e023883a 	mov	r17,fp
 80081d0:	b027883a 	mov	r19,r22
 80081d4:	800c1240 	call	800c124 <__mulsi3>
 80081d8:	b812d43a 	srli	r9,r23,16
 80081dc:	e23fffcc 	andi	r8,fp,65535
 80081e0:	1205883a 	add	r2,r2,r8
 80081e4:	1279883a 	add	fp,r2,r9
 80081e8:	b5800104 	addi	r22,r22,4
 80081ec:	e02ed43a 	srli	r23,fp,16
 80081f0:	acbfe736 	bltu	r21,r18,8008190 <__alt_data_end+0xf8008190>
 80081f4:	9f000115 	stw	fp,4(r19)
 80081f8:	d8c00017 	ldw	r3,0(sp)
 80081fc:	a5000104 	addi	r20,r20,4
 8008200:	18c00104 	addi	r3,r3,4
 8008204:	d8c00015 	stw	r3,0(sp)
 8008208:	d8c00417 	ldw	r3,16(sp)
 800820c:	a0ffb836 	bltu	r20,r3,80080f0 <__alt_data_end+0xf80080f0>
 8008210:	d8c00117 	ldw	r3,4(sp)
 8008214:	00c00c0e 	bge	zero,r3,8008248 <__multiply+0x22c>
 8008218:	d8c00217 	ldw	r3,8(sp)
 800821c:	18bfff17 	ldw	r2,-4(r3)
 8008220:	1dffff04 	addi	r23,r3,-4
 8008224:	10000326 	beq	r2,zero,8008234 <__multiply+0x218>
 8008228:	00000706 	br	8008248 <__multiply+0x22c>
 800822c:	b8800017 	ldw	r2,0(r23)
 8008230:	1000051e 	bne	r2,zero,8008248 <__multiply+0x22c>
 8008234:	d8c00117 	ldw	r3,4(sp)
 8008238:	bdffff04 	addi	r23,r23,-4
 800823c:	18ffffc4 	addi	r3,r3,-1
 8008240:	d8c00115 	stw	r3,4(sp)
 8008244:	183ff91e 	bne	r3,zero,800822c <__alt_data_end+0xf800822c>
 8008248:	d8c00517 	ldw	r3,20(sp)
 800824c:	d9000117 	ldw	r4,4(sp)
 8008250:	1805883a 	mov	r2,r3
 8008254:	19000415 	stw	r4,16(r3)
 8008258:	dfc00f17 	ldw	ra,60(sp)
 800825c:	df000e17 	ldw	fp,56(sp)
 8008260:	ddc00d17 	ldw	r23,52(sp)
 8008264:	dd800c17 	ldw	r22,48(sp)
 8008268:	dd400b17 	ldw	r21,44(sp)
 800826c:	dd000a17 	ldw	r20,40(sp)
 8008270:	dcc00917 	ldw	r19,36(sp)
 8008274:	dc800817 	ldw	r18,32(sp)
 8008278:	dc400717 	ldw	r17,28(sp)
 800827c:	dc000617 	ldw	r16,24(sp)
 8008280:	dec01004 	addi	sp,sp,64
 8008284:	f800283a 	ret

08008288 <__pow5mult>:
 8008288:	defffa04 	addi	sp,sp,-24
 800828c:	dcc00315 	stw	r19,12(sp)
 8008290:	dc800215 	stw	r18,8(sp)
 8008294:	dc000015 	stw	r16,0(sp)
 8008298:	dfc00515 	stw	ra,20(sp)
 800829c:	dd000415 	stw	r20,16(sp)
 80082a0:	dc400115 	stw	r17,4(sp)
 80082a4:	308000cc 	andi	r2,r6,3
 80082a8:	3021883a 	mov	r16,r6
 80082ac:	2027883a 	mov	r19,r4
 80082b0:	2825883a 	mov	r18,r5
 80082b4:	1000301e 	bne	r2,zero,8008378 <__pow5mult+0xf0>
 80082b8:	8021d0ba 	srai	r16,r16,2
 80082bc:	80001b26 	beq	r16,zero,800832c <__pow5mult+0xa4>
 80082c0:	9c401217 	ldw	r17,72(r19)
 80082c4:	88003726 	beq	r17,zero,80083a4 <__pow5mult+0x11c>
 80082c8:	80c0004c 	andi	r3,r16,1
 80082cc:	1800071e 	bne	r3,zero,80082ec <__pow5mult+0x64>
 80082d0:	8021d07a 	srai	r16,r16,1
 80082d4:	80001526 	beq	r16,zero,800832c <__pow5mult+0xa4>
 80082d8:	88800017 	ldw	r2,0(r17)
 80082dc:	10001c26 	beq	r2,zero,8008350 <__pow5mult+0xc8>
 80082e0:	1023883a 	mov	r17,r2
 80082e4:	80c0004c 	andi	r3,r16,1
 80082e8:	183ff926 	beq	r3,zero,80082d0 <__alt_data_end+0xf80082d0>
 80082ec:	900b883a 	mov	r5,r18
 80082f0:	880d883a 	mov	r6,r17
 80082f4:	9809883a 	mov	r4,r19
 80082f8:	800801c0 	call	800801c <__multiply>
 80082fc:	90001c26 	beq	r18,zero,8008370 <__pow5mult+0xe8>
 8008300:	91000117 	ldw	r4,4(r18)
 8008304:	98c01317 	ldw	r3,76(r19)
 8008308:	8021d07a 	srai	r16,r16,1
 800830c:	2109883a 	add	r4,r4,r4
 8008310:	2109883a 	add	r4,r4,r4
 8008314:	1907883a 	add	r3,r3,r4
 8008318:	19000017 	ldw	r4,0(r3)
 800831c:	91000015 	stw	r4,0(r18)
 8008320:	1c800015 	stw	r18,0(r3)
 8008324:	1025883a 	mov	r18,r2
 8008328:	803feb1e 	bne	r16,zero,80082d8 <__alt_data_end+0xf80082d8>
 800832c:	9005883a 	mov	r2,r18
 8008330:	dfc00517 	ldw	ra,20(sp)
 8008334:	dd000417 	ldw	r20,16(sp)
 8008338:	dcc00317 	ldw	r19,12(sp)
 800833c:	dc800217 	ldw	r18,8(sp)
 8008340:	dc400117 	ldw	r17,4(sp)
 8008344:	dc000017 	ldw	r16,0(sp)
 8008348:	dec00604 	addi	sp,sp,24
 800834c:	f800283a 	ret
 8008350:	880b883a 	mov	r5,r17
 8008354:	880d883a 	mov	r6,r17
 8008358:	9809883a 	mov	r4,r19
 800835c:	800801c0 	call	800801c <__multiply>
 8008360:	88800015 	stw	r2,0(r17)
 8008364:	10000015 	stw	zero,0(r2)
 8008368:	1023883a 	mov	r17,r2
 800836c:	003fdd06 	br	80082e4 <__alt_data_end+0xf80082e4>
 8008370:	1025883a 	mov	r18,r2
 8008374:	003fd606 	br	80082d0 <__alt_data_end+0xf80082d0>
 8008378:	10bfffc4 	addi	r2,r2,-1
 800837c:	1085883a 	add	r2,r2,r2
 8008380:	00c20074 	movhi	r3,2049
 8008384:	18c63104 	addi	r3,r3,6340
 8008388:	1085883a 	add	r2,r2,r2
 800838c:	1885883a 	add	r2,r3,r2
 8008390:	11800017 	ldw	r6,0(r2)
 8008394:	000f883a 	mov	r7,zero
 8008398:	8007c800 	call	8007c80 <__multadd>
 800839c:	1025883a 	mov	r18,r2
 80083a0:	003fc506 	br	80082b8 <__alt_data_end+0xf80082b8>
 80083a4:	05000044 	movi	r20,1
 80083a8:	9809883a 	mov	r4,r19
 80083ac:	a00b883a 	mov	r5,r20
 80083b0:	8007bb00 	call	8007bb0 <_Balloc>
 80083b4:	1023883a 	mov	r17,r2
 80083b8:	00809c44 	movi	r2,625
 80083bc:	88800515 	stw	r2,20(r17)
 80083c0:	8d000415 	stw	r20,16(r17)
 80083c4:	9c401215 	stw	r17,72(r19)
 80083c8:	88000015 	stw	zero,0(r17)
 80083cc:	003fbe06 	br	80082c8 <__alt_data_end+0xf80082c8>

080083d0 <__lshift>:
 80083d0:	defff904 	addi	sp,sp,-28
 80083d4:	dd000415 	stw	r20,16(sp)
 80083d8:	dc400115 	stw	r17,4(sp)
 80083dc:	2d000417 	ldw	r20,16(r5)
 80083e0:	3023d17a 	srai	r17,r6,5
 80083e4:	28800217 	ldw	r2,8(r5)
 80083e8:	dd400515 	stw	r21,20(sp)
 80083ec:	8d29883a 	add	r20,r17,r20
 80083f0:	dcc00315 	stw	r19,12(sp)
 80083f4:	dc800215 	stw	r18,8(sp)
 80083f8:	dc000015 	stw	r16,0(sp)
 80083fc:	dfc00615 	stw	ra,24(sp)
 8008400:	a4000044 	addi	r16,r20,1
 8008404:	2825883a 	mov	r18,r5
 8008408:	302b883a 	mov	r21,r6
 800840c:	2027883a 	mov	r19,r4
 8008410:	29400117 	ldw	r5,4(r5)
 8008414:	1400030e 	bge	r2,r16,8008424 <__lshift+0x54>
 8008418:	1085883a 	add	r2,r2,r2
 800841c:	29400044 	addi	r5,r5,1
 8008420:	143ffd16 	blt	r2,r16,8008418 <__alt_data_end+0xf8008418>
 8008424:	9809883a 	mov	r4,r19
 8008428:	8007bb00 	call	8007bb0 <_Balloc>
 800842c:	11000504 	addi	r4,r2,20
 8008430:	0440090e 	bge	zero,r17,8008458 <__lshift+0x88>
 8008434:	200f883a 	mov	r7,r4
 8008438:	0007883a 	mov	r3,zero
 800843c:	38000015 	stw	zero,0(r7)
 8008440:	18c00044 	addi	r3,r3,1
 8008444:	39c00104 	addi	r7,r7,4
 8008448:	1c7ffc1e 	bne	r3,r17,800843c <__alt_data_end+0xf800843c>
 800844c:	18c7883a 	add	r3,r3,r3
 8008450:	18c7883a 	add	r3,r3,r3
 8008454:	20c9883a 	add	r4,r4,r3
 8008458:	92400417 	ldw	r9,16(r18)
 800845c:	90c00504 	addi	r3,r18,20
 8008460:	a98007cc 	andi	r6,r21,31
 8008464:	4a53883a 	add	r9,r9,r9
 8008468:	4a53883a 	add	r9,r9,r9
 800846c:	1a53883a 	add	r9,r3,r9
 8008470:	30002426 	beq	r6,zero,8008504 <__lshift+0x134>
 8008474:	01400804 	movi	r5,32
 8008478:	298bc83a 	sub	r5,r5,r6
 800847c:	200f883a 	mov	r7,r4
 8008480:	0011883a 	mov	r8,zero
 8008484:	1a800017 	ldw	r10,0(r3)
 8008488:	3809883a 	mov	r4,r7
 800848c:	39c00104 	addi	r7,r7,4
 8008490:	5194983a 	sll	r10,r10,r6
 8008494:	18c00104 	addi	r3,r3,4
 8008498:	4290b03a 	or	r8,r8,r10
 800849c:	3a3fff15 	stw	r8,-4(r7)
 80084a0:	1a3fff17 	ldw	r8,-4(r3)
 80084a4:	4150d83a 	srl	r8,r8,r5
 80084a8:	1a7ff636 	bltu	r3,r9,8008484 <__alt_data_end+0xf8008484>
 80084ac:	22000115 	stw	r8,4(r4)
 80084b0:	40000126 	beq	r8,zero,80084b8 <__lshift+0xe8>
 80084b4:	a4000084 	addi	r16,r20,2
 80084b8:	91000117 	ldw	r4,4(r18)
 80084bc:	98c01317 	ldw	r3,76(r19)
 80084c0:	843fffc4 	addi	r16,r16,-1
 80084c4:	2109883a 	add	r4,r4,r4
 80084c8:	2109883a 	add	r4,r4,r4
 80084cc:	1907883a 	add	r3,r3,r4
 80084d0:	19000017 	ldw	r4,0(r3)
 80084d4:	14000415 	stw	r16,16(r2)
 80084d8:	91000015 	stw	r4,0(r18)
 80084dc:	1c800015 	stw	r18,0(r3)
 80084e0:	dfc00617 	ldw	ra,24(sp)
 80084e4:	dd400517 	ldw	r21,20(sp)
 80084e8:	dd000417 	ldw	r20,16(sp)
 80084ec:	dcc00317 	ldw	r19,12(sp)
 80084f0:	dc800217 	ldw	r18,8(sp)
 80084f4:	dc400117 	ldw	r17,4(sp)
 80084f8:	dc000017 	ldw	r16,0(sp)
 80084fc:	dec00704 	addi	sp,sp,28
 8008500:	f800283a 	ret
 8008504:	200f883a 	mov	r7,r4
 8008508:	19800017 	ldw	r6,0(r3)
 800850c:	39c00104 	addi	r7,r7,4
 8008510:	18c00104 	addi	r3,r3,4
 8008514:	39bfff15 	stw	r6,-4(r7)
 8008518:	1a7ffb36 	bltu	r3,r9,8008508 <__alt_data_end+0xf8008508>
 800851c:	003fe606 	br	80084b8 <__alt_data_end+0xf80084b8>

08008520 <__mcmp>:
 8008520:	20800417 	ldw	r2,16(r4)
 8008524:	28c00417 	ldw	r3,16(r5)
 8008528:	10c5c83a 	sub	r2,r2,r3
 800852c:	1000111e 	bne	r2,zero,8008574 <__mcmp+0x54>
 8008530:	18c7883a 	add	r3,r3,r3
 8008534:	18c7883a 	add	r3,r3,r3
 8008538:	21000504 	addi	r4,r4,20
 800853c:	29400504 	addi	r5,r5,20
 8008540:	20c5883a 	add	r2,r4,r3
 8008544:	28cb883a 	add	r5,r5,r3
 8008548:	00000106 	br	8008550 <__mcmp+0x30>
 800854c:	2080082e 	bgeu	r4,r2,8008570 <__mcmp+0x50>
 8008550:	10bfff04 	addi	r2,r2,-4
 8008554:	297fff04 	addi	r5,r5,-4
 8008558:	11800017 	ldw	r6,0(r2)
 800855c:	28c00017 	ldw	r3,0(r5)
 8008560:	30fffa26 	beq	r6,r3,800854c <__alt_data_end+0xf800854c>
 8008564:	30c00436 	bltu	r6,r3,8008578 <__mcmp+0x58>
 8008568:	00800044 	movi	r2,1
 800856c:	f800283a 	ret
 8008570:	0005883a 	mov	r2,zero
 8008574:	f800283a 	ret
 8008578:	00bfffc4 	movi	r2,-1
 800857c:	f800283a 	ret

08008580 <__mdiff>:
 8008580:	defffc04 	addi	sp,sp,-16
 8008584:	dc000015 	stw	r16,0(sp)
 8008588:	2821883a 	mov	r16,r5
 800858c:	200f883a 	mov	r7,r4
 8008590:	300b883a 	mov	r5,r6
 8008594:	8009883a 	mov	r4,r16
 8008598:	dc400115 	stw	r17,4(sp)
 800859c:	dfc00315 	stw	ra,12(sp)
 80085a0:	dc800215 	stw	r18,8(sp)
 80085a4:	3023883a 	mov	r17,r6
 80085a8:	80085200 	call	8008520 <__mcmp>
 80085ac:	10005226 	beq	r2,zero,80086f8 <__mdiff+0x178>
 80085b0:	10004c16 	blt	r2,zero,80086e4 <__mdiff+0x164>
 80085b4:	0025883a 	mov	r18,zero
 80085b8:	81400117 	ldw	r5,4(r16)
 80085bc:	3809883a 	mov	r4,r7
 80085c0:	8007bb00 	call	8007bb0 <_Balloc>
 80085c4:	82800417 	ldw	r10,16(r16)
 80085c8:	8b400417 	ldw	r13,16(r17)
 80085cc:	81000504 	addi	r4,r16,20
 80085d0:	5299883a 	add	r12,r10,r10
 80085d4:	6b5b883a 	add	r13,r13,r13
 80085d8:	6319883a 	add	r12,r12,r12
 80085dc:	89800504 	addi	r6,r17,20
 80085e0:	6b5b883a 	add	r13,r13,r13
 80085e4:	14800315 	stw	r18,12(r2)
 80085e8:	2319883a 	add	r12,r4,r12
 80085ec:	335b883a 	add	r13,r6,r13
 80085f0:	11400504 	addi	r5,r2,20
 80085f4:	0007883a 	mov	r3,zero
 80085f8:	00000106 	br	8008600 <__mdiff+0x80>
 80085fc:	400b883a 	mov	r5,r8
 8008600:	22400017 	ldw	r9,0(r4)
 8008604:	32000017 	ldw	r8,0(r6)
 8008608:	31800104 	addi	r6,r6,4
 800860c:	49ffffcc 	andi	r7,r9,65535
 8008610:	42ffffcc 	andi	r11,r8,65535
 8008614:	38c7883a 	add	r3,r7,r3
 8008618:	1acfc83a 	sub	r7,r3,r11
 800861c:	4010d43a 	srli	r8,r8,16
 8008620:	4806d43a 	srli	r3,r9,16
 8008624:	3817d43a 	srai	r11,r7,16
 8008628:	39ffffcc 	andi	r7,r7,65535
 800862c:	1a07c83a 	sub	r3,r3,r8
 8008630:	1ac7883a 	add	r3,r3,r11
 8008634:	1812943a 	slli	r9,r3,16
 8008638:	2a000104 	addi	r8,r5,4
 800863c:	21000104 	addi	r4,r4,4
 8008640:	49ceb03a 	or	r7,r9,r7
 8008644:	29c00015 	stw	r7,0(r5)
 8008648:	1807d43a 	srai	r3,r3,16
 800864c:	337feb36 	bltu	r6,r13,80085fc <__alt_data_end+0xf80085fc>
 8008650:	2013883a 	mov	r9,r4
 8008654:	2300342e 	bgeu	r4,r12,8008728 <__mdiff+0x1a8>
 8008658:	400b883a 	mov	r5,r8
 800865c:	21c00017 	ldw	r7,0(r4)
 8008660:	29400104 	addi	r5,r5,4
 8008664:	21000104 	addi	r4,r4,4
 8008668:	39bfffcc 	andi	r6,r7,65535
 800866c:	30cd883a 	add	r6,r6,r3
 8008670:	3007d43a 	srai	r3,r6,16
 8008674:	380ed43a 	srli	r7,r7,16
 8008678:	31bfffcc 	andi	r6,r6,65535
 800867c:	19c7883a 	add	r3,r3,r7
 8008680:	180e943a 	slli	r7,r3,16
 8008684:	1807d43a 	srai	r3,r3,16
 8008688:	398cb03a 	or	r6,r7,r6
 800868c:	29bfff15 	stw	r6,-4(r5)
 8008690:	233ff236 	bltu	r4,r12,800865c <__alt_data_end+0xf800865c>
 8008694:	0248303a 	nor	r4,zero,r9
 8008698:	2309883a 	add	r4,r4,r12
 800869c:	2008d0ba 	srli	r4,r4,2
 80086a0:	21000044 	addi	r4,r4,1
 80086a4:	2109883a 	add	r4,r4,r4
 80086a8:	2109883a 	add	r4,r4,r4
 80086ac:	4111883a 	add	r8,r8,r4
 80086b0:	413fff04 	addi	r4,r8,-4
 80086b4:	3000041e 	bne	r6,zero,80086c8 <__mdiff+0x148>
 80086b8:	213fff04 	addi	r4,r4,-4
 80086bc:	20c00017 	ldw	r3,0(r4)
 80086c0:	52bfffc4 	addi	r10,r10,-1
 80086c4:	183ffc26 	beq	r3,zero,80086b8 <__alt_data_end+0xf80086b8>
 80086c8:	12800415 	stw	r10,16(r2)
 80086cc:	dfc00317 	ldw	ra,12(sp)
 80086d0:	dc800217 	ldw	r18,8(sp)
 80086d4:	dc400117 	ldw	r17,4(sp)
 80086d8:	dc000017 	ldw	r16,0(sp)
 80086dc:	dec00404 	addi	sp,sp,16
 80086e0:	f800283a 	ret
 80086e4:	8005883a 	mov	r2,r16
 80086e8:	04800044 	movi	r18,1
 80086ec:	8821883a 	mov	r16,r17
 80086f0:	1023883a 	mov	r17,r2
 80086f4:	003fb006 	br	80085b8 <__alt_data_end+0xf80085b8>
 80086f8:	3809883a 	mov	r4,r7
 80086fc:	000b883a 	mov	r5,zero
 8008700:	8007bb00 	call	8007bb0 <_Balloc>
 8008704:	00c00044 	movi	r3,1
 8008708:	10c00415 	stw	r3,16(r2)
 800870c:	10000515 	stw	zero,20(r2)
 8008710:	dfc00317 	ldw	ra,12(sp)
 8008714:	dc800217 	ldw	r18,8(sp)
 8008718:	dc400117 	ldw	r17,4(sp)
 800871c:	dc000017 	ldw	r16,0(sp)
 8008720:	dec00404 	addi	sp,sp,16
 8008724:	f800283a 	ret
 8008728:	380d883a 	mov	r6,r7
 800872c:	003fe006 	br	80086b0 <__alt_data_end+0xf80086b0>

08008730 <__ulp>:
 8008730:	295ffc2c 	andhi	r5,r5,32752
 8008734:	00bf3034 	movhi	r2,64704
 8008738:	2887883a 	add	r3,r5,r2
 800873c:	00c0020e 	bge	zero,r3,8008748 <__ulp+0x18>
 8008740:	0005883a 	mov	r2,zero
 8008744:	f800283a 	ret
 8008748:	00c7c83a 	sub	r3,zero,r3
 800874c:	1805d53a 	srai	r2,r3,20
 8008750:	00c004c4 	movi	r3,19
 8008754:	18800a0e 	bge	r3,r2,8008780 <__ulp+0x50>
 8008758:	01000c84 	movi	r4,50
 800875c:	0007883a 	mov	r3,zero
 8008760:	20800516 	blt	r4,r2,8008778 <__ulp+0x48>
 8008764:	01000cc4 	movi	r4,51
 8008768:	2085c83a 	sub	r2,r4,r2
 800876c:	01000044 	movi	r4,1
 8008770:	2084983a 	sll	r2,r4,r2
 8008774:	f800283a 	ret
 8008778:	00800044 	movi	r2,1
 800877c:	f800283a 	ret
 8008780:	00c00234 	movhi	r3,8
 8008784:	1887d83a 	sra	r3,r3,r2
 8008788:	0005883a 	mov	r2,zero
 800878c:	f800283a 	ret

08008790 <__b2d>:
 8008790:	21800417 	ldw	r6,16(r4)
 8008794:	22000504 	addi	r8,r4,20
 8008798:	deffff04 	addi	sp,sp,-4
 800879c:	318d883a 	add	r6,r6,r6
 80087a0:	318d883a 	add	r6,r6,r6
 80087a4:	418d883a 	add	r6,r8,r6
 80087a8:	31ffff17 	ldw	r7,-4(r6)
 80087ac:	327fff04 	addi	r9,r6,-4
 80087b0:	dfc00015 	stw	ra,0(sp)
 80087b4:	3809883a 	mov	r4,r7
 80087b8:	8007ec80 	call	8007ec8 <__hi0bits>
 80087bc:	00c00804 	movi	r3,32
 80087c0:	1887c83a 	sub	r3,r3,r2
 80087c4:	28c00015 	stw	r3,0(r5)
 80087c8:	00c00284 	movi	r3,10
 80087cc:	18800d16 	blt	r3,r2,8008804 <__b2d+0x74>
 80087d0:	010002c4 	movi	r4,11
 80087d4:	2089c83a 	sub	r4,r4,r2
 80087d8:	3906d83a 	srl	r3,r7,r4
 80087dc:	18cffc34 	orhi	r3,r3,16368
 80087e0:	4240232e 	bgeu	r8,r9,8008870 <__b2d+0xe0>
 80087e4:	317ffe17 	ldw	r5,-8(r6)
 80087e8:	2908d83a 	srl	r4,r5,r4
 80087ec:	10800544 	addi	r2,r2,21
 80087f0:	388e983a 	sll	r7,r7,r2
 80087f4:	21c4b03a 	or	r2,r4,r7
 80087f8:	dfc00017 	ldw	ra,0(sp)
 80087fc:	dec00104 	addi	sp,sp,4
 8008800:	f800283a 	ret
 8008804:	42401136 	bltu	r8,r9,800884c <__b2d+0xbc>
 8008808:	113ffd44 	addi	r4,r2,-11
 800880c:	000b883a 	mov	r5,zero
 8008810:	20001226 	beq	r4,zero,800885c <__b2d+0xcc>
 8008814:	00c00ac4 	movi	r3,43
 8008818:	1885c83a 	sub	r2,r3,r2
 800881c:	3906983a 	sll	r3,r7,r4
 8008820:	288cd83a 	srl	r6,r5,r2
 8008824:	18cffc34 	orhi	r3,r3,16368
 8008828:	1986b03a 	or	r3,r3,r6
 800882c:	4240122e 	bgeu	r8,r9,8008878 <__b2d+0xe8>
 8008830:	49bfff17 	ldw	r6,-4(r9)
 8008834:	3084d83a 	srl	r2,r6,r2
 8008838:	2908983a 	sll	r4,r5,r4
 800883c:	1104b03a 	or	r2,r2,r4
 8008840:	dfc00017 	ldw	ra,0(sp)
 8008844:	dec00104 	addi	sp,sp,4
 8008848:	f800283a 	ret
 800884c:	113ffd44 	addi	r4,r2,-11
 8008850:	327ffe04 	addi	r9,r6,-8
 8008854:	317ffe17 	ldw	r5,-8(r6)
 8008858:	203fee1e 	bne	r4,zero,8008814 <__alt_data_end+0xf8008814>
 800885c:	38cffc34 	orhi	r3,r7,16368
 8008860:	2805883a 	mov	r2,r5
 8008864:	dfc00017 	ldw	ra,0(sp)
 8008868:	dec00104 	addi	sp,sp,4
 800886c:	f800283a 	ret
 8008870:	0009883a 	mov	r4,zero
 8008874:	003fdd06 	br	80087ec <__alt_data_end+0xf80087ec>
 8008878:	0005883a 	mov	r2,zero
 800887c:	003fee06 	br	8008838 <__alt_data_end+0xf8008838>

08008880 <__d2b>:
 8008880:	defffa04 	addi	sp,sp,-24
 8008884:	dc400315 	stw	r17,12(sp)
 8008888:	2823883a 	mov	r17,r5
 800888c:	01400044 	movi	r5,1
 8008890:	dc800415 	stw	r18,16(sp)
 8008894:	dc000215 	stw	r16,8(sp)
 8008898:	dfc00515 	stw	ra,20(sp)
 800889c:	3021883a 	mov	r16,r6
 80088a0:	3825883a 	mov	r18,r7
 80088a4:	8007bb00 	call	8007bb0 <_Balloc>
 80088a8:	8012907a 	slli	r9,r16,1
 80088ac:	1011883a 	mov	r8,r2
 80088b0:	00800434 	movhi	r2,16
 80088b4:	10bfffc4 	addi	r2,r2,-1
 80088b8:	4812d57a 	srli	r9,r9,21
 80088bc:	80a0703a 	and	r16,r16,r2
 80088c0:	48000126 	beq	r9,zero,80088c8 <__d2b+0x48>
 80088c4:	84000434 	orhi	r16,r16,16
 80088c8:	dc000015 	stw	r16,0(sp)
 80088cc:	88001e26 	beq	r17,zero,8008948 <__d2b+0xc8>
 80088d0:	d9000104 	addi	r4,sp,4
 80088d4:	dc400115 	stw	r17,4(sp)
 80088d8:	8007f300 	call	8007f30 <__lo0bits>
 80088dc:	d8c00017 	ldw	r3,0(sp)
 80088e0:	10002f1e 	bne	r2,zero,80089a0 <__d2b+0x120>
 80088e4:	d9000117 	ldw	r4,4(sp)
 80088e8:	41000515 	stw	r4,20(r8)
 80088ec:	180b003a 	cmpeq	r5,r3,zero
 80088f0:	01000084 	movi	r4,2
 80088f4:	214bc83a 	sub	r5,r4,r5
 80088f8:	40c00615 	stw	r3,24(r8)
 80088fc:	41400415 	stw	r5,16(r8)
 8008900:	4800191e 	bne	r9,zero,8008968 <__d2b+0xe8>
 8008904:	280690ba 	slli	r3,r5,2
 8008908:	10bef384 	addi	r2,r2,-1074
 800890c:	90800015 	stw	r2,0(r18)
 8008910:	40c5883a 	add	r2,r8,r3
 8008914:	11000417 	ldw	r4,16(r2)
 8008918:	8007ec80 	call	8007ec8 <__hi0bits>
 800891c:	280a917a 	slli	r5,r5,5
 8008920:	d8c00617 	ldw	r3,24(sp)
 8008924:	2885c83a 	sub	r2,r5,r2
 8008928:	18800015 	stw	r2,0(r3)
 800892c:	4005883a 	mov	r2,r8
 8008930:	dfc00517 	ldw	ra,20(sp)
 8008934:	dc800417 	ldw	r18,16(sp)
 8008938:	dc400317 	ldw	r17,12(sp)
 800893c:	dc000217 	ldw	r16,8(sp)
 8008940:	dec00604 	addi	sp,sp,24
 8008944:	f800283a 	ret
 8008948:	d809883a 	mov	r4,sp
 800894c:	8007f300 	call	8007f30 <__lo0bits>
 8008950:	d8c00017 	ldw	r3,0(sp)
 8008954:	01400044 	movi	r5,1
 8008958:	41400415 	stw	r5,16(r8)
 800895c:	40c00515 	stw	r3,20(r8)
 8008960:	10800804 	addi	r2,r2,32
 8008964:	483fe726 	beq	r9,zero,8008904 <__alt_data_end+0xf8008904>
 8008968:	00c00d44 	movi	r3,53
 800896c:	4a7ef344 	addi	r9,r9,-1075
 8008970:	4893883a 	add	r9,r9,r2
 8008974:	1885c83a 	sub	r2,r3,r2
 8008978:	d8c00617 	ldw	r3,24(sp)
 800897c:	92400015 	stw	r9,0(r18)
 8008980:	18800015 	stw	r2,0(r3)
 8008984:	4005883a 	mov	r2,r8
 8008988:	dfc00517 	ldw	ra,20(sp)
 800898c:	dc800417 	ldw	r18,16(sp)
 8008990:	dc400317 	ldw	r17,12(sp)
 8008994:	dc000217 	ldw	r16,8(sp)
 8008998:	dec00604 	addi	sp,sp,24
 800899c:	f800283a 	ret
 80089a0:	01000804 	movi	r4,32
 80089a4:	2089c83a 	sub	r4,r4,r2
 80089a8:	1908983a 	sll	r4,r3,r4
 80089ac:	d9400117 	ldw	r5,4(sp)
 80089b0:	1886d83a 	srl	r3,r3,r2
 80089b4:	2148b03a 	or	r4,r4,r5
 80089b8:	41000515 	stw	r4,20(r8)
 80089bc:	d8c00015 	stw	r3,0(sp)
 80089c0:	003fca06 	br	80088ec <__alt_data_end+0xf80088ec>

080089c4 <__ratio>:
 80089c4:	defffd04 	addi	sp,sp,-12
 80089c8:	2817883a 	mov	r11,r5
 80089cc:	201b883a 	mov	r13,r4
 80089d0:	d9400104 	addi	r5,sp,4
 80089d4:	dfc00215 	stw	ra,8(sp)
 80089d8:	80087900 	call	8008790 <__b2d>
 80089dc:	5809883a 	mov	r4,r11
 80089e0:	d80b883a 	mov	r5,sp
 80089e4:	1019883a 	mov	r12,r2
 80089e8:	1815883a 	mov	r10,r3
 80089ec:	80087900 	call	8008790 <__b2d>
 80089f0:	69400417 	ldw	r5,16(r13)
 80089f4:	59000417 	ldw	r4,16(r11)
 80089f8:	d9800117 	ldw	r6,4(sp)
 80089fc:	2909c83a 	sub	r4,r5,r4
 8008a00:	d9400017 	ldw	r5,0(sp)
 8008a04:	2008917a 	slli	r4,r4,5
 8008a08:	314bc83a 	sub	r5,r6,r5
 8008a0c:	290b883a 	add	r5,r5,r4
 8008a10:	01400a0e 	bge	zero,r5,8008a3c <__ratio+0x78>
 8008a14:	280a953a 	slli	r5,r5,20
 8008a18:	6009883a 	mov	r4,r12
 8008a1c:	100d883a 	mov	r6,r2
 8008a20:	2a95883a 	add	r10,r5,r10
 8008a24:	500b883a 	mov	r5,r10
 8008a28:	180f883a 	mov	r7,r3
 8008a2c:	800c9c80 	call	800c9c8 <__divdf3>
 8008a30:	dfc00217 	ldw	ra,8(sp)
 8008a34:	dec00304 	addi	sp,sp,12
 8008a38:	f800283a 	ret
 8008a3c:	280a953a 	slli	r5,r5,20
 8008a40:	6009883a 	mov	r4,r12
 8008a44:	100d883a 	mov	r6,r2
 8008a48:	1947c83a 	sub	r3,r3,r5
 8008a4c:	180f883a 	mov	r7,r3
 8008a50:	500b883a 	mov	r5,r10
 8008a54:	800c9c80 	call	800c9c8 <__divdf3>
 8008a58:	dfc00217 	ldw	ra,8(sp)
 8008a5c:	dec00304 	addi	sp,sp,12
 8008a60:	f800283a 	ret

08008a64 <_mprec_log10>:
 8008a64:	defffe04 	addi	sp,sp,-8
 8008a68:	dc000015 	stw	r16,0(sp)
 8008a6c:	dfc00115 	stw	ra,4(sp)
 8008a70:	008005c4 	movi	r2,23
 8008a74:	2021883a 	mov	r16,r4
 8008a78:	11000d0e 	bge	r2,r4,8008ab0 <_mprec_log10+0x4c>
 8008a7c:	0005883a 	mov	r2,zero
 8008a80:	00cffc34 	movhi	r3,16368
 8008a84:	843fffc4 	addi	r16,r16,-1
 8008a88:	1009883a 	mov	r4,r2
 8008a8c:	180b883a 	mov	r5,r3
 8008a90:	000d883a 	mov	r6,zero
 8008a94:	01d00934 	movhi	r7,16420
 8008a98:	800d5ac0 	call	800d5ac <__muldf3>
 8008a9c:	803ff91e 	bne	r16,zero,8008a84 <__alt_data_end+0xf8008a84>
 8008aa0:	dfc00117 	ldw	ra,4(sp)
 8008aa4:	dc000017 	ldw	r16,0(sp)
 8008aa8:	dec00204 	addi	sp,sp,8
 8008aac:	f800283a 	ret
 8008ab0:	202090fa 	slli	r16,r4,3
 8008ab4:	00820074 	movhi	r2,2049
 8008ab8:	10864804 	addi	r2,r2,6432
 8008abc:	1421883a 	add	r16,r2,r16
 8008ac0:	80800017 	ldw	r2,0(r16)
 8008ac4:	80c00117 	ldw	r3,4(r16)
 8008ac8:	dfc00117 	ldw	ra,4(sp)
 8008acc:	dc000017 	ldw	r16,0(sp)
 8008ad0:	dec00204 	addi	sp,sp,8
 8008ad4:	f800283a 	ret

08008ad8 <__copybits>:
 8008ad8:	297fffc4 	addi	r5,r5,-1
 8008adc:	2811d17a 	srai	r8,r5,5
 8008ae0:	31c00417 	ldw	r7,16(r6)
 8008ae4:	30800504 	addi	r2,r6,20
 8008ae8:	42000044 	addi	r8,r8,1
 8008aec:	39cf883a 	add	r7,r7,r7
 8008af0:	4211883a 	add	r8,r8,r8
 8008af4:	39cf883a 	add	r7,r7,r7
 8008af8:	4211883a 	add	r8,r8,r8
 8008afc:	11cf883a 	add	r7,r2,r7
 8008b00:	2211883a 	add	r8,r4,r8
 8008b04:	11c00d2e 	bgeu	r2,r7,8008b3c <__copybits+0x64>
 8008b08:	2007883a 	mov	r3,r4
 8008b0c:	11400017 	ldw	r5,0(r2)
 8008b10:	18c00104 	addi	r3,r3,4
 8008b14:	10800104 	addi	r2,r2,4
 8008b18:	197fff15 	stw	r5,-4(r3)
 8008b1c:	11fffb36 	bltu	r2,r7,8008b0c <__alt_data_end+0xf8008b0c>
 8008b20:	3985c83a 	sub	r2,r7,r6
 8008b24:	10bffac4 	addi	r2,r2,-21
 8008b28:	1004d0ba 	srli	r2,r2,2
 8008b2c:	10800044 	addi	r2,r2,1
 8008b30:	1085883a 	add	r2,r2,r2
 8008b34:	1085883a 	add	r2,r2,r2
 8008b38:	2089883a 	add	r4,r4,r2
 8008b3c:	2200032e 	bgeu	r4,r8,8008b4c <__copybits+0x74>
 8008b40:	20000015 	stw	zero,0(r4)
 8008b44:	21000104 	addi	r4,r4,4
 8008b48:	223ffd36 	bltu	r4,r8,8008b40 <__alt_data_end+0xf8008b40>
 8008b4c:	f800283a 	ret

08008b50 <__any_on>:
 8008b50:	20800417 	ldw	r2,16(r4)
 8008b54:	2807d17a 	srai	r3,r5,5
 8008b58:	21000504 	addi	r4,r4,20
 8008b5c:	10c00d0e 	bge	r2,r3,8008b94 <__any_on+0x44>
 8008b60:	1085883a 	add	r2,r2,r2
 8008b64:	1085883a 	add	r2,r2,r2
 8008b68:	2085883a 	add	r2,r4,r2
 8008b6c:	2080182e 	bgeu	r4,r2,8008bd0 <__any_on+0x80>
 8008b70:	10ffff17 	ldw	r3,-4(r2)
 8008b74:	10bfff04 	addi	r2,r2,-4
 8008b78:	1800041e 	bne	r3,zero,8008b8c <__any_on+0x3c>
 8008b7c:	2080142e 	bgeu	r4,r2,8008bd0 <__any_on+0x80>
 8008b80:	10bfff04 	addi	r2,r2,-4
 8008b84:	10c00017 	ldw	r3,0(r2)
 8008b88:	183ffc26 	beq	r3,zero,8008b7c <__alt_data_end+0xf8008b7c>
 8008b8c:	00800044 	movi	r2,1
 8008b90:	f800283a 	ret
 8008b94:	18800a0e 	bge	r3,r2,8008bc0 <__any_on+0x70>
 8008b98:	18c7883a 	add	r3,r3,r3
 8008b9c:	18c7883a 	add	r3,r3,r3
 8008ba0:	294007cc 	andi	r5,r5,31
 8008ba4:	20c5883a 	add	r2,r4,r3
 8008ba8:	283ff026 	beq	r5,zero,8008b6c <__alt_data_end+0xf8008b6c>
 8008bac:	10c00017 	ldw	r3,0(r2)
 8008bb0:	194cd83a 	srl	r6,r3,r5
 8008bb4:	314a983a 	sll	r5,r6,r5
 8008bb8:	28fff41e 	bne	r5,r3,8008b8c <__alt_data_end+0xf8008b8c>
 8008bbc:	003feb06 	br	8008b6c <__alt_data_end+0xf8008b6c>
 8008bc0:	18c7883a 	add	r3,r3,r3
 8008bc4:	18c7883a 	add	r3,r3,r3
 8008bc8:	20c5883a 	add	r2,r4,r3
 8008bcc:	003fe706 	br	8008b6c <__alt_data_end+0xf8008b6c>
 8008bd0:	0005883a 	mov	r2,zero
 8008bd4:	f800283a 	ret

08008bd8 <_realloc_r>:
 8008bd8:	defff604 	addi	sp,sp,-40
 8008bdc:	dd000415 	stw	r20,16(sp)
 8008be0:	dc000015 	stw	r16,0(sp)
 8008be4:	dfc00915 	stw	ra,36(sp)
 8008be8:	df000815 	stw	fp,32(sp)
 8008bec:	ddc00715 	stw	r23,28(sp)
 8008bf0:	dd800615 	stw	r22,24(sp)
 8008bf4:	dd400515 	stw	r21,20(sp)
 8008bf8:	dcc00315 	stw	r19,12(sp)
 8008bfc:	dc800215 	stw	r18,8(sp)
 8008c00:	dc400115 	stw	r17,4(sp)
 8008c04:	2821883a 	mov	r16,r5
 8008c08:	3029883a 	mov	r20,r6
 8008c0c:	28009a26 	beq	r5,zero,8008e78 <_realloc_r+0x2a0>
 8008c10:	202b883a 	mov	r21,r4
 8008c14:	800ee9c0 	call	800ee9c <__malloc_lock>
 8008c18:	80ffff17 	ldw	r3,-4(r16)
 8008c1c:	047fff04 	movi	r17,-4
 8008c20:	a08002c4 	addi	r2,r20,11
 8008c24:	01000584 	movi	r4,22
 8008c28:	84fffe04 	addi	r19,r16,-8
 8008c2c:	1c62703a 	and	r17,r3,r17
 8008c30:	2080372e 	bgeu	r4,r2,8008d10 <_realloc_r+0x138>
 8008c34:	04bffe04 	movi	r18,-8
 8008c38:	14a4703a 	and	r18,r2,r18
 8008c3c:	9005883a 	mov	r2,r18
 8008c40:	90005b16 	blt	r18,zero,8008db0 <_realloc_r+0x1d8>
 8008c44:	95005a36 	bltu	r18,r20,8008db0 <_realloc_r+0x1d8>
 8008c48:	8880340e 	bge	r17,r2,8008d1c <_realloc_r+0x144>
 8008c4c:	05c20074 	movhi	r23,2049
 8008c50:	bdc7f404 	addi	r23,r23,8144
 8008c54:	b9000217 	ldw	r4,8(r23)
 8008c58:	9c4b883a 	add	r5,r19,r17
 8008c5c:	21409626 	beq	r4,r5,8008eb8 <_realloc_r+0x2e0>
 8008c60:	29800117 	ldw	r6,4(r5)
 8008c64:	01ffff84 	movi	r7,-2
 8008c68:	31ce703a 	and	r7,r6,r7
 8008c6c:	29cf883a 	add	r7,r5,r7
 8008c70:	39c00117 	ldw	r7,4(r7)
 8008c74:	39c0004c 	andi	r7,r7,1
 8008c78:	38004226 	beq	r7,zero,8008d84 <_realloc_r+0x1ac>
 8008c7c:	000d883a 	mov	r6,zero
 8008c80:	000b883a 	mov	r5,zero
 8008c84:	18c0004c 	andi	r3,r3,1
 8008c88:	18005c1e 	bne	r3,zero,8008dfc <_realloc_r+0x224>
 8008c8c:	85bffe17 	ldw	r22,-8(r16)
 8008c90:	00ffff04 	movi	r3,-4
 8008c94:	9dadc83a 	sub	r22,r19,r22
 8008c98:	b1c00117 	ldw	r7,4(r22)
 8008c9c:	38c6703a 	and	r3,r7,r3
 8008ca0:	28005426 	beq	r5,zero,8008df4 <_realloc_r+0x21c>
 8008ca4:	1c47883a 	add	r3,r3,r17
 8008ca8:	2900bf26 	beq	r5,r4,8008fa8 <_realloc_r+0x3d0>
 8008cac:	30ef883a 	add	r23,r6,r3
 8008cb0:	b8807e16 	blt	r23,r2,8008eac <_realloc_r+0x2d4>
 8008cb4:	28800317 	ldw	r2,12(r5)
 8008cb8:	28c00217 	ldw	r3,8(r5)
 8008cbc:	89bfff04 	addi	r6,r17,-4
 8008cc0:	01000904 	movi	r4,36
 8008cc4:	18800315 	stw	r2,12(r3)
 8008cc8:	10c00215 	stw	r3,8(r2)
 8008ccc:	b1400217 	ldw	r5,8(r22)
 8008cd0:	b0c00317 	ldw	r3,12(r22)
 8008cd4:	b5000204 	addi	r20,r22,8
 8008cd8:	28c00315 	stw	r3,12(r5)
 8008cdc:	19400215 	stw	r5,8(r3)
 8008ce0:	21808536 	bltu	r4,r6,8008ef8 <_realloc_r+0x320>
 8008ce4:	008004c4 	movi	r2,19
 8008ce8:	1180932e 	bgeu	r2,r6,8008f38 <_realloc_r+0x360>
 8008cec:	80800017 	ldw	r2,0(r16)
 8008cf0:	b0800215 	stw	r2,8(r22)
 8008cf4:	80800117 	ldw	r2,4(r16)
 8008cf8:	b0800315 	stw	r2,12(r22)
 8008cfc:	008006c4 	movi	r2,27
 8008d00:	1180df36 	bltu	r2,r6,8009080 <_realloc_r+0x4a8>
 8008d04:	b0c00404 	addi	r3,r22,16
 8008d08:	84000204 	addi	r16,r16,8
 8008d0c:	00008b06 	br	8008f3c <_realloc_r+0x364>
 8008d10:	00800404 	movi	r2,16
 8008d14:	1025883a 	mov	r18,r2
 8008d18:	003fca06 	br	8008c44 <__alt_data_end+0xf8008c44>
 8008d1c:	8029883a 	mov	r20,r16
 8008d20:	8c8dc83a 	sub	r6,r17,r18
 8008d24:	008003c4 	movi	r2,15
 8008d28:	18c0004c 	andi	r3,r3,1
 8008d2c:	11802436 	bltu	r2,r6,8008dc0 <_realloc_r+0x1e8>
 8008d30:	1c46b03a 	or	r3,r3,r17
 8008d34:	98c00115 	stw	r3,4(r19)
 8008d38:	9c63883a 	add	r17,r19,r17
 8008d3c:	88800117 	ldw	r2,4(r17)
 8008d40:	10800054 	ori	r2,r2,1
 8008d44:	88800115 	stw	r2,4(r17)
 8008d48:	a809883a 	mov	r4,r21
 8008d4c:	800eebc0 	call	800eebc <__malloc_unlock>
 8008d50:	a005883a 	mov	r2,r20
 8008d54:	dfc00917 	ldw	ra,36(sp)
 8008d58:	df000817 	ldw	fp,32(sp)
 8008d5c:	ddc00717 	ldw	r23,28(sp)
 8008d60:	dd800617 	ldw	r22,24(sp)
 8008d64:	dd400517 	ldw	r21,20(sp)
 8008d68:	dd000417 	ldw	r20,16(sp)
 8008d6c:	dcc00317 	ldw	r19,12(sp)
 8008d70:	dc800217 	ldw	r18,8(sp)
 8008d74:	dc400117 	ldw	r17,4(sp)
 8008d78:	dc000017 	ldw	r16,0(sp)
 8008d7c:	dec00a04 	addi	sp,sp,40
 8008d80:	f800283a 	ret
 8008d84:	01ffff04 	movi	r7,-4
 8008d88:	31cc703a 	and	r6,r6,r7
 8008d8c:	344f883a 	add	r7,r6,r17
 8008d90:	38bfbc16 	blt	r7,r2,8008c84 <__alt_data_end+0xf8008c84>
 8008d94:	28800317 	ldw	r2,12(r5)
 8008d98:	29000217 	ldw	r4,8(r5)
 8008d9c:	8029883a 	mov	r20,r16
 8008da0:	3823883a 	mov	r17,r7
 8008da4:	20800315 	stw	r2,12(r4)
 8008da8:	11000215 	stw	r4,8(r2)
 8008dac:	003fdc06 	br	8008d20 <__alt_data_end+0xf8008d20>
 8008db0:	00800304 	movi	r2,12
 8008db4:	a8800015 	stw	r2,0(r21)
 8008db8:	0005883a 	mov	r2,zero
 8008dbc:	003fe506 	br	8008d54 <__alt_data_end+0xf8008d54>
 8008dc0:	1c86b03a 	or	r3,r3,r18
 8008dc4:	9c8b883a 	add	r5,r19,r18
 8008dc8:	98c00115 	stw	r3,4(r19)
 8008dcc:	30800054 	ori	r2,r6,1
 8008dd0:	28800115 	stw	r2,4(r5)
 8008dd4:	298d883a 	add	r6,r5,r6
 8008dd8:	30800117 	ldw	r2,4(r6)
 8008ddc:	a809883a 	mov	r4,r21
 8008de0:	29400204 	addi	r5,r5,8
 8008de4:	10800054 	ori	r2,r2,1
 8008de8:	30800115 	stw	r2,4(r6)
 8008dec:	80064440 	call	8006444 <_free_r>
 8008df0:	003fd506 	br	8008d48 <__alt_data_end+0xf8008d48>
 8008df4:	1c6f883a 	add	r23,r3,r17
 8008df8:	b880370e 	bge	r23,r2,8008ed8 <_realloc_r+0x300>
 8008dfc:	a00b883a 	mov	r5,r20
 8008e00:	a809883a 	mov	r4,r21
 8008e04:	8006fa80 	call	8006fa8 <_malloc_r>
 8008e08:	1029883a 	mov	r20,r2
 8008e0c:	1000c026 	beq	r2,zero,8009110 <_realloc_r+0x538>
 8008e10:	80ffff17 	ldw	r3,-4(r16)
 8008e14:	113ffe04 	addi	r4,r2,-8
 8008e18:	00bfff84 	movi	r2,-2
 8008e1c:	1884703a 	and	r2,r3,r2
 8008e20:	9885883a 	add	r2,r19,r2
 8008e24:	20809026 	beq	r4,r2,8009068 <_realloc_r+0x490>
 8008e28:	89bfff04 	addi	r6,r17,-4
 8008e2c:	00800904 	movi	r2,36
 8008e30:	11805936 	bltu	r2,r6,8008f98 <_realloc_r+0x3c0>
 8008e34:	00c004c4 	movi	r3,19
 8008e38:	19803636 	bltu	r3,r6,8008f14 <_realloc_r+0x33c>
 8008e3c:	a005883a 	mov	r2,r20
 8008e40:	8007883a 	mov	r3,r16
 8008e44:	19000017 	ldw	r4,0(r3)
 8008e48:	11000015 	stw	r4,0(r2)
 8008e4c:	19000117 	ldw	r4,4(r3)
 8008e50:	11000115 	stw	r4,4(r2)
 8008e54:	18c00217 	ldw	r3,8(r3)
 8008e58:	10c00215 	stw	r3,8(r2)
 8008e5c:	800b883a 	mov	r5,r16
 8008e60:	a809883a 	mov	r4,r21
 8008e64:	80064440 	call	8006444 <_free_r>
 8008e68:	a809883a 	mov	r4,r21
 8008e6c:	800eebc0 	call	800eebc <__malloc_unlock>
 8008e70:	a005883a 	mov	r2,r20
 8008e74:	003fb706 	br	8008d54 <__alt_data_end+0xf8008d54>
 8008e78:	300b883a 	mov	r5,r6
 8008e7c:	dfc00917 	ldw	ra,36(sp)
 8008e80:	df000817 	ldw	fp,32(sp)
 8008e84:	ddc00717 	ldw	r23,28(sp)
 8008e88:	dd800617 	ldw	r22,24(sp)
 8008e8c:	dd400517 	ldw	r21,20(sp)
 8008e90:	dd000417 	ldw	r20,16(sp)
 8008e94:	dcc00317 	ldw	r19,12(sp)
 8008e98:	dc800217 	ldw	r18,8(sp)
 8008e9c:	dc400117 	ldw	r17,4(sp)
 8008ea0:	dc000017 	ldw	r16,0(sp)
 8008ea4:	dec00a04 	addi	sp,sp,40
 8008ea8:	8006fa81 	jmpi	8006fa8 <_malloc_r>
 8008eac:	182f883a 	mov	r23,r3
 8008eb0:	b8bfd216 	blt	r23,r2,8008dfc <__alt_data_end+0xf8008dfc>
 8008eb4:	00000806 	br	8008ed8 <_realloc_r+0x300>
 8008eb8:	21800117 	ldw	r6,4(r4)
 8008ebc:	017fff04 	movi	r5,-4
 8008ec0:	91c00404 	addi	r7,r18,16
 8008ec4:	314c703a 	and	r6,r6,r5
 8008ec8:	344b883a 	add	r5,r6,r17
 8008ecc:	29c0250e 	bge	r5,r7,8008f64 <_realloc_r+0x38c>
 8008ed0:	200b883a 	mov	r5,r4
 8008ed4:	003f6b06 	br	8008c84 <__alt_data_end+0xf8008c84>
 8008ed8:	b0800317 	ldw	r2,12(r22)
 8008edc:	b0c00217 	ldw	r3,8(r22)
 8008ee0:	89bfff04 	addi	r6,r17,-4
 8008ee4:	01000904 	movi	r4,36
 8008ee8:	18800315 	stw	r2,12(r3)
 8008eec:	10c00215 	stw	r3,8(r2)
 8008ef0:	b5000204 	addi	r20,r22,8
 8008ef4:	21bf7b2e 	bgeu	r4,r6,8008ce4 <__alt_data_end+0xf8008ce4>
 8008ef8:	a009883a 	mov	r4,r20
 8008efc:	800b883a 	mov	r5,r16
 8008f00:	80079600 	call	8007960 <memmove>
 8008f04:	b0c00117 	ldw	r3,4(r22)
 8008f08:	b823883a 	mov	r17,r23
 8008f0c:	b027883a 	mov	r19,r22
 8008f10:	003f8306 	br	8008d20 <__alt_data_end+0xf8008d20>
 8008f14:	80c00017 	ldw	r3,0(r16)
 8008f18:	a0c00015 	stw	r3,0(r20)
 8008f1c:	80c00117 	ldw	r3,4(r16)
 8008f20:	a0c00115 	stw	r3,4(r20)
 8008f24:	00c006c4 	movi	r3,27
 8008f28:	19804736 	bltu	r3,r6,8009048 <_realloc_r+0x470>
 8008f2c:	a0800204 	addi	r2,r20,8
 8008f30:	80c00204 	addi	r3,r16,8
 8008f34:	003fc306 	br	8008e44 <__alt_data_end+0xf8008e44>
 8008f38:	a007883a 	mov	r3,r20
 8008f3c:	80800017 	ldw	r2,0(r16)
 8008f40:	b823883a 	mov	r17,r23
 8008f44:	b027883a 	mov	r19,r22
 8008f48:	18800015 	stw	r2,0(r3)
 8008f4c:	80800117 	ldw	r2,4(r16)
 8008f50:	18800115 	stw	r2,4(r3)
 8008f54:	80800217 	ldw	r2,8(r16)
 8008f58:	18800215 	stw	r2,8(r3)
 8008f5c:	b0c00117 	ldw	r3,4(r22)
 8008f60:	003f6f06 	br	8008d20 <__alt_data_end+0xf8008d20>
 8008f64:	9ca7883a 	add	r19,r19,r18
 8008f68:	2c85c83a 	sub	r2,r5,r18
 8008f6c:	bcc00215 	stw	r19,8(r23)
 8008f70:	10800054 	ori	r2,r2,1
 8008f74:	98800115 	stw	r2,4(r19)
 8008f78:	80bfff17 	ldw	r2,-4(r16)
 8008f7c:	a809883a 	mov	r4,r21
 8008f80:	1080004c 	andi	r2,r2,1
 8008f84:	90a4b03a 	or	r18,r18,r2
 8008f88:	84bfff15 	stw	r18,-4(r16)
 8008f8c:	800eebc0 	call	800eebc <__malloc_unlock>
 8008f90:	8005883a 	mov	r2,r16
 8008f94:	003f6f06 	br	8008d54 <__alt_data_end+0xf8008d54>
 8008f98:	a009883a 	mov	r4,r20
 8008f9c:	800b883a 	mov	r5,r16
 8008fa0:	80079600 	call	8007960 <memmove>
 8008fa4:	003fad06 	br	8008e5c <__alt_data_end+0xf8008e5c>
 8008fa8:	30f9883a 	add	fp,r6,r3
 8008fac:	91000404 	addi	r4,r18,16
 8008fb0:	e13fbe16 	blt	fp,r4,8008eac <__alt_data_end+0xf8008eac>
 8008fb4:	b0800317 	ldw	r2,12(r22)
 8008fb8:	b0c00217 	ldw	r3,8(r22)
 8008fbc:	89bfff04 	addi	r6,r17,-4
 8008fc0:	01000904 	movi	r4,36
 8008fc4:	18800315 	stw	r2,12(r3)
 8008fc8:	10c00215 	stw	r3,8(r2)
 8008fcc:	b4400204 	addi	r17,r22,8
 8008fd0:	21804336 	bltu	r4,r6,80090e0 <_realloc_r+0x508>
 8008fd4:	008004c4 	movi	r2,19
 8008fd8:	11803f2e 	bgeu	r2,r6,80090d8 <_realloc_r+0x500>
 8008fdc:	80800017 	ldw	r2,0(r16)
 8008fe0:	b0800215 	stw	r2,8(r22)
 8008fe4:	80800117 	ldw	r2,4(r16)
 8008fe8:	b0800315 	stw	r2,12(r22)
 8008fec:	008006c4 	movi	r2,27
 8008ff0:	11803f36 	bltu	r2,r6,80090f0 <_realloc_r+0x518>
 8008ff4:	b0c00404 	addi	r3,r22,16
 8008ff8:	84000204 	addi	r16,r16,8
 8008ffc:	80800017 	ldw	r2,0(r16)
 8009000:	18800015 	stw	r2,0(r3)
 8009004:	80800117 	ldw	r2,4(r16)
 8009008:	18800115 	stw	r2,4(r3)
 800900c:	80800217 	ldw	r2,8(r16)
 8009010:	18800215 	stw	r2,8(r3)
 8009014:	b487883a 	add	r3,r22,r18
 8009018:	e485c83a 	sub	r2,fp,r18
 800901c:	b8c00215 	stw	r3,8(r23)
 8009020:	10800054 	ori	r2,r2,1
 8009024:	18800115 	stw	r2,4(r3)
 8009028:	b0800117 	ldw	r2,4(r22)
 800902c:	a809883a 	mov	r4,r21
 8009030:	1080004c 	andi	r2,r2,1
 8009034:	90a4b03a 	or	r18,r18,r2
 8009038:	b4800115 	stw	r18,4(r22)
 800903c:	800eebc0 	call	800eebc <__malloc_unlock>
 8009040:	8805883a 	mov	r2,r17
 8009044:	003f4306 	br	8008d54 <__alt_data_end+0xf8008d54>
 8009048:	80c00217 	ldw	r3,8(r16)
 800904c:	a0c00215 	stw	r3,8(r20)
 8009050:	80c00317 	ldw	r3,12(r16)
 8009054:	a0c00315 	stw	r3,12(r20)
 8009058:	30801126 	beq	r6,r2,80090a0 <_realloc_r+0x4c8>
 800905c:	a0800404 	addi	r2,r20,16
 8009060:	80c00404 	addi	r3,r16,16
 8009064:	003f7706 	br	8008e44 <__alt_data_end+0xf8008e44>
 8009068:	a13fff17 	ldw	r4,-4(r20)
 800906c:	00bfff04 	movi	r2,-4
 8009070:	8029883a 	mov	r20,r16
 8009074:	2084703a 	and	r2,r4,r2
 8009078:	88a3883a 	add	r17,r17,r2
 800907c:	003f2806 	br	8008d20 <__alt_data_end+0xf8008d20>
 8009080:	80800217 	ldw	r2,8(r16)
 8009084:	b0800415 	stw	r2,16(r22)
 8009088:	80800317 	ldw	r2,12(r16)
 800908c:	b0800515 	stw	r2,20(r22)
 8009090:	31000a26 	beq	r6,r4,80090bc <_realloc_r+0x4e4>
 8009094:	b0c00604 	addi	r3,r22,24
 8009098:	84000404 	addi	r16,r16,16
 800909c:	003fa706 	br	8008f3c <__alt_data_end+0xf8008f3c>
 80090a0:	81000417 	ldw	r4,16(r16)
 80090a4:	a0800604 	addi	r2,r20,24
 80090a8:	80c00604 	addi	r3,r16,24
 80090ac:	a1000415 	stw	r4,16(r20)
 80090b0:	81000517 	ldw	r4,20(r16)
 80090b4:	a1000515 	stw	r4,20(r20)
 80090b8:	003f6206 	br	8008e44 <__alt_data_end+0xf8008e44>
 80090bc:	80800417 	ldw	r2,16(r16)
 80090c0:	84000604 	addi	r16,r16,24
 80090c4:	b0c00804 	addi	r3,r22,32
 80090c8:	b0800615 	stw	r2,24(r22)
 80090cc:	80bfff17 	ldw	r2,-4(r16)
 80090d0:	b0800715 	stw	r2,28(r22)
 80090d4:	003f9906 	br	8008f3c <__alt_data_end+0xf8008f3c>
 80090d8:	8807883a 	mov	r3,r17
 80090dc:	003fc706 	br	8008ffc <__alt_data_end+0xf8008ffc>
 80090e0:	8809883a 	mov	r4,r17
 80090e4:	800b883a 	mov	r5,r16
 80090e8:	80079600 	call	8007960 <memmove>
 80090ec:	003fc906 	br	8009014 <__alt_data_end+0xf8009014>
 80090f0:	80800217 	ldw	r2,8(r16)
 80090f4:	b0800415 	stw	r2,16(r22)
 80090f8:	80800317 	ldw	r2,12(r16)
 80090fc:	b0800515 	stw	r2,20(r22)
 8009100:	31000726 	beq	r6,r4,8009120 <_realloc_r+0x548>
 8009104:	b0c00604 	addi	r3,r22,24
 8009108:	84000404 	addi	r16,r16,16
 800910c:	003fbb06 	br	8008ffc <__alt_data_end+0xf8008ffc>
 8009110:	a809883a 	mov	r4,r21
 8009114:	800eebc0 	call	800eebc <__malloc_unlock>
 8009118:	0005883a 	mov	r2,zero
 800911c:	003f0d06 	br	8008d54 <__alt_data_end+0xf8008d54>
 8009120:	80800417 	ldw	r2,16(r16)
 8009124:	84000604 	addi	r16,r16,24
 8009128:	b0c00804 	addi	r3,r22,32
 800912c:	b0800615 	stw	r2,24(r22)
 8009130:	80bfff17 	ldw	r2,-4(r16)
 8009134:	b0800715 	stw	r2,28(r22)
 8009138:	003fb006 	br	8008ffc <__alt_data_end+0xf8008ffc>

0800913c <__fpclassifyd>:
 800913c:	00a00034 	movhi	r2,32768
 8009140:	10bfffc4 	addi	r2,r2,-1
 8009144:	288a703a 	and	r5,r5,r2
 8009148:	28000726 	beq	r5,zero,8009168 <__fpclassifyd+0x2c>
 800914c:	00bffc34 	movhi	r2,65520
 8009150:	2885883a 	add	r2,r5,r2
 8009154:	00dff834 	movhi	r3,32736
 8009158:	18ffffc4 	addi	r3,r3,-1
 800915c:	18800636 	bltu	r3,r2,8009178 <__fpclassifyd+0x3c>
 8009160:	00800104 	movi	r2,4
 8009164:	f800283a 	ret
 8009168:	2005003a 	cmpeq	r2,r4,zero
 800916c:	00c000c4 	movi	r3,3
 8009170:	1885c83a 	sub	r2,r3,r2
 8009174:	f800283a 	ret
 8009178:	00800434 	movhi	r2,16
 800917c:	10bfffc4 	addi	r2,r2,-1
 8009180:	11400236 	bltu	r2,r5,800918c <__fpclassifyd+0x50>
 8009184:	008000c4 	movi	r2,3
 8009188:	f800283a 	ret
 800918c:	009ffc34 	movhi	r2,32752
 8009190:	28800226 	beq	r5,r2,800919c <__fpclassifyd+0x60>
 8009194:	0005883a 	mov	r2,zero
 8009198:	f800283a 	ret
 800919c:	2005003a 	cmpeq	r2,r4,zero
 80091a0:	f800283a 	ret

080091a4 <_sbrk_r>:
 80091a4:	defffd04 	addi	sp,sp,-12
 80091a8:	dc400115 	stw	r17,4(sp)
 80091ac:	dc000015 	stw	r16,0(sp)
 80091b0:	2023883a 	mov	r17,r4
 80091b4:	04020074 	movhi	r16,2049
 80091b8:	84144a04 	addi	r16,r16,20776
 80091bc:	2809883a 	mov	r4,r5
 80091c0:	dfc00215 	stw	ra,8(sp)
 80091c4:	80000015 	stw	zero,0(r16)
 80091c8:	800f0a40 	call	800f0a4 <sbrk>
 80091cc:	00ffffc4 	movi	r3,-1
 80091d0:	10c00526 	beq	r2,r3,80091e8 <_sbrk_r+0x44>
 80091d4:	dfc00217 	ldw	ra,8(sp)
 80091d8:	dc400117 	ldw	r17,4(sp)
 80091dc:	dc000017 	ldw	r16,0(sp)
 80091e0:	dec00304 	addi	sp,sp,12
 80091e4:	f800283a 	ret
 80091e8:	80c00017 	ldw	r3,0(r16)
 80091ec:	183ff926 	beq	r3,zero,80091d4 <__alt_data_end+0xf80091d4>
 80091f0:	88c00015 	stw	r3,0(r17)
 80091f4:	dfc00217 	ldw	ra,8(sp)
 80091f8:	dc400117 	ldw	r17,4(sp)
 80091fc:	dc000017 	ldw	r16,0(sp)
 8009200:	dec00304 	addi	sp,sp,12
 8009204:	f800283a 	ret

08009208 <__sread>:
 8009208:	defffe04 	addi	sp,sp,-8
 800920c:	dc000015 	stw	r16,0(sp)
 8009210:	2821883a 	mov	r16,r5
 8009214:	2940038f 	ldh	r5,14(r5)
 8009218:	dfc00115 	stw	ra,4(sp)
 800921c:	800af800 	call	800af80 <_read_r>
 8009220:	10000716 	blt	r2,zero,8009240 <__sread+0x38>
 8009224:	80c01417 	ldw	r3,80(r16)
 8009228:	1887883a 	add	r3,r3,r2
 800922c:	80c01415 	stw	r3,80(r16)
 8009230:	dfc00117 	ldw	ra,4(sp)
 8009234:	dc000017 	ldw	r16,0(sp)
 8009238:	dec00204 	addi	sp,sp,8
 800923c:	f800283a 	ret
 8009240:	80c0030b 	ldhu	r3,12(r16)
 8009244:	18fbffcc 	andi	r3,r3,61439
 8009248:	80c0030d 	sth	r3,12(r16)
 800924c:	dfc00117 	ldw	ra,4(sp)
 8009250:	dc000017 	ldw	r16,0(sp)
 8009254:	dec00204 	addi	sp,sp,8
 8009258:	f800283a 	ret

0800925c <__seofread>:
 800925c:	0005883a 	mov	r2,zero
 8009260:	f800283a 	ret

08009264 <__swrite>:
 8009264:	2880030b 	ldhu	r2,12(r5)
 8009268:	defffb04 	addi	sp,sp,-20
 800926c:	dcc00315 	stw	r19,12(sp)
 8009270:	dc800215 	stw	r18,8(sp)
 8009274:	dc400115 	stw	r17,4(sp)
 8009278:	dc000015 	stw	r16,0(sp)
 800927c:	dfc00415 	stw	ra,16(sp)
 8009280:	10c0400c 	andi	r3,r2,256
 8009284:	2821883a 	mov	r16,r5
 8009288:	2027883a 	mov	r19,r4
 800928c:	3025883a 	mov	r18,r6
 8009290:	3823883a 	mov	r17,r7
 8009294:	18000526 	beq	r3,zero,80092ac <__swrite+0x48>
 8009298:	2940038f 	ldh	r5,14(r5)
 800929c:	000d883a 	mov	r6,zero
 80092a0:	01c00084 	movi	r7,2
 80092a4:	800af140 	call	800af14 <_lseek_r>
 80092a8:	8080030b 	ldhu	r2,12(r16)
 80092ac:	8140038f 	ldh	r5,14(r16)
 80092b0:	10bbffcc 	andi	r2,r2,61439
 80092b4:	9809883a 	mov	r4,r19
 80092b8:	900d883a 	mov	r6,r18
 80092bc:	880f883a 	mov	r7,r17
 80092c0:	8080030d 	sth	r2,12(r16)
 80092c4:	dfc00417 	ldw	ra,16(sp)
 80092c8:	dcc00317 	ldw	r19,12(sp)
 80092cc:	dc800217 	ldw	r18,8(sp)
 80092d0:	dc400117 	ldw	r17,4(sp)
 80092d4:	dc000017 	ldw	r16,0(sp)
 80092d8:	dec00504 	addi	sp,sp,20
 80092dc:	800a9681 	jmpi	800a968 <_write_r>

080092e0 <__sseek>:
 80092e0:	defffe04 	addi	sp,sp,-8
 80092e4:	dc000015 	stw	r16,0(sp)
 80092e8:	2821883a 	mov	r16,r5
 80092ec:	2940038f 	ldh	r5,14(r5)
 80092f0:	dfc00115 	stw	ra,4(sp)
 80092f4:	800af140 	call	800af14 <_lseek_r>
 80092f8:	00ffffc4 	movi	r3,-1
 80092fc:	10c00826 	beq	r2,r3,8009320 <__sseek+0x40>
 8009300:	80c0030b 	ldhu	r3,12(r16)
 8009304:	80801415 	stw	r2,80(r16)
 8009308:	18c40014 	ori	r3,r3,4096
 800930c:	80c0030d 	sth	r3,12(r16)
 8009310:	dfc00117 	ldw	ra,4(sp)
 8009314:	dc000017 	ldw	r16,0(sp)
 8009318:	dec00204 	addi	sp,sp,8
 800931c:	f800283a 	ret
 8009320:	80c0030b 	ldhu	r3,12(r16)
 8009324:	18fbffcc 	andi	r3,r3,61439
 8009328:	80c0030d 	sth	r3,12(r16)
 800932c:	dfc00117 	ldw	ra,4(sp)
 8009330:	dc000017 	ldw	r16,0(sp)
 8009334:	dec00204 	addi	sp,sp,8
 8009338:	f800283a 	ret

0800933c <__sclose>:
 800933c:	2940038f 	ldh	r5,14(r5)
 8009340:	800a9d41 	jmpi	800a9d4 <_close_r>

08009344 <strcmp>:
 8009344:	2144b03a 	or	r2,r4,r5
 8009348:	108000cc 	andi	r2,r2,3
 800934c:	1000171e 	bne	r2,zero,80093ac <strcmp+0x68>
 8009350:	20800017 	ldw	r2,0(r4)
 8009354:	28c00017 	ldw	r3,0(r5)
 8009358:	10c0141e 	bne	r2,r3,80093ac <strcmp+0x68>
 800935c:	027fbff4 	movhi	r9,65279
 8009360:	4a7fbfc4 	addi	r9,r9,-257
 8009364:	1247883a 	add	r3,r2,r9
 8009368:	0084303a 	nor	r2,zero,r2
 800936c:	1884703a 	and	r2,r3,r2
 8009370:	02202074 	movhi	r8,32897
 8009374:	42202004 	addi	r8,r8,-32640
 8009378:	1204703a 	and	r2,r2,r8
 800937c:	10000226 	beq	r2,zero,8009388 <strcmp+0x44>
 8009380:	00001706 	br	80093e0 <strcmp+0x9c>
 8009384:	3000161e 	bne	r6,zero,80093e0 <strcmp+0x9c>
 8009388:	21000104 	addi	r4,r4,4
 800938c:	20800017 	ldw	r2,0(r4)
 8009390:	29400104 	addi	r5,r5,4
 8009394:	28c00017 	ldw	r3,0(r5)
 8009398:	124f883a 	add	r7,r2,r9
 800939c:	008c303a 	nor	r6,zero,r2
 80093a0:	398c703a 	and	r6,r7,r6
 80093a4:	320c703a 	and	r6,r6,r8
 80093a8:	10fff626 	beq	r2,r3,8009384 <__alt_data_end+0xf8009384>
 80093ac:	20800007 	ldb	r2,0(r4)
 80093b0:	1000051e 	bne	r2,zero,80093c8 <strcmp+0x84>
 80093b4:	00000606 	br	80093d0 <strcmp+0x8c>
 80093b8:	21000044 	addi	r4,r4,1
 80093bc:	20800007 	ldb	r2,0(r4)
 80093c0:	29400044 	addi	r5,r5,1
 80093c4:	10000226 	beq	r2,zero,80093d0 <strcmp+0x8c>
 80093c8:	28c00007 	ldb	r3,0(r5)
 80093cc:	10fffa26 	beq	r2,r3,80093b8 <__alt_data_end+0xf80093b8>
 80093d0:	20c00003 	ldbu	r3,0(r4)
 80093d4:	28800003 	ldbu	r2,0(r5)
 80093d8:	1885c83a 	sub	r2,r3,r2
 80093dc:	f800283a 	ret
 80093e0:	0005883a 	mov	r2,zero
 80093e4:	f800283a 	ret

080093e8 <__sprint_r.part.0>:
 80093e8:	28801917 	ldw	r2,100(r5)
 80093ec:	defff604 	addi	sp,sp,-40
 80093f0:	dd800615 	stw	r22,24(sp)
 80093f4:	dcc00315 	stw	r19,12(sp)
 80093f8:	dfc00915 	stw	ra,36(sp)
 80093fc:	df000815 	stw	fp,32(sp)
 8009400:	ddc00715 	stw	r23,28(sp)
 8009404:	dd400515 	stw	r21,20(sp)
 8009408:	dd000415 	stw	r20,16(sp)
 800940c:	dc800215 	stw	r18,8(sp)
 8009410:	dc400115 	stw	r17,4(sp)
 8009414:	dc000015 	stw	r16,0(sp)
 8009418:	1088000c 	andi	r2,r2,8192
 800941c:	2827883a 	mov	r19,r5
 8009420:	302d883a 	mov	r22,r6
 8009424:	10002d26 	beq	r2,zero,80094dc <__sprint_r.part.0+0xf4>
 8009428:	30800217 	ldw	r2,8(r6)
 800942c:	35c00017 	ldw	r23,0(r6)
 8009430:	10002826 	beq	r2,zero,80094d4 <__sprint_r.part.0+0xec>
 8009434:	202b883a 	mov	r21,r4
 8009438:	bf000104 	addi	fp,r23,4
 800943c:	053fffc4 	movi	r20,-1
 8009440:	e4800017 	ldw	r18,0(fp)
 8009444:	bc400017 	ldw	r17,0(r23)
 8009448:	0021883a 	mov	r16,zero
 800944c:	9024d0ba 	srli	r18,r18,2
 8009450:	04800316 	blt	zero,r18,8009460 <__sprint_r.part.0+0x78>
 8009454:	00001806 	br	80094b8 <__sprint_r.part.0+0xd0>
 8009458:	8c400104 	addi	r17,r17,4
 800945c:	94001526 	beq	r18,r16,80094b4 <__sprint_r.part.0+0xcc>
 8009460:	89400017 	ldw	r5,0(r17)
 8009464:	a809883a 	mov	r4,r21
 8009468:	980d883a 	mov	r6,r19
 800946c:	800ac4c0 	call	800ac4c <_fputwc_r>
 8009470:	84000044 	addi	r16,r16,1
 8009474:	153ff81e 	bne	r2,r20,8009458 <__alt_data_end+0xf8009458>
 8009478:	a005883a 	mov	r2,r20
 800947c:	b0000215 	stw	zero,8(r22)
 8009480:	b0000115 	stw	zero,4(r22)
 8009484:	dfc00917 	ldw	ra,36(sp)
 8009488:	df000817 	ldw	fp,32(sp)
 800948c:	ddc00717 	ldw	r23,28(sp)
 8009490:	dd800617 	ldw	r22,24(sp)
 8009494:	dd400517 	ldw	r21,20(sp)
 8009498:	dd000417 	ldw	r20,16(sp)
 800949c:	dcc00317 	ldw	r19,12(sp)
 80094a0:	dc800217 	ldw	r18,8(sp)
 80094a4:	dc400117 	ldw	r17,4(sp)
 80094a8:	dc000017 	ldw	r16,0(sp)
 80094ac:	dec00a04 	addi	sp,sp,40
 80094b0:	f800283a 	ret
 80094b4:	b0800217 	ldw	r2,8(r22)
 80094b8:	94a5883a 	add	r18,r18,r18
 80094bc:	94a5883a 	add	r18,r18,r18
 80094c0:	1485c83a 	sub	r2,r2,r18
 80094c4:	b0800215 	stw	r2,8(r22)
 80094c8:	bdc00204 	addi	r23,r23,8
 80094cc:	e7000204 	addi	fp,fp,8
 80094d0:	103fdb1e 	bne	r2,zero,8009440 <__alt_data_end+0xf8009440>
 80094d4:	0005883a 	mov	r2,zero
 80094d8:	003fe806 	br	800947c <__alt_data_end+0xf800947c>
 80094dc:	80067140 	call	8006714 <__sfvwrite_r>
 80094e0:	003fe606 	br	800947c <__alt_data_end+0xf800947c>

080094e4 <__sprint_r>:
 80094e4:	30c00217 	ldw	r3,8(r6)
 80094e8:	18000126 	beq	r3,zero,80094f0 <__sprint_r+0xc>
 80094ec:	80093e81 	jmpi	80093e8 <__sprint_r.part.0>
 80094f0:	30000115 	stw	zero,4(r6)
 80094f4:	0005883a 	mov	r2,zero
 80094f8:	f800283a 	ret

080094fc <___vfiprintf_internal_r>:
 80094fc:	defec804 	addi	sp,sp,-1248
 8009500:	dfc13715 	stw	ra,1244(sp)
 8009504:	df013615 	stw	fp,1240(sp)
 8009508:	ddc13515 	stw	r23,1236(sp)
 800950c:	dd813415 	stw	r22,1232(sp)
 8009510:	dd413315 	stw	r21,1228(sp)
 8009514:	dd013215 	stw	r20,1224(sp)
 8009518:	dcc13115 	stw	r19,1220(sp)
 800951c:	dc813015 	stw	r18,1216(sp)
 8009520:	dc412f15 	stw	r17,1212(sp)
 8009524:	dc012e15 	stw	r16,1208(sp)
 8009528:	d9012215 	stw	r4,1160(sp)
 800952c:	d9412015 	stw	r5,1152(sp)
 8009530:	d9c12315 	stw	r7,1164(sp)
 8009534:	3013883a 	mov	r9,r6
 8009538:	20000226 	beq	r4,zero,8009544 <___vfiprintf_internal_r+0x48>
 800953c:	20800e17 	ldw	r2,56(r4)
 8009540:	1000f926 	beq	r2,zero,8009928 <___vfiprintf_internal_r+0x42c>
 8009544:	d8c12017 	ldw	r3,1152(sp)
 8009548:	1880030b 	ldhu	r2,12(r3)
 800954c:	1108000c 	andi	r4,r2,8192
 8009550:	1007883a 	mov	r3,r2
 8009554:	2000081e 	bne	r4,zero,8009578 <___vfiprintf_internal_r+0x7c>
 8009558:	d9412017 	ldw	r5,1152(sp)
 800955c:	10c80014 	ori	r3,r2,8192
 8009560:	00b7ffc4 	movi	r2,-8193
 8009564:	29001917 	ldw	r4,100(r5)
 8009568:	28c0030d 	sth	r3,12(r5)
 800956c:	2088703a 	and	r4,r4,r2
 8009570:	29001915 	stw	r4,100(r5)
 8009574:	1805883a 	mov	r2,r3
 8009578:	1900020c 	andi	r4,r3,8
 800957c:	2000a726 	beq	r4,zero,800981c <___vfiprintf_internal_r+0x320>
 8009580:	d9412017 	ldw	r5,1152(sp)
 8009584:	29000417 	ldw	r4,16(r5)
 8009588:	2000a426 	beq	r4,zero,800981c <___vfiprintf_internal_r+0x320>
 800958c:	18c0068c 	andi	r3,r3,26
 8009590:	01000284 	movi	r4,10
 8009594:	1900ad26 	beq	r3,r4,800984c <___vfiprintf_internal_r+0x350>
 8009598:	d90109c4 	addi	r4,sp,1063
 800959c:	d9410a04 	addi	r5,sp,1064
 80095a0:	2905c83a 	sub	r2,r5,r4
 80095a4:	d9011e15 	stw	r4,1144(sp)
 80095a8:	d9411f15 	stw	r5,1148(sp)
 80095ac:	dec11a15 	stw	sp,1128(sp)
 80095b0:	d8011c15 	stw	zero,1136(sp)
 80095b4:	d8011b15 	stw	zero,1132(sp)
 80095b8:	d8012715 	stw	zero,1180(sp)
 80095bc:	d8012415 	stw	zero,1168(sp)
 80095c0:	d811883a 	mov	r8,sp
 80095c4:	04c20074 	movhi	r19,2049
 80095c8:	9cc67e04 	addi	r19,r19,6648
 80095cc:	04020074 	movhi	r16,2049
 80095d0:	84067a04 	addi	r16,r16,6632
 80095d4:	d8812815 	stw	r2,1184(sp)
 80095d8:	48800007 	ldb	r2,0(r9)
 80095dc:	10040126 	beq	r2,zero,800a5e4 <___vfiprintf_internal_r+0x10e8>
 80095e0:	00c00944 	movi	r3,37
 80095e4:	4829883a 	mov	r20,r9
 80095e8:	10c0021e 	bne	r2,r3,80095f4 <___vfiprintf_internal_r+0xf8>
 80095ec:	00001606 	br	8009648 <___vfiprintf_internal_r+0x14c>
 80095f0:	10c00326 	beq	r2,r3,8009600 <___vfiprintf_internal_r+0x104>
 80095f4:	a5000044 	addi	r20,r20,1
 80095f8:	a0800007 	ldb	r2,0(r20)
 80095fc:	103ffc1e 	bne	r2,zero,80095f0 <__alt_data_end+0xf80095f0>
 8009600:	a263c83a 	sub	r17,r20,r9
 8009604:	88001026 	beq	r17,zero,8009648 <___vfiprintf_internal_r+0x14c>
 8009608:	d8c11c17 	ldw	r3,1136(sp)
 800960c:	d8811b17 	ldw	r2,1132(sp)
 8009610:	42400015 	stw	r9,0(r8)
 8009614:	88c7883a 	add	r3,r17,r3
 8009618:	10800044 	addi	r2,r2,1
 800961c:	44400115 	stw	r17,4(r8)
 8009620:	d8c11c15 	stw	r3,1136(sp)
 8009624:	d8811b15 	stw	r2,1132(sp)
 8009628:	010001c4 	movi	r4,7
 800962c:	2080760e 	bge	r4,r2,8009808 <___vfiprintf_internal_r+0x30c>
 8009630:	1803b41e 	bne	r3,zero,800a504 <___vfiprintf_internal_r+0x1008>
 8009634:	d8c12417 	ldw	r3,1168(sp)
 8009638:	d8011b15 	stw	zero,1132(sp)
 800963c:	d811883a 	mov	r8,sp
 8009640:	1c47883a 	add	r3,r3,r17
 8009644:	d8c12415 	stw	r3,1168(sp)
 8009648:	a0800007 	ldb	r2,0(r20)
 800964c:	1002dc26 	beq	r2,zero,800a1c0 <___vfiprintf_internal_r+0xcc4>
 8009650:	04bfffc4 	movi	r18,-1
 8009654:	a2400044 	addi	r9,r20,1
 8009658:	a0c00047 	ldb	r3,1(r20)
 800965c:	d8011d85 	stb	zero,1142(sp)
 8009660:	002d883a 	mov	r22,zero
 8009664:	d8012115 	stw	zero,1156(sp)
 8009668:	0023883a 	mov	r17,zero
 800966c:	05001604 	movi	r20,88
 8009670:	05400244 	movi	r21,9
 8009674:	402f883a 	mov	r23,r8
 8009678:	900d883a 	mov	r6,r18
 800967c:	4a400044 	addi	r9,r9,1
 8009680:	18bff804 	addi	r2,r3,-32
 8009684:	a0828736 	bltu	r20,r2,800a0a4 <___vfiprintf_internal_r+0xba8>
 8009688:	1085883a 	add	r2,r2,r2
 800968c:	1085883a 	add	r2,r2,r2
 8009690:	01020074 	movhi	r4,2049
 8009694:	2125a904 	addi	r4,r4,-26972
 8009698:	1105883a 	add	r2,r2,r4
 800969c:	10800017 	ldw	r2,0(r2)
 80096a0:	1000683a 	jmp	r2
 80096a4:	08009e04 	addi	zero,at,632
 80096a8:	0800a0a4 	muli	zero,at,642
 80096ac:	0800a0a4 	muli	zero,at,642
 80096b0:	08009e20 	cmpeqi	zero,at,632
 80096b4:	0800a0a4 	muli	zero,at,642
 80096b8:	0800a0a4 	muli	zero,at,642
 80096bc:	0800a0a4 	muli	zero,at,642
 80096c0:	0800a0a4 	muli	zero,at,642
 80096c4:	0800a0a4 	muli	zero,at,642
 80096c8:	0800a0a4 	muli	zero,at,642
 80096cc:	08009eb4 	orhi	zero,at,634
 80096d0:	08009edc 	xori	zero,at,635
 80096d4:	0800a0a4 	muli	zero,at,642
 80096d8:	08009948 	cmpgei	zero,at,613
 80096dc:	08009ee8 	cmpgeui	zero,at,635
 80096e0:	0800a0a4 	muli	zero,at,642
 80096e4:	08009954 	ori	zero,at,613
 80096e8:	08009960 	cmpeqi	zero,at,613
 80096ec:	08009960 	cmpeqi	zero,at,613
 80096f0:	08009960 	cmpeqi	zero,at,613
 80096f4:	08009960 	cmpeqi	zero,at,613
 80096f8:	08009960 	cmpeqi	zero,at,613
 80096fc:	08009960 	cmpeqi	zero,at,613
 8009700:	08009960 	cmpeqi	zero,at,613
 8009704:	08009960 	cmpeqi	zero,at,613
 8009708:	08009960 	cmpeqi	zero,at,613
 800970c:	0800a0a4 	muli	zero,at,642
 8009710:	0800a0a4 	muli	zero,at,642
 8009714:	0800a0a4 	muli	zero,at,642
 8009718:	0800a0a4 	muli	zero,at,642
 800971c:	0800a0a4 	muli	zero,at,642
 8009720:	0800a0a4 	muli	zero,at,642
 8009724:	0800a0a4 	muli	zero,at,642
 8009728:	0800a0a4 	muli	zero,at,642
 800972c:	0800a0a4 	muli	zero,at,642
 8009730:	0800a0a4 	muli	zero,at,642
 8009734:	080099a8 	cmpgeui	zero,at,614
 8009738:	0800a0a4 	muli	zero,at,642
 800973c:	0800a0a4 	muli	zero,at,642
 8009740:	0800a0a4 	muli	zero,at,642
 8009744:	0800a0a4 	muli	zero,at,642
 8009748:	0800a0a4 	muli	zero,at,642
 800974c:	0800a0a4 	muli	zero,at,642
 8009750:	0800a0a4 	muli	zero,at,642
 8009754:	0800a0a4 	muli	zero,at,642
 8009758:	0800a0a4 	muli	zero,at,642
 800975c:	0800a0a4 	muli	zero,at,642
 8009760:	08009cfc 	xorhi	zero,at,627
 8009764:	0800a0a4 	muli	zero,at,642
 8009768:	0800a0a4 	muli	zero,at,642
 800976c:	0800a0a4 	muli	zero,at,642
 8009770:	0800a0a4 	muli	zero,at,642
 8009774:	0800a0a4 	muli	zero,at,642
 8009778:	08009d40 	call	8009d4 <__reset-0x77ff62c>
 800977c:	0800a0a4 	muli	zero,at,642
 8009780:	0800a0a4 	muli	zero,at,642
 8009784:	08009d78 	rdprs	zero,at,629
 8009788:	0800a0a4 	muli	zero,at,642
 800978c:	0800a0a4 	muli	zero,at,642
 8009790:	0800a0a4 	muli	zero,at,642
 8009794:	0800a0a4 	muli	zero,at,642
 8009798:	0800a0a4 	muli	zero,at,642
 800979c:	0800a0a4 	muli	zero,at,642
 80097a0:	0800a0a4 	muli	zero,at,642
 80097a4:	0800a0a4 	muli	zero,at,642
 80097a8:	0800a0a4 	muli	zero,at,642
 80097ac:	0800a0a4 	muli	zero,at,642
 80097b0:	08009dd4 	ori	zero,at,631
 80097b4:	08009f48 	cmpgei	zero,at,637
 80097b8:	0800a0a4 	muli	zero,at,642
 80097bc:	0800a0a4 	muli	zero,at,642
 80097c0:	0800a0a4 	muli	zero,at,642
 80097c4:	08009f3c 	xorhi	zero,at,636
 80097c8:	08009f48 	cmpgei	zero,at,637
 80097cc:	0800a0a4 	muli	zero,at,642
 80097d0:	0800a0a4 	muli	zero,at,642
 80097d4:	08009e2c 	andhi	zero,at,632
 80097d8:	0800a0a4 	muli	zero,at,642
 80097dc:	08009e44 	addi	zero,at,633
 80097e0:	08009e7c 	xorhi	zero,at,633
 80097e4:	0800a05c 	xori	zero,at,641
 80097e8:	08009f80 	call	8009f8 <__reset-0x77ff608>
 80097ec:	0800a0a4 	muli	zero,at,642
 80097f0:	08009f8c 	andi	zero,at,638
 80097f4:	0800a0a4 	muli	zero,at,642
 80097f8:	08009fe4 	muli	zero,at,639
 80097fc:	0800a0a4 	muli	zero,at,642
 8009800:	0800a0a4 	muli	zero,at,642
 8009804:	0800a01c 	xori	zero,at,640
 8009808:	42000204 	addi	r8,r8,8
 800980c:	d8c12417 	ldw	r3,1168(sp)
 8009810:	1c47883a 	add	r3,r3,r17
 8009814:	d8c12415 	stw	r3,1168(sp)
 8009818:	003f8b06 	br	8009648 <__alt_data_end+0xf8009648>
 800981c:	d9012217 	ldw	r4,1160(sp)
 8009820:	d9412017 	ldw	r5,1152(sp)
 8009824:	da412d15 	stw	r9,1204(sp)
 8009828:	80043540 	call	8004354 <__swsetup_r>
 800982c:	da412d17 	ldw	r9,1204(sp)
 8009830:	1000301e 	bne	r2,zero,80098f4 <___vfiprintf_internal_r+0x3f8>
 8009834:	d8c12017 	ldw	r3,1152(sp)
 8009838:	01000284 	movi	r4,10
 800983c:	1880030b 	ldhu	r2,12(r3)
 8009840:	1007883a 	mov	r3,r2
 8009844:	18c0068c 	andi	r3,r3,26
 8009848:	193f531e 	bne	r3,r4,8009598 <__alt_data_end+0xf8009598>
 800984c:	d9012017 	ldw	r4,1152(sp)
 8009850:	20c0038b 	ldhu	r3,14(r4)
 8009854:	193fffcc 	andi	r4,r3,65535
 8009858:	2120001c 	xori	r4,r4,32768
 800985c:	21200004 	addi	r4,r4,-32768
 8009860:	203f4d16 	blt	r4,zero,8009598 <__alt_data_end+0xf8009598>
 8009864:	d9412017 	ldw	r5,1152(sp)
 8009868:	d9012217 	ldw	r4,1160(sp)
 800986c:	d9c12317 	ldw	r7,1164(sp)
 8009870:	2b001917 	ldw	r12,100(r5)
 8009874:	2ac00717 	ldw	r11,28(r5)
 8009878:	2a800917 	ldw	r10,36(r5)
 800987c:	02010004 	movi	r8,1024
 8009880:	10bfff4c 	andi	r2,r2,65533
 8009884:	da0b883a 	add	r5,sp,r8
 8009888:	480d883a 	mov	r6,r9
 800988c:	d881030d 	sth	r2,1036(sp)
 8009890:	db011915 	stw	r12,1124(sp)
 8009894:	d8c1038d 	sth	r3,1038(sp)
 8009898:	dac10715 	stw	r11,1052(sp)
 800989c:	da810915 	stw	r10,1060(sp)
 80098a0:	dec10015 	stw	sp,1024(sp)
 80098a4:	dec10415 	stw	sp,1040(sp)
 80098a8:	da010215 	stw	r8,1032(sp)
 80098ac:	da010515 	stw	r8,1044(sp)
 80098b0:	d8010615 	stw	zero,1048(sp)
 80098b4:	80094fc0 	call	80094fc <___vfiprintf_internal_r>
 80098b8:	1021883a 	mov	r16,r2
 80098bc:	10000416 	blt	r2,zero,80098d0 <___vfiprintf_internal_r+0x3d4>
 80098c0:	d9012217 	ldw	r4,1160(sp)
 80098c4:	d9410004 	addi	r5,sp,1024
 80098c8:	8005cf00 	call	8005cf0 <_fflush_r>
 80098cc:	10040b1e 	bne	r2,zero,800a8fc <___vfiprintf_internal_r+0x1400>
 80098d0:	d881030b 	ldhu	r2,1036(sp)
 80098d4:	1080100c 	andi	r2,r2,64
 80098d8:	10000426 	beq	r2,zero,80098ec <___vfiprintf_internal_r+0x3f0>
 80098dc:	d8c12017 	ldw	r3,1152(sp)
 80098e0:	1880030b 	ldhu	r2,12(r3)
 80098e4:	10801014 	ori	r2,r2,64
 80098e8:	1880030d 	sth	r2,12(r3)
 80098ec:	8005883a 	mov	r2,r16
 80098f0:	00000106 	br	80098f8 <___vfiprintf_internal_r+0x3fc>
 80098f4:	00bfffc4 	movi	r2,-1
 80098f8:	dfc13717 	ldw	ra,1244(sp)
 80098fc:	df013617 	ldw	fp,1240(sp)
 8009900:	ddc13517 	ldw	r23,1236(sp)
 8009904:	dd813417 	ldw	r22,1232(sp)
 8009908:	dd413317 	ldw	r21,1228(sp)
 800990c:	dd013217 	ldw	r20,1224(sp)
 8009910:	dcc13117 	ldw	r19,1220(sp)
 8009914:	dc813017 	ldw	r18,1216(sp)
 8009918:	dc412f17 	ldw	r17,1212(sp)
 800991c:	dc012e17 	ldw	r16,1208(sp)
 8009920:	dec13804 	addi	sp,sp,1248
 8009924:	f800283a 	ret
 8009928:	d9812d15 	stw	r6,1204(sp)
 800992c:	80060100 	call	8006010 <__sinit>
 8009930:	da412d17 	ldw	r9,1204(sp)
 8009934:	003f0306 	br	8009544 <__alt_data_end+0xf8009544>
 8009938:	d9412117 	ldw	r5,1156(sp)
 800993c:	d8812315 	stw	r2,1164(sp)
 8009940:	014bc83a 	sub	r5,zero,r5
 8009944:	d9412115 	stw	r5,1156(sp)
 8009948:	8c400114 	ori	r17,r17,4
 800994c:	48c00007 	ldb	r3,0(r9)
 8009950:	003f4a06 	br	800967c <__alt_data_end+0xf800967c>
 8009954:	8c402014 	ori	r17,r17,128
 8009958:	48c00007 	ldb	r3,0(r9)
 800995c:	003f4706 	br	800967c <__alt_data_end+0xf800967c>
 8009960:	4825883a 	mov	r18,r9
 8009964:	d8012115 	stw	zero,1156(sp)
 8009968:	1f3ff404 	addi	fp,r3,-48
 800996c:	00000106 	br	8009974 <___vfiprintf_internal_r+0x478>
 8009970:	1025883a 	mov	r18,r2
 8009974:	d9012117 	ldw	r4,1156(sp)
 8009978:	01400284 	movi	r5,10
 800997c:	d9812b15 	stw	r6,1196(sp)
 8009980:	800c1240 	call	800c124 <__mulsi3>
 8009984:	90c00007 	ldb	r3,0(r18)
 8009988:	1739883a 	add	fp,r2,fp
 800998c:	df012115 	stw	fp,1156(sp)
 8009990:	90800044 	addi	r2,r18,1
 8009994:	1f3ff404 	addi	fp,r3,-48
 8009998:	1013883a 	mov	r9,r2
 800999c:	d9812b17 	ldw	r6,1196(sp)
 80099a0:	af3ff32e 	bgeu	r21,fp,8009970 <__alt_data_end+0xf8009970>
 80099a4:	003f3606 	br	8009680 <__alt_data_end+0xf8009680>
 80099a8:	8c400414 	ori	r17,r17,16
 80099ac:	dd811d85 	stb	r22,1142(sp)
 80099b0:	8880080c 	andi	r2,r17,32
 80099b4:	b811883a 	mov	r8,r23
 80099b8:	3025883a 	mov	r18,r6
 80099bc:	10016726 	beq	r2,zero,8009f5c <___vfiprintf_internal_r+0xa60>
 80099c0:	d8c12317 	ldw	r3,1164(sp)
 80099c4:	18800117 	ldw	r2,4(r3)
 80099c8:	1d000017 	ldw	r20,0(r3)
 80099cc:	18c00204 	addi	r3,r3,8
 80099d0:	d8c12315 	stw	r3,1164(sp)
 80099d4:	102b883a 	mov	r21,r2
 80099d8:	10030416 	blt	r2,zero,800a5ec <___vfiprintf_internal_r+0x10f0>
 80099dc:	dd811d83 	ldbu	r22,1142(sp)
 80099e0:	900f883a 	mov	r7,r18
 80099e4:	00800044 	movi	r2,1
 80099e8:	a548b03a 	or	r4,r20,r21
 80099ec:	90000216 	blt	r18,zero,80099f8 <___vfiprintf_internal_r+0x4fc>
 80099f0:	00ffdfc4 	movi	r3,-129
 80099f4:	88e2703a 	and	r17,r17,r3
 80099f8:	10803fcc 	andi	r2,r2,255
 80099fc:	2001db1e 	bne	r4,zero,800a16c <___vfiprintf_internal_r+0xc70>
 8009a00:	9001da1e 	bne	r18,zero,800a16c <___vfiprintf_internal_r+0xc70>
 8009a04:	1002ab1e 	bne	r2,zero,800a4b4 <___vfiprintf_internal_r+0xfb8>
 8009a08:	8880004c 	andi	r2,r17,1
 8009a0c:	1002a926 	beq	r2,zero,800a4b4 <___vfiprintf_internal_r+0xfb8>
 8009a10:	d9c12817 	ldw	r7,1184(sp)
 8009a14:	00800c04 	movi	r2,48
 8009a18:	d88109c5 	stb	r2,1063(sp)
 8009a1c:	ddc109c4 	addi	r23,sp,1063
 8009a20:	3829883a 	mov	r20,r7
 8009a24:	3c80010e 	bge	r7,r18,8009a2c <___vfiprintf_internal_r+0x530>
 8009a28:	9029883a 	mov	r20,r18
 8009a2c:	b5803fcc 	andi	r22,r22,255
 8009a30:	b580201c 	xori	r22,r22,128
 8009a34:	b5bfe004 	addi	r22,r22,-128
 8009a38:	b0000126 	beq	r22,zero,8009a40 <___vfiprintf_internal_r+0x544>
 8009a3c:	a5000044 	addi	r20,r20,1
 8009a40:	8a80008c 	andi	r10,r17,2
 8009a44:	50000126 	beq	r10,zero,8009a4c <___vfiprintf_internal_r+0x550>
 8009a48:	a5000084 	addi	r20,r20,2
 8009a4c:	8d40210c 	andi	r21,r17,132
 8009a50:	a801aa1e 	bne	r21,zero,800a0fc <___vfiprintf_internal_r+0xc00>
 8009a54:	d8c12117 	ldw	r3,1156(sp)
 8009a58:	1d2dc83a 	sub	r22,r3,r20
 8009a5c:	0581a70e 	bge	zero,r22,800a0fc <___vfiprintf_internal_r+0xc00>
 8009a60:	07000404 	movi	fp,16
 8009a64:	d8c11c17 	ldw	r3,1136(sp)
 8009a68:	e583780e 	bge	fp,r22,800a84c <___vfiprintf_internal_r+0x1350>
 8009a6c:	01420074 	movhi	r5,2049
 8009a70:	29467e04 	addi	r5,r5,6648
 8009a74:	dc412615 	stw	r17,1176(sp)
 8009a78:	d9011b17 	ldw	r4,1132(sp)
 8009a7c:	b023883a 	mov	r17,r22
 8009a80:	d9412515 	stw	r5,1172(sp)
 8009a84:	030001c4 	movi	r12,7
 8009a88:	d9c12915 	stw	r7,1188(sp)
 8009a8c:	da812a15 	stw	r10,1192(sp)
 8009a90:	482d883a 	mov	r22,r9
 8009a94:	00000506 	br	8009aac <___vfiprintf_internal_r+0x5b0>
 8009a98:	21400084 	addi	r5,r4,2
 8009a9c:	42000204 	addi	r8,r8,8
 8009aa0:	1009883a 	mov	r4,r2
 8009aa4:	8c7ffc04 	addi	r17,r17,-16
 8009aa8:	e4400d0e 	bge	fp,r17,8009ae0 <___vfiprintf_internal_r+0x5e4>
 8009aac:	18c00404 	addi	r3,r3,16
 8009ab0:	20800044 	addi	r2,r4,1
 8009ab4:	44c00015 	stw	r19,0(r8)
 8009ab8:	47000115 	stw	fp,4(r8)
 8009abc:	d8c11c15 	stw	r3,1136(sp)
 8009ac0:	d8811b15 	stw	r2,1132(sp)
 8009ac4:	60bff40e 	bge	r12,r2,8009a98 <__alt_data_end+0xf8009a98>
 8009ac8:	1801801e 	bne	r3,zero,800a0cc <___vfiprintf_internal_r+0xbd0>
 8009acc:	8c7ffc04 	addi	r17,r17,-16
 8009ad0:	0009883a 	mov	r4,zero
 8009ad4:	01400044 	movi	r5,1
 8009ad8:	d811883a 	mov	r8,sp
 8009adc:	e47ff316 	blt	fp,r17,8009aac <__alt_data_end+0xf8009aac>
 8009ae0:	b013883a 	mov	r9,r22
 8009ae4:	d9c12917 	ldw	r7,1188(sp)
 8009ae8:	882d883a 	mov	r22,r17
 8009aec:	da812a17 	ldw	r10,1192(sp)
 8009af0:	dc412617 	ldw	r17,1176(sp)
 8009af4:	d8812517 	ldw	r2,1172(sp)
 8009af8:	b0c7883a 	add	r3,r22,r3
 8009afc:	45800115 	stw	r22,4(r8)
 8009b00:	40800015 	stw	r2,0(r8)
 8009b04:	d8c11c15 	stw	r3,1136(sp)
 8009b08:	d9411b15 	stw	r5,1132(sp)
 8009b0c:	008001c4 	movi	r2,7
 8009b10:	11426a16 	blt	r2,r5,800a4bc <___vfiprintf_internal_r+0xfc0>
 8009b14:	d9011d87 	ldb	r4,1142(sp)
 8009b18:	42000204 	addi	r8,r8,8
 8009b1c:	28800044 	addi	r2,r5,1
 8009b20:	20017b1e 	bne	r4,zero,800a110 <___vfiprintf_internal_r+0xc14>
 8009b24:	50000c26 	beq	r10,zero,8009b58 <___vfiprintf_internal_r+0x65c>
 8009b28:	d9011d04 	addi	r4,sp,1140
 8009b2c:	18c00084 	addi	r3,r3,2
 8009b30:	41000015 	stw	r4,0(r8)
 8009b34:	01000084 	movi	r4,2
 8009b38:	41000115 	stw	r4,4(r8)
 8009b3c:	d8c11c15 	stw	r3,1136(sp)
 8009b40:	d8811b15 	stw	r2,1132(sp)
 8009b44:	010001c4 	movi	r4,7
 8009b48:	20821716 	blt	r4,r2,800a3a8 <___vfiprintf_internal_r+0xeac>
 8009b4c:	100b883a 	mov	r5,r2
 8009b50:	42000204 	addi	r8,r8,8
 8009b54:	10800044 	addi	r2,r2,1
 8009b58:	01002004 	movi	r4,128
 8009b5c:	a901d126 	beq	r21,r4,800a2a4 <___vfiprintf_internal_r+0xda8>
 8009b60:	91e5c83a 	sub	r18,r18,r7
 8009b64:	0480290e 	bge	zero,r18,8009c0c <___vfiprintf_internal_r+0x710>
 8009b68:	05800404 	movi	r22,16
 8009b6c:	05420074 	movhi	r21,2049
 8009b70:	ad467a04 	addi	r21,r21,6632
 8009b74:	b4801c0e 	bge	r22,r18,8009be8 <___vfiprintf_internal_r+0x6ec>
 8009b78:	dc412515 	stw	r17,1172(sp)
 8009b7c:	070001c4 	movi	fp,7
 8009b80:	9023883a 	mov	r17,r18
 8009b84:	d9c12615 	stw	r7,1176(sp)
 8009b88:	4825883a 	mov	r18,r9
 8009b8c:	00000506 	br	8009ba4 <___vfiprintf_internal_r+0x6a8>
 8009b90:	28800084 	addi	r2,r5,2
 8009b94:	42000204 	addi	r8,r8,8
 8009b98:	200b883a 	mov	r5,r4
 8009b9c:	8c7ffc04 	addi	r17,r17,-16
 8009ba0:	b4400d0e 	bge	r22,r17,8009bd8 <___vfiprintf_internal_r+0x6dc>
 8009ba4:	18c00404 	addi	r3,r3,16
 8009ba8:	29000044 	addi	r4,r5,1
 8009bac:	44000015 	stw	r16,0(r8)
 8009bb0:	45800115 	stw	r22,4(r8)
 8009bb4:	d8c11c15 	stw	r3,1136(sp)
 8009bb8:	d9011b15 	stw	r4,1132(sp)
 8009bbc:	e13ff40e 	bge	fp,r4,8009b90 <__alt_data_end+0xf8009b90>
 8009bc0:	1801601e 	bne	r3,zero,800a144 <___vfiprintf_internal_r+0xc48>
 8009bc4:	8c7ffc04 	addi	r17,r17,-16
 8009bc8:	000b883a 	mov	r5,zero
 8009bcc:	00800044 	movi	r2,1
 8009bd0:	d811883a 	mov	r8,sp
 8009bd4:	b47ff316 	blt	r22,r17,8009ba4 <__alt_data_end+0xf8009ba4>
 8009bd8:	9013883a 	mov	r9,r18
 8009bdc:	d9c12617 	ldw	r7,1176(sp)
 8009be0:	8825883a 	mov	r18,r17
 8009be4:	dc412517 	ldw	r17,1172(sp)
 8009be8:	1c87883a 	add	r3,r3,r18
 8009bec:	45400015 	stw	r21,0(r8)
 8009bf0:	44800115 	stw	r18,4(r8)
 8009bf4:	d8c11c15 	stw	r3,1136(sp)
 8009bf8:	d8811b15 	stw	r2,1132(sp)
 8009bfc:	010001c4 	movi	r4,7
 8009c00:	20819e16 	blt	r4,r2,800a27c <___vfiprintf_internal_r+0xd80>
 8009c04:	42000204 	addi	r8,r8,8
 8009c08:	10800044 	addi	r2,r2,1
 8009c0c:	38c7883a 	add	r3,r7,r3
 8009c10:	45c00015 	stw	r23,0(r8)
 8009c14:	41c00115 	stw	r7,4(r8)
 8009c18:	d8c11c15 	stw	r3,1136(sp)
 8009c1c:	d8811b15 	stw	r2,1132(sp)
 8009c20:	010001c4 	movi	r4,7
 8009c24:	20819d0e 	bge	r4,r2,800a29c <___vfiprintf_internal_r+0xda0>
 8009c28:	1802291e 	bne	r3,zero,800a4d0 <___vfiprintf_internal_r+0xfd4>
 8009c2c:	d8011b15 	stw	zero,1132(sp)
 8009c30:	d811883a 	mov	r8,sp
 8009c34:	8c40010c 	andi	r17,r17,4
 8009c38:	88017526 	beq	r17,zero,800a210 <___vfiprintf_internal_r+0xd14>
 8009c3c:	d9412117 	ldw	r5,1156(sp)
 8009c40:	2d23c83a 	sub	r17,r5,r20
 8009c44:	0441720e 	bge	zero,r17,800a210 <___vfiprintf_internal_r+0xd14>
 8009c48:	04800404 	movi	r18,16
 8009c4c:	9443170e 	bge	r18,r17,800a8ac <___vfiprintf_internal_r+0x13b0>
 8009c50:	01420074 	movhi	r5,2049
 8009c54:	29467e04 	addi	r5,r5,6648
 8009c58:	d9011b17 	ldw	r4,1132(sp)
 8009c5c:	d9412515 	stw	r5,1172(sp)
 8009c60:	058001c4 	movi	r22,7
 8009c64:	dd412217 	ldw	r21,1160(sp)
 8009c68:	ddc12017 	ldw	r23,1152(sp)
 8009c6c:	4839883a 	mov	fp,r9
 8009c70:	00000506 	br	8009c88 <___vfiprintf_internal_r+0x78c>
 8009c74:	21400084 	addi	r5,r4,2
 8009c78:	42000204 	addi	r8,r8,8
 8009c7c:	1009883a 	mov	r4,r2
 8009c80:	8c7ffc04 	addi	r17,r17,-16
 8009c84:	94400d0e 	bge	r18,r17,8009cbc <___vfiprintf_internal_r+0x7c0>
 8009c88:	18c00404 	addi	r3,r3,16
 8009c8c:	20800044 	addi	r2,r4,1
 8009c90:	44c00015 	stw	r19,0(r8)
 8009c94:	44800115 	stw	r18,4(r8)
 8009c98:	d8c11c15 	stw	r3,1136(sp)
 8009c9c:	d8811b15 	stw	r2,1132(sp)
 8009ca0:	b0bff40e 	bge	r22,r2,8009c74 <__alt_data_end+0xf8009c74>
 8009ca4:	18016b1e 	bne	r3,zero,800a254 <___vfiprintf_internal_r+0xd58>
 8009ca8:	8c7ffc04 	addi	r17,r17,-16
 8009cac:	0009883a 	mov	r4,zero
 8009cb0:	01400044 	movi	r5,1
 8009cb4:	d811883a 	mov	r8,sp
 8009cb8:	947ff316 	blt	r18,r17,8009c88 <__alt_data_end+0xf8009c88>
 8009cbc:	e013883a 	mov	r9,fp
 8009cc0:	d8812517 	ldw	r2,1172(sp)
 8009cc4:	1c47883a 	add	r3,r3,r17
 8009cc8:	44400115 	stw	r17,4(r8)
 8009ccc:	40800015 	stw	r2,0(r8)
 8009cd0:	d8c11c15 	stw	r3,1136(sp)
 8009cd4:	d9411b15 	stw	r5,1132(sp)
 8009cd8:	008001c4 	movi	r2,7
 8009cdc:	11414c0e 	bge	r2,r5,800a210 <___vfiprintf_internal_r+0xd14>
 8009ce0:	1801431e 	bne	r3,zero,800a1f0 <___vfiprintf_internal_r+0xcf4>
 8009ce4:	d8c12117 	ldw	r3,1156(sp)
 8009ce8:	a0c28e16 	blt	r20,r3,800a724 <___vfiprintf_internal_r+0x1228>
 8009cec:	d9012417 	ldw	r4,1168(sp)
 8009cf0:	2509883a 	add	r4,r4,r20
 8009cf4:	d9012415 	stw	r4,1168(sp)
 8009cf8:	00015306 	br	800a248 <___vfiprintf_internal_r+0xd4c>
 8009cfc:	8c400414 	ori	r17,r17,16
 8009d00:	8880080c 	andi	r2,r17,32
 8009d04:	b811883a 	mov	r8,r23
 8009d08:	3025883a 	mov	r18,r6
 8009d0c:	10005f26 	beq	r2,zero,8009e8c <___vfiprintf_internal_r+0x990>
 8009d10:	d8812317 	ldw	r2,1164(sp)
 8009d14:	d8c12317 	ldw	r3,1164(sp)
 8009d18:	15000017 	ldw	r20,0(r2)
 8009d1c:	15400117 	ldw	r21,4(r2)
 8009d20:	18c00204 	addi	r3,r3,8
 8009d24:	0005883a 	mov	r2,zero
 8009d28:	d8c12315 	stw	r3,1164(sp)
 8009d2c:	a548b03a 	or	r4,r20,r21
 8009d30:	d8011d85 	stb	zero,1142(sp)
 8009d34:	900f883a 	mov	r7,r18
 8009d38:	002d883a 	mov	r22,zero
 8009d3c:	003f2b06 	br	80099ec <__alt_data_end+0xf80099ec>
 8009d40:	8c400414 	ori	r17,r17,16
 8009d44:	8880080c 	andi	r2,r17,32
 8009d48:	b811883a 	mov	r8,r23
 8009d4c:	3025883a 	mov	r18,r6
 8009d50:	1000a826 	beq	r2,zero,8009ff4 <___vfiprintf_internal_r+0xaf8>
 8009d54:	d8812317 	ldw	r2,1164(sp)
 8009d58:	d8c12317 	ldw	r3,1164(sp)
 8009d5c:	15000017 	ldw	r20,0(r2)
 8009d60:	15400117 	ldw	r21,4(r2)
 8009d64:	18c00204 	addi	r3,r3,8
 8009d68:	00800044 	movi	r2,1
 8009d6c:	d8c12315 	stw	r3,1164(sp)
 8009d70:	a548b03a 	or	r4,r20,r21
 8009d74:	003fee06 	br	8009d30 <__alt_data_end+0xf8009d30>
 8009d78:	01420074 	movhi	r5,2049
 8009d7c:	29461404 	addi	r5,r5,6224
 8009d80:	dd811d85 	stb	r22,1142(sp)
 8009d84:	d9412715 	stw	r5,1180(sp)
 8009d88:	8880080c 	andi	r2,r17,32
 8009d8c:	b811883a 	mov	r8,r23
 8009d90:	3025883a 	mov	r18,r6
 8009d94:	1000a926 	beq	r2,zero,800a03c <___vfiprintf_internal_r+0xb40>
 8009d98:	d9412317 	ldw	r5,1164(sp)
 8009d9c:	2d000017 	ldw	r20,0(r5)
 8009da0:	2d400117 	ldw	r21,4(r5)
 8009da4:	29400204 	addi	r5,r5,8
 8009da8:	d9412315 	stw	r5,1164(sp)
 8009dac:	8880004c 	andi	r2,r17,1
 8009db0:	1001d126 	beq	r2,zero,800a4f8 <___vfiprintf_internal_r+0xffc>
 8009db4:	a548b03a 	or	r4,r20,r21
 8009db8:	20021626 	beq	r4,zero,800a614 <___vfiprintf_internal_r+0x1118>
 8009dbc:	00800c04 	movi	r2,48
 8009dc0:	d8811d05 	stb	r2,1140(sp)
 8009dc4:	d8c11d45 	stb	r3,1141(sp)
 8009dc8:	8c400094 	ori	r17,r17,2
 8009dcc:	00800084 	movi	r2,2
 8009dd0:	003fd706 	br	8009d30 <__alt_data_end+0xf8009d30>
 8009dd4:	d9412317 	ldw	r5,1164(sp)
 8009dd8:	05000044 	movi	r20,1
 8009ddc:	b811883a 	mov	r8,r23
 8009de0:	28800017 	ldw	r2,0(r5)
 8009de4:	29400104 	addi	r5,r5,4
 8009de8:	d8011d85 	stb	zero,1142(sp)
 8009dec:	d8810005 	stb	r2,1024(sp)
 8009df0:	d9412315 	stw	r5,1164(sp)
 8009df4:	a00f883a 	mov	r7,r20
 8009df8:	ddc10004 	addi	r23,sp,1024
 8009dfc:	0025883a 	mov	r18,zero
 8009e00:	003f0f06 	br	8009a40 <__alt_data_end+0xf8009a40>
 8009e04:	b0803fcc 	andi	r2,r22,255
 8009e08:	1080201c 	xori	r2,r2,128
 8009e0c:	10bfe004 	addi	r2,r2,-128
 8009e10:	10021f1e 	bne	r2,zero,800a690 <___vfiprintf_internal_r+0x1194>
 8009e14:	05800804 	movi	r22,32
 8009e18:	48c00007 	ldb	r3,0(r9)
 8009e1c:	003e1706 	br	800967c <__alt_data_end+0xf800967c>
 8009e20:	8c400054 	ori	r17,r17,1
 8009e24:	48c00007 	ldb	r3,0(r9)
 8009e28:	003e1406 	br	800967c <__alt_data_end+0xf800967c>
 8009e2c:	48c00007 	ldb	r3,0(r9)
 8009e30:	01001b04 	movi	r4,108
 8009e34:	4805883a 	mov	r2,r9
 8009e38:	19026526 	beq	r3,r4,800a7d0 <___vfiprintf_internal_r+0x12d4>
 8009e3c:	8c400414 	ori	r17,r17,16
 8009e40:	003e0e06 	br	800967c <__alt_data_end+0xf800967c>
 8009e44:	dd811d85 	stb	r22,1142(sp)
 8009e48:	8880080c 	andi	r2,r17,32
 8009e4c:	b811883a 	mov	r8,r23
 8009e50:	10020426 	beq	r2,zero,800a664 <___vfiprintf_internal_r+0x1168>
 8009e54:	d8c12317 	ldw	r3,1164(sp)
 8009e58:	d9012417 	ldw	r4,1168(sp)
 8009e5c:	d9412317 	ldw	r5,1164(sp)
 8009e60:	18800017 	ldw	r2,0(r3)
 8009e64:	2007d7fa 	srai	r3,r4,31
 8009e68:	29400104 	addi	r5,r5,4
 8009e6c:	d9412315 	stw	r5,1164(sp)
 8009e70:	11000015 	stw	r4,0(r2)
 8009e74:	10c00115 	stw	r3,4(r2)
 8009e78:	003dd706 	br	80095d8 <__alt_data_end+0xf80095d8>
 8009e7c:	8880080c 	andi	r2,r17,32
 8009e80:	b811883a 	mov	r8,r23
 8009e84:	3025883a 	mov	r18,r6
 8009e88:	103fa11e 	bne	r2,zero,8009d10 <__alt_data_end+0xf8009d10>
 8009e8c:	8880040c 	andi	r2,r17,16
 8009e90:	1001ea26 	beq	r2,zero,800a63c <___vfiprintf_internal_r+0x1140>
 8009e94:	d9012317 	ldw	r4,1164(sp)
 8009e98:	002b883a 	mov	r21,zero
 8009e9c:	0005883a 	mov	r2,zero
 8009ea0:	25000017 	ldw	r20,0(r4)
 8009ea4:	21000104 	addi	r4,r4,4
 8009ea8:	d9012315 	stw	r4,1164(sp)
 8009eac:	a009883a 	mov	r4,r20
 8009eb0:	003f9f06 	br	8009d30 <__alt_data_end+0xf8009d30>
 8009eb4:	d8812317 	ldw	r2,1164(sp)
 8009eb8:	d8c12317 	ldw	r3,1164(sp)
 8009ebc:	10800017 	ldw	r2,0(r2)
 8009ec0:	d8812115 	stw	r2,1156(sp)
 8009ec4:	d9012117 	ldw	r4,1156(sp)
 8009ec8:	18800104 	addi	r2,r3,4
 8009ecc:	203e9a16 	blt	r4,zero,8009938 <__alt_data_end+0xf8009938>
 8009ed0:	d8812315 	stw	r2,1164(sp)
 8009ed4:	48c00007 	ldb	r3,0(r9)
 8009ed8:	003de806 	br	800967c <__alt_data_end+0xf800967c>
 8009edc:	05800ac4 	movi	r22,43
 8009ee0:	48c00007 	ldb	r3,0(r9)
 8009ee4:	003de506 	br	800967c <__alt_data_end+0xf800967c>
 8009ee8:	48c00007 	ldb	r3,0(r9)
 8009eec:	01000a84 	movi	r4,42
 8009ef0:	48800044 	addi	r2,r9,1
 8009ef4:	19028326 	beq	r3,r4,800a904 <___vfiprintf_internal_r+0x1408>
 8009ef8:	1f3ff404 	addi	fp,r3,-48
 8009efc:	af027a36 	bltu	r21,fp,800a8e8 <___vfiprintf_internal_r+0x13ec>
 8009f00:	1025883a 	mov	r18,r2
 8009f04:	0009883a 	mov	r4,zero
 8009f08:	00000106 	br	8009f10 <___vfiprintf_internal_r+0xa14>
 8009f0c:	4825883a 	mov	r18,r9
 8009f10:	01400284 	movi	r5,10
 8009f14:	800c1240 	call	800c124 <__mulsi3>
 8009f18:	90c00007 	ldb	r3,0(r18)
 8009f1c:	e089883a 	add	r4,fp,r2
 8009f20:	92400044 	addi	r9,r18,1
 8009f24:	1f3ff404 	addi	fp,r3,-48
 8009f28:	af3ff82e 	bgeu	r21,fp,8009f0c <__alt_data_end+0xf8009f0c>
 8009f2c:	2025883a 	mov	r18,r4
 8009f30:	20022416 	blt	r4,zero,800a7c4 <___vfiprintf_internal_r+0x12c8>
 8009f34:	900d883a 	mov	r6,r18
 8009f38:	003dd106 	br	8009680 <__alt_data_end+0xf8009680>
 8009f3c:	8c401014 	ori	r17,r17,64
 8009f40:	48c00007 	ldb	r3,0(r9)
 8009f44:	003dcd06 	br	800967c <__alt_data_end+0xf800967c>
 8009f48:	dd811d85 	stb	r22,1142(sp)
 8009f4c:	8880080c 	andi	r2,r17,32
 8009f50:	b811883a 	mov	r8,r23
 8009f54:	3025883a 	mov	r18,r6
 8009f58:	103e991e 	bne	r2,zero,80099c0 <__alt_data_end+0xf80099c0>
 8009f5c:	8880040c 	andi	r2,r17,16
 8009f60:	1001d726 	beq	r2,zero,800a6c0 <___vfiprintf_internal_r+0x11c4>
 8009f64:	d9012317 	ldw	r4,1164(sp)
 8009f68:	25000017 	ldw	r20,0(r4)
 8009f6c:	21000104 	addi	r4,r4,4
 8009f70:	d9012315 	stw	r4,1164(sp)
 8009f74:	a02bd7fa 	srai	r21,r20,31
 8009f78:	a805883a 	mov	r2,r21
 8009f7c:	003e9606 	br	80099d8 <__alt_data_end+0xf80099d8>
 8009f80:	8c400814 	ori	r17,r17,32
 8009f84:	48c00007 	ldb	r3,0(r9)
 8009f88:	003dbc06 	br	800967c <__alt_data_end+0xf800967c>
 8009f8c:	d9412317 	ldw	r5,1164(sp)
 8009f90:	b811883a 	mov	r8,r23
 8009f94:	d8011d85 	stb	zero,1142(sp)
 8009f98:	2dc00017 	ldw	r23,0(r5)
 8009f9c:	3025883a 	mov	r18,r6
 8009fa0:	2d400104 	addi	r21,r5,4
 8009fa4:	b8022f26 	beq	r23,zero,800a864 <___vfiprintf_internal_r+0x1368>
 8009fa8:	b809883a 	mov	r4,r23
 8009fac:	30020f16 	blt	r6,zero,800a7ec <___vfiprintf_internal_r+0x12f0>
 8009fb0:	000b883a 	mov	r5,zero
 8009fb4:	da012b15 	stw	r8,1196(sp)
 8009fb8:	da412d15 	stw	r9,1204(sp)
 8009fbc:	800776c0 	call	800776c <memchr>
 8009fc0:	da012b17 	ldw	r8,1196(sp)
 8009fc4:	da412d17 	ldw	r9,1204(sp)
 8009fc8:	10024226 	beq	r2,zero,800a8d4 <___vfiprintf_internal_r+0x13d8>
 8009fcc:	15cfc83a 	sub	r7,r2,r23
 8009fd0:	91c1d616 	blt	r18,r7,800a72c <___vfiprintf_internal_r+0x1230>
 8009fd4:	dd811d83 	ldbu	r22,1142(sp)
 8009fd8:	dd412315 	stw	r21,1164(sp)
 8009fdc:	0025883a 	mov	r18,zero
 8009fe0:	003e8f06 	br	8009a20 <__alt_data_end+0xf8009a20>
 8009fe4:	8880080c 	andi	r2,r17,32
 8009fe8:	b811883a 	mov	r8,r23
 8009fec:	3025883a 	mov	r18,r6
 8009ff0:	103f581e 	bne	r2,zero,8009d54 <__alt_data_end+0xf8009d54>
 8009ff4:	8880040c 	andi	r2,r17,16
 8009ff8:	1001a726 	beq	r2,zero,800a698 <___vfiprintf_internal_r+0x119c>
 8009ffc:	d9012317 	ldw	r4,1164(sp)
 800a000:	002b883a 	mov	r21,zero
 800a004:	00800044 	movi	r2,1
 800a008:	25000017 	ldw	r20,0(r4)
 800a00c:	21000104 	addi	r4,r4,4
 800a010:	d9012315 	stw	r4,1164(sp)
 800a014:	a009883a 	mov	r4,r20
 800a018:	003f4506 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a01c:	01020074 	movhi	r4,2049
 800a020:	21061904 	addi	r4,r4,6244
 800a024:	dd811d85 	stb	r22,1142(sp)
 800a028:	d9012715 	stw	r4,1180(sp)
 800a02c:	8880080c 	andi	r2,r17,32
 800a030:	b811883a 	mov	r8,r23
 800a034:	3025883a 	mov	r18,r6
 800a038:	103f571e 	bne	r2,zero,8009d98 <__alt_data_end+0xf8009d98>
 800a03c:	8880040c 	andi	r2,r17,16
 800a040:	10017626 	beq	r2,zero,800a61c <___vfiprintf_internal_r+0x1120>
 800a044:	d8812317 	ldw	r2,1164(sp)
 800a048:	002b883a 	mov	r21,zero
 800a04c:	15000017 	ldw	r20,0(r2)
 800a050:	10800104 	addi	r2,r2,4
 800a054:	d8812315 	stw	r2,1164(sp)
 800a058:	003f5406 	br	8009dac <__alt_data_end+0xf8009dac>
 800a05c:	d8c12317 	ldw	r3,1164(sp)
 800a060:	00800c04 	movi	r2,48
 800a064:	01020074 	movhi	r4,2049
 800a068:	21061904 	addi	r4,r4,6244
 800a06c:	1d000017 	ldw	r20,0(r3)
 800a070:	d8811d05 	stb	r2,1140(sp)
 800a074:	18c00104 	addi	r3,r3,4
 800a078:	00801e04 	movi	r2,120
 800a07c:	d8811d45 	stb	r2,1141(sp)
 800a080:	d9012715 	stw	r4,1180(sp)
 800a084:	b811883a 	mov	r8,r23
 800a088:	3025883a 	mov	r18,r6
 800a08c:	002b883a 	mov	r21,zero
 800a090:	8c400094 	ori	r17,r17,2
 800a094:	d8c12315 	stw	r3,1164(sp)
 800a098:	00800084 	movi	r2,2
 800a09c:	a009883a 	mov	r4,r20
 800a0a0:	003f2306 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a0a4:	dd811d85 	stb	r22,1142(sp)
 800a0a8:	b811883a 	mov	r8,r23
 800a0ac:	18004426 	beq	r3,zero,800a1c0 <___vfiprintf_internal_r+0xcc4>
 800a0b0:	05000044 	movi	r20,1
 800a0b4:	d8c10005 	stb	r3,1024(sp)
 800a0b8:	d8011d85 	stb	zero,1142(sp)
 800a0bc:	a00f883a 	mov	r7,r20
 800a0c0:	ddc10004 	addi	r23,sp,1024
 800a0c4:	0025883a 	mov	r18,zero
 800a0c8:	003e5d06 	br	8009a40 <__alt_data_end+0xf8009a40>
 800a0cc:	d9012217 	ldw	r4,1160(sp)
 800a0d0:	d9412017 	ldw	r5,1152(sp)
 800a0d4:	d9811a04 	addi	r6,sp,1128
 800a0d8:	db012b15 	stw	r12,1196(sp)
 800a0dc:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a0e0:	db012b17 	ldw	r12,1196(sp)
 800a0e4:	10003c1e 	bne	r2,zero,800a1d8 <___vfiprintf_internal_r+0xcdc>
 800a0e8:	d9011b17 	ldw	r4,1132(sp)
 800a0ec:	d8c11c17 	ldw	r3,1136(sp)
 800a0f0:	d811883a 	mov	r8,sp
 800a0f4:	21400044 	addi	r5,r4,1
 800a0f8:	003e6a06 	br	8009aa4 <__alt_data_end+0xf8009aa4>
 800a0fc:	d9411b17 	ldw	r5,1132(sp)
 800a100:	d8c11c17 	ldw	r3,1136(sp)
 800a104:	28800044 	addi	r2,r5,1
 800a108:	d9011d87 	ldb	r4,1142(sp)
 800a10c:	203e8526 	beq	r4,zero,8009b24 <__alt_data_end+0xf8009b24>
 800a110:	01000044 	movi	r4,1
 800a114:	d9411d84 	addi	r5,sp,1142
 800a118:	1907883a 	add	r3,r3,r4
 800a11c:	41400015 	stw	r5,0(r8)
 800a120:	41000115 	stw	r4,4(r8)
 800a124:	d8c11c15 	stw	r3,1136(sp)
 800a128:	d8811b15 	stw	r2,1132(sp)
 800a12c:	014001c4 	movi	r5,7
 800a130:	28809816 	blt	r5,r2,800a394 <___vfiprintf_internal_r+0xe98>
 800a134:	100b883a 	mov	r5,r2
 800a138:	42000204 	addi	r8,r8,8
 800a13c:	1105883a 	add	r2,r2,r4
 800a140:	003e7806 	br	8009b24 <__alt_data_end+0xf8009b24>
 800a144:	d9012217 	ldw	r4,1160(sp)
 800a148:	d9412017 	ldw	r5,1152(sp)
 800a14c:	d9811a04 	addi	r6,sp,1128
 800a150:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a154:	1000201e 	bne	r2,zero,800a1d8 <___vfiprintf_internal_r+0xcdc>
 800a158:	d9411b17 	ldw	r5,1132(sp)
 800a15c:	d8c11c17 	ldw	r3,1136(sp)
 800a160:	d811883a 	mov	r8,sp
 800a164:	28800044 	addi	r2,r5,1
 800a168:	003e8c06 	br	8009b9c <__alt_data_end+0xf8009b9c>
 800a16c:	00c00044 	movi	r3,1
 800a170:	10c0ab26 	beq	r2,r3,800a420 <___vfiprintf_internal_r+0xf24>
 800a174:	00c00084 	movi	r3,2
 800a178:	10c0901e 	bne	r2,r3,800a3bc <___vfiprintf_internal_r+0xec0>
 800a17c:	d9412717 	ldw	r5,1180(sp)
 800a180:	d88109c4 	addi	r2,sp,1063
 800a184:	a0c003cc 	andi	r3,r20,15
 800a188:	a808973a 	slli	r4,r21,28
 800a18c:	28c7883a 	add	r3,r5,r3
 800a190:	a028d13a 	srli	r20,r20,4
 800a194:	18c00003 	ldbu	r3,0(r3)
 800a198:	a82ad13a 	srli	r21,r21,4
 800a19c:	2528b03a 	or	r20,r4,r20
 800a1a0:	10c00005 	stb	r3,0(r2)
 800a1a4:	a546b03a 	or	r3,r20,r21
 800a1a8:	102f883a 	mov	r23,r2
 800a1ac:	10bfffc4 	addi	r2,r2,-1
 800a1b0:	183ff41e 	bne	r3,zero,800a184 <__alt_data_end+0xf800a184>
 800a1b4:	d8811f17 	ldw	r2,1148(sp)
 800a1b8:	15cfc83a 	sub	r7,r2,r23
 800a1bc:	003e1806 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a1c0:	d8811c17 	ldw	r2,1136(sp)
 800a1c4:	10000426 	beq	r2,zero,800a1d8 <___vfiprintf_internal_r+0xcdc>
 800a1c8:	d9012217 	ldw	r4,1160(sp)
 800a1cc:	d9412017 	ldw	r5,1152(sp)
 800a1d0:	d9811a04 	addi	r6,sp,1128
 800a1d4:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a1d8:	d8c12017 	ldw	r3,1152(sp)
 800a1dc:	1880030b 	ldhu	r2,12(r3)
 800a1e0:	1080100c 	andi	r2,r2,64
 800a1e4:	103dc31e 	bne	r2,zero,80098f4 <__alt_data_end+0xf80098f4>
 800a1e8:	d8812417 	ldw	r2,1168(sp)
 800a1ec:	003dc206 	br	80098f8 <__alt_data_end+0xf80098f8>
 800a1f0:	d9012217 	ldw	r4,1160(sp)
 800a1f4:	d9412017 	ldw	r5,1152(sp)
 800a1f8:	d9811a04 	addi	r6,sp,1128
 800a1fc:	da412d15 	stw	r9,1204(sp)
 800a200:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a204:	da412d17 	ldw	r9,1204(sp)
 800a208:	103ff31e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a20c:	d8c11c17 	ldw	r3,1136(sp)
 800a210:	d9412117 	ldw	r5,1156(sp)
 800a214:	a140010e 	bge	r20,r5,800a21c <___vfiprintf_internal_r+0xd20>
 800a218:	2829883a 	mov	r20,r5
 800a21c:	d8812417 	ldw	r2,1168(sp)
 800a220:	1505883a 	add	r2,r2,r20
 800a224:	d8812415 	stw	r2,1168(sp)
 800a228:	18000726 	beq	r3,zero,800a248 <___vfiprintf_internal_r+0xd4c>
 800a22c:	d9012217 	ldw	r4,1160(sp)
 800a230:	d9412017 	ldw	r5,1152(sp)
 800a234:	d9811a04 	addi	r6,sp,1128
 800a238:	da412d15 	stw	r9,1204(sp)
 800a23c:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a240:	da412d17 	ldw	r9,1204(sp)
 800a244:	103fe41e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a248:	d8011b15 	stw	zero,1132(sp)
 800a24c:	d811883a 	mov	r8,sp
 800a250:	003ce106 	br	80095d8 <__alt_data_end+0xf80095d8>
 800a254:	a809883a 	mov	r4,r21
 800a258:	b80b883a 	mov	r5,r23
 800a25c:	d9811a04 	addi	r6,sp,1128
 800a260:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a264:	103fdc1e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a268:	d9011b17 	ldw	r4,1132(sp)
 800a26c:	d8c11c17 	ldw	r3,1136(sp)
 800a270:	d811883a 	mov	r8,sp
 800a274:	21400044 	addi	r5,r4,1
 800a278:	003e8106 	br	8009c80 <__alt_data_end+0xf8009c80>
 800a27c:	1800cb1e 	bne	r3,zero,800a5ac <___vfiprintf_internal_r+0x10b0>
 800a280:	00800044 	movi	r2,1
 800a284:	ddc00015 	stw	r23,0(sp)
 800a288:	d9c00115 	stw	r7,4(sp)
 800a28c:	d9c11c15 	stw	r7,1136(sp)
 800a290:	d8811b15 	stw	r2,1132(sp)
 800a294:	3807883a 	mov	r3,r7
 800a298:	d811883a 	mov	r8,sp
 800a29c:	42000204 	addi	r8,r8,8
 800a2a0:	003e6406 	br	8009c34 <__alt_data_end+0xf8009c34>
 800a2a4:	d9012117 	ldw	r4,1156(sp)
 800a2a8:	252dc83a 	sub	r22,r4,r20
 800a2ac:	05be2c0e 	bge	zero,r22,8009b60 <__alt_data_end+0xf8009b60>
 800a2b0:	07000404 	movi	fp,16
 800a2b4:	e581830e 	bge	fp,r22,800a8c4 <___vfiprintf_internal_r+0x13c8>
 800a2b8:	05420074 	movhi	r21,2049
 800a2bc:	ad467a04 	addi	r21,r21,6632
 800a2c0:	dc412515 	stw	r17,1172(sp)
 800a2c4:	028001c4 	movi	r10,7
 800a2c8:	b023883a 	mov	r17,r22
 800a2cc:	d9c12615 	stw	r7,1176(sp)
 800a2d0:	a82d883a 	mov	r22,r21
 800a2d4:	482b883a 	mov	r21,r9
 800a2d8:	00000506 	br	800a2f0 <___vfiprintf_internal_r+0xdf4>
 800a2dc:	29000084 	addi	r4,r5,2
 800a2e0:	42000204 	addi	r8,r8,8
 800a2e4:	100b883a 	mov	r5,r2
 800a2e8:	8c7ffc04 	addi	r17,r17,-16
 800a2ec:	e4400d0e 	bge	fp,r17,800a324 <___vfiprintf_internal_r+0xe28>
 800a2f0:	18c00404 	addi	r3,r3,16
 800a2f4:	28800044 	addi	r2,r5,1
 800a2f8:	44000015 	stw	r16,0(r8)
 800a2fc:	47000115 	stw	fp,4(r8)
 800a300:	d8c11c15 	stw	r3,1136(sp)
 800a304:	d8811b15 	stw	r2,1132(sp)
 800a308:	50bff40e 	bge	r10,r2,800a2dc <__alt_data_end+0xf800a2dc>
 800a30c:	1800151e 	bne	r3,zero,800a364 <___vfiprintf_internal_r+0xe68>
 800a310:	8c7ffc04 	addi	r17,r17,-16
 800a314:	000b883a 	mov	r5,zero
 800a318:	01000044 	movi	r4,1
 800a31c:	d811883a 	mov	r8,sp
 800a320:	e47ff316 	blt	fp,r17,800a2f0 <__alt_data_end+0xf800a2f0>
 800a324:	a813883a 	mov	r9,r21
 800a328:	d9c12617 	ldw	r7,1176(sp)
 800a32c:	b02b883a 	mov	r21,r22
 800a330:	882d883a 	mov	r22,r17
 800a334:	dc412517 	ldw	r17,1172(sp)
 800a338:	1d87883a 	add	r3,r3,r22
 800a33c:	45400015 	stw	r21,0(r8)
 800a340:	45800115 	stw	r22,4(r8)
 800a344:	d8c11c15 	stw	r3,1136(sp)
 800a348:	d9011b15 	stw	r4,1132(sp)
 800a34c:	008001c4 	movi	r2,7
 800a350:	11009116 	blt	r2,r4,800a598 <___vfiprintf_internal_r+0x109c>
 800a354:	42000204 	addi	r8,r8,8
 800a358:	20800044 	addi	r2,r4,1
 800a35c:	200b883a 	mov	r5,r4
 800a360:	003dff06 	br	8009b60 <__alt_data_end+0xf8009b60>
 800a364:	d9012217 	ldw	r4,1160(sp)
 800a368:	d9412017 	ldw	r5,1152(sp)
 800a36c:	d9811a04 	addi	r6,sp,1128
 800a370:	da812c15 	stw	r10,1200(sp)
 800a374:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a378:	da812c17 	ldw	r10,1200(sp)
 800a37c:	103f961e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a380:	d9411b17 	ldw	r5,1132(sp)
 800a384:	d8c11c17 	ldw	r3,1136(sp)
 800a388:	d811883a 	mov	r8,sp
 800a38c:	29000044 	addi	r4,r5,1
 800a390:	003fd506 	br	800a2e8 <__alt_data_end+0xf800a2e8>
 800a394:	1800701e 	bne	r3,zero,800a558 <___vfiprintf_internal_r+0x105c>
 800a398:	000b883a 	mov	r5,zero
 800a39c:	2005883a 	mov	r2,r4
 800a3a0:	d811883a 	mov	r8,sp
 800a3a4:	003ddf06 	br	8009b24 <__alt_data_end+0xf8009b24>
 800a3a8:	18005d1e 	bne	r3,zero,800a520 <___vfiprintf_internal_r+0x1024>
 800a3ac:	000b883a 	mov	r5,zero
 800a3b0:	00800044 	movi	r2,1
 800a3b4:	d811883a 	mov	r8,sp
 800a3b8:	003de706 	br	8009b58 <__alt_data_end+0xf8009b58>
 800a3bc:	d8c109c4 	addi	r3,sp,1063
 800a3c0:	a008d0fa 	srli	r4,r20,3
 800a3c4:	a80a977a 	slli	r5,r21,29
 800a3c8:	a82ad0fa 	srli	r21,r21,3
 800a3cc:	a50001cc 	andi	r20,r20,7
 800a3d0:	a0800c04 	addi	r2,r20,48
 800a3d4:	2928b03a 	or	r20,r5,r4
 800a3d8:	18800005 	stb	r2,0(r3)
 800a3dc:	a548b03a 	or	r4,r20,r21
 800a3e0:	182f883a 	mov	r23,r3
 800a3e4:	18ffffc4 	addi	r3,r3,-1
 800a3e8:	203ff51e 	bne	r4,zero,800a3c0 <__alt_data_end+0xf800a3c0>
 800a3ec:	8900004c 	andi	r4,r17,1
 800a3f0:	b80b883a 	mov	r5,r23
 800a3f4:	203f6f26 	beq	r4,zero,800a1b4 <__alt_data_end+0xf800a1b4>
 800a3f8:	10803fcc 	andi	r2,r2,255
 800a3fc:	1080201c 	xori	r2,r2,128
 800a400:	10bfe004 	addi	r2,r2,-128
 800a404:	01000c04 	movi	r4,48
 800a408:	1100f526 	beq	r2,r4,800a7e0 <___vfiprintf_internal_r+0x12e4>
 800a40c:	293fffc5 	stb	r4,-1(r5)
 800a410:	d9011f17 	ldw	r4,1148(sp)
 800a414:	182f883a 	mov	r23,r3
 800a418:	20cfc83a 	sub	r7,r4,r3
 800a41c:	003d8006 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a420:	a800021e 	bne	r21,zero,800a42c <___vfiprintf_internal_r+0xf30>
 800a424:	00800244 	movi	r2,9
 800a428:	15001d2e 	bgeu	r2,r20,800a4a0 <___vfiprintf_internal_r+0xfa4>
 800a42c:	dc412515 	stw	r17,1172(sp)
 800a430:	d88109c4 	addi	r2,sp,1063
 800a434:	a823883a 	mov	r17,r21
 800a438:	4039883a 	mov	fp,r8
 800a43c:	482b883a 	mov	r21,r9
 800a440:	a009883a 	mov	r4,r20
 800a444:	880b883a 	mov	r5,r17
 800a448:	01800284 	movi	r6,10
 800a44c:	000f883a 	mov	r7,zero
 800a450:	102f883a 	mov	r23,r2
 800a454:	800b9dc0 	call	800b9dc <__umoddi3>
 800a458:	10800c04 	addi	r2,r2,48
 800a45c:	a009883a 	mov	r4,r20
 800a460:	880b883a 	mov	r5,r17
 800a464:	b8800005 	stb	r2,0(r23)
 800a468:	01800284 	movi	r6,10
 800a46c:	000f883a 	mov	r7,zero
 800a470:	800b3880 	call	800b388 <__udivdi3>
 800a474:	1823883a 	mov	r17,r3
 800a478:	10c6b03a 	or	r3,r2,r3
 800a47c:	1029883a 	mov	r20,r2
 800a480:	b8bfffc4 	addi	r2,r23,-1
 800a484:	183fee1e 	bne	r3,zero,800a440 <__alt_data_end+0xf800a440>
 800a488:	d9411f17 	ldw	r5,1148(sp)
 800a48c:	e011883a 	mov	r8,fp
 800a490:	dc412517 	ldw	r17,1172(sp)
 800a494:	a813883a 	mov	r9,r21
 800a498:	2dcfc83a 	sub	r7,r5,r23
 800a49c:	003d6006 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a4a0:	a5000c04 	addi	r20,r20,48
 800a4a4:	dd0109c5 	stb	r20,1063(sp)
 800a4a8:	d9c12817 	ldw	r7,1184(sp)
 800a4ac:	ddc109c4 	addi	r23,sp,1063
 800a4b0:	003d5b06 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a4b4:	ddc10a04 	addi	r23,sp,1064
 800a4b8:	003d5906 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a4bc:	1800891e 	bne	r3,zero,800a6e4 <___vfiprintf_internal_r+0x11e8>
 800a4c0:	000b883a 	mov	r5,zero
 800a4c4:	00800044 	movi	r2,1
 800a4c8:	d811883a 	mov	r8,sp
 800a4cc:	003f0e06 	br	800a108 <__alt_data_end+0xf800a108>
 800a4d0:	d9012217 	ldw	r4,1160(sp)
 800a4d4:	d9412017 	ldw	r5,1152(sp)
 800a4d8:	d9811a04 	addi	r6,sp,1128
 800a4dc:	da412d15 	stw	r9,1204(sp)
 800a4e0:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a4e4:	da412d17 	ldw	r9,1204(sp)
 800a4e8:	103f3b1e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a4ec:	d8c11c17 	ldw	r3,1136(sp)
 800a4f0:	d811883a 	mov	r8,sp
 800a4f4:	003dcf06 	br	8009c34 <__alt_data_end+0xf8009c34>
 800a4f8:	00800084 	movi	r2,2
 800a4fc:	a548b03a 	or	r4,r20,r21
 800a500:	003e0b06 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a504:	d9012217 	ldw	r4,1160(sp)
 800a508:	d9412017 	ldw	r5,1152(sp)
 800a50c:	d9811a04 	addi	r6,sp,1128
 800a510:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a514:	103f301e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a518:	d811883a 	mov	r8,sp
 800a51c:	003cbb06 	br	800980c <__alt_data_end+0xf800980c>
 800a520:	d9012217 	ldw	r4,1160(sp)
 800a524:	d9412017 	ldw	r5,1152(sp)
 800a528:	d9811a04 	addi	r6,sp,1128
 800a52c:	d9c12b15 	stw	r7,1196(sp)
 800a530:	da412d15 	stw	r9,1204(sp)
 800a534:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a538:	d9c12b17 	ldw	r7,1196(sp)
 800a53c:	da412d17 	ldw	r9,1204(sp)
 800a540:	103f251e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a544:	d9411b17 	ldw	r5,1132(sp)
 800a548:	d8c11c17 	ldw	r3,1136(sp)
 800a54c:	d811883a 	mov	r8,sp
 800a550:	28800044 	addi	r2,r5,1
 800a554:	003d8006 	br	8009b58 <__alt_data_end+0xf8009b58>
 800a558:	d9012217 	ldw	r4,1160(sp)
 800a55c:	d9412017 	ldw	r5,1152(sp)
 800a560:	d9811a04 	addi	r6,sp,1128
 800a564:	d9c12b15 	stw	r7,1196(sp)
 800a568:	da412d15 	stw	r9,1204(sp)
 800a56c:	da812c15 	stw	r10,1200(sp)
 800a570:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a574:	d9c12b17 	ldw	r7,1196(sp)
 800a578:	da412d17 	ldw	r9,1204(sp)
 800a57c:	da812c17 	ldw	r10,1200(sp)
 800a580:	103f151e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a584:	d9411b17 	ldw	r5,1132(sp)
 800a588:	d8c11c17 	ldw	r3,1136(sp)
 800a58c:	d811883a 	mov	r8,sp
 800a590:	28800044 	addi	r2,r5,1
 800a594:	003d6306 	br	8009b24 <__alt_data_end+0xf8009b24>
 800a598:	18009e1e 	bne	r3,zero,800a814 <___vfiprintf_internal_r+0x1318>
 800a59c:	000b883a 	mov	r5,zero
 800a5a0:	00800044 	movi	r2,1
 800a5a4:	d811883a 	mov	r8,sp
 800a5a8:	003d6d06 	br	8009b60 <__alt_data_end+0xf8009b60>
 800a5ac:	d9012217 	ldw	r4,1160(sp)
 800a5b0:	d9412017 	ldw	r5,1152(sp)
 800a5b4:	d9811a04 	addi	r6,sp,1128
 800a5b8:	d9c12b15 	stw	r7,1196(sp)
 800a5bc:	da412d15 	stw	r9,1204(sp)
 800a5c0:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a5c4:	d9c12b17 	ldw	r7,1196(sp)
 800a5c8:	da412d17 	ldw	r9,1204(sp)
 800a5cc:	103f021e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a5d0:	d8811b17 	ldw	r2,1132(sp)
 800a5d4:	d8c11c17 	ldw	r3,1136(sp)
 800a5d8:	d811883a 	mov	r8,sp
 800a5dc:	10800044 	addi	r2,r2,1
 800a5e0:	003d8a06 	br	8009c0c <__alt_data_end+0xf8009c0c>
 800a5e4:	4829883a 	mov	r20,r9
 800a5e8:	003c1706 	br	8009648 <__alt_data_end+0xf8009648>
 800a5ec:	0529c83a 	sub	r20,zero,r20
 800a5f0:	a004c03a 	cmpne	r2,r20,zero
 800a5f4:	056bc83a 	sub	r21,zero,r21
 800a5f8:	a8abc83a 	sub	r21,r21,r2
 800a5fc:	05800b44 	movi	r22,45
 800a600:	dd811d85 	stb	r22,1142(sp)
 800a604:	900f883a 	mov	r7,r18
 800a608:	00800044 	movi	r2,1
 800a60c:	a548b03a 	or	r4,r20,r21
 800a610:	003cf606 	br	80099ec <__alt_data_end+0xf80099ec>
 800a614:	00800084 	movi	r2,2
 800a618:	003dc506 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a61c:	8880100c 	andi	r2,r17,64
 800a620:	10005a26 	beq	r2,zero,800a78c <___vfiprintf_internal_r+0x1290>
 800a624:	d9012317 	ldw	r4,1164(sp)
 800a628:	002b883a 	mov	r21,zero
 800a62c:	2500000b 	ldhu	r20,0(r4)
 800a630:	21000104 	addi	r4,r4,4
 800a634:	d9012315 	stw	r4,1164(sp)
 800a638:	003ddc06 	br	8009dac <__alt_data_end+0xf8009dac>
 800a63c:	8880100c 	andi	r2,r17,64
 800a640:	10005826 	beq	r2,zero,800a7a4 <___vfiprintf_internal_r+0x12a8>
 800a644:	d9412317 	ldw	r5,1164(sp)
 800a648:	002b883a 	mov	r21,zero
 800a64c:	0005883a 	mov	r2,zero
 800a650:	2d00000b 	ldhu	r20,0(r5)
 800a654:	29400104 	addi	r5,r5,4
 800a658:	d9412315 	stw	r5,1164(sp)
 800a65c:	a009883a 	mov	r4,r20
 800a660:	003db306 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a664:	8880040c 	andi	r2,r17,16
 800a668:	1000411e 	bne	r2,zero,800a770 <___vfiprintf_internal_r+0x1274>
 800a66c:	8c40100c 	andi	r17,r17,64
 800a670:	88008726 	beq	r17,zero,800a890 <___vfiprintf_internal_r+0x1394>
 800a674:	d9412317 	ldw	r5,1164(sp)
 800a678:	d8c12417 	ldw	r3,1168(sp)
 800a67c:	28800017 	ldw	r2,0(r5)
 800a680:	29400104 	addi	r5,r5,4
 800a684:	d9412315 	stw	r5,1164(sp)
 800a688:	10c0000d 	sth	r3,0(r2)
 800a68c:	003bd206 	br	80095d8 <__alt_data_end+0xf80095d8>
 800a690:	48c00007 	ldb	r3,0(r9)
 800a694:	003bf906 	br	800967c <__alt_data_end+0xf800967c>
 800a698:	8880100c 	andi	r2,r17,64
 800a69c:	10002c26 	beq	r2,zero,800a750 <___vfiprintf_internal_r+0x1254>
 800a6a0:	d9412317 	ldw	r5,1164(sp)
 800a6a4:	002b883a 	mov	r21,zero
 800a6a8:	00800044 	movi	r2,1
 800a6ac:	2d00000b 	ldhu	r20,0(r5)
 800a6b0:	29400104 	addi	r5,r5,4
 800a6b4:	d9412315 	stw	r5,1164(sp)
 800a6b8:	a009883a 	mov	r4,r20
 800a6bc:	003d9c06 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a6c0:	8880100c 	andi	r2,r17,64
 800a6c4:	10001b26 	beq	r2,zero,800a734 <___vfiprintf_internal_r+0x1238>
 800a6c8:	d9412317 	ldw	r5,1164(sp)
 800a6cc:	2d00000f 	ldh	r20,0(r5)
 800a6d0:	29400104 	addi	r5,r5,4
 800a6d4:	d9412315 	stw	r5,1164(sp)
 800a6d8:	a02bd7fa 	srai	r21,r20,31
 800a6dc:	a805883a 	mov	r2,r21
 800a6e0:	003cbd06 	br	80099d8 <__alt_data_end+0xf80099d8>
 800a6e4:	d9012217 	ldw	r4,1160(sp)
 800a6e8:	d9412017 	ldw	r5,1152(sp)
 800a6ec:	d9811a04 	addi	r6,sp,1128
 800a6f0:	d9c12b15 	stw	r7,1196(sp)
 800a6f4:	da412d15 	stw	r9,1204(sp)
 800a6f8:	da812c15 	stw	r10,1200(sp)
 800a6fc:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a700:	d9c12b17 	ldw	r7,1196(sp)
 800a704:	da412d17 	ldw	r9,1204(sp)
 800a708:	da812c17 	ldw	r10,1200(sp)
 800a70c:	103eb21e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a710:	d9411b17 	ldw	r5,1132(sp)
 800a714:	d8c11c17 	ldw	r3,1136(sp)
 800a718:	d811883a 	mov	r8,sp
 800a71c:	28800044 	addi	r2,r5,1
 800a720:	003e7906 	br	800a108 <__alt_data_end+0xf800a108>
 800a724:	1829883a 	mov	r20,r3
 800a728:	003d7006 	br	8009cec <__alt_data_end+0xf8009cec>
 800a72c:	900f883a 	mov	r7,r18
 800a730:	003e2806 	br	8009fd4 <__alt_data_end+0xf8009fd4>
 800a734:	d8812317 	ldw	r2,1164(sp)
 800a738:	15000017 	ldw	r20,0(r2)
 800a73c:	10800104 	addi	r2,r2,4
 800a740:	d8812315 	stw	r2,1164(sp)
 800a744:	a02bd7fa 	srai	r21,r20,31
 800a748:	a805883a 	mov	r2,r21
 800a74c:	003ca206 	br	80099d8 <__alt_data_end+0xf80099d8>
 800a750:	d8812317 	ldw	r2,1164(sp)
 800a754:	002b883a 	mov	r21,zero
 800a758:	15000017 	ldw	r20,0(r2)
 800a75c:	10800104 	addi	r2,r2,4
 800a760:	d8812315 	stw	r2,1164(sp)
 800a764:	a009883a 	mov	r4,r20
 800a768:	00800044 	movi	r2,1
 800a76c:	003d7006 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a770:	d8c12317 	ldw	r3,1164(sp)
 800a774:	d9012417 	ldw	r4,1168(sp)
 800a778:	18800017 	ldw	r2,0(r3)
 800a77c:	18c00104 	addi	r3,r3,4
 800a780:	d8c12315 	stw	r3,1164(sp)
 800a784:	11000015 	stw	r4,0(r2)
 800a788:	003b9306 	br	80095d8 <__alt_data_end+0xf80095d8>
 800a78c:	d9412317 	ldw	r5,1164(sp)
 800a790:	002b883a 	mov	r21,zero
 800a794:	2d000017 	ldw	r20,0(r5)
 800a798:	29400104 	addi	r5,r5,4
 800a79c:	d9412315 	stw	r5,1164(sp)
 800a7a0:	003d8206 	br	8009dac <__alt_data_end+0xf8009dac>
 800a7a4:	d8812317 	ldw	r2,1164(sp)
 800a7a8:	002b883a 	mov	r21,zero
 800a7ac:	15000017 	ldw	r20,0(r2)
 800a7b0:	10800104 	addi	r2,r2,4
 800a7b4:	d8812315 	stw	r2,1164(sp)
 800a7b8:	a009883a 	mov	r4,r20
 800a7bc:	0005883a 	mov	r2,zero
 800a7c0:	003d5b06 	br	8009d30 <__alt_data_end+0xf8009d30>
 800a7c4:	04bfffc4 	movi	r18,-1
 800a7c8:	900d883a 	mov	r6,r18
 800a7cc:	003bac06 	br	8009680 <__alt_data_end+0xf8009680>
 800a7d0:	4a400044 	addi	r9,r9,1
 800a7d4:	8c400814 	ori	r17,r17,32
 800a7d8:	10c00047 	ldb	r3,1(r2)
 800a7dc:	003ba706 	br	800967c <__alt_data_end+0xf800967c>
 800a7e0:	d8c11f17 	ldw	r3,1148(sp)
 800a7e4:	1dcfc83a 	sub	r7,r3,r23
 800a7e8:	003c8d06 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a7ec:	da012b15 	stw	r8,1196(sp)
 800a7f0:	da412d15 	stw	r9,1204(sp)
 800a7f4:	80021500 	call	8002150 <strlen>
 800a7f8:	100f883a 	mov	r7,r2
 800a7fc:	dd811d83 	ldbu	r22,1142(sp)
 800a800:	dd412315 	stw	r21,1164(sp)
 800a804:	0025883a 	mov	r18,zero
 800a808:	da012b17 	ldw	r8,1196(sp)
 800a80c:	da412d17 	ldw	r9,1204(sp)
 800a810:	003c8306 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a814:	d9012217 	ldw	r4,1160(sp)
 800a818:	d9412017 	ldw	r5,1152(sp)
 800a81c:	d9811a04 	addi	r6,sp,1128
 800a820:	d9c12b15 	stw	r7,1196(sp)
 800a824:	da412d15 	stw	r9,1204(sp)
 800a828:	80093e80 	call	80093e8 <__sprint_r.part.0>
 800a82c:	d9c12b17 	ldw	r7,1196(sp)
 800a830:	da412d17 	ldw	r9,1204(sp)
 800a834:	103e681e 	bne	r2,zero,800a1d8 <__alt_data_end+0xf800a1d8>
 800a838:	d9411b17 	ldw	r5,1132(sp)
 800a83c:	d8c11c17 	ldw	r3,1136(sp)
 800a840:	d811883a 	mov	r8,sp
 800a844:	28800044 	addi	r2,r5,1
 800a848:	003cc506 	br	8009b60 <__alt_data_end+0xf8009b60>
 800a84c:	d9411b17 	ldw	r5,1132(sp)
 800a850:	01020074 	movhi	r4,2049
 800a854:	21067e04 	addi	r4,r4,6648
 800a858:	d9012515 	stw	r4,1172(sp)
 800a85c:	29400044 	addi	r5,r5,1
 800a860:	003ca406 	br	8009af4 <__alt_data_end+0xf8009af4>
 800a864:	00800184 	movi	r2,6
 800a868:	300f883a 	mov	r7,r6
 800a86c:	1180012e 	bgeu	r2,r6,800a874 <___vfiprintf_internal_r+0x1378>
 800a870:	100f883a 	mov	r7,r2
 800a874:	3829883a 	mov	r20,r7
 800a878:	38001e16 	blt	r7,zero,800a8f4 <___vfiprintf_internal_r+0x13f8>
 800a87c:	dd412315 	stw	r21,1164(sp)
 800a880:	05c20074 	movhi	r23,2049
 800a884:	bdc61e04 	addi	r23,r23,6264
 800a888:	0025883a 	mov	r18,zero
 800a88c:	003c6c06 	br	8009a40 <__alt_data_end+0xf8009a40>
 800a890:	d9012317 	ldw	r4,1164(sp)
 800a894:	d9412417 	ldw	r5,1168(sp)
 800a898:	20800017 	ldw	r2,0(r4)
 800a89c:	21000104 	addi	r4,r4,4
 800a8a0:	d9012315 	stw	r4,1164(sp)
 800a8a4:	11400015 	stw	r5,0(r2)
 800a8a8:	003b4b06 	br	80095d8 <__alt_data_end+0xf80095d8>
 800a8ac:	d9411b17 	ldw	r5,1132(sp)
 800a8b0:	00820074 	movhi	r2,2049
 800a8b4:	10867e04 	addi	r2,r2,6648
 800a8b8:	d8812515 	stw	r2,1172(sp)
 800a8bc:	29400044 	addi	r5,r5,1
 800a8c0:	003cff06 	br	8009cc0 <__alt_data_end+0xf8009cc0>
 800a8c4:	1009883a 	mov	r4,r2
 800a8c8:	05420074 	movhi	r21,2049
 800a8cc:	ad467a04 	addi	r21,r21,6632
 800a8d0:	003e9906 	br	800a338 <__alt_data_end+0xf800a338>
 800a8d4:	900f883a 	mov	r7,r18
 800a8d8:	dd811d83 	ldbu	r22,1142(sp)
 800a8dc:	dd412315 	stw	r21,1164(sp)
 800a8e0:	0025883a 	mov	r18,zero
 800a8e4:	003c4e06 	br	8009a20 <__alt_data_end+0xf8009a20>
 800a8e8:	1013883a 	mov	r9,r2
 800a8ec:	000d883a 	mov	r6,zero
 800a8f0:	003b6306 	br	8009680 <__alt_data_end+0xf8009680>
 800a8f4:	0029883a 	mov	r20,zero
 800a8f8:	003fe006 	br	800a87c <__alt_data_end+0xf800a87c>
 800a8fc:	043fffc4 	movi	r16,-1
 800a900:	003bf306 	br	80098d0 <__alt_data_end+0xf80098d0>
 800a904:	d9412317 	ldw	r5,1164(sp)
 800a908:	48c00043 	ldbu	r3,1(r9)
 800a90c:	1013883a 	mov	r9,r2
 800a910:	29800017 	ldw	r6,0(r5)
 800a914:	29000104 	addi	r4,r5,4
 800a918:	d9012315 	stw	r4,1164(sp)
 800a91c:	30000416 	blt	r6,zero,800a930 <___vfiprintf_internal_r+0x1434>
 800a920:	18c03fcc 	andi	r3,r3,255
 800a924:	18c0201c 	xori	r3,r3,128
 800a928:	18ffe004 	addi	r3,r3,-128
 800a92c:	003b5306 	br	800967c <__alt_data_end+0xf800967c>
 800a930:	18c03fcc 	andi	r3,r3,255
 800a934:	18c0201c 	xori	r3,r3,128
 800a938:	01bfffc4 	movi	r6,-1
 800a93c:	18ffe004 	addi	r3,r3,-128
 800a940:	003b4e06 	br	800967c <__alt_data_end+0xf800967c>

0800a944 <__vfiprintf_internal>:
 800a944:	00820074 	movhi	r2,2049
 800a948:	108d7904 	addi	r2,r2,13796
 800a94c:	2007883a 	mov	r3,r4
 800a950:	11000017 	ldw	r4,0(r2)
 800a954:	2805883a 	mov	r2,r5
 800a958:	300f883a 	mov	r7,r6
 800a95c:	180b883a 	mov	r5,r3
 800a960:	100d883a 	mov	r6,r2
 800a964:	80094fc1 	jmpi	80094fc <___vfiprintf_internal_r>

0800a968 <_write_r>:
 800a968:	defffd04 	addi	sp,sp,-12
 800a96c:	dc400115 	stw	r17,4(sp)
 800a970:	dc000015 	stw	r16,0(sp)
 800a974:	2023883a 	mov	r17,r4
 800a978:	04020074 	movhi	r16,2049
 800a97c:	84144a04 	addi	r16,r16,20776
 800a980:	2809883a 	mov	r4,r5
 800a984:	300b883a 	mov	r5,r6
 800a988:	380d883a 	mov	r6,r7
 800a98c:	dfc00215 	stw	ra,8(sp)
 800a990:	80000015 	stw	zero,0(r16)
 800a994:	800f1d40 	call	800f1d4 <write>
 800a998:	00ffffc4 	movi	r3,-1
 800a99c:	10c00526 	beq	r2,r3,800a9b4 <_write_r+0x4c>
 800a9a0:	dfc00217 	ldw	ra,8(sp)
 800a9a4:	dc400117 	ldw	r17,4(sp)
 800a9a8:	dc000017 	ldw	r16,0(sp)
 800a9ac:	dec00304 	addi	sp,sp,12
 800a9b0:	f800283a 	ret
 800a9b4:	80c00017 	ldw	r3,0(r16)
 800a9b8:	183ff926 	beq	r3,zero,800a9a0 <__alt_data_end+0xf800a9a0>
 800a9bc:	88c00015 	stw	r3,0(r17)
 800a9c0:	dfc00217 	ldw	ra,8(sp)
 800a9c4:	dc400117 	ldw	r17,4(sp)
 800a9c8:	dc000017 	ldw	r16,0(sp)
 800a9cc:	dec00304 	addi	sp,sp,12
 800a9d0:	f800283a 	ret

0800a9d4 <_close_r>:
 800a9d4:	defffd04 	addi	sp,sp,-12
 800a9d8:	dc400115 	stw	r17,4(sp)
 800a9dc:	dc000015 	stw	r16,0(sp)
 800a9e0:	2023883a 	mov	r17,r4
 800a9e4:	04020074 	movhi	r16,2049
 800a9e8:	84144a04 	addi	r16,r16,20776
 800a9ec:	2809883a 	mov	r4,r5
 800a9f0:	dfc00215 	stw	ra,8(sp)
 800a9f4:	80000015 	stw	zero,0(r16)
 800a9f8:	800e9200 	call	800e920 <close>
 800a9fc:	00ffffc4 	movi	r3,-1
 800aa00:	10c00526 	beq	r2,r3,800aa18 <_close_r+0x44>
 800aa04:	dfc00217 	ldw	ra,8(sp)
 800aa08:	dc400117 	ldw	r17,4(sp)
 800aa0c:	dc000017 	ldw	r16,0(sp)
 800aa10:	dec00304 	addi	sp,sp,12
 800aa14:	f800283a 	ret
 800aa18:	80c00017 	ldw	r3,0(r16)
 800aa1c:	183ff926 	beq	r3,zero,800aa04 <__alt_data_end+0xf800aa04>
 800aa20:	88c00015 	stw	r3,0(r17)
 800aa24:	dfc00217 	ldw	ra,8(sp)
 800aa28:	dc400117 	ldw	r17,4(sp)
 800aa2c:	dc000017 	ldw	r16,0(sp)
 800aa30:	dec00304 	addi	sp,sp,12
 800aa34:	f800283a 	ret

0800aa38 <_calloc_r>:
 800aa38:	defffe04 	addi	sp,sp,-8
 800aa3c:	dc000015 	stw	r16,0(sp)
 800aa40:	2021883a 	mov	r16,r4
 800aa44:	2809883a 	mov	r4,r5
 800aa48:	300b883a 	mov	r5,r6
 800aa4c:	dfc00115 	stw	ra,4(sp)
 800aa50:	800c1240 	call	800c124 <__mulsi3>
 800aa54:	8009883a 	mov	r4,r16
 800aa58:	100b883a 	mov	r5,r2
 800aa5c:	8006fa80 	call	8006fa8 <_malloc_r>
 800aa60:	1021883a 	mov	r16,r2
 800aa64:	10002826 	beq	r2,zero,800ab08 <_calloc_r+0xd0>
 800aa68:	11bfff17 	ldw	r6,-4(r2)
 800aa6c:	00ffff04 	movi	r3,-4
 800aa70:	00800904 	movi	r2,36
 800aa74:	30cc703a 	and	r6,r6,r3
 800aa78:	30cd883a 	add	r6,r6,r3
 800aa7c:	11801436 	bltu	r2,r6,800aad0 <_calloc_r+0x98>
 800aa80:	00c004c4 	movi	r3,19
 800aa84:	19800936 	bltu	r3,r6,800aaac <_calloc_r+0x74>
 800aa88:	8005883a 	mov	r2,r16
 800aa8c:	10000015 	stw	zero,0(r2)
 800aa90:	10000115 	stw	zero,4(r2)
 800aa94:	10000215 	stw	zero,8(r2)
 800aa98:	8005883a 	mov	r2,r16
 800aa9c:	dfc00117 	ldw	ra,4(sp)
 800aaa0:	dc000017 	ldw	r16,0(sp)
 800aaa4:	dec00204 	addi	sp,sp,8
 800aaa8:	f800283a 	ret
 800aaac:	80000015 	stw	zero,0(r16)
 800aab0:	80000115 	stw	zero,4(r16)
 800aab4:	00c006c4 	movi	r3,27
 800aab8:	19800d2e 	bgeu	r3,r6,800aaf0 <_calloc_r+0xb8>
 800aabc:	80000215 	stw	zero,8(r16)
 800aac0:	80000315 	stw	zero,12(r16)
 800aac4:	30800c26 	beq	r6,r2,800aaf8 <_calloc_r+0xc0>
 800aac8:	80800404 	addi	r2,r16,16
 800aacc:	003fef06 	br	800aa8c <__alt_data_end+0xf800aa8c>
 800aad0:	8009883a 	mov	r4,r16
 800aad4:	000b883a 	mov	r5,zero
 800aad8:	8007a9c0 	call	8007a9c <memset>
 800aadc:	8005883a 	mov	r2,r16
 800aae0:	dfc00117 	ldw	ra,4(sp)
 800aae4:	dc000017 	ldw	r16,0(sp)
 800aae8:	dec00204 	addi	sp,sp,8
 800aaec:	f800283a 	ret
 800aaf0:	80800204 	addi	r2,r16,8
 800aaf4:	003fe506 	br	800aa8c <__alt_data_end+0xf800aa8c>
 800aaf8:	80000415 	stw	zero,16(r16)
 800aafc:	80800604 	addi	r2,r16,24
 800ab00:	80000515 	stw	zero,20(r16)
 800ab04:	003fe106 	br	800aa8c <__alt_data_end+0xf800aa8c>
 800ab08:	0005883a 	mov	r2,zero
 800ab0c:	003fe306 	br	800aa9c <__alt_data_end+0xf800aa9c>

0800ab10 <_fclose_r>:
 800ab10:	defffc04 	addi	sp,sp,-16
 800ab14:	dc000015 	stw	r16,0(sp)
 800ab18:	dfc00315 	stw	ra,12(sp)
 800ab1c:	dc800215 	stw	r18,8(sp)
 800ab20:	dc400115 	stw	r17,4(sp)
 800ab24:	2821883a 	mov	r16,r5
 800ab28:	28003126 	beq	r5,zero,800abf0 <_fclose_r+0xe0>
 800ab2c:	2023883a 	mov	r17,r4
 800ab30:	80062c80 	call	80062c8 <__sfp_lock_acquire>
 800ab34:	88000226 	beq	r17,zero,800ab40 <_fclose_r+0x30>
 800ab38:	88800e17 	ldw	r2,56(r17)
 800ab3c:	10003326 	beq	r2,zero,800ac0c <_fclose_r+0xfc>
 800ab40:	8080030f 	ldh	r2,12(r16)
 800ab44:	10002226 	beq	r2,zero,800abd0 <_fclose_r+0xc0>
 800ab48:	8809883a 	mov	r4,r17
 800ab4c:	800b883a 	mov	r5,r16
 800ab50:	8005cf00 	call	8005cf0 <_fflush_r>
 800ab54:	80c00b17 	ldw	r3,44(r16)
 800ab58:	1025883a 	mov	r18,r2
 800ab5c:	18000426 	beq	r3,zero,800ab70 <_fclose_r+0x60>
 800ab60:	81400717 	ldw	r5,28(r16)
 800ab64:	8809883a 	mov	r4,r17
 800ab68:	183ee83a 	callr	r3
 800ab6c:	10003016 	blt	r2,zero,800ac30 <_fclose_r+0x120>
 800ab70:	8080030b 	ldhu	r2,12(r16)
 800ab74:	1080200c 	andi	r2,r2,128
 800ab78:	1000291e 	bne	r2,zero,800ac20 <_fclose_r+0x110>
 800ab7c:	81400c17 	ldw	r5,48(r16)
 800ab80:	28000526 	beq	r5,zero,800ab98 <_fclose_r+0x88>
 800ab84:	80801004 	addi	r2,r16,64
 800ab88:	28800226 	beq	r5,r2,800ab94 <_fclose_r+0x84>
 800ab8c:	8809883a 	mov	r4,r17
 800ab90:	80064440 	call	8006444 <_free_r>
 800ab94:	80000c15 	stw	zero,48(r16)
 800ab98:	81401117 	ldw	r5,68(r16)
 800ab9c:	28000326 	beq	r5,zero,800abac <_fclose_r+0x9c>
 800aba0:	8809883a 	mov	r4,r17
 800aba4:	80064440 	call	8006444 <_free_r>
 800aba8:	80001115 	stw	zero,68(r16)
 800abac:	8000030d 	sth	zero,12(r16)
 800abb0:	80062cc0 	call	80062cc <__sfp_lock_release>
 800abb4:	9005883a 	mov	r2,r18
 800abb8:	dfc00317 	ldw	ra,12(sp)
 800abbc:	dc800217 	ldw	r18,8(sp)
 800abc0:	dc400117 	ldw	r17,4(sp)
 800abc4:	dc000017 	ldw	r16,0(sp)
 800abc8:	dec00404 	addi	sp,sp,16
 800abcc:	f800283a 	ret
 800abd0:	80062cc0 	call	80062cc <__sfp_lock_release>
 800abd4:	0005883a 	mov	r2,zero
 800abd8:	dfc00317 	ldw	ra,12(sp)
 800abdc:	dc800217 	ldw	r18,8(sp)
 800abe0:	dc400117 	ldw	r17,4(sp)
 800abe4:	dc000017 	ldw	r16,0(sp)
 800abe8:	dec00404 	addi	sp,sp,16
 800abec:	f800283a 	ret
 800abf0:	0005883a 	mov	r2,zero
 800abf4:	dfc00317 	ldw	ra,12(sp)
 800abf8:	dc800217 	ldw	r18,8(sp)
 800abfc:	dc400117 	ldw	r17,4(sp)
 800ac00:	dc000017 	ldw	r16,0(sp)
 800ac04:	dec00404 	addi	sp,sp,16
 800ac08:	f800283a 	ret
 800ac0c:	8809883a 	mov	r4,r17
 800ac10:	80060100 	call	8006010 <__sinit>
 800ac14:	8080030f 	ldh	r2,12(r16)
 800ac18:	103fcb1e 	bne	r2,zero,800ab48 <__alt_data_end+0xf800ab48>
 800ac1c:	003fec06 	br	800abd0 <__alt_data_end+0xf800abd0>
 800ac20:	81400417 	ldw	r5,16(r16)
 800ac24:	8809883a 	mov	r4,r17
 800ac28:	80064440 	call	8006444 <_free_r>
 800ac2c:	003fd306 	br	800ab7c <__alt_data_end+0xf800ab7c>
 800ac30:	04bfffc4 	movi	r18,-1
 800ac34:	003fce06 	br	800ab70 <__alt_data_end+0xf800ab70>

0800ac38 <fclose>:
 800ac38:	00820074 	movhi	r2,2049
 800ac3c:	108d7904 	addi	r2,r2,13796
 800ac40:	200b883a 	mov	r5,r4
 800ac44:	11000017 	ldw	r4,0(r2)
 800ac48:	800ab101 	jmpi	800ab10 <_fclose_r>

0800ac4c <_fputwc_r>:
 800ac4c:	3080030b 	ldhu	r2,12(r6)
 800ac50:	defff804 	addi	sp,sp,-32
 800ac54:	dcc00415 	stw	r19,16(sp)
 800ac58:	dc800315 	stw	r18,12(sp)
 800ac5c:	dc000115 	stw	r16,4(sp)
 800ac60:	dfc00715 	stw	ra,28(sp)
 800ac64:	dd400615 	stw	r21,24(sp)
 800ac68:	dd000515 	stw	r20,20(sp)
 800ac6c:	dc400215 	stw	r17,8(sp)
 800ac70:	10c8000c 	andi	r3,r2,8192
 800ac74:	3021883a 	mov	r16,r6
 800ac78:	2027883a 	mov	r19,r4
 800ac7c:	2825883a 	mov	r18,r5
 800ac80:	1800051e 	bne	r3,zero,800ac98 <_fputwc_r+0x4c>
 800ac84:	30c01917 	ldw	r3,100(r6)
 800ac88:	10880014 	ori	r2,r2,8192
 800ac8c:	3080030d 	sth	r2,12(r6)
 800ac90:	18880014 	ori	r2,r3,8192
 800ac94:	30801915 	stw	r2,100(r6)
 800ac98:	8006d9c0 	call	8006d9c <__locale_mb_cur_max>
 800ac9c:	00c00044 	movi	r3,1
 800aca0:	10c03e26 	beq	r2,r3,800ad9c <_fputwc_r+0x150>
 800aca4:	9809883a 	mov	r4,r19
 800aca8:	d80b883a 	mov	r5,sp
 800acac:	900d883a 	mov	r6,r18
 800acb0:	81c01704 	addi	r7,r16,92
 800acb4:	800b1880 	call	800b188 <_wcrtomb_r>
 800acb8:	1029883a 	mov	r20,r2
 800acbc:	00bfffc4 	movi	r2,-1
 800acc0:	a0802026 	beq	r20,r2,800ad44 <_fputwc_r+0xf8>
 800acc4:	d9400003 	ldbu	r5,0(sp)
 800acc8:	a0001c26 	beq	r20,zero,800ad3c <_fputwc_r+0xf0>
 800accc:	0023883a 	mov	r17,zero
 800acd0:	05400284 	movi	r21,10
 800acd4:	00000906 	br	800acfc <_fputwc_r+0xb0>
 800acd8:	80c00017 	ldw	r3,0(r16)
 800acdc:	19400005 	stb	r5,0(r3)
 800ace0:	80c00017 	ldw	r3,0(r16)
 800ace4:	18c00044 	addi	r3,r3,1
 800ace8:	80c00015 	stw	r3,0(r16)
 800acec:	8c400044 	addi	r17,r17,1
 800acf0:	dc47883a 	add	r3,sp,r17
 800acf4:	8d00112e 	bgeu	r17,r20,800ad3c <_fputwc_r+0xf0>
 800acf8:	19400003 	ldbu	r5,0(r3)
 800acfc:	80c00217 	ldw	r3,8(r16)
 800ad00:	18ffffc4 	addi	r3,r3,-1
 800ad04:	80c00215 	stw	r3,8(r16)
 800ad08:	183ff30e 	bge	r3,zero,800acd8 <__alt_data_end+0xf800acd8>
 800ad0c:	80800617 	ldw	r2,24(r16)
 800ad10:	18801916 	blt	r3,r2,800ad78 <_fputwc_r+0x12c>
 800ad14:	80800017 	ldw	r2,0(r16)
 800ad18:	11400005 	stb	r5,0(r2)
 800ad1c:	80800017 	ldw	r2,0(r16)
 800ad20:	10c00003 	ldbu	r3,0(r2)
 800ad24:	10800044 	addi	r2,r2,1
 800ad28:	1d402326 	beq	r3,r21,800adb8 <_fputwc_r+0x16c>
 800ad2c:	8c400044 	addi	r17,r17,1
 800ad30:	80800015 	stw	r2,0(r16)
 800ad34:	dc47883a 	add	r3,sp,r17
 800ad38:	8d3fef36 	bltu	r17,r20,800acf8 <__alt_data_end+0xf800acf8>
 800ad3c:	9005883a 	mov	r2,r18
 800ad40:	00000406 	br	800ad54 <_fputwc_r+0x108>
 800ad44:	80c0030b 	ldhu	r3,12(r16)
 800ad48:	a005883a 	mov	r2,r20
 800ad4c:	18c01014 	ori	r3,r3,64
 800ad50:	80c0030d 	sth	r3,12(r16)
 800ad54:	dfc00717 	ldw	ra,28(sp)
 800ad58:	dd400617 	ldw	r21,24(sp)
 800ad5c:	dd000517 	ldw	r20,20(sp)
 800ad60:	dcc00417 	ldw	r19,16(sp)
 800ad64:	dc800317 	ldw	r18,12(sp)
 800ad68:	dc400217 	ldw	r17,8(sp)
 800ad6c:	dc000117 	ldw	r16,4(sp)
 800ad70:	dec00804 	addi	sp,sp,32
 800ad74:	f800283a 	ret
 800ad78:	9809883a 	mov	r4,r19
 800ad7c:	29403fcc 	andi	r5,r5,255
 800ad80:	800d883a 	mov	r6,r16
 800ad84:	800afec0 	call	800afec <__swbuf_r>
 800ad88:	10bfffe0 	cmpeqi	r2,r2,-1
 800ad8c:	10803fcc 	andi	r2,r2,255
 800ad90:	103fd626 	beq	r2,zero,800acec <__alt_data_end+0xf800acec>
 800ad94:	00bfffc4 	movi	r2,-1
 800ad98:	003fee06 	br	800ad54 <__alt_data_end+0xf800ad54>
 800ad9c:	90ffffc4 	addi	r3,r18,-1
 800ada0:	01003f84 	movi	r4,254
 800ada4:	20ffbf36 	bltu	r4,r3,800aca4 <__alt_data_end+0xf800aca4>
 800ada8:	900b883a 	mov	r5,r18
 800adac:	dc800005 	stb	r18,0(sp)
 800adb0:	1029883a 	mov	r20,r2
 800adb4:	003fc506 	br	800accc <__alt_data_end+0xf800accc>
 800adb8:	9809883a 	mov	r4,r19
 800adbc:	a80b883a 	mov	r5,r21
 800adc0:	800d883a 	mov	r6,r16
 800adc4:	800afec0 	call	800afec <__swbuf_r>
 800adc8:	10bfffe0 	cmpeqi	r2,r2,-1
 800adcc:	003fef06 	br	800ad8c <__alt_data_end+0xf800ad8c>

0800add0 <fputwc>:
 800add0:	defffc04 	addi	sp,sp,-16
 800add4:	dc000115 	stw	r16,4(sp)
 800add8:	04020074 	movhi	r16,2049
 800addc:	840d7904 	addi	r16,r16,13796
 800ade0:	80800017 	ldw	r2,0(r16)
 800ade4:	dc400215 	stw	r17,8(sp)
 800ade8:	dfc00315 	stw	ra,12(sp)
 800adec:	2023883a 	mov	r17,r4
 800adf0:	280d883a 	mov	r6,r5
 800adf4:	10000d26 	beq	r2,zero,800ae2c <fputwc+0x5c>
 800adf8:	10c00e17 	ldw	r3,56(r2)
 800adfc:	1009883a 	mov	r4,r2
 800ae00:	1800041e 	bne	r3,zero,800ae14 <fputwc+0x44>
 800ae04:	d9400015 	stw	r5,0(sp)
 800ae08:	80060100 	call	8006010 <__sinit>
 800ae0c:	81000017 	ldw	r4,0(r16)
 800ae10:	d9800017 	ldw	r6,0(sp)
 800ae14:	880b883a 	mov	r5,r17
 800ae18:	dfc00317 	ldw	ra,12(sp)
 800ae1c:	dc400217 	ldw	r17,8(sp)
 800ae20:	dc000117 	ldw	r16,4(sp)
 800ae24:	dec00404 	addi	sp,sp,16
 800ae28:	800ac4c1 	jmpi	800ac4c <_fputwc_r>
 800ae2c:	0009883a 	mov	r4,zero
 800ae30:	880b883a 	mov	r5,r17
 800ae34:	dfc00317 	ldw	ra,12(sp)
 800ae38:	dc400217 	ldw	r17,8(sp)
 800ae3c:	dc000117 	ldw	r16,4(sp)
 800ae40:	dec00404 	addi	sp,sp,16
 800ae44:	800ac4c1 	jmpi	800ac4c <_fputwc_r>

0800ae48 <_fstat_r>:
 800ae48:	defffd04 	addi	sp,sp,-12
 800ae4c:	dc400115 	stw	r17,4(sp)
 800ae50:	dc000015 	stw	r16,0(sp)
 800ae54:	2023883a 	mov	r17,r4
 800ae58:	04020074 	movhi	r16,2049
 800ae5c:	84144a04 	addi	r16,r16,20776
 800ae60:	2809883a 	mov	r4,r5
 800ae64:	300b883a 	mov	r5,r6
 800ae68:	dfc00215 	stw	ra,8(sp)
 800ae6c:	80000015 	stw	zero,0(r16)
 800ae70:	800ea6c0 	call	800ea6c <fstat>
 800ae74:	00ffffc4 	movi	r3,-1
 800ae78:	10c00526 	beq	r2,r3,800ae90 <_fstat_r+0x48>
 800ae7c:	dfc00217 	ldw	ra,8(sp)
 800ae80:	dc400117 	ldw	r17,4(sp)
 800ae84:	dc000017 	ldw	r16,0(sp)
 800ae88:	dec00304 	addi	sp,sp,12
 800ae8c:	f800283a 	ret
 800ae90:	80c00017 	ldw	r3,0(r16)
 800ae94:	183ff926 	beq	r3,zero,800ae7c <__alt_data_end+0xf800ae7c>
 800ae98:	88c00015 	stw	r3,0(r17)
 800ae9c:	dfc00217 	ldw	ra,8(sp)
 800aea0:	dc400117 	ldw	r17,4(sp)
 800aea4:	dc000017 	ldw	r16,0(sp)
 800aea8:	dec00304 	addi	sp,sp,12
 800aeac:	f800283a 	ret

0800aeb0 <_isatty_r>:
 800aeb0:	defffd04 	addi	sp,sp,-12
 800aeb4:	dc400115 	stw	r17,4(sp)
 800aeb8:	dc000015 	stw	r16,0(sp)
 800aebc:	2023883a 	mov	r17,r4
 800aec0:	04020074 	movhi	r16,2049
 800aec4:	84144a04 	addi	r16,r16,20776
 800aec8:	2809883a 	mov	r4,r5
 800aecc:	dfc00215 	stw	ra,8(sp)
 800aed0:	80000015 	stw	zero,0(r16)
 800aed4:	800eb700 	call	800eb70 <isatty>
 800aed8:	00ffffc4 	movi	r3,-1
 800aedc:	10c00526 	beq	r2,r3,800aef4 <_isatty_r+0x44>
 800aee0:	dfc00217 	ldw	ra,8(sp)
 800aee4:	dc400117 	ldw	r17,4(sp)
 800aee8:	dc000017 	ldw	r16,0(sp)
 800aeec:	dec00304 	addi	sp,sp,12
 800aef0:	f800283a 	ret
 800aef4:	80c00017 	ldw	r3,0(r16)
 800aef8:	183ff926 	beq	r3,zero,800aee0 <__alt_data_end+0xf800aee0>
 800aefc:	88c00015 	stw	r3,0(r17)
 800af00:	dfc00217 	ldw	ra,8(sp)
 800af04:	dc400117 	ldw	r17,4(sp)
 800af08:	dc000017 	ldw	r16,0(sp)
 800af0c:	dec00304 	addi	sp,sp,12
 800af10:	f800283a 	ret

0800af14 <_lseek_r>:
 800af14:	defffd04 	addi	sp,sp,-12
 800af18:	dc400115 	stw	r17,4(sp)
 800af1c:	dc000015 	stw	r16,0(sp)
 800af20:	2023883a 	mov	r17,r4
 800af24:	04020074 	movhi	r16,2049
 800af28:	84144a04 	addi	r16,r16,20776
 800af2c:	2809883a 	mov	r4,r5
 800af30:	300b883a 	mov	r5,r6
 800af34:	380d883a 	mov	r6,r7
 800af38:	dfc00215 	stw	ra,8(sp)
 800af3c:	80000015 	stw	zero,0(r16)
 800af40:	800ed4c0 	call	800ed4c <lseek>
 800af44:	00ffffc4 	movi	r3,-1
 800af48:	10c00526 	beq	r2,r3,800af60 <_lseek_r+0x4c>
 800af4c:	dfc00217 	ldw	ra,8(sp)
 800af50:	dc400117 	ldw	r17,4(sp)
 800af54:	dc000017 	ldw	r16,0(sp)
 800af58:	dec00304 	addi	sp,sp,12
 800af5c:	f800283a 	ret
 800af60:	80c00017 	ldw	r3,0(r16)
 800af64:	183ff926 	beq	r3,zero,800af4c <__alt_data_end+0xf800af4c>
 800af68:	88c00015 	stw	r3,0(r17)
 800af6c:	dfc00217 	ldw	ra,8(sp)
 800af70:	dc400117 	ldw	r17,4(sp)
 800af74:	dc000017 	ldw	r16,0(sp)
 800af78:	dec00304 	addi	sp,sp,12
 800af7c:	f800283a 	ret

0800af80 <_read_r>:
 800af80:	defffd04 	addi	sp,sp,-12
 800af84:	dc400115 	stw	r17,4(sp)
 800af88:	dc000015 	stw	r16,0(sp)
 800af8c:	2023883a 	mov	r17,r4
 800af90:	04020074 	movhi	r16,2049
 800af94:	84144a04 	addi	r16,r16,20776
 800af98:	2809883a 	mov	r4,r5
 800af9c:	300b883a 	mov	r5,r6
 800afa0:	380d883a 	mov	r6,r7
 800afa4:	dfc00215 	stw	ra,8(sp)
 800afa8:	80000015 	stw	zero,0(r16)
 800afac:	800ef2c0 	call	800ef2c <read>
 800afb0:	00ffffc4 	movi	r3,-1
 800afb4:	10c00526 	beq	r2,r3,800afcc <_read_r+0x4c>
 800afb8:	dfc00217 	ldw	ra,8(sp)
 800afbc:	dc400117 	ldw	r17,4(sp)
 800afc0:	dc000017 	ldw	r16,0(sp)
 800afc4:	dec00304 	addi	sp,sp,12
 800afc8:	f800283a 	ret
 800afcc:	80c00017 	ldw	r3,0(r16)
 800afd0:	183ff926 	beq	r3,zero,800afb8 <__alt_data_end+0xf800afb8>
 800afd4:	88c00015 	stw	r3,0(r17)
 800afd8:	dfc00217 	ldw	ra,8(sp)
 800afdc:	dc400117 	ldw	r17,4(sp)
 800afe0:	dc000017 	ldw	r16,0(sp)
 800afe4:	dec00304 	addi	sp,sp,12
 800afe8:	f800283a 	ret

0800afec <__swbuf_r>:
 800afec:	defffc04 	addi	sp,sp,-16
 800aff0:	dc800215 	stw	r18,8(sp)
 800aff4:	dc400115 	stw	r17,4(sp)
 800aff8:	dc000015 	stw	r16,0(sp)
 800affc:	dfc00315 	stw	ra,12(sp)
 800b000:	2023883a 	mov	r17,r4
 800b004:	2825883a 	mov	r18,r5
 800b008:	3021883a 	mov	r16,r6
 800b00c:	20000226 	beq	r4,zero,800b018 <__swbuf_r+0x2c>
 800b010:	20800e17 	ldw	r2,56(r4)
 800b014:	10004d26 	beq	r2,zero,800b14c <__swbuf_r+0x160>
 800b018:	80800617 	ldw	r2,24(r16)
 800b01c:	80c0030b 	ldhu	r3,12(r16)
 800b020:	80800215 	stw	r2,8(r16)
 800b024:	1880020c 	andi	r2,r3,8
 800b028:	10004126 	beq	r2,zero,800b130 <__swbuf_r+0x144>
 800b02c:	80800417 	ldw	r2,16(r16)
 800b030:	10003f26 	beq	r2,zero,800b130 <__swbuf_r+0x144>
 800b034:	1908000c 	andi	r4,r3,8192
 800b038:	94803fcc 	andi	r18,r18,255
 800b03c:	20001726 	beq	r4,zero,800b09c <__swbuf_r+0xb0>
 800b040:	80c00017 	ldw	r3,0(r16)
 800b044:	81000517 	ldw	r4,20(r16)
 800b048:	1885c83a 	sub	r2,r3,r2
 800b04c:	11001d0e 	bge	r2,r4,800b0c4 <__swbuf_r+0xd8>
 800b050:	81000217 	ldw	r4,8(r16)
 800b054:	19400044 	addi	r5,r3,1
 800b058:	81400015 	stw	r5,0(r16)
 800b05c:	213fffc4 	addi	r4,r4,-1
 800b060:	81000215 	stw	r4,8(r16)
 800b064:	1c800005 	stb	r18,0(r3)
 800b068:	80c00517 	ldw	r3,20(r16)
 800b06c:	10800044 	addi	r2,r2,1
 800b070:	18802226 	beq	r3,r2,800b0fc <__swbuf_r+0x110>
 800b074:	8080030b 	ldhu	r2,12(r16)
 800b078:	1080004c 	andi	r2,r2,1
 800b07c:	1000251e 	bne	r2,zero,800b114 <__swbuf_r+0x128>
 800b080:	9005883a 	mov	r2,r18
 800b084:	dfc00317 	ldw	ra,12(sp)
 800b088:	dc800217 	ldw	r18,8(sp)
 800b08c:	dc400117 	ldw	r17,4(sp)
 800b090:	dc000017 	ldw	r16,0(sp)
 800b094:	dec00404 	addi	sp,sp,16
 800b098:	f800283a 	ret
 800b09c:	81401917 	ldw	r5,100(r16)
 800b0a0:	18c80014 	ori	r3,r3,8192
 800b0a4:	0137ffc4 	movi	r4,-8193
 800b0a8:	2908703a 	and	r4,r5,r4
 800b0ac:	80c0030d 	sth	r3,12(r16)
 800b0b0:	80c00017 	ldw	r3,0(r16)
 800b0b4:	81001915 	stw	r4,100(r16)
 800b0b8:	81000517 	ldw	r4,20(r16)
 800b0bc:	1885c83a 	sub	r2,r3,r2
 800b0c0:	113fe316 	blt	r2,r4,800b050 <__alt_data_end+0xf800b050>
 800b0c4:	8809883a 	mov	r4,r17
 800b0c8:	800b883a 	mov	r5,r16
 800b0cc:	8005cf00 	call	8005cf0 <_fflush_r>
 800b0d0:	10000e1e 	bne	r2,zero,800b10c <__swbuf_r+0x120>
 800b0d4:	80c00017 	ldw	r3,0(r16)
 800b0d8:	81000217 	ldw	r4,8(r16)
 800b0dc:	00800044 	movi	r2,1
 800b0e0:	19400044 	addi	r5,r3,1
 800b0e4:	213fffc4 	addi	r4,r4,-1
 800b0e8:	81400015 	stw	r5,0(r16)
 800b0ec:	81000215 	stw	r4,8(r16)
 800b0f0:	1c800005 	stb	r18,0(r3)
 800b0f4:	80c00517 	ldw	r3,20(r16)
 800b0f8:	18bfde1e 	bne	r3,r2,800b074 <__alt_data_end+0xf800b074>
 800b0fc:	8809883a 	mov	r4,r17
 800b100:	800b883a 	mov	r5,r16
 800b104:	8005cf00 	call	8005cf0 <_fflush_r>
 800b108:	103fdd26 	beq	r2,zero,800b080 <__alt_data_end+0xf800b080>
 800b10c:	00bfffc4 	movi	r2,-1
 800b110:	003fdc06 	br	800b084 <__alt_data_end+0xf800b084>
 800b114:	00800284 	movi	r2,10
 800b118:	90bfd91e 	bne	r18,r2,800b080 <__alt_data_end+0xf800b080>
 800b11c:	8809883a 	mov	r4,r17
 800b120:	800b883a 	mov	r5,r16
 800b124:	8005cf00 	call	8005cf0 <_fflush_r>
 800b128:	103fd526 	beq	r2,zero,800b080 <__alt_data_end+0xf800b080>
 800b12c:	003ff706 	br	800b10c <__alt_data_end+0xf800b10c>
 800b130:	8809883a 	mov	r4,r17
 800b134:	800b883a 	mov	r5,r16
 800b138:	80043540 	call	8004354 <__swsetup_r>
 800b13c:	80c0030b 	ldhu	r3,12(r16)
 800b140:	1000041e 	bne	r2,zero,800b154 <__swbuf_r+0x168>
 800b144:	80800417 	ldw	r2,16(r16)
 800b148:	003fba06 	br	800b034 <__alt_data_end+0xf800b034>
 800b14c:	80060100 	call	8006010 <__sinit>
 800b150:	003fb106 	br	800b018 <__alt_data_end+0xf800b018>
 800b154:	18c01014 	ori	r3,r3,64
 800b158:	80c0030d 	sth	r3,12(r16)
 800b15c:	00c00244 	movi	r3,9
 800b160:	00bfffc4 	movi	r2,-1
 800b164:	88c00015 	stw	r3,0(r17)
 800b168:	003fc606 	br	800b084 <__alt_data_end+0xf800b084>

0800b16c <__swbuf>:
 800b16c:	00c20074 	movhi	r3,2049
 800b170:	18cd7904 	addi	r3,r3,13796
 800b174:	2005883a 	mov	r2,r4
 800b178:	19000017 	ldw	r4,0(r3)
 800b17c:	280d883a 	mov	r6,r5
 800b180:	100b883a 	mov	r5,r2
 800b184:	800afec1 	jmpi	800afec <__swbuf_r>

0800b188 <_wcrtomb_r>:
 800b188:	defff604 	addi	sp,sp,-40
 800b18c:	dc800815 	stw	r18,32(sp)
 800b190:	dc400715 	stw	r17,28(sp)
 800b194:	dc000615 	stw	r16,24(sp)
 800b198:	00820074 	movhi	r2,2049
 800b19c:	108d7d04 	addi	r2,r2,13812
 800b1a0:	dfc00915 	stw	ra,36(sp)
 800b1a4:	2021883a 	mov	r16,r4
 800b1a8:	3823883a 	mov	r17,r7
 800b1ac:	14800017 	ldw	r18,0(r2)
 800b1b0:	28001426 	beq	r5,zero,800b204 <_wcrtomb_r+0x7c>
 800b1b4:	d9400415 	stw	r5,16(sp)
 800b1b8:	d9800515 	stw	r6,20(sp)
 800b1bc:	8006d900 	call	8006d90 <__locale_charset>
 800b1c0:	d9400417 	ldw	r5,16(sp)
 800b1c4:	d9800517 	ldw	r6,20(sp)
 800b1c8:	8009883a 	mov	r4,r16
 800b1cc:	dc400015 	stw	r17,0(sp)
 800b1d0:	100f883a 	mov	r7,r2
 800b1d4:	903ee83a 	callr	r18
 800b1d8:	00ffffc4 	movi	r3,-1
 800b1dc:	10c0031e 	bne	r2,r3,800b1ec <_wcrtomb_r+0x64>
 800b1e0:	88000015 	stw	zero,0(r17)
 800b1e4:	00c02284 	movi	r3,138
 800b1e8:	80c00015 	stw	r3,0(r16)
 800b1ec:	dfc00917 	ldw	ra,36(sp)
 800b1f0:	dc800817 	ldw	r18,32(sp)
 800b1f4:	dc400717 	ldw	r17,28(sp)
 800b1f8:	dc000617 	ldw	r16,24(sp)
 800b1fc:	dec00a04 	addi	sp,sp,40
 800b200:	f800283a 	ret
 800b204:	8006d900 	call	8006d90 <__locale_charset>
 800b208:	8009883a 	mov	r4,r16
 800b20c:	dc400015 	stw	r17,0(sp)
 800b210:	d9400104 	addi	r5,sp,4
 800b214:	000d883a 	mov	r6,zero
 800b218:	100f883a 	mov	r7,r2
 800b21c:	903ee83a 	callr	r18
 800b220:	003fed06 	br	800b1d8 <__alt_data_end+0xf800b1d8>

0800b224 <wcrtomb>:
 800b224:	defff504 	addi	sp,sp,-44
 800b228:	dc400515 	stw	r17,20(sp)
 800b22c:	dc000415 	stw	r16,16(sp)
 800b230:	dfc00a15 	stw	ra,40(sp)
 800b234:	dd400915 	stw	r21,36(sp)
 800b238:	dd000815 	stw	r20,32(sp)
 800b23c:	dcc00715 	stw	r19,28(sp)
 800b240:	dc800615 	stw	r18,24(sp)
 800b244:	2021883a 	mov	r16,r4
 800b248:	3023883a 	mov	r17,r6
 800b24c:	20001d26 	beq	r4,zero,800b2c4 <wcrtomb+0xa0>
 800b250:	04820074 	movhi	r18,2049
 800b254:	948d7904 	addi	r18,r18,13796
 800b258:	95400017 	ldw	r21,0(r18)
 800b25c:	00820074 	movhi	r2,2049
 800b260:	108d7d04 	addi	r2,r2,13812
 800b264:	15000017 	ldw	r20,0(r2)
 800b268:	2827883a 	mov	r19,r5
 800b26c:	8006d900 	call	8006d90 <__locale_charset>
 800b270:	a809883a 	mov	r4,r21
 800b274:	dc400015 	stw	r17,0(sp)
 800b278:	800b883a 	mov	r5,r16
 800b27c:	980d883a 	mov	r6,r19
 800b280:	100f883a 	mov	r7,r2
 800b284:	a03ee83a 	callr	r20
 800b288:	00ffffc4 	movi	r3,-1
 800b28c:	10c0041e 	bne	r2,r3,800b2a0 <wcrtomb+0x7c>
 800b290:	90c00017 	ldw	r3,0(r18)
 800b294:	01002284 	movi	r4,138
 800b298:	88000015 	stw	zero,0(r17)
 800b29c:	19000015 	stw	r4,0(r3)
 800b2a0:	dfc00a17 	ldw	ra,40(sp)
 800b2a4:	dd400917 	ldw	r21,36(sp)
 800b2a8:	dd000817 	ldw	r20,32(sp)
 800b2ac:	dcc00717 	ldw	r19,28(sp)
 800b2b0:	dc800617 	ldw	r18,24(sp)
 800b2b4:	dc400517 	ldw	r17,20(sp)
 800b2b8:	dc000417 	ldw	r16,16(sp)
 800b2bc:	dec00b04 	addi	sp,sp,44
 800b2c0:	f800283a 	ret
 800b2c4:	04820074 	movhi	r18,2049
 800b2c8:	948d7904 	addi	r18,r18,13796
 800b2cc:	94c00017 	ldw	r19,0(r18)
 800b2d0:	00820074 	movhi	r2,2049
 800b2d4:	108d7d04 	addi	r2,r2,13812
 800b2d8:	14000017 	ldw	r16,0(r2)
 800b2dc:	8006d900 	call	8006d90 <__locale_charset>
 800b2e0:	9809883a 	mov	r4,r19
 800b2e4:	dc400015 	stw	r17,0(sp)
 800b2e8:	d9400104 	addi	r5,sp,4
 800b2ec:	000d883a 	mov	r6,zero
 800b2f0:	100f883a 	mov	r7,r2
 800b2f4:	803ee83a 	callr	r16
 800b2f8:	003fe306 	br	800b288 <__alt_data_end+0xf800b288>

0800b2fc <__ascii_wctomb>:
 800b2fc:	28000526 	beq	r5,zero,800b314 <__ascii_wctomb+0x18>
 800b300:	00803fc4 	movi	r2,255
 800b304:	11800536 	bltu	r2,r6,800b31c <__ascii_wctomb+0x20>
 800b308:	29800005 	stb	r6,0(r5)
 800b30c:	00800044 	movi	r2,1
 800b310:	f800283a 	ret
 800b314:	0005883a 	mov	r2,zero
 800b318:	f800283a 	ret
 800b31c:	00802284 	movi	r2,138
 800b320:	20800015 	stw	r2,0(r4)
 800b324:	00bfffc4 	movi	r2,-1
 800b328:	f800283a 	ret

0800b32c <_wctomb_r>:
 800b32c:	defff904 	addi	sp,sp,-28
 800b330:	00820074 	movhi	r2,2049
 800b334:	108d7d04 	addi	r2,r2,13812
 800b338:	dfc00615 	stw	ra,24(sp)
 800b33c:	dc400515 	stw	r17,20(sp)
 800b340:	dc000415 	stw	r16,16(sp)
 800b344:	3823883a 	mov	r17,r7
 800b348:	14000017 	ldw	r16,0(r2)
 800b34c:	d9000115 	stw	r4,4(sp)
 800b350:	d9400215 	stw	r5,8(sp)
 800b354:	d9800315 	stw	r6,12(sp)
 800b358:	8006d900 	call	8006d90 <__locale_charset>
 800b35c:	d9000117 	ldw	r4,4(sp)
 800b360:	d9400217 	ldw	r5,8(sp)
 800b364:	d9800317 	ldw	r6,12(sp)
 800b368:	dc400015 	stw	r17,0(sp)
 800b36c:	100f883a 	mov	r7,r2
 800b370:	803ee83a 	callr	r16
 800b374:	dfc00617 	ldw	ra,24(sp)
 800b378:	dc400517 	ldw	r17,20(sp)
 800b37c:	dc000417 	ldw	r16,16(sp)
 800b380:	dec00704 	addi	sp,sp,28
 800b384:	f800283a 	ret

0800b388 <__udivdi3>:
 800b388:	defff504 	addi	sp,sp,-44
 800b38c:	dc800315 	stw	r18,12(sp)
 800b390:	dc400215 	stw	r17,8(sp)
 800b394:	dfc00a15 	stw	ra,40(sp)
 800b398:	df000915 	stw	fp,36(sp)
 800b39c:	ddc00815 	stw	r23,32(sp)
 800b3a0:	dd800715 	stw	r22,28(sp)
 800b3a4:	dd400615 	stw	r21,24(sp)
 800b3a8:	dd000515 	stw	r20,20(sp)
 800b3ac:	dcc00415 	stw	r19,16(sp)
 800b3b0:	dc000115 	stw	r16,4(sp)
 800b3b4:	2025883a 	mov	r18,r4
 800b3b8:	2823883a 	mov	r17,r5
 800b3bc:	3800481e 	bne	r7,zero,800b4e0 <__udivdi3+0x158>
 800b3c0:	3021883a 	mov	r16,r6
 800b3c4:	2027883a 	mov	r19,r4
 800b3c8:	29805a2e 	bgeu	r5,r6,800b534 <__udivdi3+0x1ac>
 800b3cc:	00bfffd4 	movui	r2,65535
 800b3d0:	2829883a 	mov	r20,r5
 800b3d4:	1180b436 	bltu	r2,r6,800b6a8 <__udivdi3+0x320>
 800b3d8:	00803fc4 	movi	r2,255
 800b3dc:	11816736 	bltu	r2,r6,800b97c <__udivdi3+0x5f4>
 800b3e0:	0005883a 	mov	r2,zero
 800b3e4:	0007883a 	mov	r3,zero
 800b3e8:	3084d83a 	srl	r2,r6,r2
 800b3ec:	01020074 	movhi	r4,2049
 800b3f0:	21068204 	addi	r4,r4,6664
 800b3f4:	2085883a 	add	r2,r4,r2
 800b3f8:	10800003 	ldbu	r2,0(r2)
 800b3fc:	10c7883a 	add	r3,r2,r3
 800b400:	00800804 	movi	r2,32
 800b404:	10c5c83a 	sub	r2,r2,r3
 800b408:	10000526 	beq	r2,zero,800b420 <__udivdi3+0x98>
 800b40c:	88a2983a 	sll	r17,r17,r2
 800b410:	90c6d83a 	srl	r3,r18,r3
 800b414:	30a0983a 	sll	r16,r6,r2
 800b418:	90a6983a 	sll	r19,r18,r2
 800b41c:	88e8b03a 	or	r20,r17,r3
 800b420:	8022d43a 	srli	r17,r16,16
 800b424:	a009883a 	mov	r4,r20
 800b428:	857fffcc 	andi	r21,r16,65535
 800b42c:	880b883a 	mov	r5,r17
 800b430:	800c11c0 	call	800c11c <__umodsi3>
 800b434:	a009883a 	mov	r4,r20
 800b438:	880b883a 	mov	r5,r17
 800b43c:	102d883a 	mov	r22,r2
 800b440:	800c1140 	call	800c114 <__udivsi3>
 800b444:	1009883a 	mov	r4,r2
 800b448:	a80b883a 	mov	r5,r21
 800b44c:	1025883a 	mov	r18,r2
 800b450:	800c1240 	call	800c124 <__mulsi3>
 800b454:	1009883a 	mov	r4,r2
 800b458:	b006943a 	slli	r3,r22,16
 800b45c:	9804d43a 	srli	r2,r19,16
 800b460:	1886b03a 	or	r3,r3,r2
 800b464:	1900052e 	bgeu	r3,r4,800b47c <__udivdi3+0xf4>
 800b468:	1c07883a 	add	r3,r3,r16
 800b46c:	90bfffc4 	addi	r2,r18,-1
 800b470:	1c000136 	bltu	r3,r16,800b478 <__udivdi3+0xf0>
 800b474:	19015636 	bltu	r3,r4,800b9d0 <__udivdi3+0x648>
 800b478:	1025883a 	mov	r18,r2
 800b47c:	1929c83a 	sub	r20,r3,r4
 800b480:	880b883a 	mov	r5,r17
 800b484:	a009883a 	mov	r4,r20
 800b488:	800c11c0 	call	800c11c <__umodsi3>
 800b48c:	102d883a 	mov	r22,r2
 800b490:	880b883a 	mov	r5,r17
 800b494:	a009883a 	mov	r4,r20
 800b498:	b02c943a 	slli	r22,r22,16
 800b49c:	800c1140 	call	800c114 <__udivsi3>
 800b4a0:	1009883a 	mov	r4,r2
 800b4a4:	a80b883a 	mov	r5,r21
 800b4a8:	9cffffcc 	andi	r19,r19,65535
 800b4ac:	1023883a 	mov	r17,r2
 800b4b0:	b4e6b03a 	or	r19,r22,r19
 800b4b4:	800c1240 	call	800c124 <__mulsi3>
 800b4b8:	9880052e 	bgeu	r19,r2,800b4d0 <__udivdi3+0x148>
 800b4bc:	9c27883a 	add	r19,r19,r16
 800b4c0:	88ffffc4 	addi	r3,r17,-1
 800b4c4:	9c011436 	bltu	r19,r16,800b918 <__udivdi3+0x590>
 800b4c8:	9881132e 	bgeu	r19,r2,800b918 <__udivdi3+0x590>
 800b4cc:	8c7fff84 	addi	r17,r17,-2
 800b4d0:	9024943a 	slli	r18,r18,16
 800b4d4:	0007883a 	mov	r3,zero
 800b4d8:	8c84b03a 	or	r2,r17,r18
 800b4dc:	00006106 	br	800b664 <__udivdi3+0x2dc>
 800b4e0:	29c05e36 	bltu	r5,r7,800b65c <__udivdi3+0x2d4>
 800b4e4:	00bfffd4 	movui	r2,65535
 800b4e8:	11c06a2e 	bgeu	r2,r7,800b694 <__udivdi3+0x30c>
 800b4ec:	00804034 	movhi	r2,256
 800b4f0:	10bfffc4 	addi	r2,r2,-1
 800b4f4:	11c11236 	bltu	r2,r7,800b940 <__udivdi3+0x5b8>
 800b4f8:	00c00404 	movi	r3,16
 800b4fc:	180b883a 	mov	r5,r3
 800b500:	38c6d83a 	srl	r3,r7,r3
 800b504:	01020074 	movhi	r4,2049
 800b508:	21068204 	addi	r4,r4,6664
 800b50c:	04000804 	movi	r16,32
 800b510:	20c7883a 	add	r3,r4,r3
 800b514:	18800003 	ldbu	r2,0(r3)
 800b518:	1145883a 	add	r2,r2,r5
 800b51c:	80a1c83a 	sub	r16,r16,r2
 800b520:	80006c1e 	bne	r16,zero,800b6d4 <__udivdi3+0x34c>
 800b524:	3c411836 	bltu	r7,r17,800b988 <__udivdi3+0x600>
 800b528:	9185403a 	cmpgeu	r2,r18,r6
 800b52c:	0007883a 	mov	r3,zero
 800b530:	00004c06 	br	800b664 <__udivdi3+0x2dc>
 800b534:	3000041e 	bne	r6,zero,800b548 <__udivdi3+0x1c0>
 800b538:	01000044 	movi	r4,1
 800b53c:	000b883a 	mov	r5,zero
 800b540:	800c1140 	call	800c114 <__udivsi3>
 800b544:	1021883a 	mov	r16,r2
 800b548:	00bfffd4 	movui	r2,65535
 800b54c:	14005c2e 	bgeu	r2,r16,800b6c0 <__udivdi3+0x338>
 800b550:	00804034 	movhi	r2,256
 800b554:	10bfffc4 	addi	r2,r2,-1
 800b558:	14010236 	bltu	r2,r16,800b964 <__udivdi3+0x5dc>
 800b55c:	00800404 	movi	r2,16
 800b560:	1007883a 	mov	r3,r2
 800b564:	8084d83a 	srl	r2,r16,r2
 800b568:	01020074 	movhi	r4,2049
 800b56c:	21068204 	addi	r4,r4,6664
 800b570:	2085883a 	add	r2,r4,r2
 800b574:	10800003 	ldbu	r2,0(r2)
 800b578:	10c7883a 	add	r3,r2,r3
 800b57c:	00800804 	movi	r2,32
 800b580:	10c5c83a 	sub	r2,r2,r3
 800b584:	1000aa1e 	bne	r2,zero,800b830 <__udivdi3+0x4a8>
 800b588:	8028d43a 	srli	r20,r16,16
 800b58c:	8c23c83a 	sub	r17,r17,r16
 800b590:	857fffcc 	andi	r21,r16,65535
 800b594:	00c00044 	movi	r3,1
 800b598:	8809883a 	mov	r4,r17
 800b59c:	a00b883a 	mov	r5,r20
 800b5a0:	d8c00015 	stw	r3,0(sp)
 800b5a4:	800c11c0 	call	800c11c <__umodsi3>
 800b5a8:	8809883a 	mov	r4,r17
 800b5ac:	a00b883a 	mov	r5,r20
 800b5b0:	102d883a 	mov	r22,r2
 800b5b4:	800c1140 	call	800c114 <__udivsi3>
 800b5b8:	1009883a 	mov	r4,r2
 800b5bc:	a80b883a 	mov	r5,r21
 800b5c0:	1025883a 	mov	r18,r2
 800b5c4:	800c1240 	call	800c124 <__mulsi3>
 800b5c8:	1009883a 	mov	r4,r2
 800b5cc:	b00e943a 	slli	r7,r22,16
 800b5d0:	9804d43a 	srli	r2,r19,16
 800b5d4:	d8c00017 	ldw	r3,0(sp)
 800b5d8:	388eb03a 	or	r7,r7,r2
 800b5dc:	3900052e 	bgeu	r7,r4,800b5f4 <__udivdi3+0x26c>
 800b5e0:	3c0f883a 	add	r7,r7,r16
 800b5e4:	90bfffc4 	addi	r2,r18,-1
 800b5e8:	3c000136 	bltu	r7,r16,800b5f0 <__udivdi3+0x268>
 800b5ec:	3900f536 	bltu	r7,r4,800b9c4 <__udivdi3+0x63c>
 800b5f0:	1025883a 	mov	r18,r2
 800b5f4:	3923c83a 	sub	r17,r7,r4
 800b5f8:	8809883a 	mov	r4,r17
 800b5fc:	a00b883a 	mov	r5,r20
 800b600:	d8c00015 	stw	r3,0(sp)
 800b604:	800c11c0 	call	800c11c <__umodsi3>
 800b608:	102d883a 	mov	r22,r2
 800b60c:	8809883a 	mov	r4,r17
 800b610:	a00b883a 	mov	r5,r20
 800b614:	b02c943a 	slli	r22,r22,16
 800b618:	800c1140 	call	800c114 <__udivsi3>
 800b61c:	1009883a 	mov	r4,r2
 800b620:	a80b883a 	mov	r5,r21
 800b624:	9cffffcc 	andi	r19,r19,65535
 800b628:	1023883a 	mov	r17,r2
 800b62c:	b4e6b03a 	or	r19,r22,r19
 800b630:	800c1240 	call	800c124 <__mulsi3>
 800b634:	d8c00017 	ldw	r3,0(sp)
 800b638:	9880052e 	bgeu	r19,r2,800b650 <__udivdi3+0x2c8>
 800b63c:	9c27883a 	add	r19,r19,r16
 800b640:	893fffc4 	addi	r4,r17,-1
 800b644:	9c00b236 	bltu	r19,r16,800b910 <__udivdi3+0x588>
 800b648:	9880b12e 	bgeu	r19,r2,800b910 <__udivdi3+0x588>
 800b64c:	8c7fff84 	addi	r17,r17,-2
 800b650:	9024943a 	slli	r18,r18,16
 800b654:	8c84b03a 	or	r2,r17,r18
 800b658:	00000206 	br	800b664 <__udivdi3+0x2dc>
 800b65c:	0007883a 	mov	r3,zero
 800b660:	0005883a 	mov	r2,zero
 800b664:	dfc00a17 	ldw	ra,40(sp)
 800b668:	df000917 	ldw	fp,36(sp)
 800b66c:	ddc00817 	ldw	r23,32(sp)
 800b670:	dd800717 	ldw	r22,28(sp)
 800b674:	dd400617 	ldw	r21,24(sp)
 800b678:	dd000517 	ldw	r20,20(sp)
 800b67c:	dcc00417 	ldw	r19,16(sp)
 800b680:	dc800317 	ldw	r18,12(sp)
 800b684:	dc400217 	ldw	r17,8(sp)
 800b688:	dc000117 	ldw	r16,4(sp)
 800b68c:	dec00b04 	addi	sp,sp,44
 800b690:	f800283a 	ret
 800b694:	00803fc4 	movi	r2,255
 800b698:	11c0ac36 	bltu	r2,r7,800b94c <__udivdi3+0x5c4>
 800b69c:	0007883a 	mov	r3,zero
 800b6a0:	000b883a 	mov	r5,zero
 800b6a4:	003f9606 	br	800b500 <__alt_data_end+0xf800b500>
 800b6a8:	00804034 	movhi	r2,256
 800b6ac:	10bfffc4 	addi	r2,r2,-1
 800b6b0:	1180a936 	bltu	r2,r6,800b958 <__udivdi3+0x5d0>
 800b6b4:	00800404 	movi	r2,16
 800b6b8:	1007883a 	mov	r3,r2
 800b6bc:	003f4a06 	br	800b3e8 <__alt_data_end+0xf800b3e8>
 800b6c0:	00803fc4 	movi	r2,255
 800b6c4:	1400aa36 	bltu	r2,r16,800b970 <__udivdi3+0x5e8>
 800b6c8:	0005883a 	mov	r2,zero
 800b6cc:	0007883a 	mov	r3,zero
 800b6d0:	003fa406 	br	800b564 <__alt_data_end+0xf800b564>
 800b6d4:	3c0e983a 	sll	r7,r7,r16
 800b6d8:	3086d83a 	srl	r3,r6,r2
 800b6dc:	88aed83a 	srl	r23,r17,r2
 800b6e0:	9084d83a 	srl	r2,r18,r2
 800b6e4:	38e6b03a 	or	r19,r7,r3
 800b6e8:	9828d43a 	srli	r20,r19,16
 800b6ec:	8c22983a 	sll	r17,r17,r16
 800b6f0:	b809883a 	mov	r4,r23
 800b6f4:	a00b883a 	mov	r5,r20
 800b6f8:	342a983a 	sll	r21,r6,r16
 800b6fc:	88a2b03a 	or	r17,r17,r2
 800b700:	800c11c0 	call	800c11c <__umodsi3>
 800b704:	b809883a 	mov	r4,r23
 800b708:	a00b883a 	mov	r5,r20
 800b70c:	1039883a 	mov	fp,r2
 800b710:	9dbfffcc 	andi	r22,r19,65535
 800b714:	800c1140 	call	800c114 <__udivsi3>
 800b718:	1009883a 	mov	r4,r2
 800b71c:	b00b883a 	mov	r5,r22
 800b720:	102f883a 	mov	r23,r2
 800b724:	800c1240 	call	800c124 <__mulsi3>
 800b728:	1009883a 	mov	r4,r2
 800b72c:	e00e943a 	slli	r7,fp,16
 800b730:	8804d43a 	srli	r2,r17,16
 800b734:	388eb03a 	or	r7,r7,r2
 800b738:	3900042e 	bgeu	r7,r4,800b74c <__udivdi3+0x3c4>
 800b73c:	3ccf883a 	add	r7,r7,r19
 800b740:	b8bfffc4 	addi	r2,r23,-1
 800b744:	3cc0972e 	bgeu	r7,r19,800b9a4 <__udivdi3+0x61c>
 800b748:	102f883a 	mov	r23,r2
 800b74c:	3939c83a 	sub	fp,r7,r4
 800b750:	a00b883a 	mov	r5,r20
 800b754:	e009883a 	mov	r4,fp
 800b758:	800c11c0 	call	800c11c <__umodsi3>
 800b75c:	a00b883a 	mov	r5,r20
 800b760:	e009883a 	mov	r4,fp
 800b764:	d8800015 	stw	r2,0(sp)
 800b768:	800c1140 	call	800c114 <__udivsi3>
 800b76c:	1009883a 	mov	r4,r2
 800b770:	b00b883a 	mov	r5,r22
 800b774:	1029883a 	mov	r20,r2
 800b778:	800c1240 	call	800c124 <__mulsi3>
 800b77c:	d8c00017 	ldw	r3,0(sp)
 800b780:	8c7fffcc 	andi	r17,r17,65535
 800b784:	1806943a 	slli	r3,r3,16
 800b788:	1c46b03a 	or	r3,r3,r17
 800b78c:	1880042e 	bgeu	r3,r2,800b7a0 <__udivdi3+0x418>
 800b790:	1cc7883a 	add	r3,r3,r19
 800b794:	a13fffc4 	addi	r4,r20,-1
 800b798:	1cc07e2e 	bgeu	r3,r19,800b994 <__udivdi3+0x60c>
 800b79c:	2029883a 	mov	r20,r4
 800b7a0:	b82e943a 	slli	r23,r23,16
 800b7a4:	a822d43a 	srli	r17,r21,16
 800b7a8:	ad7fffcc 	andi	r21,r21,65535
 800b7ac:	a5e8b03a 	or	r20,r20,r23
 800b7b0:	a5bfffcc 	andi	r22,r20,65535
 800b7b4:	b009883a 	mov	r4,r22
 800b7b8:	a80b883a 	mov	r5,r21
 800b7bc:	18afc83a 	sub	r23,r3,r2
 800b7c0:	a026d43a 	srli	r19,r20,16
 800b7c4:	800c1240 	call	800c124 <__mulsi3>
 800b7c8:	b009883a 	mov	r4,r22
 800b7cc:	880b883a 	mov	r5,r17
 800b7d0:	1039883a 	mov	fp,r2
 800b7d4:	800c1240 	call	800c124 <__mulsi3>
 800b7d8:	a80b883a 	mov	r5,r21
 800b7dc:	9809883a 	mov	r4,r19
 800b7e0:	102d883a 	mov	r22,r2
 800b7e4:	800c1240 	call	800c124 <__mulsi3>
 800b7e8:	9809883a 	mov	r4,r19
 800b7ec:	880b883a 	mov	r5,r17
 800b7f0:	102b883a 	mov	r21,r2
 800b7f4:	800c1240 	call	800c124 <__mulsi3>
 800b7f8:	100b883a 	mov	r5,r2
 800b7fc:	e004d43a 	srli	r2,fp,16
 800b800:	ad89883a 	add	r4,r21,r22
 800b804:	2089883a 	add	r4,r4,r2
 800b808:	2540022e 	bgeu	r4,r21,800b814 <__udivdi3+0x48c>
 800b80c:	00800074 	movhi	r2,1
 800b810:	288b883a 	add	r5,r5,r2
 800b814:	2004d43a 	srli	r2,r4,16
 800b818:	288b883a 	add	r5,r5,r2
 800b81c:	b9404536 	bltu	r23,r5,800b934 <__udivdi3+0x5ac>
 800b820:	b9403f26 	beq	r23,r5,800b920 <__udivdi3+0x598>
 800b824:	a005883a 	mov	r2,r20
 800b828:	0007883a 	mov	r3,zero
 800b82c:	003f8d06 	br	800b664 <__alt_data_end+0xf800b664>
 800b830:	80a0983a 	sll	r16,r16,r2
 800b834:	88eed83a 	srl	r23,r17,r3
 800b838:	90c6d83a 	srl	r3,r18,r3
 800b83c:	8028d43a 	srli	r20,r16,16
 800b840:	88a2983a 	sll	r17,r17,r2
 800b844:	b809883a 	mov	r4,r23
 800b848:	a00b883a 	mov	r5,r20
 800b84c:	88ecb03a 	or	r22,r17,r3
 800b850:	90a6983a 	sll	r19,r18,r2
 800b854:	800c11c0 	call	800c11c <__umodsi3>
 800b858:	b809883a 	mov	r4,r23
 800b85c:	a00b883a 	mov	r5,r20
 800b860:	1023883a 	mov	r17,r2
 800b864:	857fffcc 	andi	r21,r16,65535
 800b868:	800c1140 	call	800c114 <__udivsi3>
 800b86c:	1009883a 	mov	r4,r2
 800b870:	a80b883a 	mov	r5,r21
 800b874:	102f883a 	mov	r23,r2
 800b878:	800c1240 	call	800c124 <__mulsi3>
 800b87c:	1009883a 	mov	r4,r2
 800b880:	880c943a 	slli	r6,r17,16
 800b884:	b004d43a 	srli	r2,r22,16
 800b888:	308cb03a 	or	r6,r6,r2
 800b88c:	3100062e 	bgeu	r6,r4,800b8a8 <__udivdi3+0x520>
 800b890:	340d883a 	add	r6,r6,r16
 800b894:	b8bfffc4 	addi	r2,r23,-1
 800b898:	34004836 	bltu	r6,r16,800b9bc <__udivdi3+0x634>
 800b89c:	3100472e 	bgeu	r6,r4,800b9bc <__udivdi3+0x634>
 800b8a0:	bdffff84 	addi	r23,r23,-2
 800b8a4:	340d883a 	add	r6,r6,r16
 800b8a8:	3125c83a 	sub	r18,r6,r4
 800b8ac:	9009883a 	mov	r4,r18
 800b8b0:	a00b883a 	mov	r5,r20
 800b8b4:	800c11c0 	call	800c11c <__umodsi3>
 800b8b8:	1023883a 	mov	r17,r2
 800b8bc:	9009883a 	mov	r4,r18
 800b8c0:	a00b883a 	mov	r5,r20
 800b8c4:	8822943a 	slli	r17,r17,16
 800b8c8:	800c1140 	call	800c114 <__udivsi3>
 800b8cc:	1009883a 	mov	r4,r2
 800b8d0:	a80b883a 	mov	r5,r21
 800b8d4:	b5bfffcc 	andi	r22,r22,65535
 800b8d8:	1025883a 	mov	r18,r2
 800b8dc:	8da2b03a 	or	r17,r17,r22
 800b8e0:	800c1240 	call	800c124 <__mulsi3>
 800b8e4:	8880062e 	bgeu	r17,r2,800b900 <__udivdi3+0x578>
 800b8e8:	8c23883a 	add	r17,r17,r16
 800b8ec:	90ffffc4 	addi	r3,r18,-1
 800b8f0:	8c003036 	bltu	r17,r16,800b9b4 <__udivdi3+0x62c>
 800b8f4:	88802f2e 	bgeu	r17,r2,800b9b4 <__udivdi3+0x62c>
 800b8f8:	94bfff84 	addi	r18,r18,-2
 800b8fc:	8c23883a 	add	r17,r17,r16
 800b900:	b806943a 	slli	r3,r23,16
 800b904:	88a3c83a 	sub	r17,r17,r2
 800b908:	90c6b03a 	or	r3,r18,r3
 800b90c:	003f2206 	br	800b598 <__alt_data_end+0xf800b598>
 800b910:	2023883a 	mov	r17,r4
 800b914:	003f4e06 	br	800b650 <__alt_data_end+0xf800b650>
 800b918:	1823883a 	mov	r17,r3
 800b91c:	003eec06 	br	800b4d0 <__alt_data_end+0xf800b4d0>
 800b920:	2008943a 	slli	r4,r4,16
 800b924:	9420983a 	sll	r16,r18,r16
 800b928:	e73fffcc 	andi	fp,fp,65535
 800b92c:	2709883a 	add	r4,r4,fp
 800b930:	813fbc2e 	bgeu	r16,r4,800b824 <__alt_data_end+0xf800b824>
 800b934:	a0bfffc4 	addi	r2,r20,-1
 800b938:	0007883a 	mov	r3,zero
 800b93c:	003f4906 	br	800b664 <__alt_data_end+0xf800b664>
 800b940:	00c00604 	movi	r3,24
 800b944:	180b883a 	mov	r5,r3
 800b948:	003eed06 	br	800b500 <__alt_data_end+0xf800b500>
 800b94c:	00c00204 	movi	r3,8
 800b950:	180b883a 	mov	r5,r3
 800b954:	003eea06 	br	800b500 <__alt_data_end+0xf800b500>
 800b958:	00800604 	movi	r2,24
 800b95c:	1007883a 	mov	r3,r2
 800b960:	003ea106 	br	800b3e8 <__alt_data_end+0xf800b3e8>
 800b964:	00800604 	movi	r2,24
 800b968:	1007883a 	mov	r3,r2
 800b96c:	003efd06 	br	800b564 <__alt_data_end+0xf800b564>
 800b970:	00800204 	movi	r2,8
 800b974:	1007883a 	mov	r3,r2
 800b978:	003efa06 	br	800b564 <__alt_data_end+0xf800b564>
 800b97c:	00800204 	movi	r2,8
 800b980:	1007883a 	mov	r3,r2
 800b984:	003e9806 	br	800b3e8 <__alt_data_end+0xf800b3e8>
 800b988:	0007883a 	mov	r3,zero
 800b98c:	00800044 	movi	r2,1
 800b990:	003f3406 	br	800b664 <__alt_data_end+0xf800b664>
 800b994:	18bf812e 	bgeu	r3,r2,800b79c <__alt_data_end+0xf800b79c>
 800b998:	a53fff84 	addi	r20,r20,-2
 800b99c:	1cc7883a 	add	r3,r3,r19
 800b9a0:	003f7f06 	br	800b7a0 <__alt_data_end+0xf800b7a0>
 800b9a4:	393f682e 	bgeu	r7,r4,800b748 <__alt_data_end+0xf800b748>
 800b9a8:	bdffff84 	addi	r23,r23,-2
 800b9ac:	3ccf883a 	add	r7,r7,r19
 800b9b0:	003f6606 	br	800b74c <__alt_data_end+0xf800b74c>
 800b9b4:	1825883a 	mov	r18,r3
 800b9b8:	003fd106 	br	800b900 <__alt_data_end+0xf800b900>
 800b9bc:	102f883a 	mov	r23,r2
 800b9c0:	003fb906 	br	800b8a8 <__alt_data_end+0xf800b8a8>
 800b9c4:	94bfff84 	addi	r18,r18,-2
 800b9c8:	3c0f883a 	add	r7,r7,r16
 800b9cc:	003f0906 	br	800b5f4 <__alt_data_end+0xf800b5f4>
 800b9d0:	94bfff84 	addi	r18,r18,-2
 800b9d4:	1c07883a 	add	r3,r3,r16
 800b9d8:	003ea806 	br	800b47c <__alt_data_end+0xf800b47c>

0800b9dc <__umoddi3>:
 800b9dc:	defff304 	addi	sp,sp,-52
 800b9e0:	dd000715 	stw	r20,28(sp)
 800b9e4:	dc800515 	stw	r18,20(sp)
 800b9e8:	dc400415 	stw	r17,16(sp)
 800b9ec:	dfc00c15 	stw	ra,48(sp)
 800b9f0:	df000b15 	stw	fp,44(sp)
 800b9f4:	ddc00a15 	stw	r23,40(sp)
 800b9f8:	dd800915 	stw	r22,36(sp)
 800b9fc:	dd400815 	stw	r21,32(sp)
 800ba00:	dcc00615 	stw	r19,24(sp)
 800ba04:	dc000315 	stw	r16,12(sp)
 800ba08:	2025883a 	mov	r18,r4
 800ba0c:	2823883a 	mov	r17,r5
 800ba10:	2829883a 	mov	r20,r5
 800ba14:	38003d1e 	bne	r7,zero,800bb0c <__umoddi3+0x130>
 800ba18:	3021883a 	mov	r16,r6
 800ba1c:	2027883a 	mov	r19,r4
 800ba20:	2980532e 	bgeu	r5,r6,800bb70 <__umoddi3+0x194>
 800ba24:	00bfffd4 	movui	r2,65535
 800ba28:	1180a636 	bltu	r2,r6,800bcc4 <__umoddi3+0x2e8>
 800ba2c:	00803fc4 	movi	r2,255
 800ba30:	11816336 	bltu	r2,r6,800bfc0 <__umoddi3+0x5e4>
 800ba34:	0005883a 	mov	r2,zero
 800ba38:	0009883a 	mov	r4,zero
 800ba3c:	3084d83a 	srl	r2,r6,r2
 800ba40:	00c20074 	movhi	r3,2049
 800ba44:	18c68204 	addi	r3,r3,6664
 800ba48:	1885883a 	add	r2,r3,r2
 800ba4c:	10800003 	ldbu	r2,0(r2)
 800ba50:	1109883a 	add	r4,r2,r4
 800ba54:	00800804 	movi	r2,32
 800ba58:	1105c83a 	sub	r2,r2,r4
 800ba5c:	10011026 	beq	r2,zero,800bea0 <__umoddi3+0x4c4>
 800ba60:	9108d83a 	srl	r4,r18,r4
 800ba64:	88a2983a 	sll	r17,r17,r2
 800ba68:	30a0983a 	sll	r16,r6,r2
 800ba6c:	90a6983a 	sll	r19,r18,r2
 800ba70:	8928b03a 	or	r20,r17,r4
 800ba74:	1025883a 	mov	r18,r2
 800ba78:	8022d43a 	srli	r17,r16,16
 800ba7c:	a009883a 	mov	r4,r20
 800ba80:	857fffcc 	andi	r21,r16,65535
 800ba84:	880b883a 	mov	r5,r17
 800ba88:	800c11c0 	call	800c11c <__umodsi3>
 800ba8c:	a009883a 	mov	r4,r20
 800ba90:	880b883a 	mov	r5,r17
 800ba94:	102d883a 	mov	r22,r2
 800ba98:	800c1140 	call	800c114 <__udivsi3>
 800ba9c:	1009883a 	mov	r4,r2
 800baa0:	a80b883a 	mov	r5,r21
 800baa4:	800c1240 	call	800c124 <__mulsi3>
 800baa8:	1009883a 	mov	r4,r2
 800baac:	b006943a 	slli	r3,r22,16
 800bab0:	9804d43a 	srli	r2,r19,16
 800bab4:	1886b03a 	or	r3,r3,r2
 800bab8:	1900042e 	bgeu	r3,r4,800bacc <__umoddi3+0xf0>
 800babc:	1c07883a 	add	r3,r3,r16
 800bac0:	1c000236 	bltu	r3,r16,800bacc <__umoddi3+0xf0>
 800bac4:	1900012e 	bgeu	r3,r4,800bacc <__umoddi3+0xf0>
 800bac8:	1c07883a 	add	r3,r3,r16
 800bacc:	1929c83a 	sub	r20,r3,r4
 800bad0:	a009883a 	mov	r4,r20
 800bad4:	880b883a 	mov	r5,r17
 800bad8:	800c11c0 	call	800c11c <__umodsi3>
 800badc:	102d883a 	mov	r22,r2
 800bae0:	a009883a 	mov	r4,r20
 800bae4:	880b883a 	mov	r5,r17
 800bae8:	b02c943a 	slli	r22,r22,16
 800baec:	800c1140 	call	800c114 <__udivsi3>
 800baf0:	1009883a 	mov	r4,r2
 800baf4:	a80b883a 	mov	r5,r21
 800baf8:	9cffffcc 	andi	r19,r19,65535
 800bafc:	800c1240 	call	800c124 <__mulsi3>
 800bb00:	b4e6b03a 	or	r19,r22,r19
 800bb04:	9880582e 	bgeu	r19,r2,800bc68 <__umoddi3+0x28c>
 800bb08:	00005306 	br	800bc58 <__umoddi3+0x27c>
 800bb0c:	29c05a36 	bltu	r5,r7,800bc78 <__umoddi3+0x29c>
 800bb10:	00bfffd4 	movui	r2,65535
 800bb14:	11c0662e 	bgeu	r2,r7,800bcb0 <__umoddi3+0x2d4>
 800bb18:	00804034 	movhi	r2,256
 800bb1c:	10bfffc4 	addi	r2,r2,-1
 800bb20:	11c11b36 	bltu	r2,r7,800bf90 <__umoddi3+0x5b4>
 800bb24:	00c00404 	movi	r3,16
 800bb28:	1827883a 	mov	r19,r3
 800bb2c:	38c6d83a 	srl	r3,r7,r3
 800bb30:	01020074 	movhi	r4,2049
 800bb34:	21068204 	addi	r4,r4,6664
 800bb38:	04000804 	movi	r16,32
 800bb3c:	20c7883a 	add	r3,r4,r3
 800bb40:	18800003 	ldbu	r2,0(r3)
 800bb44:	14e7883a 	add	r19,r2,r19
 800bb48:	84e1c83a 	sub	r16,r16,r19
 800bb4c:	8000681e 	bne	r16,zero,800bcf0 <__umoddi3+0x314>
 800bb50:	3c400136 	bltu	r7,r17,800bb58 <__umoddi3+0x17c>
 800bb54:	91812736 	bltu	r18,r6,800bff4 <__umoddi3+0x618>
 800bb58:	9185c83a 	sub	r2,r18,r6
 800bb5c:	89e3c83a 	sub	r17,r17,r7
 800bb60:	90a5803a 	cmpltu	r18,r18,r2
 800bb64:	8ca9c83a 	sub	r20,r17,r18
 800bb68:	a007883a 	mov	r3,r20
 800bb6c:	00004406 	br	800bc80 <__umoddi3+0x2a4>
 800bb70:	3000041e 	bne	r6,zero,800bb84 <__umoddi3+0x1a8>
 800bb74:	01000044 	movi	r4,1
 800bb78:	000b883a 	mov	r5,zero
 800bb7c:	800c1140 	call	800c114 <__udivsi3>
 800bb80:	1021883a 	mov	r16,r2
 800bb84:	00bfffd4 	movui	r2,65535
 800bb88:	1400542e 	bgeu	r2,r16,800bcdc <__umoddi3+0x300>
 800bb8c:	00804034 	movhi	r2,256
 800bb90:	10bfffc4 	addi	r2,r2,-1
 800bb94:	14010736 	bltu	r2,r16,800bfb4 <__umoddi3+0x5d8>
 800bb98:	00800404 	movi	r2,16
 800bb9c:	1007883a 	mov	r3,r2
 800bba0:	8084d83a 	srl	r2,r16,r2
 800bba4:	01020074 	movhi	r4,2049
 800bba8:	21068204 	addi	r4,r4,6664
 800bbac:	05400804 	movi	r21,32
 800bbb0:	2085883a 	add	r2,r4,r2
 800bbb4:	10800003 	ldbu	r2,0(r2)
 800bbb8:	10c7883a 	add	r3,r2,r3
 800bbbc:	a8ebc83a 	sub	r21,r21,r3
 800bbc0:	a800b91e 	bne	r21,zero,800bea8 <__umoddi3+0x4cc>
 800bbc4:	8028d43a 	srli	r20,r16,16
 800bbc8:	8c23c83a 	sub	r17,r17,r16
 800bbcc:	85bfffcc 	andi	r22,r16,65535
 800bbd0:	0025883a 	mov	r18,zero
 800bbd4:	8809883a 	mov	r4,r17
 800bbd8:	a00b883a 	mov	r5,r20
 800bbdc:	800c11c0 	call	800c11c <__umodsi3>
 800bbe0:	8809883a 	mov	r4,r17
 800bbe4:	a00b883a 	mov	r5,r20
 800bbe8:	102b883a 	mov	r21,r2
 800bbec:	800c1140 	call	800c114 <__udivsi3>
 800bbf0:	1009883a 	mov	r4,r2
 800bbf4:	b00b883a 	mov	r5,r22
 800bbf8:	800c1240 	call	800c124 <__mulsi3>
 800bbfc:	1009883a 	mov	r4,r2
 800bc00:	a806943a 	slli	r3,r21,16
 800bc04:	9804d43a 	srli	r2,r19,16
 800bc08:	1886b03a 	or	r3,r3,r2
 800bc0c:	1900032e 	bgeu	r3,r4,800bc1c <__umoddi3+0x240>
 800bc10:	1c07883a 	add	r3,r3,r16
 800bc14:	1c000136 	bltu	r3,r16,800bc1c <__umoddi3+0x240>
 800bc18:	1900f436 	bltu	r3,r4,800bfec <__umoddi3+0x610>
 800bc1c:	1923c83a 	sub	r17,r3,r4
 800bc20:	8809883a 	mov	r4,r17
 800bc24:	a00b883a 	mov	r5,r20
 800bc28:	800c11c0 	call	800c11c <__umodsi3>
 800bc2c:	102b883a 	mov	r21,r2
 800bc30:	8809883a 	mov	r4,r17
 800bc34:	a00b883a 	mov	r5,r20
 800bc38:	a82a943a 	slli	r21,r21,16
 800bc3c:	800c1140 	call	800c114 <__udivsi3>
 800bc40:	1009883a 	mov	r4,r2
 800bc44:	b00b883a 	mov	r5,r22
 800bc48:	9cffffcc 	andi	r19,r19,65535
 800bc4c:	800c1240 	call	800c124 <__mulsi3>
 800bc50:	ace6b03a 	or	r19,r21,r19
 800bc54:	9880042e 	bgeu	r19,r2,800bc68 <__umoddi3+0x28c>
 800bc58:	9c27883a 	add	r19,r19,r16
 800bc5c:	9c000236 	bltu	r19,r16,800bc68 <__umoddi3+0x28c>
 800bc60:	9880012e 	bgeu	r19,r2,800bc68 <__umoddi3+0x28c>
 800bc64:	9c27883a 	add	r19,r19,r16
 800bc68:	9885c83a 	sub	r2,r19,r2
 800bc6c:	1484d83a 	srl	r2,r2,r18
 800bc70:	0007883a 	mov	r3,zero
 800bc74:	00000206 	br	800bc80 <__umoddi3+0x2a4>
 800bc78:	2005883a 	mov	r2,r4
 800bc7c:	2807883a 	mov	r3,r5
 800bc80:	dfc00c17 	ldw	ra,48(sp)
 800bc84:	df000b17 	ldw	fp,44(sp)
 800bc88:	ddc00a17 	ldw	r23,40(sp)
 800bc8c:	dd800917 	ldw	r22,36(sp)
 800bc90:	dd400817 	ldw	r21,32(sp)
 800bc94:	dd000717 	ldw	r20,28(sp)
 800bc98:	dcc00617 	ldw	r19,24(sp)
 800bc9c:	dc800517 	ldw	r18,20(sp)
 800bca0:	dc400417 	ldw	r17,16(sp)
 800bca4:	dc000317 	ldw	r16,12(sp)
 800bca8:	dec00d04 	addi	sp,sp,52
 800bcac:	f800283a 	ret
 800bcb0:	00803fc4 	movi	r2,255
 800bcb4:	11c0b336 	bltu	r2,r7,800bf84 <__umoddi3+0x5a8>
 800bcb8:	0007883a 	mov	r3,zero
 800bcbc:	0027883a 	mov	r19,zero
 800bcc0:	003f9a06 	br	800bb2c <__alt_data_end+0xf800bb2c>
 800bcc4:	00804034 	movhi	r2,256
 800bcc8:	10bfffc4 	addi	r2,r2,-1
 800bccc:	1180b336 	bltu	r2,r6,800bf9c <__umoddi3+0x5c0>
 800bcd0:	00800404 	movi	r2,16
 800bcd4:	1009883a 	mov	r4,r2
 800bcd8:	003f5806 	br	800ba3c <__alt_data_end+0xf800ba3c>
 800bcdc:	00803fc4 	movi	r2,255
 800bce0:	1400b136 	bltu	r2,r16,800bfa8 <__umoddi3+0x5cc>
 800bce4:	0005883a 	mov	r2,zero
 800bce8:	0007883a 	mov	r3,zero
 800bcec:	003fac06 	br	800bba0 <__alt_data_end+0xf800bba0>
 800bcf0:	34c4d83a 	srl	r2,r6,r19
 800bcf4:	3c0e983a 	sll	r7,r7,r16
 800bcf8:	8cf8d83a 	srl	fp,r17,r19
 800bcfc:	8c22983a 	sll	r17,r17,r16
 800bd00:	38a8b03a 	or	r20,r7,r2
 800bd04:	a02ad43a 	srli	r21,r20,16
 800bd08:	94c4d83a 	srl	r2,r18,r19
 800bd0c:	e009883a 	mov	r4,fp
 800bd10:	a80b883a 	mov	r5,r21
 800bd14:	342c983a 	sll	r22,r6,r16
 800bd18:	88a2b03a 	or	r17,r17,r2
 800bd1c:	800c11c0 	call	800c11c <__umodsi3>
 800bd20:	e009883a 	mov	r4,fp
 800bd24:	a80b883a 	mov	r5,r21
 800bd28:	a5ffffcc 	andi	r23,r20,65535
 800bd2c:	d8800215 	stw	r2,8(sp)
 800bd30:	800c1140 	call	800c114 <__udivsi3>
 800bd34:	1009883a 	mov	r4,r2
 800bd38:	b80b883a 	mov	r5,r23
 800bd3c:	1039883a 	mov	fp,r2
 800bd40:	800c1240 	call	800c124 <__mulsi3>
 800bd44:	d8c00217 	ldw	r3,8(sp)
 800bd48:	1009883a 	mov	r4,r2
 800bd4c:	8804d43a 	srli	r2,r17,16
 800bd50:	1806943a 	slli	r3,r3,16
 800bd54:	9424983a 	sll	r18,r18,r16
 800bd58:	1886b03a 	or	r3,r3,r2
 800bd5c:	1900042e 	bgeu	r3,r4,800bd70 <__umoddi3+0x394>
 800bd60:	1d07883a 	add	r3,r3,r20
 800bd64:	e0bfffc4 	addi	r2,fp,-1
 800bd68:	1d009c2e 	bgeu	r3,r20,800bfdc <__umoddi3+0x600>
 800bd6c:	1039883a 	mov	fp,r2
 800bd70:	1907c83a 	sub	r3,r3,r4
 800bd74:	1809883a 	mov	r4,r3
 800bd78:	a80b883a 	mov	r5,r21
 800bd7c:	d8c00215 	stw	r3,8(sp)
 800bd80:	800c11c0 	call	800c11c <__umodsi3>
 800bd84:	d8c00217 	ldw	r3,8(sp)
 800bd88:	a80b883a 	mov	r5,r21
 800bd8c:	d8800015 	stw	r2,0(sp)
 800bd90:	1809883a 	mov	r4,r3
 800bd94:	800c1140 	call	800c114 <__udivsi3>
 800bd98:	1009883a 	mov	r4,r2
 800bd9c:	b80b883a 	mov	r5,r23
 800bda0:	102b883a 	mov	r21,r2
 800bda4:	800c1240 	call	800c124 <__mulsi3>
 800bda8:	d9c00017 	ldw	r7,0(sp)
 800bdac:	8c7fffcc 	andi	r17,r17,65535
 800bdb0:	380e943a 	slli	r7,r7,16
 800bdb4:	3c4eb03a 	or	r7,r7,r17
 800bdb8:	3880042e 	bgeu	r7,r2,800bdcc <__umoddi3+0x3f0>
 800bdbc:	3d0f883a 	add	r7,r7,r20
 800bdc0:	a8ffffc4 	addi	r3,r21,-1
 800bdc4:	3d00812e 	bgeu	r7,r20,800bfcc <__umoddi3+0x5f0>
 800bdc8:	182b883a 	mov	r21,r3
 800bdcc:	e038943a 	slli	fp,fp,16
 800bdd0:	b010d43a 	srli	r8,r22,16
 800bdd4:	b1bfffcc 	andi	r6,r22,65535
 800bdd8:	af2ab03a 	or	r21,r21,fp
 800bddc:	a82ed43a 	srli	r23,r21,16
 800bde0:	ad7fffcc 	andi	r21,r21,65535
 800bde4:	300b883a 	mov	r5,r6
 800bde8:	a809883a 	mov	r4,r21
 800bdec:	38a3c83a 	sub	r17,r7,r2
 800bdf0:	d9800115 	stw	r6,4(sp)
 800bdf4:	da000015 	stw	r8,0(sp)
 800bdf8:	800c1240 	call	800c124 <__mulsi3>
 800bdfc:	da000017 	ldw	r8,0(sp)
 800be00:	a809883a 	mov	r4,r21
 800be04:	1039883a 	mov	fp,r2
 800be08:	400b883a 	mov	r5,r8
 800be0c:	da000215 	stw	r8,8(sp)
 800be10:	800c1240 	call	800c124 <__mulsi3>
 800be14:	d9800117 	ldw	r6,4(sp)
 800be18:	b809883a 	mov	r4,r23
 800be1c:	d8800015 	stw	r2,0(sp)
 800be20:	300b883a 	mov	r5,r6
 800be24:	800c1240 	call	800c124 <__mulsi3>
 800be28:	d8c00217 	ldw	r3,8(sp)
 800be2c:	b809883a 	mov	r4,r23
 800be30:	102b883a 	mov	r21,r2
 800be34:	180b883a 	mov	r5,r3
 800be38:	800c1240 	call	800c124 <__mulsi3>
 800be3c:	d9c00017 	ldw	r7,0(sp)
 800be40:	1007883a 	mov	r3,r2
 800be44:	e004d43a 	srli	r2,fp,16
 800be48:	a9c9883a 	add	r4,r21,r7
 800be4c:	2089883a 	add	r4,r4,r2
 800be50:	2540022e 	bgeu	r4,r21,800be5c <__umoddi3+0x480>
 800be54:	00800074 	movhi	r2,1
 800be58:	1887883a 	add	r3,r3,r2
 800be5c:	2004d43a 	srli	r2,r4,16
 800be60:	2008943a 	slli	r4,r4,16
 800be64:	e73fffcc 	andi	fp,fp,65535
 800be68:	1887883a 	add	r3,r3,r2
 800be6c:	2709883a 	add	r4,r4,fp
 800be70:	88c03e36 	bltu	r17,r3,800bf6c <__umoddi3+0x590>
 800be74:	88c06226 	beq	r17,r3,800c000 <__umoddi3+0x624>
 800be78:	88c7c83a 	sub	r3,r17,r3
 800be7c:	202d883a 	mov	r22,r4
 800be80:	95adc83a 	sub	r22,r18,r22
 800be84:	95a5803a 	cmpltu	r18,r18,r22
 800be88:	1c87c83a 	sub	r3,r3,r18
 800be8c:	1cc4983a 	sll	r2,r3,r19
 800be90:	b42cd83a 	srl	r22,r22,r16
 800be94:	1c06d83a 	srl	r3,r3,r16
 800be98:	1584b03a 	or	r2,r2,r22
 800be9c:	003f7806 	br	800bc80 <__alt_data_end+0xf800bc80>
 800bea0:	0025883a 	mov	r18,zero
 800bea4:	003ef406 	br	800ba78 <__alt_data_end+0xf800ba78>
 800bea8:	8560983a 	sll	r16,r16,r21
 800beac:	88e6d83a 	srl	r19,r17,r3
 800beb0:	90c6d83a 	srl	r3,r18,r3
 800beb4:	8028d43a 	srli	r20,r16,16
 800beb8:	8d62983a 	sll	r17,r17,r21
 800bebc:	9809883a 	mov	r4,r19
 800bec0:	a00b883a 	mov	r5,r20
 800bec4:	88eeb03a 	or	r23,r17,r3
 800bec8:	800c11c0 	call	800c11c <__umodsi3>
 800becc:	9809883a 	mov	r4,r19
 800bed0:	a00b883a 	mov	r5,r20
 800bed4:	1023883a 	mov	r17,r2
 800bed8:	85bfffcc 	andi	r22,r16,65535
 800bedc:	800c1140 	call	800c114 <__udivsi3>
 800bee0:	1009883a 	mov	r4,r2
 800bee4:	b00b883a 	mov	r5,r22
 800bee8:	800c1240 	call	800c124 <__mulsi3>
 800beec:	1007883a 	mov	r3,r2
 800bef0:	8808943a 	slli	r4,r17,16
 800bef4:	b804d43a 	srli	r2,r23,16
 800bef8:	9566983a 	sll	r19,r18,r21
 800befc:	2088b03a 	or	r4,r4,r2
 800bf00:	20c0042e 	bgeu	r4,r3,800bf14 <__umoddi3+0x538>
 800bf04:	2409883a 	add	r4,r4,r16
 800bf08:	24000236 	bltu	r4,r16,800bf14 <__umoddi3+0x538>
 800bf0c:	20c0012e 	bgeu	r4,r3,800bf14 <__umoddi3+0x538>
 800bf10:	2409883a 	add	r4,r4,r16
 800bf14:	20e5c83a 	sub	r18,r4,r3
 800bf18:	9009883a 	mov	r4,r18
 800bf1c:	a00b883a 	mov	r5,r20
 800bf20:	800c11c0 	call	800c11c <__umodsi3>
 800bf24:	1023883a 	mov	r17,r2
 800bf28:	9009883a 	mov	r4,r18
 800bf2c:	a00b883a 	mov	r5,r20
 800bf30:	8822943a 	slli	r17,r17,16
 800bf34:	800c1140 	call	800c114 <__udivsi3>
 800bf38:	1009883a 	mov	r4,r2
 800bf3c:	b00b883a 	mov	r5,r22
 800bf40:	bdffffcc 	andi	r23,r23,65535
 800bf44:	800c1240 	call	800c124 <__mulsi3>
 800bf48:	8de2b03a 	or	r17,r17,r23
 800bf4c:	8880042e 	bgeu	r17,r2,800bf60 <__umoddi3+0x584>
 800bf50:	8c23883a 	add	r17,r17,r16
 800bf54:	8c000236 	bltu	r17,r16,800bf60 <__umoddi3+0x584>
 800bf58:	8880012e 	bgeu	r17,r2,800bf60 <__umoddi3+0x584>
 800bf5c:	8c23883a 	add	r17,r17,r16
 800bf60:	88a3c83a 	sub	r17,r17,r2
 800bf64:	a825883a 	mov	r18,r21
 800bf68:	003f1a06 	br	800bbd4 <__alt_data_end+0xf800bbd4>
 800bf6c:	25adc83a 	sub	r22,r4,r22
 800bf70:	1d07c83a 	sub	r3,r3,r20
 800bf74:	2589803a 	cmpltu	r4,r4,r22
 800bf78:	1907c83a 	sub	r3,r3,r4
 800bf7c:	88c7c83a 	sub	r3,r17,r3
 800bf80:	003fbf06 	br	800be80 <__alt_data_end+0xf800be80>
 800bf84:	00c00204 	movi	r3,8
 800bf88:	1827883a 	mov	r19,r3
 800bf8c:	003ee706 	br	800bb2c <__alt_data_end+0xf800bb2c>
 800bf90:	00c00604 	movi	r3,24
 800bf94:	1827883a 	mov	r19,r3
 800bf98:	003ee406 	br	800bb2c <__alt_data_end+0xf800bb2c>
 800bf9c:	00800604 	movi	r2,24
 800bfa0:	1009883a 	mov	r4,r2
 800bfa4:	003ea506 	br	800ba3c <__alt_data_end+0xf800ba3c>
 800bfa8:	00800204 	movi	r2,8
 800bfac:	1007883a 	mov	r3,r2
 800bfb0:	003efb06 	br	800bba0 <__alt_data_end+0xf800bba0>
 800bfb4:	00800604 	movi	r2,24
 800bfb8:	1007883a 	mov	r3,r2
 800bfbc:	003ef806 	br	800bba0 <__alt_data_end+0xf800bba0>
 800bfc0:	00800204 	movi	r2,8
 800bfc4:	1009883a 	mov	r4,r2
 800bfc8:	003e9c06 	br	800ba3c <__alt_data_end+0xf800ba3c>
 800bfcc:	38bf7e2e 	bgeu	r7,r2,800bdc8 <__alt_data_end+0xf800bdc8>
 800bfd0:	ad7fff84 	addi	r21,r21,-2
 800bfd4:	3d0f883a 	add	r7,r7,r20
 800bfd8:	003f7c06 	br	800bdcc <__alt_data_end+0xf800bdcc>
 800bfdc:	193f632e 	bgeu	r3,r4,800bd6c <__alt_data_end+0xf800bd6c>
 800bfe0:	e73fff84 	addi	fp,fp,-2
 800bfe4:	1d07883a 	add	r3,r3,r20
 800bfe8:	003f6106 	br	800bd70 <__alt_data_end+0xf800bd70>
 800bfec:	1c07883a 	add	r3,r3,r16
 800bff0:	003f0a06 	br	800bc1c <__alt_data_end+0xf800bc1c>
 800bff4:	9005883a 	mov	r2,r18
 800bff8:	a007883a 	mov	r3,r20
 800bffc:	003f2006 	br	800bc80 <__alt_data_end+0xf800bc80>
 800c000:	913fda36 	bltu	r18,r4,800bf6c <__alt_data_end+0xf800bf6c>
 800c004:	202d883a 	mov	r22,r4
 800c008:	0007883a 	mov	r3,zero
 800c00c:	003f9c06 	br	800be80 <__alt_data_end+0xf800be80>

0800c010 <udivmodsi4>:
 800c010:	2900182e 	bgeu	r5,r4,800c074 <udivmodsi4+0x64>
 800c014:	28001716 	blt	r5,zero,800c074 <udivmodsi4+0x64>
 800c018:	00800804 	movi	r2,32
 800c01c:	00c00044 	movi	r3,1
 800c020:	00000206 	br	800c02c <udivmodsi4+0x1c>
 800c024:	10001126 	beq	r2,zero,800c06c <udivmodsi4+0x5c>
 800c028:	28000516 	blt	r5,zero,800c040 <udivmodsi4+0x30>
 800c02c:	294b883a 	add	r5,r5,r5
 800c030:	10bfffc4 	addi	r2,r2,-1
 800c034:	18c7883a 	add	r3,r3,r3
 800c038:	293ffa36 	bltu	r5,r4,800c024 <__alt_data_end+0xf800c024>
 800c03c:	18000b26 	beq	r3,zero,800c06c <udivmodsi4+0x5c>
 800c040:	0005883a 	mov	r2,zero
 800c044:	21400236 	bltu	r4,r5,800c050 <udivmodsi4+0x40>
 800c048:	2149c83a 	sub	r4,r4,r5
 800c04c:	10c4b03a 	or	r2,r2,r3
 800c050:	1806d07a 	srli	r3,r3,1
 800c054:	280ad07a 	srli	r5,r5,1
 800c058:	183ffa1e 	bne	r3,zero,800c044 <__alt_data_end+0xf800c044>
 800c05c:	3000011e 	bne	r6,zero,800c064 <udivmodsi4+0x54>
 800c060:	f800283a 	ret
 800c064:	2005883a 	mov	r2,r4
 800c068:	f800283a 	ret
 800c06c:	0005883a 	mov	r2,zero
 800c070:	003ffa06 	br	800c05c <__alt_data_end+0xf800c05c>
 800c074:	00c00044 	movi	r3,1
 800c078:	0005883a 	mov	r2,zero
 800c07c:	003ff106 	br	800c044 <__alt_data_end+0xf800c044>

0800c080 <__divsi3>:
 800c080:	deffff04 	addi	sp,sp,-4
 800c084:	dfc00015 	stw	ra,0(sp)
 800c088:	20000916 	blt	r4,zero,800c0b0 <__divsi3+0x30>
 800c08c:	000f883a 	mov	r7,zero
 800c090:	28000a16 	blt	r5,zero,800c0bc <__divsi3+0x3c>
 800c094:	000d883a 	mov	r6,zero
 800c098:	800c0100 	call	800c010 <udivmodsi4>
 800c09c:	38000126 	beq	r7,zero,800c0a4 <__divsi3+0x24>
 800c0a0:	0085c83a 	sub	r2,zero,r2
 800c0a4:	dfc00017 	ldw	ra,0(sp)
 800c0a8:	dec00104 	addi	sp,sp,4
 800c0ac:	f800283a 	ret
 800c0b0:	0109c83a 	sub	r4,zero,r4
 800c0b4:	01c00044 	movi	r7,1
 800c0b8:	283ff60e 	bge	r5,zero,800c094 <__alt_data_end+0xf800c094>
 800c0bc:	014bc83a 	sub	r5,zero,r5
 800c0c0:	39c0005c 	xori	r7,r7,1
 800c0c4:	003ff306 	br	800c094 <__alt_data_end+0xf800c094>

0800c0c8 <__modsi3>:
 800c0c8:	20000316 	blt	r4,zero,800c0d8 <__modsi3+0x10>
 800c0cc:	28000c16 	blt	r5,zero,800c100 <__modsi3+0x38>
 800c0d0:	01800044 	movi	r6,1
 800c0d4:	800c0101 	jmpi	800c010 <udivmodsi4>
 800c0d8:	deffff04 	addi	sp,sp,-4
 800c0dc:	dfc00015 	stw	ra,0(sp)
 800c0e0:	0109c83a 	sub	r4,zero,r4
 800c0e4:	28000916 	blt	r5,zero,800c10c <__modsi3+0x44>
 800c0e8:	01800044 	movi	r6,1
 800c0ec:	800c0100 	call	800c010 <udivmodsi4>
 800c0f0:	0085c83a 	sub	r2,zero,r2
 800c0f4:	dfc00017 	ldw	ra,0(sp)
 800c0f8:	dec00104 	addi	sp,sp,4
 800c0fc:	f800283a 	ret
 800c100:	014bc83a 	sub	r5,zero,r5
 800c104:	01800044 	movi	r6,1
 800c108:	800c0101 	jmpi	800c010 <udivmodsi4>
 800c10c:	014bc83a 	sub	r5,zero,r5
 800c110:	003ff506 	br	800c0e8 <__alt_data_end+0xf800c0e8>

0800c114 <__udivsi3>:
 800c114:	000d883a 	mov	r6,zero
 800c118:	800c0101 	jmpi	800c010 <udivmodsi4>

0800c11c <__umodsi3>:
 800c11c:	01800044 	movi	r6,1
 800c120:	800c0101 	jmpi	800c010 <udivmodsi4>

0800c124 <__mulsi3>:
 800c124:	0005883a 	mov	r2,zero
 800c128:	20000726 	beq	r4,zero,800c148 <__mulsi3+0x24>
 800c12c:	20c0004c 	andi	r3,r4,1
 800c130:	2008d07a 	srli	r4,r4,1
 800c134:	18000126 	beq	r3,zero,800c13c <__mulsi3+0x18>
 800c138:	1145883a 	add	r2,r2,r5
 800c13c:	294b883a 	add	r5,r5,r5
 800c140:	203ffa1e 	bne	r4,zero,800c12c <__alt_data_end+0xf800c12c>
 800c144:	f800283a 	ret
 800c148:	f800283a 	ret

0800c14c <__adddf3>:
 800c14c:	00800434 	movhi	r2,16
 800c150:	10bfffc4 	addi	r2,r2,-1
 800c154:	defffb04 	addi	sp,sp,-20
 800c158:	2890703a 	and	r8,r5,r2
 800c15c:	2806d7fa 	srli	r3,r5,31
 800c160:	3884703a 	and	r2,r7,r2
 800c164:	2014d77a 	srli	r10,r4,29
 800c168:	3812d53a 	srli	r9,r7,20
 800c16c:	dc400115 	stw	r17,4(sp)
 800c170:	100490fa 	slli	r2,r2,3
 800c174:	2822d53a 	srli	r17,r5,20
 800c178:	380ed7fa 	srli	r7,r7,31
 800c17c:	400a90fa 	slli	r5,r8,3
 800c180:	3010d77a 	srli	r8,r6,29
 800c184:	dc800215 	stw	r18,8(sp)
 800c188:	dc000015 	stw	r16,0(sp)
 800c18c:	dfc00415 	stw	ra,16(sp)
 800c190:	dcc00315 	stw	r19,12(sp)
 800c194:	1c803fcc 	andi	r18,r3,255
 800c198:	202090fa 	slli	r16,r4,3
 800c19c:	8c41ffcc 	andi	r17,r17,2047
 800c1a0:	2a8ab03a 	or	r5,r5,r10
 800c1a4:	4901ffcc 	andi	r4,r9,2047
 800c1a8:	1204b03a 	or	r2,r2,r8
 800c1ac:	300c90fa 	slli	r6,r6,3
 800c1b0:	91c07126 	beq	r18,r7,800c378 <__adddf3+0x22c>
 800c1b4:	8907c83a 	sub	r3,r17,r4
 800c1b8:	00c0a00e 	bge	zero,r3,800c43c <__adddf3+0x2f0>
 800c1bc:	2000291e 	bne	r4,zero,800c264 <__adddf3+0x118>
 800c1c0:	1188b03a 	or	r4,r2,r6
 800c1c4:	20008b1e 	bne	r4,zero,800c3f4 <__adddf3+0x2a8>
 800c1c8:	808001cc 	andi	r2,r16,7
 800c1cc:	10005a26 	beq	r2,zero,800c338 <__adddf3+0x1ec>
 800c1d0:	80c003cc 	andi	r3,r16,15
 800c1d4:	00800104 	movi	r2,4
 800c1d8:	18805726 	beq	r3,r2,800c338 <__adddf3+0x1ec>
 800c1dc:	81000104 	addi	r4,r16,4
 800c1e0:	2421803a 	cmpltu	r16,r4,r16
 800c1e4:	2c0b883a 	add	r5,r5,r16
 800c1e8:	2880202c 	andhi	r2,r5,128
 800c1ec:	9007883a 	mov	r3,r18
 800c1f0:	2021883a 	mov	r16,r4
 800c1f4:	10005326 	beq	r2,zero,800c344 <__adddf3+0x1f8>
 800c1f8:	8c400044 	addi	r17,r17,1
 800c1fc:	0081ffc4 	movi	r2,2047
 800c200:	8880ae26 	beq	r17,r2,800c4bc <__adddf3+0x370>
 800c204:	00bfe034 	movhi	r2,65408
 800c208:	10bfffc4 	addi	r2,r2,-1
 800c20c:	288a703a 	and	r5,r5,r2
 800c210:	2804977a 	slli	r2,r5,29
 800c214:	280a927a 	slli	r5,r5,9
 800c218:	8020d0fa 	srli	r16,r16,3
 800c21c:	280ad33a 	srli	r5,r5,12
 800c220:	1404b03a 	or	r2,r2,r16
 800c224:	8c41ffcc 	andi	r17,r17,2047
 800c228:	8822953a 	slli	r17,r17,20
 800c22c:	18c03fcc 	andi	r3,r3,255
 800c230:	180897fa 	slli	r4,r3,31
 800c234:	00c00434 	movhi	r3,16
 800c238:	18ffffc4 	addi	r3,r3,-1
 800c23c:	28c6703a 	and	r3,r5,r3
 800c240:	1c46b03a 	or	r3,r3,r17
 800c244:	1906b03a 	or	r3,r3,r4
 800c248:	dfc00417 	ldw	ra,16(sp)
 800c24c:	dcc00317 	ldw	r19,12(sp)
 800c250:	dc800217 	ldw	r18,8(sp)
 800c254:	dc400117 	ldw	r17,4(sp)
 800c258:	dc000017 	ldw	r16,0(sp)
 800c25c:	dec00504 	addi	sp,sp,20
 800c260:	f800283a 	ret
 800c264:	0101ffc4 	movi	r4,2047
 800c268:	893fd726 	beq	r17,r4,800c1c8 <__alt_data_end+0xf800c1c8>
 800c26c:	10802034 	orhi	r2,r2,128
 800c270:	01000e04 	movi	r4,56
 800c274:	20c09416 	blt	r4,r3,800c4c8 <__adddf3+0x37c>
 800c278:	010007c4 	movi	r4,31
 800c27c:	20c0b716 	blt	r4,r3,800c55c <__adddf3+0x410>
 800c280:	01000804 	movi	r4,32
 800c284:	20c9c83a 	sub	r4,r4,r3
 800c288:	30ced83a 	srl	r7,r6,r3
 800c28c:	1110983a 	sll	r8,r2,r4
 800c290:	3108983a 	sll	r4,r6,r4
 800c294:	10c6d83a 	srl	r3,r2,r3
 800c298:	41c4b03a 	or	r2,r8,r7
 800c29c:	2008c03a 	cmpne	r4,r4,zero
 800c2a0:	110cb03a 	or	r6,r2,r4
 800c2a4:	818dc83a 	sub	r6,r16,r6
 800c2a8:	81a1803a 	cmpltu	r16,r16,r6
 800c2ac:	28cbc83a 	sub	r5,r5,r3
 800c2b0:	2c0bc83a 	sub	r5,r5,r16
 800c2b4:	3021883a 	mov	r16,r6
 800c2b8:	2880202c 	andhi	r2,r5,128
 800c2bc:	103fc226 	beq	r2,zero,800c1c8 <__alt_data_end+0xf800c1c8>
 800c2c0:	04c02034 	movhi	r19,128
 800c2c4:	9cffffc4 	addi	r19,r19,-1
 800c2c8:	2ce6703a 	and	r19,r5,r19
 800c2cc:	98006c26 	beq	r19,zero,800c480 <__adddf3+0x334>
 800c2d0:	9809883a 	mov	r4,r19
 800c2d4:	800e8240 	call	800e824 <__clzsi2>
 800c2d8:	10fffe04 	addi	r3,r2,-8
 800c2dc:	010007c4 	movi	r4,31
 800c2e0:	20c06d16 	blt	r4,r3,800c498 <__adddf3+0x34c>
 800c2e4:	01000a04 	movi	r4,40
 800c2e8:	2085c83a 	sub	r2,r4,r2
 800c2ec:	8084d83a 	srl	r2,r16,r2
 800c2f0:	98e6983a 	sll	r19,r19,r3
 800c2f4:	80e0983a 	sll	r16,r16,r3
 800c2f8:	14c4b03a 	or	r2,r2,r19
 800c2fc:	1c406a16 	blt	r3,r17,800c4a8 <__adddf3+0x35c>
 800c300:	1c63c83a 	sub	r17,r3,r17
 800c304:	89400044 	addi	r5,r17,1
 800c308:	00c007c4 	movi	r3,31
 800c30c:	19408616 	blt	r3,r5,800c528 <__adddf3+0x3dc>
 800c310:	1c47c83a 	sub	r3,r3,r17
 800c314:	8148d83a 	srl	r4,r16,r5
 800c318:	80e0983a 	sll	r16,r16,r3
 800c31c:	10c6983a 	sll	r3,r2,r3
 800c320:	114ad83a 	srl	r5,r2,r5
 800c324:	8004c03a 	cmpne	r2,r16,zero
 800c328:	20e0b03a 	or	r16,r4,r3
 800c32c:	80a0b03a 	or	r16,r16,r2
 800c330:	0023883a 	mov	r17,zero
 800c334:	003fa406 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c338:	2880202c 	andhi	r2,r5,128
 800c33c:	9007883a 	mov	r3,r18
 800c340:	103fad1e 	bne	r2,zero,800c1f8 <__alt_data_end+0xf800c1f8>
 800c344:	2804977a 	slli	r2,r5,29
 800c348:	8020d0fa 	srli	r16,r16,3
 800c34c:	0101ffc4 	movi	r4,2047
 800c350:	280ad0fa 	srli	r5,r5,3
 800c354:	1404b03a 	or	r2,r2,r16
 800c358:	8900031e 	bne	r17,r4,800c368 <__adddf3+0x21c>
 800c35c:	1148b03a 	or	r4,r2,r5
 800c360:	20005626 	beq	r4,zero,800c4bc <__adddf3+0x370>
 800c364:	29400234 	orhi	r5,r5,8
 800c368:	01000434 	movhi	r4,16
 800c36c:	213fffc4 	addi	r4,r4,-1
 800c370:	290a703a 	and	r5,r5,r4
 800c374:	003fab06 	br	800c224 <__alt_data_end+0xf800c224>
 800c378:	890fc83a 	sub	r7,r17,r4
 800c37c:	01c0560e 	bge	zero,r7,800c4d8 <__adddf3+0x38c>
 800c380:	20002426 	beq	r4,zero,800c414 <__adddf3+0x2c8>
 800c384:	0101ffc4 	movi	r4,2047
 800c388:	893f8f26 	beq	r17,r4,800c1c8 <__alt_data_end+0xf800c1c8>
 800c38c:	10802034 	orhi	r2,r2,128
 800c390:	01000e04 	movi	r4,56
 800c394:	21c09d0e 	bge	r4,r7,800c60c <__adddf3+0x4c0>
 800c398:	118cb03a 	or	r6,r2,r6
 800c39c:	300cc03a 	cmpne	r6,r6,zero
 800c3a0:	000f883a 	mov	r7,zero
 800c3a4:	340d883a 	add	r6,r6,r16
 800c3a8:	3421803a 	cmpltu	r16,r6,r16
 800c3ac:	394b883a 	add	r5,r7,r5
 800c3b0:	2c0b883a 	add	r5,r5,r16
 800c3b4:	3021883a 	mov	r16,r6
 800c3b8:	2880202c 	andhi	r2,r5,128
 800c3bc:	103f8226 	beq	r2,zero,800c1c8 <__alt_data_end+0xf800c1c8>
 800c3c0:	8c400044 	addi	r17,r17,1
 800c3c4:	0081ffc4 	movi	r2,2047
 800c3c8:	8880cb26 	beq	r17,r2,800c6f8 <__adddf3+0x5ac>
 800c3cc:	00bfe034 	movhi	r2,65408
 800c3d0:	10bfffc4 	addi	r2,r2,-1
 800c3d4:	288a703a 	and	r5,r5,r2
 800c3d8:	8006d07a 	srli	r3,r16,1
 800c3dc:	280497fa 	slli	r2,r5,31
 800c3e0:	8400004c 	andi	r16,r16,1
 800c3e4:	80e0b03a 	or	r16,r16,r3
 800c3e8:	80a0b03a 	or	r16,r16,r2
 800c3ec:	280ad07a 	srli	r5,r5,1
 800c3f0:	003f7506 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c3f4:	18ffffc4 	addi	r3,r3,-1
 800c3f8:	1800481e 	bne	r3,zero,800c51c <__adddf3+0x3d0>
 800c3fc:	818dc83a 	sub	r6,r16,r6
 800c400:	81a1803a 	cmpltu	r16,r16,r6
 800c404:	288bc83a 	sub	r5,r5,r2
 800c408:	2c0bc83a 	sub	r5,r5,r16
 800c40c:	3021883a 	mov	r16,r6
 800c410:	003fa906 	br	800c2b8 <__alt_data_end+0xf800c2b8>
 800c414:	1188b03a 	or	r4,r2,r6
 800c418:	203f6b26 	beq	r4,zero,800c1c8 <__alt_data_end+0xf800c1c8>
 800c41c:	39ffffc4 	addi	r7,r7,-1
 800c420:	3800931e 	bne	r7,zero,800c670 <__adddf3+0x524>
 800c424:	340d883a 	add	r6,r6,r16
 800c428:	3421803a 	cmpltu	r16,r6,r16
 800c42c:	114b883a 	add	r5,r2,r5
 800c430:	2c0b883a 	add	r5,r5,r16
 800c434:	3021883a 	mov	r16,r6
 800c438:	003fdf06 	br	800c3b8 <__alt_data_end+0xf800c3b8>
 800c43c:	1800531e 	bne	r3,zero,800c58c <__adddf3+0x440>
 800c440:	88c00044 	addi	r3,r17,1
 800c444:	18c1ffcc 	andi	r3,r3,2047
 800c448:	01000044 	movi	r4,1
 800c44c:	20c0a00e 	bge	r4,r3,800c6d0 <__adddf3+0x584>
 800c450:	8187c83a 	sub	r3,r16,r6
 800c454:	80c9803a 	cmpltu	r4,r16,r3
 800c458:	28a7c83a 	sub	r19,r5,r2
 800c45c:	9927c83a 	sub	r19,r19,r4
 800c460:	9900202c 	andhi	r4,r19,128
 800c464:	20006226 	beq	r4,zero,800c5f0 <__adddf3+0x4a4>
 800c468:	3421c83a 	sub	r16,r6,r16
 800c46c:	1145c83a 	sub	r2,r2,r5
 800c470:	340d803a 	cmpltu	r6,r6,r16
 800c474:	11a7c83a 	sub	r19,r2,r6
 800c478:	3825883a 	mov	r18,r7
 800c47c:	983f941e 	bne	r19,zero,800c2d0 <__alt_data_end+0xf800c2d0>
 800c480:	8009883a 	mov	r4,r16
 800c484:	800e8240 	call	800e824 <__clzsi2>
 800c488:	10800804 	addi	r2,r2,32
 800c48c:	10fffe04 	addi	r3,r2,-8
 800c490:	010007c4 	movi	r4,31
 800c494:	20ff930e 	bge	r4,r3,800c2e4 <__alt_data_end+0xf800c2e4>
 800c498:	10bff604 	addi	r2,r2,-40
 800c49c:	8084983a 	sll	r2,r16,r2
 800c4a0:	0021883a 	mov	r16,zero
 800c4a4:	1c7f960e 	bge	r3,r17,800c300 <__alt_data_end+0xf800c300>
 800c4a8:	017fe034 	movhi	r5,65408
 800c4ac:	297fffc4 	addi	r5,r5,-1
 800c4b0:	88e3c83a 	sub	r17,r17,r3
 800c4b4:	114a703a 	and	r5,r2,r5
 800c4b8:	003f4306 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c4bc:	000b883a 	mov	r5,zero
 800c4c0:	0005883a 	mov	r2,zero
 800c4c4:	003f5706 	br	800c224 <__alt_data_end+0xf800c224>
 800c4c8:	118cb03a 	or	r6,r2,r6
 800c4cc:	300cc03a 	cmpne	r6,r6,zero
 800c4d0:	0007883a 	mov	r3,zero
 800c4d4:	003f7306 	br	800c2a4 <__alt_data_end+0xf800c2a4>
 800c4d8:	3800961e 	bne	r7,zero,800c734 <__adddf3+0x5e8>
 800c4dc:	89000044 	addi	r4,r17,1
 800c4e0:	2201ffcc 	andi	r8,r4,2047
 800c4e4:	01c00044 	movi	r7,1
 800c4e8:	3a00680e 	bge	r7,r8,800c68c <__adddf3+0x540>
 800c4ec:	01c1ffc4 	movi	r7,2047
 800c4f0:	21c0a726 	beq	r4,r7,800c790 <__adddf3+0x644>
 800c4f4:	340d883a 	add	r6,r6,r16
 800c4f8:	3421803a 	cmpltu	r16,r6,r16
 800c4fc:	114b883a 	add	r5,r2,r5
 800c500:	2c0b883a 	add	r5,r5,r16
 800c504:	282097fa 	slli	r16,r5,31
 800c508:	300cd07a 	srli	r6,r6,1
 800c50c:	280ad07a 	srli	r5,r5,1
 800c510:	2023883a 	mov	r17,r4
 800c514:	81a0b03a 	or	r16,r16,r6
 800c518:	003f2b06 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c51c:	0101ffc4 	movi	r4,2047
 800c520:	893f531e 	bne	r17,r4,800c270 <__alt_data_end+0xf800c270>
 800c524:	003f2806 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c528:	893ff844 	addi	r4,r17,-31
 800c52c:	00c00804 	movi	r3,32
 800c530:	1108d83a 	srl	r4,r2,r4
 800c534:	28c05126 	beq	r5,r3,800c67c <__adddf3+0x530>
 800c538:	00c00fc4 	movi	r3,63
 800c53c:	1c63c83a 	sub	r17,r3,r17
 800c540:	1444983a 	sll	r2,r2,r17
 800c544:	1420b03a 	or	r16,r2,r16
 800c548:	8020c03a 	cmpne	r16,r16,zero
 800c54c:	8120b03a 	or	r16,r16,r4
 800c550:	000b883a 	mov	r5,zero
 800c554:	0023883a 	mov	r17,zero
 800c558:	003f1b06 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c55c:	193ff804 	addi	r4,r3,-32
 800c560:	01c00804 	movi	r7,32
 800c564:	1108d83a 	srl	r4,r2,r4
 800c568:	19c04626 	beq	r3,r7,800c684 <__adddf3+0x538>
 800c56c:	01c01004 	movi	r7,64
 800c570:	38c7c83a 	sub	r3,r7,r3
 800c574:	10c4983a 	sll	r2,r2,r3
 800c578:	118cb03a 	or	r6,r2,r6
 800c57c:	300cc03a 	cmpne	r6,r6,zero
 800c580:	310cb03a 	or	r6,r6,r4
 800c584:	0007883a 	mov	r3,zero
 800c588:	003f4606 	br	800c2a4 <__alt_data_end+0xf800c2a4>
 800c58c:	88002b26 	beq	r17,zero,800c63c <__adddf3+0x4f0>
 800c590:	0201ffc4 	movi	r8,2047
 800c594:	22002f26 	beq	r4,r8,800c654 <__adddf3+0x508>
 800c598:	00c7c83a 	sub	r3,zero,r3
 800c59c:	29402034 	orhi	r5,r5,128
 800c5a0:	02000e04 	movi	r8,56
 800c5a4:	40c07616 	blt	r8,r3,800c780 <__adddf3+0x634>
 800c5a8:	020007c4 	movi	r8,31
 800c5ac:	40c0d216 	blt	r8,r3,800c8f8 <__adddf3+0x7ac>
 800c5b0:	02000804 	movi	r8,32
 800c5b4:	40d1c83a 	sub	r8,r8,r3
 800c5b8:	2a14983a 	sll	r10,r5,r8
 800c5bc:	80d2d83a 	srl	r9,r16,r3
 800c5c0:	8210983a 	sll	r8,r16,r8
 800c5c4:	28cad83a 	srl	r5,r5,r3
 800c5c8:	5252b03a 	or	r9,r10,r9
 800c5cc:	4006c03a 	cmpne	r3,r8,zero
 800c5d0:	48e0b03a 	or	r16,r9,r3
 800c5d4:	3421c83a 	sub	r16,r6,r16
 800c5d8:	114bc83a 	sub	r5,r2,r5
 800c5dc:	340d803a 	cmpltu	r6,r6,r16
 800c5e0:	298bc83a 	sub	r5,r5,r6
 800c5e4:	2023883a 	mov	r17,r4
 800c5e8:	3825883a 	mov	r18,r7
 800c5ec:	003f3206 	br	800c2b8 <__alt_data_end+0xf800c2b8>
 800c5f0:	98c4b03a 	or	r2,r19,r3
 800c5f4:	10001c1e 	bne	r2,zero,800c668 <__adddf3+0x51c>
 800c5f8:	0007883a 	mov	r3,zero
 800c5fc:	000b883a 	mov	r5,zero
 800c600:	0021883a 	mov	r16,zero
 800c604:	0023883a 	mov	r17,zero
 800c608:	003f4e06 	br	800c344 <__alt_data_end+0xf800c344>
 800c60c:	010007c4 	movi	r4,31
 800c610:	21c03c16 	blt	r4,r7,800c704 <__adddf3+0x5b8>
 800c614:	01000804 	movi	r4,32
 800c618:	21c9c83a 	sub	r4,r4,r7
 800c61c:	31d0d83a 	srl	r8,r6,r7
 800c620:	1112983a 	sll	r9,r2,r4
 800c624:	3108983a 	sll	r4,r6,r4
 800c628:	11ced83a 	srl	r7,r2,r7
 800c62c:	4a04b03a 	or	r2,r9,r8
 800c630:	2008c03a 	cmpne	r4,r4,zero
 800c634:	110cb03a 	or	r6,r2,r4
 800c638:	003f5a06 	br	800c3a4 <__alt_data_end+0xf800c3a4>
 800c63c:	2c10b03a 	or	r8,r5,r16
 800c640:	40000426 	beq	r8,zero,800c654 <__adddf3+0x508>
 800c644:	00c6303a 	nor	r3,zero,r3
 800c648:	183fe226 	beq	r3,zero,800c5d4 <__alt_data_end+0xf800c5d4>
 800c64c:	0201ffc4 	movi	r8,2047
 800c650:	223fd31e 	bne	r4,r8,800c5a0 <__alt_data_end+0xf800c5a0>
 800c654:	100b883a 	mov	r5,r2
 800c658:	3021883a 	mov	r16,r6
 800c65c:	2023883a 	mov	r17,r4
 800c660:	3825883a 	mov	r18,r7
 800c664:	003ed806 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c668:	1821883a 	mov	r16,r3
 800c66c:	003f1706 	br	800c2cc <__alt_data_end+0xf800c2cc>
 800c670:	0101ffc4 	movi	r4,2047
 800c674:	893f461e 	bne	r17,r4,800c390 <__alt_data_end+0xf800c390>
 800c678:	003ed306 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c67c:	0005883a 	mov	r2,zero
 800c680:	003fb006 	br	800c544 <__alt_data_end+0xf800c544>
 800c684:	0005883a 	mov	r2,zero
 800c688:	003fbb06 	br	800c578 <__alt_data_end+0xf800c578>
 800c68c:	2c06b03a 	or	r3,r5,r16
 800c690:	8800841e 	bne	r17,zero,800c8a4 <__adddf3+0x758>
 800c694:	1800b226 	beq	r3,zero,800c960 <__adddf3+0x814>
 800c698:	1186b03a 	or	r3,r2,r6
 800c69c:	183eca26 	beq	r3,zero,800c1c8 <__alt_data_end+0xf800c1c8>
 800c6a0:	340d883a 	add	r6,r6,r16
 800c6a4:	114b883a 	add	r5,r2,r5
 800c6a8:	3421803a 	cmpltu	r16,r6,r16
 800c6ac:	2c0b883a 	add	r5,r5,r16
 800c6b0:	2880202c 	andhi	r2,r5,128
 800c6b4:	1000c026 	beq	r2,zero,800c9b8 <__adddf3+0x86c>
 800c6b8:	00bfe034 	movhi	r2,65408
 800c6bc:	10bfffc4 	addi	r2,r2,-1
 800c6c0:	288a703a 	and	r5,r5,r2
 800c6c4:	3021883a 	mov	r16,r6
 800c6c8:	3823883a 	mov	r17,r7
 800c6cc:	003ebe06 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c6d0:	2c06b03a 	or	r3,r5,r16
 800c6d4:	8800221e 	bne	r17,zero,800c760 <__adddf3+0x614>
 800c6d8:	1800481e 	bne	r3,zero,800c7fc <__adddf3+0x6b0>
 800c6dc:	1186b03a 	or	r3,r2,r6
 800c6e0:	18000426 	beq	r3,zero,800c6f4 <__adddf3+0x5a8>
 800c6e4:	100b883a 	mov	r5,r2
 800c6e8:	3021883a 	mov	r16,r6
 800c6ec:	3825883a 	mov	r18,r7
 800c6f0:	003eb506 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c6f4:	0007883a 	mov	r3,zero
 800c6f8:	000b883a 	mov	r5,zero
 800c6fc:	0021883a 	mov	r16,zero
 800c700:	003f1006 	br	800c344 <__alt_data_end+0xf800c344>
 800c704:	393ff804 	addi	r4,r7,-32
 800c708:	02000804 	movi	r8,32
 800c70c:	1108d83a 	srl	r4,r2,r4
 800c710:	3a007726 	beq	r7,r8,800c8f0 <__adddf3+0x7a4>
 800c714:	02001004 	movi	r8,64
 800c718:	41cfc83a 	sub	r7,r8,r7
 800c71c:	11c4983a 	sll	r2,r2,r7
 800c720:	118cb03a 	or	r6,r2,r6
 800c724:	300cc03a 	cmpne	r6,r6,zero
 800c728:	310cb03a 	or	r6,r6,r4
 800c72c:	000f883a 	mov	r7,zero
 800c730:	003f1c06 	br	800c3a4 <__alt_data_end+0xf800c3a4>
 800c734:	88001a1e 	bne	r17,zero,800c7a0 <__adddf3+0x654>
 800c738:	2c10b03a 	or	r8,r5,r16
 800c73c:	40005526 	beq	r8,zero,800c894 <__adddf3+0x748>
 800c740:	01ce303a 	nor	r7,zero,r7
 800c744:	3800511e 	bne	r7,zero,800c88c <__adddf3+0x740>
 800c748:	81a1883a 	add	r16,r16,r6
 800c74c:	114b883a 	add	r5,r2,r5
 800c750:	818d803a 	cmpltu	r6,r16,r6
 800c754:	298b883a 	add	r5,r5,r6
 800c758:	2023883a 	mov	r17,r4
 800c75c:	003f1606 	br	800c3b8 <__alt_data_end+0xf800c3b8>
 800c760:	1800341e 	bne	r3,zero,800c834 <__adddf3+0x6e8>
 800c764:	1186b03a 	or	r3,r2,r6
 800c768:	18006f26 	beq	r3,zero,800c928 <__adddf3+0x7dc>
 800c76c:	100b883a 	mov	r5,r2
 800c770:	3021883a 	mov	r16,r6
 800c774:	3825883a 	mov	r18,r7
 800c778:	0441ffc4 	movi	r17,2047
 800c77c:	003e9206 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c780:	2c20b03a 	or	r16,r5,r16
 800c784:	8020c03a 	cmpne	r16,r16,zero
 800c788:	000b883a 	mov	r5,zero
 800c78c:	003f9106 	br	800c5d4 <__alt_data_end+0xf800c5d4>
 800c790:	2023883a 	mov	r17,r4
 800c794:	000b883a 	mov	r5,zero
 800c798:	0021883a 	mov	r16,zero
 800c79c:	003ee906 	br	800c344 <__alt_data_end+0xf800c344>
 800c7a0:	0201ffc4 	movi	r8,2047
 800c7a4:	22003b26 	beq	r4,r8,800c894 <__adddf3+0x748>
 800c7a8:	01cfc83a 	sub	r7,zero,r7
 800c7ac:	29402034 	orhi	r5,r5,128
 800c7b0:	02000e04 	movi	r8,56
 800c7b4:	41c06216 	blt	r8,r7,800c940 <__adddf3+0x7f4>
 800c7b8:	020007c4 	movi	r8,31
 800c7bc:	41c07016 	blt	r8,r7,800c980 <__adddf3+0x834>
 800c7c0:	02000804 	movi	r8,32
 800c7c4:	41d1c83a 	sub	r8,r8,r7
 800c7c8:	2a14983a 	sll	r10,r5,r8
 800c7cc:	81d2d83a 	srl	r9,r16,r7
 800c7d0:	8210983a 	sll	r8,r16,r8
 800c7d4:	29cad83a 	srl	r5,r5,r7
 800c7d8:	5252b03a 	or	r9,r10,r9
 800c7dc:	400ec03a 	cmpne	r7,r8,zero
 800c7e0:	49e0b03a 	or	r16,r9,r7
 800c7e4:	81a1883a 	add	r16,r16,r6
 800c7e8:	2885883a 	add	r2,r5,r2
 800c7ec:	818d803a 	cmpltu	r6,r16,r6
 800c7f0:	118b883a 	add	r5,r2,r6
 800c7f4:	2023883a 	mov	r17,r4
 800c7f8:	003eef06 	br	800c3b8 <__alt_data_end+0xf800c3b8>
 800c7fc:	1186b03a 	or	r3,r2,r6
 800c800:	183e7126 	beq	r3,zero,800c1c8 <__alt_data_end+0xf800c1c8>
 800c804:	8187c83a 	sub	r3,r16,r6
 800c808:	80d1803a 	cmpltu	r8,r16,r3
 800c80c:	2889c83a 	sub	r4,r5,r2
 800c810:	2209c83a 	sub	r4,r4,r8
 800c814:	2200202c 	andhi	r8,r4,128
 800c818:	40005426 	beq	r8,zero,800c96c <__adddf3+0x820>
 800c81c:	3421c83a 	sub	r16,r6,r16
 800c820:	114bc83a 	sub	r5,r2,r5
 800c824:	340d803a 	cmpltu	r6,r6,r16
 800c828:	298bc83a 	sub	r5,r5,r6
 800c82c:	3825883a 	mov	r18,r7
 800c830:	003e6506 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c834:	1186b03a 	or	r3,r2,r6
 800c838:	18002b26 	beq	r3,zero,800c8e8 <__adddf3+0x79c>
 800c83c:	2806d0fa 	srli	r3,r5,3
 800c840:	8020d0fa 	srli	r16,r16,3
 800c844:	280a977a 	slli	r5,r5,29
 800c848:	1900022c 	andhi	r4,r3,8
 800c84c:	2c20b03a 	or	r16,r5,r16
 800c850:	20000826 	beq	r4,zero,800c874 <__adddf3+0x728>
 800c854:	1008d0fa 	srli	r4,r2,3
 800c858:	2140022c 	andhi	r5,r4,8
 800c85c:	2800051e 	bne	r5,zero,800c874 <__adddf3+0x728>
 800c860:	300cd0fa 	srli	r6,r6,3
 800c864:	1004977a 	slli	r2,r2,29
 800c868:	2007883a 	mov	r3,r4
 800c86c:	3825883a 	mov	r18,r7
 800c870:	11a0b03a 	or	r16,r2,r6
 800c874:	800ad77a 	srli	r5,r16,29
 800c878:	180690fa 	slli	r3,r3,3
 800c87c:	802090fa 	slli	r16,r16,3
 800c880:	0441ffc4 	movi	r17,2047
 800c884:	28cab03a 	or	r5,r5,r3
 800c888:	003e4f06 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c88c:	0201ffc4 	movi	r8,2047
 800c890:	223fc71e 	bne	r4,r8,800c7b0 <__alt_data_end+0xf800c7b0>
 800c894:	100b883a 	mov	r5,r2
 800c898:	3021883a 	mov	r16,r6
 800c89c:	2023883a 	mov	r17,r4
 800c8a0:	003e4906 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c8a4:	18002a26 	beq	r3,zero,800c950 <__adddf3+0x804>
 800c8a8:	1186b03a 	or	r3,r2,r6
 800c8ac:	18000e26 	beq	r3,zero,800c8e8 <__adddf3+0x79c>
 800c8b0:	2806d0fa 	srli	r3,r5,3
 800c8b4:	8020d0fa 	srli	r16,r16,3
 800c8b8:	280a977a 	slli	r5,r5,29
 800c8bc:	1900022c 	andhi	r4,r3,8
 800c8c0:	2c20b03a 	or	r16,r5,r16
 800c8c4:	203feb26 	beq	r4,zero,800c874 <__alt_data_end+0xf800c874>
 800c8c8:	1008d0fa 	srli	r4,r2,3
 800c8cc:	2140022c 	andhi	r5,r4,8
 800c8d0:	283fe81e 	bne	r5,zero,800c874 <__alt_data_end+0xf800c874>
 800c8d4:	300cd0fa 	srli	r6,r6,3
 800c8d8:	1004977a 	slli	r2,r2,29
 800c8dc:	2007883a 	mov	r3,r4
 800c8e0:	11a0b03a 	or	r16,r2,r6
 800c8e4:	003fe306 	br	800c874 <__alt_data_end+0xf800c874>
 800c8e8:	0441ffc4 	movi	r17,2047
 800c8ec:	003e3606 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c8f0:	0005883a 	mov	r2,zero
 800c8f4:	003f8a06 	br	800c720 <__alt_data_end+0xf800c720>
 800c8f8:	1a3ff804 	addi	r8,r3,-32
 800c8fc:	02400804 	movi	r9,32
 800c900:	2a10d83a 	srl	r8,r5,r8
 800c904:	1a402a26 	beq	r3,r9,800c9b0 <__adddf3+0x864>
 800c908:	02401004 	movi	r9,64
 800c90c:	48c7c83a 	sub	r3,r9,r3
 800c910:	28ca983a 	sll	r5,r5,r3
 800c914:	2c20b03a 	or	r16,r5,r16
 800c918:	8020c03a 	cmpne	r16,r16,zero
 800c91c:	8220b03a 	or	r16,r16,r8
 800c920:	000b883a 	mov	r5,zero
 800c924:	003f2b06 	br	800c5d4 <__alt_data_end+0xf800c5d4>
 800c928:	0007883a 	mov	r3,zero
 800c92c:	01402034 	movhi	r5,128
 800c930:	297fffc4 	addi	r5,r5,-1
 800c934:	043ffe04 	movi	r16,-8
 800c938:	0441ffc4 	movi	r17,2047
 800c93c:	003e8106 	br	800c344 <__alt_data_end+0xf800c344>
 800c940:	2c20b03a 	or	r16,r5,r16
 800c944:	8020c03a 	cmpne	r16,r16,zero
 800c948:	000b883a 	mov	r5,zero
 800c94c:	003fa506 	br	800c7e4 <__alt_data_end+0xf800c7e4>
 800c950:	100b883a 	mov	r5,r2
 800c954:	3021883a 	mov	r16,r6
 800c958:	0441ffc4 	movi	r17,2047
 800c95c:	003e1a06 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c960:	100b883a 	mov	r5,r2
 800c964:	3021883a 	mov	r16,r6
 800c968:	003e1706 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c96c:	20c4b03a 	or	r2,r4,r3
 800c970:	103f6026 	beq	r2,zero,800c6f4 <__alt_data_end+0xf800c6f4>
 800c974:	200b883a 	mov	r5,r4
 800c978:	1821883a 	mov	r16,r3
 800c97c:	003e1206 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c980:	3a3ff804 	addi	r8,r7,-32
 800c984:	02400804 	movi	r9,32
 800c988:	2a10d83a 	srl	r8,r5,r8
 800c98c:	3a400c26 	beq	r7,r9,800c9c0 <__adddf3+0x874>
 800c990:	02401004 	movi	r9,64
 800c994:	49cfc83a 	sub	r7,r9,r7
 800c998:	29ca983a 	sll	r5,r5,r7
 800c99c:	2c20b03a 	or	r16,r5,r16
 800c9a0:	8020c03a 	cmpne	r16,r16,zero
 800c9a4:	8220b03a 	or	r16,r16,r8
 800c9a8:	000b883a 	mov	r5,zero
 800c9ac:	003f8d06 	br	800c7e4 <__alt_data_end+0xf800c7e4>
 800c9b0:	000b883a 	mov	r5,zero
 800c9b4:	003fd706 	br	800c914 <__alt_data_end+0xf800c914>
 800c9b8:	3021883a 	mov	r16,r6
 800c9bc:	003e0206 	br	800c1c8 <__alt_data_end+0xf800c1c8>
 800c9c0:	000b883a 	mov	r5,zero
 800c9c4:	003ff506 	br	800c99c <__alt_data_end+0xf800c99c>

0800c9c8 <__divdf3>:
 800c9c8:	defff004 	addi	sp,sp,-64
 800c9cc:	dd000a15 	stw	r20,40(sp)
 800c9d0:	2828d53a 	srli	r20,r5,20
 800c9d4:	dd800c15 	stw	r22,48(sp)
 800c9d8:	282cd7fa 	srli	r22,r5,31
 800c9dc:	df000e15 	stw	fp,56(sp)
 800c9e0:	dcc00915 	stw	r19,36(sp)
 800c9e4:	dc800815 	stw	r18,32(sp)
 800c9e8:	04c00434 	movhi	r19,16
 800c9ec:	9cffffc4 	addi	r19,r19,-1
 800c9f0:	dfc00f15 	stw	ra,60(sp)
 800c9f4:	ddc00d15 	stw	r23,52(sp)
 800c9f8:	dd400b15 	stw	r21,44(sp)
 800c9fc:	dc400715 	stw	r17,28(sp)
 800ca00:	dc000615 	stw	r16,24(sp)
 800ca04:	a501ffcc 	andi	r20,r20,2047
 800ca08:	2025883a 	mov	r18,r4
 800ca0c:	2ce6703a 	and	r19,r5,r19
 800ca10:	b7003fcc 	andi	fp,r22,255
 800ca14:	a0006a26 	beq	r20,zero,800cbc0 <__divdf3+0x1f8>
 800ca18:	0081ffc4 	movi	r2,2047
 800ca1c:	2021883a 	mov	r16,r4
 800ca20:	a0803726 	beq	r20,r2,800cb00 <__divdf3+0x138>
 800ca24:	98800434 	orhi	r2,r19,16
 800ca28:	100490fa 	slli	r2,r2,3
 800ca2c:	2026d77a 	srli	r19,r4,29
 800ca30:	202090fa 	slli	r16,r4,3
 800ca34:	a53f0044 	addi	r20,r20,-1023
 800ca38:	14e6b03a 	or	r19,r2,r19
 800ca3c:	002b883a 	mov	r21,zero
 800ca40:	0013883a 	mov	r9,zero
 800ca44:	3804d53a 	srli	r2,r7,20
 800ca48:	382ed7fa 	srli	r23,r7,31
 800ca4c:	04400434 	movhi	r17,16
 800ca50:	8c7fffc4 	addi	r17,r17,-1
 800ca54:	1081ffcc 	andi	r2,r2,2047
 800ca58:	3025883a 	mov	r18,r6
 800ca5c:	3c62703a 	and	r17,r7,r17
 800ca60:	ba803fcc 	andi	r10,r23,255
 800ca64:	10007326 	beq	r2,zero,800cc34 <__divdf3+0x26c>
 800ca68:	0101ffc4 	movi	r4,2047
 800ca6c:	11006b26 	beq	r2,r4,800cc1c <__divdf3+0x254>
 800ca70:	89000434 	orhi	r4,r17,16
 800ca74:	200890fa 	slli	r4,r4,3
 800ca78:	3022d77a 	srli	r17,r6,29
 800ca7c:	302490fa 	slli	r18,r6,3
 800ca80:	10bf0044 	addi	r2,r2,-1023
 800ca84:	2462b03a 	or	r17,r4,r17
 800ca88:	000f883a 	mov	r7,zero
 800ca8c:	b5caf03a 	xor	r5,r22,r23
 800ca90:	3d48b03a 	or	r4,r7,r21
 800ca94:	00c003c4 	movi	r3,15
 800ca98:	2811883a 	mov	r8,r5
 800ca9c:	2d403fcc 	andi	r21,r5,255
 800caa0:	19009436 	bltu	r3,r4,800ccf4 <__divdf3+0x32c>
 800caa4:	2109883a 	add	r4,r4,r4
 800caa8:	00c20074 	movhi	r3,2049
 800caac:	18f2b004 	addi	r3,r3,-13632
 800cab0:	2109883a 	add	r4,r4,r4
 800cab4:	20c9883a 	add	r4,r4,r3
 800cab8:	20c00017 	ldw	r3,0(r4)
 800cabc:	1800683a 	jmp	r3
 800cac0:	0800ccf4 	orhi	zero,at,819
 800cac4:	0800cb5c 	xori	zero,at,813
 800cac8:	0800cce4 	muli	zero,at,819
 800cacc:	0800cb2c 	andhi	zero,at,812
 800cad0:	0800cce4 	muli	zero,at,819
 800cad4:	0800cccc 	andi	zero,at,819
 800cad8:	0800cce4 	muli	zero,at,819
 800cadc:	0800cb2c 	andhi	zero,at,812
 800cae0:	0800cb5c 	xori	zero,at,813
 800cae4:	0800cb5c 	xori	zero,at,813
 800cae8:	0800cccc 	andi	zero,at,819
 800caec:	0800cb2c 	andhi	zero,at,812
 800caf0:	0800cb1c 	xori	zero,at,812
 800caf4:	0800cb1c 	xori	zero,at,812
 800caf8:	0800cb1c 	xori	zero,at,812
 800cafc:	0800d084 	addi	zero,at,834
 800cb00:	9904b03a 	or	r2,r19,r4
 800cb04:	10006e1e 	bne	r2,zero,800ccc0 <__divdf3+0x2f8>
 800cb08:	05400204 	movi	r21,8
 800cb0c:	0027883a 	mov	r19,zero
 800cb10:	0021883a 	mov	r16,zero
 800cb14:	02400084 	movi	r9,2
 800cb18:	003fca06 	br	800ca44 <__alt_data_end+0xf800ca44>
 800cb1c:	9823883a 	mov	r17,r19
 800cb20:	8025883a 	mov	r18,r16
 800cb24:	e015883a 	mov	r10,fp
 800cb28:	480f883a 	mov	r7,r9
 800cb2c:	00800084 	movi	r2,2
 800cb30:	38800926 	beq	r7,r2,800cb58 <__divdf3+0x190>
 800cb34:	008000c4 	movi	r2,3
 800cb38:	38820226 	beq	r7,r2,800d344 <__divdf3+0x97c>
 800cb3c:	00800044 	movi	r2,1
 800cb40:	3881b81e 	bne	r7,r2,800d224 <__divdf3+0x85c>
 800cb44:	5011883a 	mov	r8,r10
 800cb48:	0005883a 	mov	r2,zero
 800cb4c:	0027883a 	mov	r19,zero
 800cb50:	0021883a 	mov	r16,zero
 800cb54:	00000506 	br	800cb6c <__divdf3+0x1a4>
 800cb58:	502b883a 	mov	r21,r10
 800cb5c:	aa00004c 	andi	r8,r21,1
 800cb60:	0081ffc4 	movi	r2,2047
 800cb64:	0027883a 	mov	r19,zero
 800cb68:	0021883a 	mov	r16,zero
 800cb6c:	1004953a 	slli	r2,r2,20
 800cb70:	42003fcc 	andi	r8,r8,255
 800cb74:	401097fa 	slli	r8,r8,31
 800cb78:	00c00434 	movhi	r3,16
 800cb7c:	18ffffc4 	addi	r3,r3,-1
 800cb80:	98e6703a 	and	r19,r19,r3
 800cb84:	9886b03a 	or	r3,r19,r2
 800cb88:	1a06b03a 	or	r3,r3,r8
 800cb8c:	8005883a 	mov	r2,r16
 800cb90:	dfc00f17 	ldw	ra,60(sp)
 800cb94:	df000e17 	ldw	fp,56(sp)
 800cb98:	ddc00d17 	ldw	r23,52(sp)
 800cb9c:	dd800c17 	ldw	r22,48(sp)
 800cba0:	dd400b17 	ldw	r21,44(sp)
 800cba4:	dd000a17 	ldw	r20,40(sp)
 800cba8:	dcc00917 	ldw	r19,36(sp)
 800cbac:	dc800817 	ldw	r18,32(sp)
 800cbb0:	dc400717 	ldw	r17,28(sp)
 800cbb4:	dc000617 	ldw	r16,24(sp)
 800cbb8:	dec01004 	addi	sp,sp,64
 800cbbc:	f800283a 	ret
 800cbc0:	9904b03a 	or	r2,r19,r4
 800cbc4:	10003926 	beq	r2,zero,800ccac <__divdf3+0x2e4>
 800cbc8:	98015326 	beq	r19,zero,800d118 <__divdf3+0x750>
 800cbcc:	9809883a 	mov	r4,r19
 800cbd0:	d9800215 	stw	r6,8(sp)
 800cbd4:	d9c00515 	stw	r7,20(sp)
 800cbd8:	800e8240 	call	800e824 <__clzsi2>
 800cbdc:	d9800217 	ldw	r6,8(sp)
 800cbe0:	d9c00517 	ldw	r7,20(sp)
 800cbe4:	00c009c4 	movi	r3,39
 800cbe8:	18814716 	blt	r3,r2,800d108 <__divdf3+0x740>
 800cbec:	01400a04 	movi	r5,40
 800cbf0:	143ffe04 	addi	r16,r2,-8
 800cbf4:	288bc83a 	sub	r5,r5,r2
 800cbf8:	9c26983a 	sll	r19,r19,r16
 800cbfc:	914ad83a 	srl	r5,r18,r5
 800cc00:	9420983a 	sll	r16,r18,r16
 800cc04:	2ce6b03a 	or	r19,r5,r19
 800cc08:	053f0344 	movi	r20,-1011
 800cc0c:	a0a9c83a 	sub	r20,r20,r2
 800cc10:	002b883a 	mov	r21,zero
 800cc14:	0013883a 	mov	r9,zero
 800cc18:	003f8a06 	br	800ca44 <__alt_data_end+0xf800ca44>
 800cc1c:	8988b03a 	or	r4,r17,r6
 800cc20:	2000201e 	bne	r4,zero,800cca4 <__divdf3+0x2dc>
 800cc24:	0023883a 	mov	r17,zero
 800cc28:	0025883a 	mov	r18,zero
 800cc2c:	01c00084 	movi	r7,2
 800cc30:	003f9606 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cc34:	8988b03a 	or	r4,r17,r6
 800cc38:	20001626 	beq	r4,zero,800cc94 <__divdf3+0x2cc>
 800cc3c:	88012826 	beq	r17,zero,800d0e0 <__divdf3+0x718>
 800cc40:	8809883a 	mov	r4,r17
 800cc44:	d9800215 	stw	r6,8(sp)
 800cc48:	da400315 	stw	r9,12(sp)
 800cc4c:	da800415 	stw	r10,16(sp)
 800cc50:	800e8240 	call	800e824 <__clzsi2>
 800cc54:	d9800217 	ldw	r6,8(sp)
 800cc58:	da400317 	ldw	r9,12(sp)
 800cc5c:	da800417 	ldw	r10,16(sp)
 800cc60:	010009c4 	movi	r4,39
 800cc64:	20811a16 	blt	r4,r2,800d0d0 <__divdf3+0x708>
 800cc68:	01000a04 	movi	r4,40
 800cc6c:	14bffe04 	addi	r18,r2,-8
 800cc70:	2089c83a 	sub	r4,r4,r2
 800cc74:	8ca2983a 	sll	r17,r17,r18
 800cc78:	3108d83a 	srl	r4,r6,r4
 800cc7c:	34a4983a 	sll	r18,r6,r18
 800cc80:	2462b03a 	or	r17,r4,r17
 800cc84:	013f0344 	movi	r4,-1011
 800cc88:	2085c83a 	sub	r2,r4,r2
 800cc8c:	000f883a 	mov	r7,zero
 800cc90:	003f7e06 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cc94:	0023883a 	mov	r17,zero
 800cc98:	0025883a 	mov	r18,zero
 800cc9c:	01c00044 	movi	r7,1
 800cca0:	003f7a06 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cca4:	01c000c4 	movi	r7,3
 800cca8:	003f7806 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800ccac:	05400104 	movi	r21,4
 800ccb0:	0027883a 	mov	r19,zero
 800ccb4:	0021883a 	mov	r16,zero
 800ccb8:	02400044 	movi	r9,1
 800ccbc:	003f6106 	br	800ca44 <__alt_data_end+0xf800ca44>
 800ccc0:	05400304 	movi	r21,12
 800ccc4:	024000c4 	movi	r9,3
 800ccc8:	003f5e06 	br	800ca44 <__alt_data_end+0xf800ca44>
 800cccc:	0011883a 	mov	r8,zero
 800ccd0:	04c00434 	movhi	r19,16
 800ccd4:	9cffffc4 	addi	r19,r19,-1
 800ccd8:	043fffc4 	movi	r16,-1
 800ccdc:	0081ffc4 	movi	r2,2047
 800cce0:	003fa206 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800cce4:	0005883a 	mov	r2,zero
 800cce8:	0027883a 	mov	r19,zero
 800ccec:	0021883a 	mov	r16,zero
 800ccf0:	003f9e06 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800ccf4:	a085c83a 	sub	r2,r20,r2
 800ccf8:	d8800115 	stw	r2,4(sp)
 800ccfc:	8cc11b36 	bltu	r17,r19,800d16c <__divdf3+0x7a4>
 800cd00:	9c411926 	beq	r19,r17,800d168 <__divdf3+0x7a0>
 800cd04:	d8c00117 	ldw	r3,4(sp)
 800cd08:	002d883a 	mov	r22,zero
 800cd0c:	18ffffc4 	addi	r3,r3,-1
 800cd10:	d8c00115 	stw	r3,4(sp)
 800cd14:	9006d63a 	srli	r3,r18,24
 800cd18:	8822923a 	slli	r17,r17,8
 800cd1c:	9024923a 	slli	r18,r18,8
 800cd20:	9809883a 	mov	r4,r19
 800cd24:	1c6eb03a 	or	r23,r3,r17
 800cd28:	b828d43a 	srli	r20,r23,16
 800cd2c:	dc800015 	stw	r18,0(sp)
 800cd30:	bcbfffcc 	andi	r18,r23,65535
 800cd34:	a00b883a 	mov	r5,r20
 800cd38:	800c1140 	call	800c114 <__udivsi3>
 800cd3c:	1009883a 	mov	r4,r2
 800cd40:	900b883a 	mov	r5,r18
 800cd44:	1039883a 	mov	fp,r2
 800cd48:	800c1240 	call	800c124 <__mulsi3>
 800cd4c:	9809883a 	mov	r4,r19
 800cd50:	a00b883a 	mov	r5,r20
 800cd54:	1023883a 	mov	r17,r2
 800cd58:	800c11c0 	call	800c11c <__umodsi3>
 800cd5c:	1004943a 	slli	r2,r2,16
 800cd60:	8008d43a 	srli	r4,r16,16
 800cd64:	110ab03a 	or	r5,r2,r4
 800cd68:	2c40062e 	bgeu	r5,r17,800cd84 <__divdf3+0x3bc>
 800cd6c:	2dcb883a 	add	r5,r5,r23
 800cd70:	e0bfffc4 	addi	r2,fp,-1
 800cd74:	2dc11136 	bltu	r5,r23,800d1bc <__divdf3+0x7f4>
 800cd78:	2c41102e 	bgeu	r5,r17,800d1bc <__divdf3+0x7f4>
 800cd7c:	e73fff84 	addi	fp,fp,-2
 800cd80:	2dcb883a 	add	r5,r5,r23
 800cd84:	2c67c83a 	sub	r19,r5,r17
 800cd88:	9809883a 	mov	r4,r19
 800cd8c:	a00b883a 	mov	r5,r20
 800cd90:	800c1140 	call	800c114 <__udivsi3>
 800cd94:	1009883a 	mov	r4,r2
 800cd98:	900b883a 	mov	r5,r18
 800cd9c:	1023883a 	mov	r17,r2
 800cda0:	800c1240 	call	800c124 <__mulsi3>
 800cda4:	9809883a 	mov	r4,r19
 800cda8:	a00b883a 	mov	r5,r20
 800cdac:	d8800215 	stw	r2,8(sp)
 800cdb0:	800c11c0 	call	800c11c <__umodsi3>
 800cdb4:	1004943a 	slli	r2,r2,16
 800cdb8:	da000217 	ldw	r8,8(sp)
 800cdbc:	843fffcc 	andi	r16,r16,65535
 800cdc0:	140eb03a 	or	r7,r2,r16
 800cdc4:	3a00062e 	bgeu	r7,r8,800cde0 <__divdf3+0x418>
 800cdc8:	3dcf883a 	add	r7,r7,r23
 800cdcc:	88bfffc4 	addi	r2,r17,-1
 800cdd0:	3dc0f836 	bltu	r7,r23,800d1b4 <__divdf3+0x7ec>
 800cdd4:	3a00f72e 	bgeu	r7,r8,800d1b4 <__divdf3+0x7ec>
 800cdd8:	8c7fff84 	addi	r17,r17,-2
 800cddc:	3dcf883a 	add	r7,r7,r23
 800cde0:	e004943a 	slli	r2,fp,16
 800cde4:	d8c00017 	ldw	r3,0(sp)
 800cde8:	3a0fc83a 	sub	r7,r7,r8
 800cdec:	88a2b03a 	or	r17,r17,r2
 800cdf0:	1f3fffcc 	andi	fp,r3,65535
 800cdf4:	8a7fffcc 	andi	r9,r17,65535
 800cdf8:	4809883a 	mov	r4,r9
 800cdfc:	e00b883a 	mov	r5,fp
 800ce00:	1826d43a 	srli	r19,r3,16
 800ce04:	d9c00515 	stw	r7,20(sp)
 800ce08:	da400315 	stw	r9,12(sp)
 800ce0c:	800c1240 	call	800c124 <__mulsi3>
 800ce10:	da400317 	ldw	r9,12(sp)
 800ce14:	8820d43a 	srli	r16,r17,16
 800ce18:	980b883a 	mov	r5,r19
 800ce1c:	4809883a 	mov	r4,r9
 800ce20:	d8800215 	stw	r2,8(sp)
 800ce24:	800c1240 	call	800c124 <__mulsi3>
 800ce28:	8009883a 	mov	r4,r16
 800ce2c:	e00b883a 	mov	r5,fp
 800ce30:	d8800415 	stw	r2,16(sp)
 800ce34:	800c1240 	call	800c124 <__mulsi3>
 800ce38:	8009883a 	mov	r4,r16
 800ce3c:	980b883a 	mov	r5,r19
 800ce40:	d8800315 	stw	r2,12(sp)
 800ce44:	800c1240 	call	800c124 <__mulsi3>
 800ce48:	da000217 	ldw	r8,8(sp)
 800ce4c:	da400317 	ldw	r9,12(sp)
 800ce50:	da800417 	ldw	r10,16(sp)
 800ce54:	100b883a 	mov	r5,r2
 800ce58:	4004d43a 	srli	r2,r8,16
 800ce5c:	4a89883a 	add	r4,r9,r10
 800ce60:	d9c00517 	ldw	r7,20(sp)
 800ce64:	2089883a 	add	r4,r4,r2
 800ce68:	2240022e 	bgeu	r4,r9,800ce74 <__divdf3+0x4ac>
 800ce6c:	00800074 	movhi	r2,1
 800ce70:	288b883a 	add	r5,r5,r2
 800ce74:	2004d43a 	srli	r2,r4,16
 800ce78:	2020943a 	slli	r16,r4,16
 800ce7c:	423fffcc 	andi	r8,r8,65535
 800ce80:	288b883a 	add	r5,r5,r2
 800ce84:	8221883a 	add	r16,r16,r8
 800ce88:	3940ab36 	bltu	r7,r5,800d138 <__divdf3+0x770>
 800ce8c:	3940a926 	beq	r7,r5,800d134 <__divdf3+0x76c>
 800ce90:	394bc83a 	sub	r5,r7,r5
 800ce94:	b421c83a 	sub	r16,r22,r16
 800ce98:	b42d803a 	cmpltu	r22,r22,r16
 800ce9c:	2dadc83a 	sub	r22,r5,r22
 800cea0:	b5c0da26 	beq	r22,r23,800d20c <__divdf3+0x844>
 800cea4:	b009883a 	mov	r4,r22
 800cea8:	a00b883a 	mov	r5,r20
 800ceac:	800c1140 	call	800c114 <__udivsi3>
 800ceb0:	1009883a 	mov	r4,r2
 800ceb4:	900b883a 	mov	r5,r18
 800ceb8:	d8800215 	stw	r2,8(sp)
 800cebc:	800c1240 	call	800c124 <__mulsi3>
 800cec0:	b009883a 	mov	r4,r22
 800cec4:	a00b883a 	mov	r5,r20
 800cec8:	d8800515 	stw	r2,20(sp)
 800cecc:	800c11c0 	call	800c11c <__umodsi3>
 800ced0:	1004943a 	slli	r2,r2,16
 800ced4:	8008d43a 	srli	r4,r16,16
 800ced8:	d9c00517 	ldw	r7,20(sp)
 800cedc:	da000217 	ldw	r8,8(sp)
 800cee0:	110ab03a 	or	r5,r2,r4
 800cee4:	29c0062e 	bgeu	r5,r7,800cf00 <__divdf3+0x538>
 800cee8:	2dcb883a 	add	r5,r5,r23
 800ceec:	40bfffc4 	addi	r2,r8,-1
 800cef0:	2dc0ca36 	bltu	r5,r23,800d21c <__divdf3+0x854>
 800cef4:	29c0c92e 	bgeu	r5,r7,800d21c <__divdf3+0x854>
 800cef8:	423fff84 	addi	r8,r8,-2
 800cefc:	2dcb883a 	add	r5,r5,r23
 800cf00:	29cfc83a 	sub	r7,r5,r7
 800cf04:	3809883a 	mov	r4,r7
 800cf08:	a00b883a 	mov	r5,r20
 800cf0c:	da000215 	stw	r8,8(sp)
 800cf10:	d9c00515 	stw	r7,20(sp)
 800cf14:	800c1140 	call	800c114 <__udivsi3>
 800cf18:	900b883a 	mov	r5,r18
 800cf1c:	1009883a 	mov	r4,r2
 800cf20:	102d883a 	mov	r22,r2
 800cf24:	800c1240 	call	800c124 <__mulsi3>
 800cf28:	d9c00517 	ldw	r7,20(sp)
 800cf2c:	a00b883a 	mov	r5,r20
 800cf30:	1025883a 	mov	r18,r2
 800cf34:	3809883a 	mov	r4,r7
 800cf38:	800c11c0 	call	800c11c <__umodsi3>
 800cf3c:	1004943a 	slli	r2,r2,16
 800cf40:	843fffcc 	andi	r16,r16,65535
 800cf44:	da000217 	ldw	r8,8(sp)
 800cf48:	140eb03a 	or	r7,r2,r16
 800cf4c:	3c80062e 	bgeu	r7,r18,800cf68 <__divdf3+0x5a0>
 800cf50:	3dcf883a 	add	r7,r7,r23
 800cf54:	b0bfffc4 	addi	r2,r22,-1
 800cf58:	3dc0ae36 	bltu	r7,r23,800d214 <__divdf3+0x84c>
 800cf5c:	3c80ad2e 	bgeu	r7,r18,800d214 <__divdf3+0x84c>
 800cf60:	b5bfff84 	addi	r22,r22,-2
 800cf64:	3dcf883a 	add	r7,r7,r23
 800cf68:	4010943a 	slli	r8,r8,16
 800cf6c:	3ca9c83a 	sub	r20,r7,r18
 800cf70:	e00b883a 	mov	r5,fp
 800cf74:	b224b03a 	or	r18,r22,r8
 800cf78:	91ffffcc 	andi	r7,r18,65535
 800cf7c:	3809883a 	mov	r4,r7
 800cf80:	d9c00515 	stw	r7,20(sp)
 800cf84:	800c1240 	call	800c124 <__mulsi3>
 800cf88:	d9c00517 	ldw	r7,20(sp)
 800cf8c:	9020d43a 	srli	r16,r18,16
 800cf90:	980b883a 	mov	r5,r19
 800cf94:	3809883a 	mov	r4,r7
 800cf98:	102d883a 	mov	r22,r2
 800cf9c:	800c1240 	call	800c124 <__mulsi3>
 800cfa0:	e00b883a 	mov	r5,fp
 800cfa4:	8009883a 	mov	r4,r16
 800cfa8:	d8800515 	stw	r2,20(sp)
 800cfac:	800c1240 	call	800c124 <__mulsi3>
 800cfb0:	8009883a 	mov	r4,r16
 800cfb4:	980b883a 	mov	r5,r19
 800cfb8:	1039883a 	mov	fp,r2
 800cfbc:	800c1240 	call	800c124 <__mulsi3>
 800cfc0:	d9c00517 	ldw	r7,20(sp)
 800cfc4:	100b883a 	mov	r5,r2
 800cfc8:	b004d43a 	srli	r2,r22,16
 800cfcc:	e1c9883a 	add	r4,fp,r7
 800cfd0:	2089883a 	add	r4,r4,r2
 800cfd4:	2700022e 	bgeu	r4,fp,800cfe0 <__divdf3+0x618>
 800cfd8:	00800074 	movhi	r2,1
 800cfdc:	288b883a 	add	r5,r5,r2
 800cfe0:	2004d43a 	srli	r2,r4,16
 800cfe4:	2008943a 	slli	r4,r4,16
 800cfe8:	b5bfffcc 	andi	r22,r22,65535
 800cfec:	288b883a 	add	r5,r5,r2
 800cff0:	25ad883a 	add	r22,r4,r22
 800cff4:	a140632e 	bgeu	r20,r5,800d184 <__divdf3+0x7bc>
 800cff8:	a5e9883a 	add	r20,r20,r23
 800cffc:	90bfffc4 	addi	r2,r18,-1
 800d000:	a5c0702e 	bgeu	r20,r23,800d1c4 <__divdf3+0x7fc>
 800d004:	1025883a 	mov	r18,r2
 800d008:	a1406126 	beq	r20,r5,800d190 <__divdf3+0x7c8>
 800d00c:	94800054 	ori	r18,r18,1
 800d010:	d8c00117 	ldw	r3,4(sp)
 800d014:	1880ffc4 	addi	r2,r3,1023
 800d018:	0080720e 	bge	zero,r2,800d1e4 <__divdf3+0x81c>
 800d01c:	90c001cc 	andi	r3,r18,7
 800d020:	18000726 	beq	r3,zero,800d040 <__divdf3+0x678>
 800d024:	910003cc 	andi	r4,r18,15
 800d028:	00c00104 	movi	r3,4
 800d02c:	20c00426 	beq	r4,r3,800d040 <__divdf3+0x678>
 800d030:	90c7883a 	add	r3,r18,r3
 800d034:	1ca5803a 	cmpltu	r18,r3,r18
 800d038:	8ca3883a 	add	r17,r17,r18
 800d03c:	1825883a 	mov	r18,r3
 800d040:	88c0402c 	andhi	r3,r17,256
 800d044:	18000526 	beq	r3,zero,800d05c <__divdf3+0x694>
 800d048:	d8c00117 	ldw	r3,4(sp)
 800d04c:	00bfc034 	movhi	r2,65280
 800d050:	10bfffc4 	addi	r2,r2,-1
 800d054:	88a2703a 	and	r17,r17,r2
 800d058:	18810004 	addi	r2,r3,1024
 800d05c:	00c1ff84 	movi	r3,2046
 800d060:	18bebe16 	blt	r3,r2,800cb5c <__alt_data_end+0xf800cb5c>
 800d064:	8820977a 	slli	r16,r17,29
 800d068:	9024d0fa 	srli	r18,r18,3
 800d06c:	8822927a 	slli	r17,r17,9
 800d070:	1081ffcc 	andi	r2,r2,2047
 800d074:	84a0b03a 	or	r16,r16,r18
 800d078:	8826d33a 	srli	r19,r17,12
 800d07c:	aa00004c 	andi	r8,r21,1
 800d080:	003eba06 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800d084:	9880022c 	andhi	r2,r19,8
 800d088:	10000a26 	beq	r2,zero,800d0b4 <__divdf3+0x6ec>
 800d08c:	8880022c 	andhi	r2,r17,8
 800d090:	1000081e 	bne	r2,zero,800d0b4 <__divdf3+0x6ec>
 800d094:	00800434 	movhi	r2,16
 800d098:	10bfffc4 	addi	r2,r2,-1
 800d09c:	8cc00234 	orhi	r19,r17,8
 800d0a0:	98a6703a 	and	r19,r19,r2
 800d0a4:	b811883a 	mov	r8,r23
 800d0a8:	9021883a 	mov	r16,r18
 800d0ac:	0081ffc4 	movi	r2,2047
 800d0b0:	003eae06 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800d0b4:	00800434 	movhi	r2,16
 800d0b8:	10bfffc4 	addi	r2,r2,-1
 800d0bc:	9cc00234 	orhi	r19,r19,8
 800d0c0:	98a6703a 	and	r19,r19,r2
 800d0c4:	b011883a 	mov	r8,r22
 800d0c8:	0081ffc4 	movi	r2,2047
 800d0cc:	003ea706 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800d0d0:	147ff604 	addi	r17,r2,-40
 800d0d4:	3462983a 	sll	r17,r6,r17
 800d0d8:	0025883a 	mov	r18,zero
 800d0dc:	003ee906 	br	800cc84 <__alt_data_end+0xf800cc84>
 800d0e0:	3009883a 	mov	r4,r6
 800d0e4:	d9800215 	stw	r6,8(sp)
 800d0e8:	da400315 	stw	r9,12(sp)
 800d0ec:	da800415 	stw	r10,16(sp)
 800d0f0:	800e8240 	call	800e824 <__clzsi2>
 800d0f4:	10800804 	addi	r2,r2,32
 800d0f8:	da800417 	ldw	r10,16(sp)
 800d0fc:	da400317 	ldw	r9,12(sp)
 800d100:	d9800217 	ldw	r6,8(sp)
 800d104:	003ed606 	br	800cc60 <__alt_data_end+0xf800cc60>
 800d108:	14fff604 	addi	r19,r2,-40
 800d10c:	94e6983a 	sll	r19,r18,r19
 800d110:	0021883a 	mov	r16,zero
 800d114:	003ebc06 	br	800cc08 <__alt_data_end+0xf800cc08>
 800d118:	d9800215 	stw	r6,8(sp)
 800d11c:	d9c00515 	stw	r7,20(sp)
 800d120:	800e8240 	call	800e824 <__clzsi2>
 800d124:	10800804 	addi	r2,r2,32
 800d128:	d9c00517 	ldw	r7,20(sp)
 800d12c:	d9800217 	ldw	r6,8(sp)
 800d130:	003eac06 	br	800cbe4 <__alt_data_end+0xf800cbe4>
 800d134:	b400292e 	bgeu	r22,r16,800d1dc <__divdf3+0x814>
 800d138:	d8c00017 	ldw	r3,0(sp)
 800d13c:	b0ed883a 	add	r22,r22,r3
 800d140:	b0c5803a 	cmpltu	r2,r22,r3
 800d144:	15c5883a 	add	r2,r2,r23
 800d148:	11cf883a 	add	r7,r2,r7
 800d14c:	88bfffc4 	addi	r2,r17,-1
 800d150:	b9c0122e 	bgeu	r23,r7,800d19c <__divdf3+0x7d4>
 800d154:	39405036 	bltu	r7,r5,800d298 <__divdf3+0x8d0>
 800d158:	29c01e26 	beq	r5,r7,800d1d4 <__divdf3+0x80c>
 800d15c:	394bc83a 	sub	r5,r7,r5
 800d160:	1023883a 	mov	r17,r2
 800d164:	003f4b06 	br	800ce94 <__alt_data_end+0xf800ce94>
 800d168:	943ee62e 	bgeu	r18,r16,800cd04 <__alt_data_end+0xf800cd04>
 800d16c:	980497fa 	slli	r2,r19,31
 800d170:	8006d07a 	srli	r3,r16,1
 800d174:	802c97fa 	slli	r22,r16,31
 800d178:	9826d07a 	srli	r19,r19,1
 800d17c:	18a0b03a 	or	r16,r3,r2
 800d180:	003ee406 	br	800cd14 <__alt_data_end+0xf800cd14>
 800d184:	a17fa11e 	bne	r20,r5,800d00c <__alt_data_end+0xf800d00c>
 800d188:	b03f9b1e 	bne	r22,zero,800cff8 <__alt_data_end+0xf800cff8>
 800d18c:	d8000015 	stw	zero,0(sp)
 800d190:	d8c00017 	ldw	r3,0(sp)
 800d194:	1dbf9d1e 	bne	r3,r22,800d00c <__alt_data_end+0xf800d00c>
 800d198:	003f9d06 	br	800d010 <__alt_data_end+0xf800d010>
 800d19c:	3dffef1e 	bne	r7,r23,800d15c <__alt_data_end+0xf800d15c>
 800d1a0:	d8c00017 	ldw	r3,0(sp)
 800d1a4:	b0ffeb2e 	bgeu	r22,r3,800d154 <__alt_data_end+0xf800d154>
 800d1a8:	b94bc83a 	sub	r5,r23,r5
 800d1ac:	1023883a 	mov	r17,r2
 800d1b0:	003f3806 	br	800ce94 <__alt_data_end+0xf800ce94>
 800d1b4:	1023883a 	mov	r17,r2
 800d1b8:	003f0906 	br	800cde0 <__alt_data_end+0xf800cde0>
 800d1bc:	1039883a 	mov	fp,r2
 800d1c0:	003ef006 	br	800cd84 <__alt_data_end+0xf800cd84>
 800d1c4:	a1403b36 	bltu	r20,r5,800d2b4 <__divdf3+0x8ec>
 800d1c8:	2d005826 	beq	r5,r20,800d32c <__divdf3+0x964>
 800d1cc:	1025883a 	mov	r18,r2
 800d1d0:	003f8e06 	br	800d00c <__alt_data_end+0xf800d00c>
 800d1d4:	b4003036 	bltu	r22,r16,800d298 <__divdf3+0x8d0>
 800d1d8:	1023883a 	mov	r17,r2
 800d1dc:	000b883a 	mov	r5,zero
 800d1e0:	003f2c06 	br	800ce94 <__alt_data_end+0xf800ce94>
 800d1e4:	d8c00117 	ldw	r3,4(sp)
 800d1e8:	00bf0084 	movi	r2,-1022
 800d1ec:	10c5c83a 	sub	r2,r2,r3
 800d1f0:	00c00e04 	movi	r3,56
 800d1f4:	18800d0e 	bge	r3,r2,800d22c <__divdf3+0x864>
 800d1f8:	aa00004c 	andi	r8,r21,1
 800d1fc:	0005883a 	mov	r2,zero
 800d200:	0027883a 	mov	r19,zero
 800d204:	0021883a 	mov	r16,zero
 800d208:	003e5806 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800d20c:	04bfffc4 	movi	r18,-1
 800d210:	003f7f06 	br	800d010 <__alt_data_end+0xf800d010>
 800d214:	102d883a 	mov	r22,r2
 800d218:	003f5306 	br	800cf68 <__alt_data_end+0xf800cf68>
 800d21c:	1011883a 	mov	r8,r2
 800d220:	003f3706 	br	800cf00 <__alt_data_end+0xf800cf00>
 800d224:	502b883a 	mov	r21,r10
 800d228:	003f7906 	br	800d010 <__alt_data_end+0xf800d010>
 800d22c:	00c007c4 	movi	r3,31
 800d230:	18802816 	blt	r3,r2,800d2d4 <__divdf3+0x90c>
 800d234:	d9000117 	ldw	r4,4(sp)
 800d238:	908ad83a 	srl	r5,r18,r2
 800d23c:	8884d83a 	srl	r2,r17,r2
 800d240:	20c10784 	addi	r3,r4,1054
 800d244:	88c8983a 	sll	r4,r17,r3
 800d248:	90c6983a 	sll	r3,r18,r3
 800d24c:	2908b03a 	or	r4,r5,r4
 800d250:	1806c03a 	cmpne	r3,r3,zero
 800d254:	20c6b03a 	or	r3,r4,r3
 800d258:	190001cc 	andi	r4,r3,7
 800d25c:	20000726 	beq	r4,zero,800d27c <__divdf3+0x8b4>
 800d260:	194003cc 	andi	r5,r3,15
 800d264:	01000104 	movi	r4,4
 800d268:	29000426 	beq	r5,r4,800d27c <__divdf3+0x8b4>
 800d26c:	1909883a 	add	r4,r3,r4
 800d270:	20c7803a 	cmpltu	r3,r4,r3
 800d274:	10c5883a 	add	r2,r2,r3
 800d278:	2007883a 	mov	r3,r4
 800d27c:	1100202c 	andhi	r4,r2,128
 800d280:	20002226 	beq	r4,zero,800d30c <__divdf3+0x944>
 800d284:	aa00004c 	andi	r8,r21,1
 800d288:	00800044 	movi	r2,1
 800d28c:	0027883a 	mov	r19,zero
 800d290:	0021883a 	mov	r16,zero
 800d294:	003e3506 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800d298:	d8c00017 	ldw	r3,0(sp)
 800d29c:	8c7fff84 	addi	r17,r17,-2
 800d2a0:	b0ed883a 	add	r22,r22,r3
 800d2a4:	b0c5803a 	cmpltu	r2,r22,r3
 800d2a8:	15c5883a 	add	r2,r2,r23
 800d2ac:	11cf883a 	add	r7,r2,r7
 800d2b0:	003ef706 	br	800ce90 <__alt_data_end+0xf800ce90>
 800d2b4:	d8c00017 	ldw	r3,0(sp)
 800d2b8:	18c9883a 	add	r4,r3,r3
 800d2bc:	20c5803a 	cmpltu	r2,r4,r3
 800d2c0:	15c7883a 	add	r3,r2,r23
 800d2c4:	a0e9883a 	add	r20,r20,r3
 800d2c8:	90bfff84 	addi	r2,r18,-2
 800d2cc:	d9000015 	stw	r4,0(sp)
 800d2d0:	003f4c06 	br	800d004 <__alt_data_end+0xf800d004>
 800d2d4:	d9000117 	ldw	r4,4(sp)
 800d2d8:	00fef884 	movi	r3,-1054
 800d2dc:	1907c83a 	sub	r3,r3,r4
 800d2e0:	01000804 	movi	r4,32
 800d2e4:	88c6d83a 	srl	r3,r17,r3
 800d2e8:	11001426 	beq	r2,r4,800d33c <__divdf3+0x974>
 800d2ec:	d9000117 	ldw	r4,4(sp)
 800d2f0:	20810f84 	addi	r2,r4,1086
 800d2f4:	8884983a 	sll	r2,r17,r2
 800d2f8:	1484b03a 	or	r2,r2,r18
 800d2fc:	1004c03a 	cmpne	r2,r2,zero
 800d300:	10c6b03a 	or	r3,r2,r3
 800d304:	0005883a 	mov	r2,zero
 800d308:	003fd306 	br	800d258 <__alt_data_end+0xf800d258>
 800d30c:	1020977a 	slli	r16,r2,29
 800d310:	1806d0fa 	srli	r3,r3,3
 800d314:	1004927a 	slli	r2,r2,9
 800d318:	aa00004c 	andi	r8,r21,1
 800d31c:	80e0b03a 	or	r16,r16,r3
 800d320:	1026d33a 	srli	r19,r2,12
 800d324:	0005883a 	mov	r2,zero
 800d328:	003e1006 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800d32c:	d8c00017 	ldw	r3,0(sp)
 800d330:	1dbfe036 	bltu	r3,r22,800d2b4 <__alt_data_end+0xf800d2b4>
 800d334:	1025883a 	mov	r18,r2
 800d338:	003f9506 	br	800d190 <__alt_data_end+0xf800d190>
 800d33c:	0005883a 	mov	r2,zero
 800d340:	003fed06 	br	800d2f8 <__alt_data_end+0xf800d2f8>
 800d344:	00800434 	movhi	r2,16
 800d348:	10bfffc4 	addi	r2,r2,-1
 800d34c:	8cc00234 	orhi	r19,r17,8
 800d350:	98a6703a 	and	r19,r19,r2
 800d354:	5011883a 	mov	r8,r10
 800d358:	9021883a 	mov	r16,r18
 800d35c:	0081ffc4 	movi	r2,2047
 800d360:	003e0206 	br	800cb6c <__alt_data_end+0xf800cb6c>

0800d364 <__eqdf2>:
 800d364:	2806d53a 	srli	r3,r5,20
 800d368:	3810d53a 	srli	r8,r7,20
 800d36c:	00800434 	movhi	r2,16
 800d370:	10bfffc4 	addi	r2,r2,-1
 800d374:	18c1ffcc 	andi	r3,r3,2047
 800d378:	0241ffc4 	movi	r9,2047
 800d37c:	2894703a 	and	r10,r5,r2
 800d380:	4201ffcc 	andi	r8,r8,2047
 800d384:	3884703a 	and	r2,r7,r2
 800d388:	280ad7fa 	srli	r5,r5,31
 800d38c:	380ed7fa 	srli	r7,r7,31
 800d390:	1a400f26 	beq	r3,r9,800d3d0 <__eqdf2+0x6c>
 800d394:	0241ffc4 	movi	r9,2047
 800d398:	42400326 	beq	r8,r9,800d3a8 <__eqdf2+0x44>
 800d39c:	1a000526 	beq	r3,r8,800d3b4 <__eqdf2+0x50>
 800d3a0:	00800044 	movi	r2,1
 800d3a4:	f800283a 	ret
 800d3a8:	1192b03a 	or	r9,r2,r6
 800d3ac:	483ffc1e 	bne	r9,zero,800d3a0 <__alt_data_end+0xf800d3a0>
 800d3b0:	1a3ffb1e 	bne	r3,r8,800d3a0 <__alt_data_end+0xf800d3a0>
 800d3b4:	50bffa1e 	bne	r10,r2,800d3a0 <__alt_data_end+0xf800d3a0>
 800d3b8:	21bff91e 	bne	r4,r6,800d3a0 <__alt_data_end+0xf800d3a0>
 800d3bc:	29c00826 	beq	r5,r7,800d3e0 <__eqdf2+0x7c>
 800d3c0:	183ff71e 	bne	r3,zero,800d3a0 <__alt_data_end+0xf800d3a0>
 800d3c4:	5104b03a 	or	r2,r10,r4
 800d3c8:	1004c03a 	cmpne	r2,r2,zero
 800d3cc:	f800283a 	ret
 800d3d0:	5112b03a 	or	r9,r10,r4
 800d3d4:	483fef26 	beq	r9,zero,800d394 <__alt_data_end+0xf800d394>
 800d3d8:	00800044 	movi	r2,1
 800d3dc:	f800283a 	ret
 800d3e0:	0005883a 	mov	r2,zero
 800d3e4:	f800283a 	ret

0800d3e8 <__gedf2>:
 800d3e8:	2804d53a 	srli	r2,r5,20
 800d3ec:	3810d53a 	srli	r8,r7,20
 800d3f0:	00c00434 	movhi	r3,16
 800d3f4:	18ffffc4 	addi	r3,r3,-1
 800d3f8:	1081ffcc 	andi	r2,r2,2047
 800d3fc:	0241ffc4 	movi	r9,2047
 800d400:	28d4703a 	and	r10,r5,r3
 800d404:	4201ffcc 	andi	r8,r8,2047
 800d408:	38c6703a 	and	r3,r7,r3
 800d40c:	280ad7fa 	srli	r5,r5,31
 800d410:	380ed7fa 	srli	r7,r7,31
 800d414:	12401b26 	beq	r2,r9,800d484 <__gedf2+0x9c>
 800d418:	0241ffc4 	movi	r9,2047
 800d41c:	42400926 	beq	r8,r9,800d444 <__gedf2+0x5c>
 800d420:	10000c1e 	bne	r2,zero,800d454 <__gedf2+0x6c>
 800d424:	5112b03a 	or	r9,r10,r4
 800d428:	4813003a 	cmpeq	r9,r9,zero
 800d42c:	4817883a 	mov	r11,r9
 800d430:	40000a26 	beq	r8,zero,800d45c <__gedf2+0x74>
 800d434:	48001626 	beq	r9,zero,800d490 <__gedf2+0xa8>
 800d438:	38000d1e 	bne	r7,zero,800d470 <__gedf2+0x88>
 800d43c:	00bfffc4 	movi	r2,-1
 800d440:	f800283a 	ret
 800d444:	1992b03a 	or	r9,r3,r6
 800d448:	483ff526 	beq	r9,zero,800d420 <__alt_data_end+0xf800d420>
 800d44c:	00bfff84 	movi	r2,-2
 800d450:	f800283a 	ret
 800d454:	40000e1e 	bne	r8,zero,800d490 <__gedf2+0xa8>
 800d458:	0017883a 	mov	r11,zero
 800d45c:	1992b03a 	or	r9,r3,r6
 800d460:	4813003a 	cmpeq	r9,r9,zero
 800d464:	5800041e 	bne	r11,zero,800d478 <__gedf2+0x90>
 800d468:	48000926 	beq	r9,zero,800d490 <__gedf2+0xa8>
 800d46c:	283ff31e 	bne	r5,zero,800d43c <__alt_data_end+0xf800d43c>
 800d470:	00800044 	movi	r2,1
 800d474:	f800283a 	ret
 800d478:	483fef26 	beq	r9,zero,800d438 <__alt_data_end+0xf800d438>
 800d47c:	0005883a 	mov	r2,zero
 800d480:	f800283a 	ret
 800d484:	5112b03a 	or	r9,r10,r4
 800d488:	483fe326 	beq	r9,zero,800d418 <__alt_data_end+0xf800d418>
 800d48c:	003fef06 	br	800d44c <__alt_data_end+0xf800d44c>
 800d490:	29fff61e 	bne	r5,r7,800d46c <__alt_data_end+0xf800d46c>
 800d494:	40bff516 	blt	r8,r2,800d46c <__alt_data_end+0xf800d46c>
 800d498:	12000316 	blt	r2,r8,800d4a8 <__gedf2+0xc0>
 800d49c:	1abff336 	bltu	r3,r10,800d46c <__alt_data_end+0xf800d46c>
 800d4a0:	50c00326 	beq	r10,r3,800d4b0 <__gedf2+0xc8>
 800d4a4:	50fff52e 	bgeu	r10,r3,800d47c <__alt_data_end+0xf800d47c>
 800d4a8:	283fe426 	beq	r5,zero,800d43c <__alt_data_end+0xf800d43c>
 800d4ac:	003ff006 	br	800d470 <__alt_data_end+0xf800d470>
 800d4b0:	313fee36 	bltu	r6,r4,800d46c <__alt_data_end+0xf800d46c>
 800d4b4:	21bff12e 	bgeu	r4,r6,800d47c <__alt_data_end+0xf800d47c>
 800d4b8:	283fe026 	beq	r5,zero,800d43c <__alt_data_end+0xf800d43c>
 800d4bc:	003fec06 	br	800d470 <__alt_data_end+0xf800d470>

0800d4c0 <__ledf2>:
 800d4c0:	2806d53a 	srli	r3,r5,20
 800d4c4:	3810d53a 	srli	r8,r7,20
 800d4c8:	00800434 	movhi	r2,16
 800d4cc:	10bfffc4 	addi	r2,r2,-1
 800d4d0:	18c1ffcc 	andi	r3,r3,2047
 800d4d4:	0241ffc4 	movi	r9,2047
 800d4d8:	2894703a 	and	r10,r5,r2
 800d4dc:	4201ffcc 	andi	r8,r8,2047
 800d4e0:	3884703a 	and	r2,r7,r2
 800d4e4:	280ad7fa 	srli	r5,r5,31
 800d4e8:	380ed7fa 	srli	r7,r7,31
 800d4ec:	1a402026 	beq	r3,r9,800d570 <__ledf2+0xb0>
 800d4f0:	0241ffc4 	movi	r9,2047
 800d4f4:	42401726 	beq	r8,r9,800d554 <__ledf2+0x94>
 800d4f8:	18000b26 	beq	r3,zero,800d528 <__ledf2+0x68>
 800d4fc:	29403fcc 	andi	r5,r5,255
 800d500:	39c03fcc 	andi	r7,r7,255
 800d504:	40000f1e 	bne	r8,zero,800d544 <__ledf2+0x84>
 800d508:	0017883a 	mov	r11,zero
 800d50c:	1192b03a 	or	r9,r2,r6
 800d510:	4813003a 	cmpeq	r9,r9,zero
 800d514:	58001326 	beq	r11,zero,800d564 <__ledf2+0xa4>
 800d518:	48001e1e 	bne	r9,zero,800d594 <__ledf2+0xd4>
 800d51c:	38000b1e 	bne	r7,zero,800d54c <__ledf2+0x8c>
 800d520:	00bfffc4 	movi	r2,-1
 800d524:	f800283a 	ret
 800d528:	5112b03a 	or	r9,r10,r4
 800d52c:	4813003a 	cmpeq	r9,r9,zero
 800d530:	4817883a 	mov	r11,r9
 800d534:	29403fcc 	andi	r5,r5,255
 800d538:	39c03fcc 	andi	r7,r7,255
 800d53c:	403ff326 	beq	r8,zero,800d50c <__alt_data_end+0xf800d50c>
 800d540:	483ff61e 	bne	r9,zero,800d51c <__alt_data_end+0xf800d51c>
 800d544:	29c00e26 	beq	r5,r7,800d580 <__ledf2+0xc0>
 800d548:	283ff51e 	bne	r5,zero,800d520 <__alt_data_end+0xf800d520>
 800d54c:	00800044 	movi	r2,1
 800d550:	f800283a 	ret
 800d554:	1192b03a 	or	r9,r2,r6
 800d558:	483fe726 	beq	r9,zero,800d4f8 <__alt_data_end+0xf800d4f8>
 800d55c:	00800084 	movi	r2,2
 800d560:	f800283a 	ret
 800d564:	483ff726 	beq	r9,zero,800d544 <__alt_data_end+0xf800d544>
 800d568:	283ff826 	beq	r5,zero,800d54c <__alt_data_end+0xf800d54c>
 800d56c:	003fec06 	br	800d520 <__alt_data_end+0xf800d520>
 800d570:	5112b03a 	or	r9,r10,r4
 800d574:	483fde26 	beq	r9,zero,800d4f0 <__alt_data_end+0xf800d4f0>
 800d578:	00800084 	movi	r2,2
 800d57c:	f800283a 	ret
 800d580:	40fff116 	blt	r8,r3,800d548 <__alt_data_end+0xf800d548>
 800d584:	1a000716 	blt	r3,r8,800d5a4 <__ledf2+0xe4>
 800d588:	12bfef36 	bltu	r2,r10,800d548 <__alt_data_end+0xf800d548>
 800d58c:	50800326 	beq	r10,r2,800d59c <__ledf2+0xdc>
 800d590:	50800436 	bltu	r10,r2,800d5a4 <__ledf2+0xe4>
 800d594:	0005883a 	mov	r2,zero
 800d598:	f800283a 	ret
 800d59c:	313fea36 	bltu	r6,r4,800d548 <__alt_data_end+0xf800d548>
 800d5a0:	21bffc2e 	bgeu	r4,r6,800d594 <__alt_data_end+0xf800d594>
 800d5a4:	283fde26 	beq	r5,zero,800d520 <__alt_data_end+0xf800d520>
 800d5a8:	003fe806 	br	800d54c <__alt_data_end+0xf800d54c>

0800d5ac <__muldf3>:
 800d5ac:	deffee04 	addi	sp,sp,-72
 800d5b0:	dc400915 	stw	r17,36(sp)
 800d5b4:	2822d53a 	srli	r17,r5,20
 800d5b8:	dc000815 	stw	r16,32(sp)
 800d5bc:	2820d7fa 	srli	r16,r5,31
 800d5c0:	df001015 	stw	fp,64(sp)
 800d5c4:	dd000c15 	stw	r20,48(sp)
 800d5c8:	dcc00b15 	stw	r19,44(sp)
 800d5cc:	dfc01115 	stw	ra,68(sp)
 800d5d0:	04c00434 	movhi	r19,16
 800d5d4:	9cffffc4 	addi	r19,r19,-1
 800d5d8:	ddc00f15 	stw	r23,60(sp)
 800d5dc:	dd800e15 	stw	r22,56(sp)
 800d5e0:	dd400d15 	stw	r21,52(sp)
 800d5e4:	dc800a15 	stw	r18,40(sp)
 800d5e8:	8c41ffcc 	andi	r17,r17,2047
 800d5ec:	2029883a 	mov	r20,r4
 800d5f0:	2ce6703a 	and	r19,r5,r19
 800d5f4:	8039883a 	mov	fp,r16
 800d5f8:	82003fcc 	andi	r8,r16,255
 800d5fc:	88005d26 	beq	r17,zero,800d774 <__muldf3+0x1c8>
 800d600:	0081ffc4 	movi	r2,2047
 800d604:	202f883a 	mov	r23,r4
 800d608:	88803326 	beq	r17,r2,800d6d8 <__muldf3+0x12c>
 800d60c:	98800434 	orhi	r2,r19,16
 800d610:	100490fa 	slli	r2,r2,3
 800d614:	2026d77a 	srli	r19,r4,29
 800d618:	202e90fa 	slli	r23,r4,3
 800d61c:	8c7f0044 	addi	r17,r17,-1023
 800d620:	14e6b03a 	or	r19,r2,r19
 800d624:	002d883a 	mov	r22,zero
 800d628:	000b883a 	mov	r5,zero
 800d62c:	3804d53a 	srli	r2,r7,20
 800d630:	3828d7fa 	srli	r20,r7,31
 800d634:	04800434 	movhi	r18,16
 800d638:	94bfffc4 	addi	r18,r18,-1
 800d63c:	1081ffcc 	andi	r2,r2,2047
 800d640:	302b883a 	mov	r21,r6
 800d644:	3ca4703a 	and	r18,r7,r18
 800d648:	a2403fcc 	andi	r9,r20,255
 800d64c:	10006826 	beq	r2,zero,800d7f0 <__muldf3+0x244>
 800d650:	00c1ffc4 	movi	r3,2047
 800d654:	10c06026 	beq	r2,r3,800d7d8 <__muldf3+0x22c>
 800d658:	90c00434 	orhi	r3,r18,16
 800d65c:	180690fa 	slli	r3,r3,3
 800d660:	3024d77a 	srli	r18,r6,29
 800d664:	302a90fa 	slli	r21,r6,3
 800d668:	10bf0044 	addi	r2,r2,-1023
 800d66c:	1ca4b03a 	or	r18,r3,r18
 800d670:	0007883a 	mov	r3,zero
 800d674:	1d88b03a 	or	r4,r3,r22
 800d678:	2109883a 	add	r4,r4,r4
 800d67c:	2109883a 	add	r4,r4,r4
 800d680:	01820074 	movhi	r6,2049
 800d684:	31b5a604 	addi	r6,r6,-10600
 800d688:	2189883a 	add	r4,r4,r6
 800d68c:	21000017 	ldw	r4,0(r4)
 800d690:	852cf03a 	xor	r22,r16,r20
 800d694:	2000683a 	jmp	r4
 800d698:	0800d8e0 	cmpeqi	zero,at,867
 800d69c:	0800d8d0 	cmplti	zero,at,867
 800d6a0:	0800d8d0 	cmplti	zero,at,867
 800d6a4:	0800d8bc 	xorhi	zero,at,866
 800d6a8:	0800d6f8 	rdprs	zero,at,859
 800d6ac:	0800d6f8 	rdprs	zero,at,859
 800d6b0:	0800d8a4 	muli	zero,at,866
 800d6b4:	0800d8bc 	xorhi	zero,at,866
 800d6b8:	0800d6f8 	rdprs	zero,at,859
 800d6bc:	0800d8a4 	muli	zero,at,866
 800d6c0:	0800d6f8 	rdprs	zero,at,859
 800d6c4:	0800d8bc 	xorhi	zero,at,866
 800d6c8:	0800d6f4 	orhi	zero,at,859
 800d6cc:	0800d6f4 	orhi	zero,at,859
 800d6d0:	0800d6f4 	orhi	zero,at,859
 800d6d4:	0800dbf8 	rdprs	zero,at,879
 800d6d8:	9904b03a 	or	r2,r19,r4
 800d6dc:	10006e1e 	bne	r2,zero,800d898 <__muldf3+0x2ec>
 800d6e0:	05800204 	movi	r22,8
 800d6e4:	0027883a 	mov	r19,zero
 800d6e8:	002f883a 	mov	r23,zero
 800d6ec:	01400084 	movi	r5,2
 800d6f0:	003fce06 	br	800d62c <__alt_data_end+0xf800d62c>
 800d6f4:	402d883a 	mov	r22,r8
 800d6f8:	00800084 	movi	r2,2
 800d6fc:	28805626 	beq	r5,r2,800d858 <__muldf3+0x2ac>
 800d700:	008000c4 	movi	r2,3
 800d704:	2881a226 	beq	r5,r2,800dd90 <__muldf3+0x7e4>
 800d708:	00800044 	movi	r2,1
 800d70c:	28811d1e 	bne	r5,r2,800db84 <__muldf3+0x5d8>
 800d710:	b039883a 	mov	fp,r22
 800d714:	0005883a 	mov	r2,zero
 800d718:	0027883a 	mov	r19,zero
 800d71c:	002f883a 	mov	r23,zero
 800d720:	1004953a 	slli	r2,r2,20
 800d724:	e7003fcc 	andi	fp,fp,255
 800d728:	e03897fa 	slli	fp,fp,31
 800d72c:	00c00434 	movhi	r3,16
 800d730:	18ffffc4 	addi	r3,r3,-1
 800d734:	98e6703a 	and	r19,r19,r3
 800d738:	9886b03a 	or	r3,r19,r2
 800d73c:	1f06b03a 	or	r3,r3,fp
 800d740:	b805883a 	mov	r2,r23
 800d744:	dfc01117 	ldw	ra,68(sp)
 800d748:	df001017 	ldw	fp,64(sp)
 800d74c:	ddc00f17 	ldw	r23,60(sp)
 800d750:	dd800e17 	ldw	r22,56(sp)
 800d754:	dd400d17 	ldw	r21,52(sp)
 800d758:	dd000c17 	ldw	r20,48(sp)
 800d75c:	dcc00b17 	ldw	r19,44(sp)
 800d760:	dc800a17 	ldw	r18,40(sp)
 800d764:	dc400917 	ldw	r17,36(sp)
 800d768:	dc000817 	ldw	r16,32(sp)
 800d76c:	dec01204 	addi	sp,sp,72
 800d770:	f800283a 	ret
 800d774:	9904b03a 	or	r2,r19,r4
 800d778:	10004226 	beq	r2,zero,800d884 <__muldf3+0x2d8>
 800d77c:	98013426 	beq	r19,zero,800dc50 <__muldf3+0x6a4>
 800d780:	9809883a 	mov	r4,r19
 800d784:	d9800515 	stw	r6,20(sp)
 800d788:	d9c00415 	stw	r7,16(sp)
 800d78c:	da000615 	stw	r8,24(sp)
 800d790:	800e8240 	call	800e824 <__clzsi2>
 800d794:	d9800517 	ldw	r6,20(sp)
 800d798:	d9c00417 	ldw	r7,16(sp)
 800d79c:	da000617 	ldw	r8,24(sp)
 800d7a0:	00c009c4 	movi	r3,39
 800d7a4:	18812616 	blt	r3,r2,800dc40 <__muldf3+0x694>
 800d7a8:	00c00a04 	movi	r3,40
 800d7ac:	15fffe04 	addi	r23,r2,-8
 800d7b0:	1887c83a 	sub	r3,r3,r2
 800d7b4:	9de6983a 	sll	r19,r19,r23
 800d7b8:	a0c6d83a 	srl	r3,r20,r3
 800d7bc:	a5ee983a 	sll	r23,r20,r23
 800d7c0:	1ce6b03a 	or	r19,r3,r19
 800d7c4:	047f0344 	movi	r17,-1011
 800d7c8:	88a3c83a 	sub	r17,r17,r2
 800d7cc:	002d883a 	mov	r22,zero
 800d7d0:	000b883a 	mov	r5,zero
 800d7d4:	003f9506 	br	800d62c <__alt_data_end+0xf800d62c>
 800d7d8:	9186b03a 	or	r3,r18,r6
 800d7dc:	1800271e 	bne	r3,zero,800d87c <__muldf3+0x2d0>
 800d7e0:	0025883a 	mov	r18,zero
 800d7e4:	002b883a 	mov	r21,zero
 800d7e8:	00c00084 	movi	r3,2
 800d7ec:	003fa106 	br	800d674 <__alt_data_end+0xf800d674>
 800d7f0:	9186b03a 	or	r3,r18,r6
 800d7f4:	18001d26 	beq	r3,zero,800d86c <__muldf3+0x2c0>
 800d7f8:	90012226 	beq	r18,zero,800dc84 <__muldf3+0x6d8>
 800d7fc:	9009883a 	mov	r4,r18
 800d800:	d9400415 	stw	r5,16(sp)
 800d804:	d9800515 	stw	r6,20(sp)
 800d808:	da000615 	stw	r8,24(sp)
 800d80c:	da400715 	stw	r9,28(sp)
 800d810:	800e8240 	call	800e824 <__clzsi2>
 800d814:	d9400417 	ldw	r5,16(sp)
 800d818:	d9800517 	ldw	r6,20(sp)
 800d81c:	da000617 	ldw	r8,24(sp)
 800d820:	da400717 	ldw	r9,28(sp)
 800d824:	00c009c4 	movi	r3,39
 800d828:	18811216 	blt	r3,r2,800dc74 <__muldf3+0x6c8>
 800d82c:	01c00a04 	movi	r7,40
 800d830:	157ffe04 	addi	r21,r2,-8
 800d834:	388fc83a 	sub	r7,r7,r2
 800d838:	9564983a 	sll	r18,r18,r21
 800d83c:	31ced83a 	srl	r7,r6,r7
 800d840:	356a983a 	sll	r21,r6,r21
 800d844:	3ca4b03a 	or	r18,r7,r18
 800d848:	00ff0344 	movi	r3,-1011
 800d84c:	1885c83a 	sub	r2,r3,r2
 800d850:	0007883a 	mov	r3,zero
 800d854:	003f8706 	br	800d674 <__alt_data_end+0xf800d674>
 800d858:	b039883a 	mov	fp,r22
 800d85c:	0081ffc4 	movi	r2,2047
 800d860:	0027883a 	mov	r19,zero
 800d864:	002f883a 	mov	r23,zero
 800d868:	003fad06 	br	800d720 <__alt_data_end+0xf800d720>
 800d86c:	0025883a 	mov	r18,zero
 800d870:	002b883a 	mov	r21,zero
 800d874:	00c00044 	movi	r3,1
 800d878:	003f7e06 	br	800d674 <__alt_data_end+0xf800d674>
 800d87c:	00c000c4 	movi	r3,3
 800d880:	003f7c06 	br	800d674 <__alt_data_end+0xf800d674>
 800d884:	05800104 	movi	r22,4
 800d888:	0027883a 	mov	r19,zero
 800d88c:	002f883a 	mov	r23,zero
 800d890:	01400044 	movi	r5,1
 800d894:	003f6506 	br	800d62c <__alt_data_end+0xf800d62c>
 800d898:	05800304 	movi	r22,12
 800d89c:	014000c4 	movi	r5,3
 800d8a0:	003f6206 	br	800d62c <__alt_data_end+0xf800d62c>
 800d8a4:	0039883a 	mov	fp,zero
 800d8a8:	04c00434 	movhi	r19,16
 800d8ac:	9cffffc4 	addi	r19,r19,-1
 800d8b0:	05ffffc4 	movi	r23,-1
 800d8b4:	0081ffc4 	movi	r2,2047
 800d8b8:	003f9906 	br	800d720 <__alt_data_end+0xf800d720>
 800d8bc:	9027883a 	mov	r19,r18
 800d8c0:	a82f883a 	mov	r23,r21
 800d8c4:	482d883a 	mov	r22,r9
 800d8c8:	180b883a 	mov	r5,r3
 800d8cc:	003f8a06 	br	800d6f8 <__alt_data_end+0xf800d6f8>
 800d8d0:	9027883a 	mov	r19,r18
 800d8d4:	a82f883a 	mov	r23,r21
 800d8d8:	180b883a 	mov	r5,r3
 800d8dc:	003f8606 	br	800d6f8 <__alt_data_end+0xf800d6f8>
 800d8e0:	a828d43a 	srli	r20,r21,16
 800d8e4:	b820d43a 	srli	r16,r23,16
 800d8e8:	ad7fffcc 	andi	r21,r21,65535
 800d8ec:	bdffffcc 	andi	r23,r23,65535
 800d8f0:	8885883a 	add	r2,r17,r2
 800d8f4:	a809883a 	mov	r4,r21
 800d8f8:	b80b883a 	mov	r5,r23
 800d8fc:	d8800015 	stw	r2,0(sp)
 800d900:	800c1240 	call	800c124 <__mulsi3>
 800d904:	a009883a 	mov	r4,r20
 800d908:	b80b883a 	mov	r5,r23
 800d90c:	d8800415 	stw	r2,16(sp)
 800d910:	800c1240 	call	800c124 <__mulsi3>
 800d914:	a809883a 	mov	r4,r21
 800d918:	800b883a 	mov	r5,r16
 800d91c:	d8800615 	stw	r2,24(sp)
 800d920:	800c1240 	call	800c124 <__mulsi3>
 800d924:	a009883a 	mov	r4,r20
 800d928:	800b883a 	mov	r5,r16
 800d92c:	1023883a 	mov	r17,r2
 800d930:	800c1240 	call	800c124 <__mulsi3>
 800d934:	d9c00417 	ldw	r7,16(sp)
 800d938:	da000617 	ldw	r8,24(sp)
 800d93c:	1039883a 	mov	fp,r2
 800d940:	3804d43a 	srli	r2,r7,16
 800d944:	8a07883a 	add	r3,r17,r8
 800d948:	1887883a 	add	r3,r3,r2
 800d94c:	1c40022e 	bgeu	r3,r17,800d958 <__muldf3+0x3ac>
 800d950:	00800074 	movhi	r2,1
 800d954:	e0b9883a 	add	fp,fp,r2
 800d958:	1804943a 	slli	r2,r3,16
 800d95c:	1806d43a 	srli	r3,r3,16
 800d960:	9022d43a 	srli	r17,r18,16
 800d964:	39ffffcc 	andi	r7,r7,65535
 800d968:	94bfffcc 	andi	r18,r18,65535
 800d96c:	11cf883a 	add	r7,r2,r7
 800d970:	b80b883a 	mov	r5,r23
 800d974:	9009883a 	mov	r4,r18
 800d978:	d8c00215 	stw	r3,8(sp)
 800d97c:	d9c00315 	stw	r7,12(sp)
 800d980:	800c1240 	call	800c124 <__mulsi3>
 800d984:	b80b883a 	mov	r5,r23
 800d988:	8809883a 	mov	r4,r17
 800d98c:	d8800415 	stw	r2,16(sp)
 800d990:	800c1240 	call	800c124 <__mulsi3>
 800d994:	9009883a 	mov	r4,r18
 800d998:	800b883a 	mov	r5,r16
 800d99c:	d8800715 	stw	r2,28(sp)
 800d9a0:	800c1240 	call	800c124 <__mulsi3>
 800d9a4:	8809883a 	mov	r4,r17
 800d9a8:	800b883a 	mov	r5,r16
 800d9ac:	102f883a 	mov	r23,r2
 800d9b0:	800c1240 	call	800c124 <__mulsi3>
 800d9b4:	d9c00417 	ldw	r7,16(sp)
 800d9b8:	da400717 	ldw	r9,28(sp)
 800d9bc:	1011883a 	mov	r8,r2
 800d9c0:	3804d43a 	srli	r2,r7,16
 800d9c4:	ba47883a 	add	r3,r23,r9
 800d9c8:	1887883a 	add	r3,r3,r2
 800d9cc:	1dc0022e 	bgeu	r3,r23,800d9d8 <__muldf3+0x42c>
 800d9d0:	00800074 	movhi	r2,1
 800d9d4:	4091883a 	add	r8,r8,r2
 800d9d8:	1804d43a 	srli	r2,r3,16
 800d9dc:	182e943a 	slli	r23,r3,16
 800d9e0:	9820d43a 	srli	r16,r19,16
 800d9e4:	9cffffcc 	andi	r19,r19,65535
 800d9e8:	39ffffcc 	andi	r7,r7,65535
 800d9ec:	4085883a 	add	r2,r8,r2
 800d9f0:	a809883a 	mov	r4,r21
 800d9f4:	980b883a 	mov	r5,r19
 800d9f8:	b9ef883a 	add	r23,r23,r7
 800d9fc:	d8800115 	stw	r2,4(sp)
 800da00:	800c1240 	call	800c124 <__mulsi3>
 800da04:	a009883a 	mov	r4,r20
 800da08:	980b883a 	mov	r5,r19
 800da0c:	d8800415 	stw	r2,16(sp)
 800da10:	800c1240 	call	800c124 <__mulsi3>
 800da14:	a809883a 	mov	r4,r21
 800da18:	800b883a 	mov	r5,r16
 800da1c:	d8800715 	stw	r2,28(sp)
 800da20:	800c1240 	call	800c124 <__mulsi3>
 800da24:	a009883a 	mov	r4,r20
 800da28:	800b883a 	mov	r5,r16
 800da2c:	102b883a 	mov	r21,r2
 800da30:	800c1240 	call	800c124 <__mulsi3>
 800da34:	d9c00417 	ldw	r7,16(sp)
 800da38:	da400717 	ldw	r9,28(sp)
 800da3c:	1011883a 	mov	r8,r2
 800da40:	3804d43a 	srli	r2,r7,16
 800da44:	aa47883a 	add	r3,r21,r9
 800da48:	1887883a 	add	r3,r3,r2
 800da4c:	1d40022e 	bgeu	r3,r21,800da58 <__muldf3+0x4ac>
 800da50:	00800074 	movhi	r2,1
 800da54:	4091883a 	add	r8,r8,r2
 800da58:	1828d43a 	srli	r20,r3,16
 800da5c:	1806943a 	slli	r3,r3,16
 800da60:	39ffffcc 	andi	r7,r7,65535
 800da64:	9009883a 	mov	r4,r18
 800da68:	980b883a 	mov	r5,r19
 800da6c:	19eb883a 	add	r21,r3,r7
 800da70:	4529883a 	add	r20,r8,r20
 800da74:	800c1240 	call	800c124 <__mulsi3>
 800da78:	980b883a 	mov	r5,r19
 800da7c:	8809883a 	mov	r4,r17
 800da80:	d8800415 	stw	r2,16(sp)
 800da84:	800c1240 	call	800c124 <__mulsi3>
 800da88:	9009883a 	mov	r4,r18
 800da8c:	800b883a 	mov	r5,r16
 800da90:	1027883a 	mov	r19,r2
 800da94:	800c1240 	call	800c124 <__mulsi3>
 800da98:	8809883a 	mov	r4,r17
 800da9c:	800b883a 	mov	r5,r16
 800daa0:	1025883a 	mov	r18,r2
 800daa4:	800c1240 	call	800c124 <__mulsi3>
 800daa8:	d9c00417 	ldw	r7,16(sp)
 800daac:	1011883a 	mov	r8,r2
 800dab0:	94c7883a 	add	r3,r18,r19
 800dab4:	3804d43a 	srli	r2,r7,16
 800dab8:	1887883a 	add	r3,r3,r2
 800dabc:	1c80022e 	bgeu	r3,r18,800dac8 <__muldf3+0x51c>
 800dac0:	00800074 	movhi	r2,1
 800dac4:	4091883a 	add	r8,r8,r2
 800dac8:	1804943a 	slli	r2,r3,16
 800dacc:	d9400217 	ldw	r5,8(sp)
 800dad0:	39ffffcc 	andi	r7,r7,65535
 800dad4:	11cf883a 	add	r7,r2,r7
 800dad8:	d8800117 	ldw	r2,4(sp)
 800dadc:	b949883a 	add	r4,r23,r5
 800dae0:	2739883a 	add	fp,r4,fp
 800dae4:	e5ef803a 	cmpltu	r23,fp,r23
 800dae8:	388f883a 	add	r7,r7,r2
 800daec:	3dcb883a 	add	r5,r7,r23
 800daf0:	a149883a 	add	r4,r20,r5
 800daf4:	2def803a 	cmpltu	r23,r5,r23
 800daf8:	d9400117 	ldw	r5,4(sp)
 800dafc:	e579883a 	add	fp,fp,r21
 800db00:	e56b803a 	cmpltu	r21,fp,r21
 800db04:	1804d43a 	srli	r2,r3,16
 800db08:	394f803a 	cmpltu	r7,r7,r5
 800db0c:	2547883a 	add	r3,r4,r21
 800db10:	b9e6b03a 	or	r19,r23,r7
 800db14:	1d6b803a 	cmpltu	r21,r3,r21
 800db18:	2529803a 	cmpltu	r20,r4,r20
 800db1c:	98a7883a 	add	r19,r19,r2
 800db20:	ad2ab03a 	or	r21,r21,r20
 800db24:	9d67883a 	add	r19,r19,r21
 800db28:	e02e927a 	slli	r23,fp,9
 800db2c:	9a27883a 	add	r19,r19,r8
 800db30:	d9000317 	ldw	r4,12(sp)
 800db34:	1804d5fa 	srli	r2,r3,23
 800db38:	9826927a 	slli	r19,r19,9
 800db3c:	e038d5fa 	srli	fp,fp,23
 800db40:	b92eb03a 	or	r23,r23,r4
 800db44:	1806927a 	slli	r3,r3,9
 800db48:	98a6b03a 	or	r19,r19,r2
 800db4c:	b82ec03a 	cmpne	r23,r23,zero
 800db50:	bf2eb03a 	or	r23,r23,fp
 800db54:	9880402c 	andhi	r2,r19,256
 800db58:	b8eeb03a 	or	r23,r23,r3
 800db5c:	10000926 	beq	r2,zero,800db84 <__muldf3+0x5d8>
 800db60:	b806d07a 	srli	r3,r23,1
 800db64:	bdc0004c 	andi	r23,r23,1
 800db68:	980497fa 	slli	r2,r19,31
 800db6c:	b8eeb03a 	or	r23,r23,r3
 800db70:	d8c00017 	ldw	r3,0(sp)
 800db74:	9826d07a 	srli	r19,r19,1
 800db78:	b8aeb03a 	or	r23,r23,r2
 800db7c:	18c00044 	addi	r3,r3,1
 800db80:	d8c00015 	stw	r3,0(sp)
 800db84:	d8c00017 	ldw	r3,0(sp)
 800db88:	1880ffc4 	addi	r2,r3,1023
 800db8c:	0080490e 	bge	zero,r2,800dcb4 <__muldf3+0x708>
 800db90:	b8c001cc 	andi	r3,r23,7
 800db94:	18000726 	beq	r3,zero,800dbb4 <__muldf3+0x608>
 800db98:	b90003cc 	andi	r4,r23,15
 800db9c:	00c00104 	movi	r3,4
 800dba0:	20c00426 	beq	r4,r3,800dbb4 <__muldf3+0x608>
 800dba4:	b8c7883a 	add	r3,r23,r3
 800dba8:	1def803a 	cmpltu	r23,r3,r23
 800dbac:	9de7883a 	add	r19,r19,r23
 800dbb0:	182f883a 	mov	r23,r3
 800dbb4:	98c0402c 	andhi	r3,r19,256
 800dbb8:	18000526 	beq	r3,zero,800dbd0 <__muldf3+0x624>
 800dbbc:	d8c00017 	ldw	r3,0(sp)
 800dbc0:	00bfc034 	movhi	r2,65280
 800dbc4:	10bfffc4 	addi	r2,r2,-1
 800dbc8:	98a6703a 	and	r19,r19,r2
 800dbcc:	18810004 	addi	r2,r3,1024
 800dbd0:	00c1ff84 	movi	r3,2046
 800dbd4:	18bf2016 	blt	r3,r2,800d858 <__alt_data_end+0xf800d858>
 800dbd8:	9806977a 	slli	r3,r19,29
 800dbdc:	b82ed0fa 	srli	r23,r23,3
 800dbe0:	9826927a 	slli	r19,r19,9
 800dbe4:	1081ffcc 	andi	r2,r2,2047
 800dbe8:	1deeb03a 	or	r23,r3,r23
 800dbec:	9826d33a 	srli	r19,r19,12
 800dbf0:	b039883a 	mov	fp,r22
 800dbf4:	003eca06 	br	800d720 <__alt_data_end+0xf800d720>
 800dbf8:	9880022c 	andhi	r2,r19,8
 800dbfc:	10000a26 	beq	r2,zero,800dc28 <__muldf3+0x67c>
 800dc00:	9080022c 	andhi	r2,r18,8
 800dc04:	1000081e 	bne	r2,zero,800dc28 <__muldf3+0x67c>
 800dc08:	00800434 	movhi	r2,16
 800dc0c:	10bfffc4 	addi	r2,r2,-1
 800dc10:	94c00234 	orhi	r19,r18,8
 800dc14:	98a6703a 	and	r19,r19,r2
 800dc18:	a039883a 	mov	fp,r20
 800dc1c:	a82f883a 	mov	r23,r21
 800dc20:	0081ffc4 	movi	r2,2047
 800dc24:	003ebe06 	br	800d720 <__alt_data_end+0xf800d720>
 800dc28:	00800434 	movhi	r2,16
 800dc2c:	10bfffc4 	addi	r2,r2,-1
 800dc30:	9cc00234 	orhi	r19,r19,8
 800dc34:	98a6703a 	and	r19,r19,r2
 800dc38:	0081ffc4 	movi	r2,2047
 800dc3c:	003eb806 	br	800d720 <__alt_data_end+0xf800d720>
 800dc40:	14fff604 	addi	r19,r2,-40
 800dc44:	a4e6983a 	sll	r19,r20,r19
 800dc48:	002f883a 	mov	r23,zero
 800dc4c:	003edd06 	br	800d7c4 <__alt_data_end+0xf800d7c4>
 800dc50:	d9800515 	stw	r6,20(sp)
 800dc54:	d9c00415 	stw	r7,16(sp)
 800dc58:	da000615 	stw	r8,24(sp)
 800dc5c:	800e8240 	call	800e824 <__clzsi2>
 800dc60:	10800804 	addi	r2,r2,32
 800dc64:	da000617 	ldw	r8,24(sp)
 800dc68:	d9c00417 	ldw	r7,16(sp)
 800dc6c:	d9800517 	ldw	r6,20(sp)
 800dc70:	003ecb06 	br	800d7a0 <__alt_data_end+0xf800d7a0>
 800dc74:	14bff604 	addi	r18,r2,-40
 800dc78:	34a4983a 	sll	r18,r6,r18
 800dc7c:	002b883a 	mov	r21,zero
 800dc80:	003ef106 	br	800d848 <__alt_data_end+0xf800d848>
 800dc84:	3009883a 	mov	r4,r6
 800dc88:	d9400415 	stw	r5,16(sp)
 800dc8c:	d9800515 	stw	r6,20(sp)
 800dc90:	da000615 	stw	r8,24(sp)
 800dc94:	da400715 	stw	r9,28(sp)
 800dc98:	800e8240 	call	800e824 <__clzsi2>
 800dc9c:	10800804 	addi	r2,r2,32
 800dca0:	da400717 	ldw	r9,28(sp)
 800dca4:	da000617 	ldw	r8,24(sp)
 800dca8:	d9800517 	ldw	r6,20(sp)
 800dcac:	d9400417 	ldw	r5,16(sp)
 800dcb0:	003edc06 	br	800d824 <__alt_data_end+0xf800d824>
 800dcb4:	d8c00017 	ldw	r3,0(sp)
 800dcb8:	00bf0084 	movi	r2,-1022
 800dcbc:	10c5c83a 	sub	r2,r2,r3
 800dcc0:	00c00e04 	movi	r3,56
 800dcc4:	18be9216 	blt	r3,r2,800d710 <__alt_data_end+0xf800d710>
 800dcc8:	00c007c4 	movi	r3,31
 800dccc:	18801916 	blt	r3,r2,800dd34 <__muldf3+0x788>
 800dcd0:	d9000017 	ldw	r4,0(sp)
 800dcd4:	b88ad83a 	srl	r5,r23,r2
 800dcd8:	9884d83a 	srl	r2,r19,r2
 800dcdc:	20c10784 	addi	r3,r4,1054
 800dce0:	98c8983a 	sll	r4,r19,r3
 800dce4:	b8c6983a 	sll	r3,r23,r3
 800dce8:	2908b03a 	or	r4,r5,r4
 800dcec:	1806c03a 	cmpne	r3,r3,zero
 800dcf0:	20c6b03a 	or	r3,r4,r3
 800dcf4:	190001cc 	andi	r4,r3,7
 800dcf8:	20000726 	beq	r4,zero,800dd18 <__muldf3+0x76c>
 800dcfc:	194003cc 	andi	r5,r3,15
 800dd00:	01000104 	movi	r4,4
 800dd04:	29000426 	beq	r5,r4,800dd18 <__muldf3+0x76c>
 800dd08:	1909883a 	add	r4,r3,r4
 800dd0c:	20c7803a 	cmpltu	r3,r4,r3
 800dd10:	10c5883a 	add	r2,r2,r3
 800dd14:	2007883a 	mov	r3,r4
 800dd18:	1100202c 	andhi	r4,r2,128
 800dd1c:	20001226 	beq	r4,zero,800dd68 <__muldf3+0x7bc>
 800dd20:	b039883a 	mov	fp,r22
 800dd24:	00800044 	movi	r2,1
 800dd28:	0027883a 	mov	r19,zero
 800dd2c:	002f883a 	mov	r23,zero
 800dd30:	003e7b06 	br	800d720 <__alt_data_end+0xf800d720>
 800dd34:	d9400017 	ldw	r5,0(sp)
 800dd38:	00fef884 	movi	r3,-1054
 800dd3c:	01000804 	movi	r4,32
 800dd40:	1947c83a 	sub	r3,r3,r5
 800dd44:	98c6d83a 	srl	r3,r19,r3
 800dd48:	11000f26 	beq	r2,r4,800dd88 <__muldf3+0x7dc>
 800dd4c:	28810f84 	addi	r2,r5,1086
 800dd50:	9884983a 	sll	r2,r19,r2
 800dd54:	15c4b03a 	or	r2,r2,r23
 800dd58:	1004c03a 	cmpne	r2,r2,zero
 800dd5c:	10c6b03a 	or	r3,r2,r3
 800dd60:	0005883a 	mov	r2,zero
 800dd64:	003fe306 	br	800dcf4 <__alt_data_end+0xf800dcf4>
 800dd68:	102e977a 	slli	r23,r2,29
 800dd6c:	1806d0fa 	srli	r3,r3,3
 800dd70:	1004927a 	slli	r2,r2,9
 800dd74:	b039883a 	mov	fp,r22
 800dd78:	b8eeb03a 	or	r23,r23,r3
 800dd7c:	1026d33a 	srli	r19,r2,12
 800dd80:	0005883a 	mov	r2,zero
 800dd84:	003e6606 	br	800d720 <__alt_data_end+0xf800d720>
 800dd88:	0005883a 	mov	r2,zero
 800dd8c:	003ff106 	br	800dd54 <__alt_data_end+0xf800dd54>
 800dd90:	00800434 	movhi	r2,16
 800dd94:	10bfffc4 	addi	r2,r2,-1
 800dd98:	9cc00234 	orhi	r19,r19,8
 800dd9c:	98a6703a 	and	r19,r19,r2
 800dda0:	b039883a 	mov	fp,r22
 800dda4:	0081ffc4 	movi	r2,2047
 800dda8:	003e5d06 	br	800d720 <__alt_data_end+0xf800d720>

0800ddac <__subdf3>:
 800ddac:	02000434 	movhi	r8,16
 800ddb0:	423fffc4 	addi	r8,r8,-1
 800ddb4:	defffb04 	addi	sp,sp,-20
 800ddb8:	2a06703a 	and	r3,r5,r8
 800ddbc:	3a10703a 	and	r8,r7,r8
 800ddc0:	3804d53a 	srli	r2,r7,20
 800ddc4:	dc800215 	stw	r18,8(sp)
 800ddc8:	dc400115 	stw	r17,4(sp)
 800ddcc:	2824d7fa 	srli	r18,r5,31
 800ddd0:	2822d53a 	srli	r17,r5,20
 800ddd4:	401090fa 	slli	r8,r8,3
 800ddd8:	180a90fa 	slli	r5,r3,3
 800dddc:	3006d77a 	srli	r3,r6,29
 800dde0:	2014d77a 	srli	r10,r4,29
 800dde4:	dc000015 	stw	r16,0(sp)
 800dde8:	40d0b03a 	or	r8,r8,r3
 800ddec:	dfc00415 	stw	ra,16(sp)
 800ddf0:	dcc00315 	stw	r19,12(sp)
 800ddf4:	1081ffcc 	andi	r2,r2,2047
 800ddf8:	00c1ffc4 	movi	r3,2047
 800ddfc:	9013883a 	mov	r9,r18
 800de00:	8c41ffcc 	andi	r17,r17,2047
 800de04:	94803fcc 	andi	r18,r18,255
 800de08:	2a8ab03a 	or	r5,r5,r10
 800de0c:	202090fa 	slli	r16,r4,3
 800de10:	380ed7fa 	srli	r7,r7,31
 800de14:	300c90fa 	slli	r6,r6,3
 800de18:	10c02e26 	beq	r2,r3,800ded4 <__subdf3+0x128>
 800de1c:	39c0005c 	xori	r7,r7,1
 800de20:	8887c83a 	sub	r3,r17,r2
 800de24:	91c03026 	beq	r18,r7,800dee8 <__subdf3+0x13c>
 800de28:	00c0a40e 	bge	zero,r3,800e0bc <__subdf3+0x310>
 800de2c:	10004c1e 	bne	r2,zero,800df60 <__subdf3+0x1b4>
 800de30:	4184b03a 	or	r2,r8,r6
 800de34:	10008f1e 	bne	r2,zero,800e074 <__subdf3+0x2c8>
 800de38:	808001cc 	andi	r2,r16,7
 800de3c:	10007d26 	beq	r2,zero,800e034 <__subdf3+0x288>
 800de40:	80c003cc 	andi	r3,r16,15
 800de44:	00800104 	movi	r2,4
 800de48:	18807a26 	beq	r3,r2,800e034 <__subdf3+0x288>
 800de4c:	80c00104 	addi	r3,r16,4
 800de50:	1c21803a 	cmpltu	r16,r3,r16
 800de54:	2c0b883a 	add	r5,r5,r16
 800de58:	2880202c 	andhi	r2,r5,128
 800de5c:	9240004c 	andi	r9,r18,1
 800de60:	1821883a 	mov	r16,r3
 800de64:	10007626 	beq	r2,zero,800e040 <__subdf3+0x294>
 800de68:	8c400044 	addi	r17,r17,1
 800de6c:	0081ffc4 	movi	r2,2047
 800de70:	8880b226 	beq	r17,r2,800e13c <__subdf3+0x390>
 800de74:	00bfe034 	movhi	r2,65408
 800de78:	10bfffc4 	addi	r2,r2,-1
 800de7c:	288a703a 	and	r5,r5,r2
 800de80:	2804977a 	slli	r2,r5,29
 800de84:	280a927a 	slli	r5,r5,9
 800de88:	8020d0fa 	srli	r16,r16,3
 800de8c:	280ad33a 	srli	r5,r5,12
 800de90:	1404b03a 	or	r2,r2,r16
 800de94:	8c41ffcc 	andi	r17,r17,2047
 800de98:	8822953a 	slli	r17,r17,20
 800de9c:	4a403fcc 	andi	r9,r9,255
 800dea0:	481297fa 	slli	r9,r9,31
 800dea4:	00c00434 	movhi	r3,16
 800dea8:	18ffffc4 	addi	r3,r3,-1
 800deac:	28c6703a 	and	r3,r5,r3
 800deb0:	1c46b03a 	or	r3,r3,r17
 800deb4:	1a46b03a 	or	r3,r3,r9
 800deb8:	dfc00417 	ldw	ra,16(sp)
 800debc:	dcc00317 	ldw	r19,12(sp)
 800dec0:	dc800217 	ldw	r18,8(sp)
 800dec4:	dc400117 	ldw	r17,4(sp)
 800dec8:	dc000017 	ldw	r16,0(sp)
 800decc:	dec00504 	addi	sp,sp,20
 800ded0:	f800283a 	ret
 800ded4:	4186b03a 	or	r3,r8,r6
 800ded8:	183fd026 	beq	r3,zero,800de1c <__alt_data_end+0xf800de1c>
 800dedc:	39c03fcc 	andi	r7,r7,255
 800dee0:	8887c83a 	sub	r3,r17,r2
 800dee4:	91ffd01e 	bne	r18,r7,800de28 <__alt_data_end+0xf800de28>
 800dee8:	00c09b0e 	bge	zero,r3,800e158 <__subdf3+0x3ac>
 800deec:	10006926 	beq	r2,zero,800e094 <__subdf3+0x2e8>
 800def0:	0081ffc4 	movi	r2,2047
 800def4:	88bfd026 	beq	r17,r2,800de38 <__alt_data_end+0xf800de38>
 800def8:	42002034 	orhi	r8,r8,128
 800defc:	00800e04 	movi	r2,56
 800df00:	10c0e20e 	bge	r2,r3,800e28c <__subdf3+0x4e0>
 800df04:	418cb03a 	or	r6,r8,r6
 800df08:	300cc03a 	cmpne	r6,r6,zero
 800df0c:	0007883a 	mov	r3,zero
 800df10:	340d883a 	add	r6,r6,r16
 800df14:	3421803a 	cmpltu	r16,r6,r16
 800df18:	194b883a 	add	r5,r3,r5
 800df1c:	2c0b883a 	add	r5,r5,r16
 800df20:	3021883a 	mov	r16,r6
 800df24:	2880202c 	andhi	r2,r5,128
 800df28:	103fc326 	beq	r2,zero,800de38 <__alt_data_end+0xf800de38>
 800df2c:	8c400044 	addi	r17,r17,1
 800df30:	0081ffc4 	movi	r2,2047
 800df34:	88811026 	beq	r17,r2,800e378 <__subdf3+0x5cc>
 800df38:	00bfe034 	movhi	r2,65408
 800df3c:	10bfffc4 	addi	r2,r2,-1
 800df40:	288a703a 	and	r5,r5,r2
 800df44:	8006d07a 	srli	r3,r16,1
 800df48:	280497fa 	slli	r2,r5,31
 800df4c:	8400004c 	andi	r16,r16,1
 800df50:	80e0b03a 	or	r16,r16,r3
 800df54:	80a0b03a 	or	r16,r16,r2
 800df58:	280ad07a 	srli	r5,r5,1
 800df5c:	003fb606 	br	800de38 <__alt_data_end+0xf800de38>
 800df60:	0081ffc4 	movi	r2,2047
 800df64:	88bfb426 	beq	r17,r2,800de38 <__alt_data_end+0xf800de38>
 800df68:	42002034 	orhi	r8,r8,128
 800df6c:	00800e04 	movi	r2,56
 800df70:	10c07516 	blt	r2,r3,800e148 <__subdf3+0x39c>
 800df74:	008007c4 	movi	r2,31
 800df78:	10c09816 	blt	r2,r3,800e1dc <__subdf3+0x430>
 800df7c:	00800804 	movi	r2,32
 800df80:	10c5c83a 	sub	r2,r2,r3
 800df84:	30c8d83a 	srl	r4,r6,r3
 800df88:	408e983a 	sll	r7,r8,r2
 800df8c:	3084983a 	sll	r2,r6,r2
 800df90:	40c6d83a 	srl	r3,r8,r3
 800df94:	3908b03a 	or	r4,r7,r4
 800df98:	1004c03a 	cmpne	r2,r2,zero
 800df9c:	208cb03a 	or	r6,r4,r2
 800dfa0:	818dc83a 	sub	r6,r16,r6
 800dfa4:	81a1803a 	cmpltu	r16,r16,r6
 800dfa8:	28cbc83a 	sub	r5,r5,r3
 800dfac:	2c0bc83a 	sub	r5,r5,r16
 800dfb0:	3021883a 	mov	r16,r6
 800dfb4:	2880202c 	andhi	r2,r5,128
 800dfb8:	103f9f26 	beq	r2,zero,800de38 <__alt_data_end+0xf800de38>
 800dfbc:	04c02034 	movhi	r19,128
 800dfc0:	9cffffc4 	addi	r19,r19,-1
 800dfc4:	2ce6703a 	and	r19,r5,r19
 800dfc8:	98004d26 	beq	r19,zero,800e100 <__subdf3+0x354>
 800dfcc:	9809883a 	mov	r4,r19
 800dfd0:	800e8240 	call	800e824 <__clzsi2>
 800dfd4:	10fffe04 	addi	r3,r2,-8
 800dfd8:	010007c4 	movi	r4,31
 800dfdc:	20c04e16 	blt	r4,r3,800e118 <__subdf3+0x36c>
 800dfe0:	01000a04 	movi	r4,40
 800dfe4:	2085c83a 	sub	r2,r4,r2
 800dfe8:	8084d83a 	srl	r2,r16,r2
 800dfec:	98e6983a 	sll	r19,r19,r3
 800dff0:	80e0983a 	sll	r16,r16,r3
 800dff4:	14c4b03a 	or	r2,r2,r19
 800dff8:	1c404b16 	blt	r3,r17,800e128 <__subdf3+0x37c>
 800dffc:	1c63c83a 	sub	r17,r3,r17
 800e000:	89400044 	addi	r5,r17,1
 800e004:	00c007c4 	movi	r3,31
 800e008:	19406716 	blt	r3,r5,800e1a8 <__subdf3+0x3fc>
 800e00c:	1c47c83a 	sub	r3,r3,r17
 800e010:	8148d83a 	srl	r4,r16,r5
 800e014:	80e0983a 	sll	r16,r16,r3
 800e018:	10c6983a 	sll	r3,r2,r3
 800e01c:	114ad83a 	srl	r5,r2,r5
 800e020:	8004c03a 	cmpne	r2,r16,zero
 800e024:	20e0b03a 	or	r16,r4,r3
 800e028:	80a0b03a 	or	r16,r16,r2
 800e02c:	0023883a 	mov	r17,zero
 800e030:	003f8106 	br	800de38 <__alt_data_end+0xf800de38>
 800e034:	2880202c 	andhi	r2,r5,128
 800e038:	9240004c 	andi	r9,r18,1
 800e03c:	103f8a1e 	bne	r2,zero,800de68 <__alt_data_end+0xf800de68>
 800e040:	2804977a 	slli	r2,r5,29
 800e044:	8020d0fa 	srli	r16,r16,3
 800e048:	00c1ffc4 	movi	r3,2047
 800e04c:	280ad0fa 	srli	r5,r5,3
 800e050:	1404b03a 	or	r2,r2,r16
 800e054:	88c0031e 	bne	r17,r3,800e064 <__subdf3+0x2b8>
 800e058:	1146b03a 	or	r3,r2,r5
 800e05c:	18003726 	beq	r3,zero,800e13c <__subdf3+0x390>
 800e060:	29400234 	orhi	r5,r5,8
 800e064:	00c00434 	movhi	r3,16
 800e068:	18ffffc4 	addi	r3,r3,-1
 800e06c:	28ca703a 	and	r5,r5,r3
 800e070:	003f8806 	br	800de94 <__alt_data_end+0xf800de94>
 800e074:	18ffffc4 	addi	r3,r3,-1
 800e078:	1800481e 	bne	r3,zero,800e19c <__subdf3+0x3f0>
 800e07c:	818dc83a 	sub	r6,r16,r6
 800e080:	81a1803a 	cmpltu	r16,r16,r6
 800e084:	2a0bc83a 	sub	r5,r5,r8
 800e088:	2c0bc83a 	sub	r5,r5,r16
 800e08c:	3021883a 	mov	r16,r6
 800e090:	003fc806 	br	800dfb4 <__alt_data_end+0xf800dfb4>
 800e094:	4184b03a 	or	r2,r8,r6
 800e098:	103f6726 	beq	r2,zero,800de38 <__alt_data_end+0xf800de38>
 800e09c:	18ffffc4 	addi	r3,r3,-1
 800e0a0:	1800931e 	bne	r3,zero,800e2f0 <__subdf3+0x544>
 800e0a4:	340d883a 	add	r6,r6,r16
 800e0a8:	3421803a 	cmpltu	r16,r6,r16
 800e0ac:	414b883a 	add	r5,r8,r5
 800e0b0:	2c0b883a 	add	r5,r5,r16
 800e0b4:	3021883a 	mov	r16,r6
 800e0b8:	003f9a06 	br	800df24 <__alt_data_end+0xf800df24>
 800e0bc:	1800531e 	bne	r3,zero,800e20c <__subdf3+0x460>
 800e0c0:	88800044 	addi	r2,r17,1
 800e0c4:	1081ffcc 	andi	r2,r2,2047
 800e0c8:	00c00044 	movi	r3,1
 800e0cc:	1880a00e 	bge	r3,r2,800e350 <__subdf3+0x5a4>
 800e0d0:	8185c83a 	sub	r2,r16,r6
 800e0d4:	8087803a 	cmpltu	r3,r16,r2
 800e0d8:	2a27c83a 	sub	r19,r5,r8
 800e0dc:	98e7c83a 	sub	r19,r19,r3
 800e0e0:	98c0202c 	andhi	r3,r19,128
 800e0e4:	18006226 	beq	r3,zero,800e270 <__subdf3+0x4c4>
 800e0e8:	3421c83a 	sub	r16,r6,r16
 800e0ec:	414bc83a 	sub	r5,r8,r5
 800e0f0:	340d803a 	cmpltu	r6,r6,r16
 800e0f4:	29a7c83a 	sub	r19,r5,r6
 800e0f8:	3825883a 	mov	r18,r7
 800e0fc:	983fb31e 	bne	r19,zero,800dfcc <__alt_data_end+0xf800dfcc>
 800e100:	8009883a 	mov	r4,r16
 800e104:	800e8240 	call	800e824 <__clzsi2>
 800e108:	10800804 	addi	r2,r2,32
 800e10c:	10fffe04 	addi	r3,r2,-8
 800e110:	010007c4 	movi	r4,31
 800e114:	20ffb20e 	bge	r4,r3,800dfe0 <__alt_data_end+0xf800dfe0>
 800e118:	10bff604 	addi	r2,r2,-40
 800e11c:	8084983a 	sll	r2,r16,r2
 800e120:	0021883a 	mov	r16,zero
 800e124:	1c7fb50e 	bge	r3,r17,800dffc <__alt_data_end+0xf800dffc>
 800e128:	017fe034 	movhi	r5,65408
 800e12c:	297fffc4 	addi	r5,r5,-1
 800e130:	88e3c83a 	sub	r17,r17,r3
 800e134:	114a703a 	and	r5,r2,r5
 800e138:	003f3f06 	br	800de38 <__alt_data_end+0xf800de38>
 800e13c:	000b883a 	mov	r5,zero
 800e140:	0005883a 	mov	r2,zero
 800e144:	003f5306 	br	800de94 <__alt_data_end+0xf800de94>
 800e148:	418cb03a 	or	r6,r8,r6
 800e14c:	300cc03a 	cmpne	r6,r6,zero
 800e150:	0007883a 	mov	r3,zero
 800e154:	003f9206 	br	800dfa0 <__alt_data_end+0xf800dfa0>
 800e158:	1800961e 	bne	r3,zero,800e3b4 <__subdf3+0x608>
 800e15c:	88800044 	addi	r2,r17,1
 800e160:	1101ffcc 	andi	r4,r2,2047
 800e164:	00c00044 	movi	r3,1
 800e168:	1900680e 	bge	r3,r4,800e30c <__subdf3+0x560>
 800e16c:	00c1ffc4 	movi	r3,2047
 800e170:	10c0b626 	beq	r2,r3,800e44c <__subdf3+0x6a0>
 800e174:	340d883a 	add	r6,r6,r16
 800e178:	3421803a 	cmpltu	r16,r6,r16
 800e17c:	414b883a 	add	r5,r8,r5
 800e180:	2c0b883a 	add	r5,r5,r16
 800e184:	282097fa 	slli	r16,r5,31
 800e188:	300cd07a 	srli	r6,r6,1
 800e18c:	280ad07a 	srli	r5,r5,1
 800e190:	1023883a 	mov	r17,r2
 800e194:	81a0b03a 	or	r16,r16,r6
 800e198:	003f2706 	br	800de38 <__alt_data_end+0xf800de38>
 800e19c:	0081ffc4 	movi	r2,2047
 800e1a0:	88bf721e 	bne	r17,r2,800df6c <__alt_data_end+0xf800df6c>
 800e1a4:	003f2406 	br	800de38 <__alt_data_end+0xf800de38>
 800e1a8:	893ff844 	addi	r4,r17,-31
 800e1ac:	00c00804 	movi	r3,32
 800e1b0:	1108d83a 	srl	r4,r2,r4
 800e1b4:	28c05126 	beq	r5,r3,800e2fc <__subdf3+0x550>
 800e1b8:	00c00fc4 	movi	r3,63
 800e1bc:	1c63c83a 	sub	r17,r3,r17
 800e1c0:	1444983a 	sll	r2,r2,r17
 800e1c4:	1420b03a 	or	r16,r2,r16
 800e1c8:	8020c03a 	cmpne	r16,r16,zero
 800e1cc:	8120b03a 	or	r16,r16,r4
 800e1d0:	000b883a 	mov	r5,zero
 800e1d4:	0023883a 	mov	r17,zero
 800e1d8:	003f1706 	br	800de38 <__alt_data_end+0xf800de38>
 800e1dc:	18bff804 	addi	r2,r3,-32
 800e1e0:	01000804 	movi	r4,32
 800e1e4:	4084d83a 	srl	r2,r8,r2
 800e1e8:	19004626 	beq	r3,r4,800e304 <__subdf3+0x558>
 800e1ec:	01001004 	movi	r4,64
 800e1f0:	20c7c83a 	sub	r3,r4,r3
 800e1f4:	40d0983a 	sll	r8,r8,r3
 800e1f8:	418cb03a 	or	r6,r8,r6
 800e1fc:	300cc03a 	cmpne	r6,r6,zero
 800e200:	308cb03a 	or	r6,r6,r2
 800e204:	0007883a 	mov	r3,zero
 800e208:	003f6506 	br	800dfa0 <__alt_data_end+0xf800dfa0>
 800e20c:	88002b26 	beq	r17,zero,800e2bc <__subdf3+0x510>
 800e210:	0101ffc4 	movi	r4,2047
 800e214:	11002f26 	beq	r2,r4,800e2d4 <__subdf3+0x528>
 800e218:	00c7c83a 	sub	r3,zero,r3
 800e21c:	29402034 	orhi	r5,r5,128
 800e220:	01000e04 	movi	r4,56
 800e224:	20c08516 	blt	r4,r3,800e43c <__subdf3+0x690>
 800e228:	010007c4 	movi	r4,31
 800e22c:	20c0cd16 	blt	r4,r3,800e564 <__subdf3+0x7b8>
 800e230:	01000804 	movi	r4,32
 800e234:	20c9c83a 	sub	r4,r4,r3
 800e238:	2914983a 	sll	r10,r5,r4
 800e23c:	80d2d83a 	srl	r9,r16,r3
 800e240:	8108983a 	sll	r4,r16,r4
 800e244:	28cad83a 	srl	r5,r5,r3
 800e248:	5252b03a 	or	r9,r10,r9
 800e24c:	2006c03a 	cmpne	r3,r4,zero
 800e250:	48e0b03a 	or	r16,r9,r3
 800e254:	3421c83a 	sub	r16,r6,r16
 800e258:	414bc83a 	sub	r5,r8,r5
 800e25c:	340d803a 	cmpltu	r6,r6,r16
 800e260:	298bc83a 	sub	r5,r5,r6
 800e264:	1023883a 	mov	r17,r2
 800e268:	3825883a 	mov	r18,r7
 800e26c:	003f5106 	br	800dfb4 <__alt_data_end+0xf800dfb4>
 800e270:	9886b03a 	or	r3,r19,r2
 800e274:	18001c1e 	bne	r3,zero,800e2e8 <__subdf3+0x53c>
 800e278:	0013883a 	mov	r9,zero
 800e27c:	000b883a 	mov	r5,zero
 800e280:	0021883a 	mov	r16,zero
 800e284:	0023883a 	mov	r17,zero
 800e288:	003f6d06 	br	800e040 <__alt_data_end+0xf800e040>
 800e28c:	008007c4 	movi	r2,31
 800e290:	10c03c16 	blt	r2,r3,800e384 <__subdf3+0x5d8>
 800e294:	00800804 	movi	r2,32
 800e298:	10c5c83a 	sub	r2,r2,r3
 800e29c:	30c8d83a 	srl	r4,r6,r3
 800e2a0:	408e983a 	sll	r7,r8,r2
 800e2a4:	3084983a 	sll	r2,r6,r2
 800e2a8:	40c6d83a 	srl	r3,r8,r3
 800e2ac:	3908b03a 	or	r4,r7,r4
 800e2b0:	1004c03a 	cmpne	r2,r2,zero
 800e2b4:	208cb03a 	or	r6,r4,r2
 800e2b8:	003f1506 	br	800df10 <__alt_data_end+0xf800df10>
 800e2bc:	2c08b03a 	or	r4,r5,r16
 800e2c0:	20000426 	beq	r4,zero,800e2d4 <__subdf3+0x528>
 800e2c4:	00c6303a 	nor	r3,zero,r3
 800e2c8:	183fe226 	beq	r3,zero,800e254 <__alt_data_end+0xf800e254>
 800e2cc:	0101ffc4 	movi	r4,2047
 800e2d0:	113fd31e 	bne	r2,r4,800e220 <__alt_data_end+0xf800e220>
 800e2d4:	400b883a 	mov	r5,r8
 800e2d8:	3021883a 	mov	r16,r6
 800e2dc:	1023883a 	mov	r17,r2
 800e2e0:	3825883a 	mov	r18,r7
 800e2e4:	003ed406 	br	800de38 <__alt_data_end+0xf800de38>
 800e2e8:	1021883a 	mov	r16,r2
 800e2ec:	003f3606 	br	800dfc8 <__alt_data_end+0xf800dfc8>
 800e2f0:	0081ffc4 	movi	r2,2047
 800e2f4:	88bf011e 	bne	r17,r2,800defc <__alt_data_end+0xf800defc>
 800e2f8:	003ecf06 	br	800de38 <__alt_data_end+0xf800de38>
 800e2fc:	0005883a 	mov	r2,zero
 800e300:	003fb006 	br	800e1c4 <__alt_data_end+0xf800e1c4>
 800e304:	0011883a 	mov	r8,zero
 800e308:	003fbb06 	br	800e1f8 <__alt_data_end+0xf800e1f8>
 800e30c:	2c04b03a 	or	r2,r5,r16
 800e310:	88007f1e 	bne	r17,zero,800e510 <__subdf3+0x764>
 800e314:	1000a926 	beq	r2,zero,800e5bc <__subdf3+0x810>
 800e318:	4184b03a 	or	r2,r8,r6
 800e31c:	103ec626 	beq	r2,zero,800de38 <__alt_data_end+0xf800de38>
 800e320:	340d883a 	add	r6,r6,r16
 800e324:	414b883a 	add	r5,r8,r5
 800e328:	3421803a 	cmpltu	r16,r6,r16
 800e32c:	2c0b883a 	add	r5,r5,r16
 800e330:	2880202c 	andhi	r2,r5,128
 800e334:	1000bb26 	beq	r2,zero,800e624 <__subdf3+0x878>
 800e338:	00bfe034 	movhi	r2,65408
 800e33c:	10bfffc4 	addi	r2,r2,-1
 800e340:	288a703a 	and	r5,r5,r2
 800e344:	3021883a 	mov	r16,r6
 800e348:	1823883a 	mov	r17,r3
 800e34c:	003eba06 	br	800de38 <__alt_data_end+0xf800de38>
 800e350:	2c04b03a 	or	r2,r5,r16
 800e354:	8800311e 	bne	r17,zero,800e41c <__subdf3+0x670>
 800e358:	1000451e 	bne	r2,zero,800e470 <__subdf3+0x6c4>
 800e35c:	4184b03a 	or	r2,r8,r6
 800e360:	10000426 	beq	r2,zero,800e374 <__subdf3+0x5c8>
 800e364:	400b883a 	mov	r5,r8
 800e368:	3021883a 	mov	r16,r6
 800e36c:	3825883a 	mov	r18,r7
 800e370:	003eb106 	br	800de38 <__alt_data_end+0xf800de38>
 800e374:	0013883a 	mov	r9,zero
 800e378:	000b883a 	mov	r5,zero
 800e37c:	0021883a 	mov	r16,zero
 800e380:	003f2f06 	br	800e040 <__alt_data_end+0xf800e040>
 800e384:	18bff804 	addi	r2,r3,-32
 800e388:	01000804 	movi	r4,32
 800e38c:	4084d83a 	srl	r2,r8,r2
 800e390:	19007226 	beq	r3,r4,800e55c <__subdf3+0x7b0>
 800e394:	01001004 	movi	r4,64
 800e398:	20c7c83a 	sub	r3,r4,r3
 800e39c:	40d0983a 	sll	r8,r8,r3
 800e3a0:	418cb03a 	or	r6,r8,r6
 800e3a4:	300cc03a 	cmpne	r6,r6,zero
 800e3a8:	308cb03a 	or	r6,r6,r2
 800e3ac:	0007883a 	mov	r3,zero
 800e3b0:	003ed706 	br	800df10 <__alt_data_end+0xf800df10>
 800e3b4:	8800291e 	bne	r17,zero,800e45c <__subdf3+0x6b0>
 800e3b8:	2c08b03a 	or	r4,r5,r16
 800e3bc:	20005026 	beq	r4,zero,800e500 <__subdf3+0x754>
 800e3c0:	00c6303a 	nor	r3,zero,r3
 800e3c4:	18000f26 	beq	r3,zero,800e404 <__subdf3+0x658>
 800e3c8:	0101ffc4 	movi	r4,2047
 800e3cc:	11004c26 	beq	r2,r4,800e500 <__subdf3+0x754>
 800e3d0:	01000e04 	movi	r4,56
 800e3d4:	20c07516 	blt	r4,r3,800e5ac <__subdf3+0x800>
 800e3d8:	010007c4 	movi	r4,31
 800e3dc:	20c08316 	blt	r4,r3,800e5ec <__subdf3+0x840>
 800e3e0:	01000804 	movi	r4,32
 800e3e4:	20c9c83a 	sub	r4,r4,r3
 800e3e8:	2914983a 	sll	r10,r5,r4
 800e3ec:	80ced83a 	srl	r7,r16,r3
 800e3f0:	8108983a 	sll	r4,r16,r4
 800e3f4:	28cad83a 	srl	r5,r5,r3
 800e3f8:	51ceb03a 	or	r7,r10,r7
 800e3fc:	2006c03a 	cmpne	r3,r4,zero
 800e400:	38e0b03a 	or	r16,r7,r3
 800e404:	81a1883a 	add	r16,r16,r6
 800e408:	2a0b883a 	add	r5,r5,r8
 800e40c:	818d803a 	cmpltu	r6,r16,r6
 800e410:	298b883a 	add	r5,r5,r6
 800e414:	1023883a 	mov	r17,r2
 800e418:	003ec206 	br	800df24 <__alt_data_end+0xf800df24>
 800e41c:	1000221e 	bne	r2,zero,800e4a8 <__subdf3+0x6fc>
 800e420:	4184b03a 	or	r2,r8,r6
 800e424:	10005b26 	beq	r2,zero,800e594 <__subdf3+0x7e8>
 800e428:	400b883a 	mov	r5,r8
 800e42c:	3021883a 	mov	r16,r6
 800e430:	3825883a 	mov	r18,r7
 800e434:	0441ffc4 	movi	r17,2047
 800e438:	003e7f06 	br	800de38 <__alt_data_end+0xf800de38>
 800e43c:	2c20b03a 	or	r16,r5,r16
 800e440:	8020c03a 	cmpne	r16,r16,zero
 800e444:	000b883a 	mov	r5,zero
 800e448:	003f8206 	br	800e254 <__alt_data_end+0xf800e254>
 800e44c:	1023883a 	mov	r17,r2
 800e450:	000b883a 	mov	r5,zero
 800e454:	0021883a 	mov	r16,zero
 800e458:	003ef906 	br	800e040 <__alt_data_end+0xf800e040>
 800e45c:	0101ffc4 	movi	r4,2047
 800e460:	11002726 	beq	r2,r4,800e500 <__subdf3+0x754>
 800e464:	00c7c83a 	sub	r3,zero,r3
 800e468:	29402034 	orhi	r5,r5,128
 800e46c:	003fd806 	br	800e3d0 <__alt_data_end+0xf800e3d0>
 800e470:	4184b03a 	or	r2,r8,r6
 800e474:	103e7026 	beq	r2,zero,800de38 <__alt_data_end+0xf800de38>
 800e478:	8185c83a 	sub	r2,r16,r6
 800e47c:	8089803a 	cmpltu	r4,r16,r2
 800e480:	2a07c83a 	sub	r3,r5,r8
 800e484:	1907c83a 	sub	r3,r3,r4
 800e488:	1900202c 	andhi	r4,r3,128
 800e48c:	20005226 	beq	r4,zero,800e5d8 <__subdf3+0x82c>
 800e490:	3421c83a 	sub	r16,r6,r16
 800e494:	414bc83a 	sub	r5,r8,r5
 800e498:	340d803a 	cmpltu	r6,r6,r16
 800e49c:	298bc83a 	sub	r5,r5,r6
 800e4a0:	3825883a 	mov	r18,r7
 800e4a4:	003e6406 	br	800de38 <__alt_data_end+0xf800de38>
 800e4a8:	4184b03a 	or	r2,r8,r6
 800e4ac:	10002926 	beq	r2,zero,800e554 <__subdf3+0x7a8>
 800e4b0:	2804d0fa 	srli	r2,r5,3
 800e4b4:	8020d0fa 	srli	r16,r16,3
 800e4b8:	280a977a 	slli	r5,r5,29
 800e4bc:	10c0022c 	andhi	r3,r2,8
 800e4c0:	2c20b03a 	or	r16,r5,r16
 800e4c4:	18000826 	beq	r3,zero,800e4e8 <__subdf3+0x73c>
 800e4c8:	4006d0fa 	srli	r3,r8,3
 800e4cc:	1900022c 	andhi	r4,r3,8
 800e4d0:	2000051e 	bne	r4,zero,800e4e8 <__subdf3+0x73c>
 800e4d4:	300cd0fa 	srli	r6,r6,3
 800e4d8:	4010977a 	slli	r8,r8,29
 800e4dc:	1805883a 	mov	r2,r3
 800e4e0:	3825883a 	mov	r18,r7
 800e4e4:	41a0b03a 	or	r16,r8,r6
 800e4e8:	800ad77a 	srli	r5,r16,29
 800e4ec:	100490fa 	slli	r2,r2,3
 800e4f0:	802090fa 	slli	r16,r16,3
 800e4f4:	0441ffc4 	movi	r17,2047
 800e4f8:	288ab03a 	or	r5,r5,r2
 800e4fc:	003e4e06 	br	800de38 <__alt_data_end+0xf800de38>
 800e500:	400b883a 	mov	r5,r8
 800e504:	3021883a 	mov	r16,r6
 800e508:	1023883a 	mov	r17,r2
 800e50c:	003e4a06 	br	800de38 <__alt_data_end+0xf800de38>
 800e510:	10002d26 	beq	r2,zero,800e5c8 <__subdf3+0x81c>
 800e514:	4184b03a 	or	r2,r8,r6
 800e518:	10000e26 	beq	r2,zero,800e554 <__subdf3+0x7a8>
 800e51c:	2804d0fa 	srli	r2,r5,3
 800e520:	8020d0fa 	srli	r16,r16,3
 800e524:	280a977a 	slli	r5,r5,29
 800e528:	10c0022c 	andhi	r3,r2,8
 800e52c:	2c20b03a 	or	r16,r5,r16
 800e530:	183fed26 	beq	r3,zero,800e4e8 <__alt_data_end+0xf800e4e8>
 800e534:	4006d0fa 	srli	r3,r8,3
 800e538:	1900022c 	andhi	r4,r3,8
 800e53c:	203fea1e 	bne	r4,zero,800e4e8 <__alt_data_end+0xf800e4e8>
 800e540:	300cd0fa 	srli	r6,r6,3
 800e544:	4010977a 	slli	r8,r8,29
 800e548:	1805883a 	mov	r2,r3
 800e54c:	41a0b03a 	or	r16,r8,r6
 800e550:	003fe506 	br	800e4e8 <__alt_data_end+0xf800e4e8>
 800e554:	0441ffc4 	movi	r17,2047
 800e558:	003e3706 	br	800de38 <__alt_data_end+0xf800de38>
 800e55c:	0011883a 	mov	r8,zero
 800e560:	003f8f06 	br	800e3a0 <__alt_data_end+0xf800e3a0>
 800e564:	193ff804 	addi	r4,r3,-32
 800e568:	02400804 	movi	r9,32
 800e56c:	2908d83a 	srl	r4,r5,r4
 800e570:	1a402a26 	beq	r3,r9,800e61c <__subdf3+0x870>
 800e574:	02401004 	movi	r9,64
 800e578:	48c7c83a 	sub	r3,r9,r3
 800e57c:	28ca983a 	sll	r5,r5,r3
 800e580:	2c20b03a 	or	r16,r5,r16
 800e584:	8020c03a 	cmpne	r16,r16,zero
 800e588:	8120b03a 	or	r16,r16,r4
 800e58c:	000b883a 	mov	r5,zero
 800e590:	003f3006 	br	800e254 <__alt_data_end+0xf800e254>
 800e594:	0013883a 	mov	r9,zero
 800e598:	01402034 	movhi	r5,128
 800e59c:	297fffc4 	addi	r5,r5,-1
 800e5a0:	043ffe04 	movi	r16,-8
 800e5a4:	0441ffc4 	movi	r17,2047
 800e5a8:	003ea506 	br	800e040 <__alt_data_end+0xf800e040>
 800e5ac:	2c20b03a 	or	r16,r5,r16
 800e5b0:	8020c03a 	cmpne	r16,r16,zero
 800e5b4:	000b883a 	mov	r5,zero
 800e5b8:	003f9206 	br	800e404 <__alt_data_end+0xf800e404>
 800e5bc:	400b883a 	mov	r5,r8
 800e5c0:	3021883a 	mov	r16,r6
 800e5c4:	003e1c06 	br	800de38 <__alt_data_end+0xf800de38>
 800e5c8:	400b883a 	mov	r5,r8
 800e5cc:	3021883a 	mov	r16,r6
 800e5d0:	0441ffc4 	movi	r17,2047
 800e5d4:	003e1806 	br	800de38 <__alt_data_end+0xf800de38>
 800e5d8:	1888b03a 	or	r4,r3,r2
 800e5dc:	203f6526 	beq	r4,zero,800e374 <__alt_data_end+0xf800e374>
 800e5e0:	180b883a 	mov	r5,r3
 800e5e4:	1021883a 	mov	r16,r2
 800e5e8:	003e1306 	br	800de38 <__alt_data_end+0xf800de38>
 800e5ec:	193ff804 	addi	r4,r3,-32
 800e5f0:	01c00804 	movi	r7,32
 800e5f4:	2908d83a 	srl	r4,r5,r4
 800e5f8:	19c00c26 	beq	r3,r7,800e62c <__subdf3+0x880>
 800e5fc:	01c01004 	movi	r7,64
 800e600:	38c7c83a 	sub	r3,r7,r3
 800e604:	28ca983a 	sll	r5,r5,r3
 800e608:	2c20b03a 	or	r16,r5,r16
 800e60c:	8020c03a 	cmpne	r16,r16,zero
 800e610:	8120b03a 	or	r16,r16,r4
 800e614:	000b883a 	mov	r5,zero
 800e618:	003f7a06 	br	800e404 <__alt_data_end+0xf800e404>
 800e61c:	000b883a 	mov	r5,zero
 800e620:	003fd706 	br	800e580 <__alt_data_end+0xf800e580>
 800e624:	3021883a 	mov	r16,r6
 800e628:	003e0306 	br	800de38 <__alt_data_end+0xf800de38>
 800e62c:	000b883a 	mov	r5,zero
 800e630:	003ff506 	br	800e608 <__alt_data_end+0xf800e608>

0800e634 <__fixdfsi>:
 800e634:	2806d53a 	srli	r3,r5,20
 800e638:	00800434 	movhi	r2,16
 800e63c:	10bfffc4 	addi	r2,r2,-1
 800e640:	0180ff84 	movi	r6,1022
 800e644:	18c1ffcc 	andi	r3,r3,2047
 800e648:	2884703a 	and	r2,r5,r2
 800e64c:	280ad7fa 	srli	r5,r5,31
 800e650:	30c0120e 	bge	r6,r3,800e69c <__fixdfsi+0x68>
 800e654:	01810744 	movi	r6,1053
 800e658:	30c00c16 	blt	r6,r3,800e68c <__fixdfsi+0x58>
 800e65c:	01810cc4 	movi	r6,1075
 800e660:	30cdc83a 	sub	r6,r6,r3
 800e664:	01c007c4 	movi	r7,31
 800e668:	10800434 	orhi	r2,r2,16
 800e66c:	39800d16 	blt	r7,r6,800e6a4 <__fixdfsi+0x70>
 800e670:	18fefb44 	addi	r3,r3,-1043
 800e674:	2188d83a 	srl	r4,r4,r6
 800e678:	10c4983a 	sll	r2,r2,r3
 800e67c:	2084b03a 	or	r2,r4,r2
 800e680:	28000726 	beq	r5,zero,800e6a0 <__fixdfsi+0x6c>
 800e684:	0085c83a 	sub	r2,zero,r2
 800e688:	f800283a 	ret
 800e68c:	00a00034 	movhi	r2,32768
 800e690:	10bfffc4 	addi	r2,r2,-1
 800e694:	2885883a 	add	r2,r5,r2
 800e698:	f800283a 	ret
 800e69c:	0005883a 	mov	r2,zero
 800e6a0:	f800283a 	ret
 800e6a4:	010104c4 	movi	r4,1043
 800e6a8:	20c7c83a 	sub	r3,r4,r3
 800e6ac:	10c4d83a 	srl	r2,r2,r3
 800e6b0:	003ff306 	br	800e680 <__alt_data_end+0xf800e680>

0800e6b4 <__floatsidf>:
 800e6b4:	defffd04 	addi	sp,sp,-12
 800e6b8:	dc000015 	stw	r16,0(sp)
 800e6bc:	dfc00215 	stw	ra,8(sp)
 800e6c0:	dc400115 	stw	r17,4(sp)
 800e6c4:	2021883a 	mov	r16,r4
 800e6c8:	20002926 	beq	r4,zero,800e770 <__floatsidf+0xbc>
 800e6cc:	2022d7fa 	srli	r17,r4,31
 800e6d0:	88000126 	beq	r17,zero,800e6d8 <__floatsidf+0x24>
 800e6d4:	0121c83a 	sub	r16,zero,r4
 800e6d8:	8009883a 	mov	r4,r16
 800e6dc:	800e8240 	call	800e824 <__clzsi2>
 800e6e0:	01810784 	movi	r6,1054
 800e6e4:	00c00284 	movi	r3,10
 800e6e8:	308dc83a 	sub	r6,r6,r2
 800e6ec:	1880150e 	bge	r3,r2,800e744 <__floatsidf+0x90>
 800e6f0:	113ffd44 	addi	r4,r2,-11
 800e6f4:	8108983a 	sll	r4,r16,r4
 800e6f8:	00800434 	movhi	r2,16
 800e6fc:	10bfffc4 	addi	r2,r2,-1
 800e700:	3181ffcc 	andi	r6,r6,2047
 800e704:	2088703a 	and	r4,r4,r2
 800e708:	880b883a 	mov	r5,r17
 800e70c:	0005883a 	mov	r2,zero
 800e710:	300c953a 	slli	r6,r6,20
 800e714:	29403fcc 	andi	r5,r5,255
 800e718:	280a97fa 	slli	r5,r5,31
 800e71c:	00c00434 	movhi	r3,16
 800e720:	18ffffc4 	addi	r3,r3,-1
 800e724:	20c8703a 	and	r4,r4,r3
 800e728:	2186b03a 	or	r3,r4,r6
 800e72c:	1946b03a 	or	r3,r3,r5
 800e730:	dfc00217 	ldw	ra,8(sp)
 800e734:	dc400117 	ldw	r17,4(sp)
 800e738:	dc000017 	ldw	r16,0(sp)
 800e73c:	dec00304 	addi	sp,sp,12
 800e740:	f800283a 	ret
 800e744:	010002c4 	movi	r4,11
 800e748:	2089c83a 	sub	r4,r4,r2
 800e74c:	8108d83a 	srl	r4,r16,r4
 800e750:	10800544 	addi	r2,r2,21
 800e754:	00c00434 	movhi	r3,16
 800e758:	18ffffc4 	addi	r3,r3,-1
 800e75c:	8084983a 	sll	r2,r16,r2
 800e760:	20c8703a 	and	r4,r4,r3
 800e764:	3181ffcc 	andi	r6,r6,2047
 800e768:	880b883a 	mov	r5,r17
 800e76c:	003fe806 	br	800e710 <__alt_data_end+0xf800e710>
 800e770:	000b883a 	mov	r5,zero
 800e774:	000d883a 	mov	r6,zero
 800e778:	0009883a 	mov	r4,zero
 800e77c:	0005883a 	mov	r2,zero
 800e780:	003fe306 	br	800e710 <__alt_data_end+0xf800e710>

0800e784 <__floatunsidf>:
 800e784:	defffe04 	addi	sp,sp,-8
 800e788:	dc000015 	stw	r16,0(sp)
 800e78c:	dfc00115 	stw	ra,4(sp)
 800e790:	2021883a 	mov	r16,r4
 800e794:	20001f26 	beq	r4,zero,800e814 <__floatunsidf+0x90>
 800e798:	800e8240 	call	800e824 <__clzsi2>
 800e79c:	01010784 	movi	r4,1054
 800e7a0:	00c00284 	movi	r3,10
 800e7a4:	2089c83a 	sub	r4,r4,r2
 800e7a8:	1880100e 	bge	r3,r2,800e7ec <__floatunsidf+0x68>
 800e7ac:	117ffd44 	addi	r5,r2,-11
 800e7b0:	814a983a 	sll	r5,r16,r5
 800e7b4:	00800434 	movhi	r2,16
 800e7b8:	10bfffc4 	addi	r2,r2,-1
 800e7bc:	2101ffcc 	andi	r4,r4,2047
 800e7c0:	288a703a 	and	r5,r5,r2
 800e7c4:	0005883a 	mov	r2,zero
 800e7c8:	2008953a 	slli	r4,r4,20
 800e7cc:	00c00434 	movhi	r3,16
 800e7d0:	18ffffc4 	addi	r3,r3,-1
 800e7d4:	28c6703a 	and	r3,r5,r3
 800e7d8:	1906b03a 	or	r3,r3,r4
 800e7dc:	dfc00117 	ldw	ra,4(sp)
 800e7e0:	dc000017 	ldw	r16,0(sp)
 800e7e4:	dec00204 	addi	sp,sp,8
 800e7e8:	f800283a 	ret
 800e7ec:	014002c4 	movi	r5,11
 800e7f0:	288bc83a 	sub	r5,r5,r2
 800e7f4:	814ad83a 	srl	r5,r16,r5
 800e7f8:	10800544 	addi	r2,r2,21
 800e7fc:	00c00434 	movhi	r3,16
 800e800:	18ffffc4 	addi	r3,r3,-1
 800e804:	8084983a 	sll	r2,r16,r2
 800e808:	28ca703a 	and	r5,r5,r3
 800e80c:	2101ffcc 	andi	r4,r4,2047
 800e810:	003fed06 	br	800e7c8 <__alt_data_end+0xf800e7c8>
 800e814:	0009883a 	mov	r4,zero
 800e818:	000b883a 	mov	r5,zero
 800e81c:	0005883a 	mov	r2,zero
 800e820:	003fe906 	br	800e7c8 <__alt_data_end+0xf800e7c8>

0800e824 <__clzsi2>:
 800e824:	00bfffd4 	movui	r2,65535
 800e828:	11000b36 	bltu	r2,r4,800e858 <__clzsi2+0x34>
 800e82c:	00803fc4 	movi	r2,255
 800e830:	11001e2e 	bgeu	r2,r4,800e8ac <__clzsi2+0x88>
 800e834:	00c00204 	movi	r3,8
 800e838:	20c8d83a 	srl	r4,r4,r3
 800e83c:	00c20074 	movhi	r3,2049
 800e840:	18c68204 	addi	r3,r3,6664
 800e844:	00800604 	movi	r2,24
 800e848:	1909883a 	add	r4,r3,r4
 800e84c:	20c00003 	ldbu	r3,0(r4)
 800e850:	10c5c83a 	sub	r2,r2,r3
 800e854:	f800283a 	ret
 800e858:	00804034 	movhi	r2,256
 800e85c:	10bfffc4 	addi	r2,r2,-1
 800e860:	11000936 	bltu	r2,r4,800e888 <__clzsi2+0x64>
 800e864:	00800404 	movi	r2,16
 800e868:	1007883a 	mov	r3,r2
 800e86c:	20c8d83a 	srl	r4,r4,r3
 800e870:	00c20074 	movhi	r3,2049
 800e874:	18c68204 	addi	r3,r3,6664
 800e878:	1909883a 	add	r4,r3,r4
 800e87c:	20c00003 	ldbu	r3,0(r4)
 800e880:	10c5c83a 	sub	r2,r2,r3
 800e884:	f800283a 	ret
 800e888:	00c00604 	movi	r3,24
 800e88c:	20c8d83a 	srl	r4,r4,r3
 800e890:	00c20074 	movhi	r3,2049
 800e894:	18c68204 	addi	r3,r3,6664
 800e898:	00800204 	movi	r2,8
 800e89c:	1909883a 	add	r4,r3,r4
 800e8a0:	20c00003 	ldbu	r3,0(r4)
 800e8a4:	10c5c83a 	sub	r2,r2,r3
 800e8a8:	f800283a 	ret
 800e8ac:	0007883a 	mov	r3,zero
 800e8b0:	20c8d83a 	srl	r4,r4,r3
 800e8b4:	00c20074 	movhi	r3,2049
 800e8b8:	18c68204 	addi	r3,r3,6664
 800e8bc:	00800804 	movi	r2,32
 800e8c0:	1909883a 	add	r4,r3,r4
 800e8c4:	20c00003 	ldbu	r3,0(r4)
 800e8c8:	10c5c83a 	sub	r2,r2,r3
 800e8cc:	f800283a 	ret

0800e8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e8d0:	defffe04 	addi	sp,sp,-8
 800e8d4:	dfc00115 	stw	ra,4(sp)
 800e8d8:	df000015 	stw	fp,0(sp)
 800e8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e8e0:	00820074 	movhi	r2,2049
 800e8e4:	108d8304 	addi	r2,r2,13836
 800e8e8:	10800017 	ldw	r2,0(r2)
 800e8ec:	10000526 	beq	r2,zero,800e904 <alt_get_errno+0x34>
 800e8f0:	00820074 	movhi	r2,2049
 800e8f4:	108d8304 	addi	r2,r2,13836
 800e8f8:	10800017 	ldw	r2,0(r2)
 800e8fc:	103ee83a 	callr	r2
 800e900:	00000206 	br	800e90c <alt_get_errno+0x3c>
 800e904:	00820074 	movhi	r2,2049
 800e908:	10944a04 	addi	r2,r2,20776
}
 800e90c:	e037883a 	mov	sp,fp
 800e910:	dfc00117 	ldw	ra,4(sp)
 800e914:	df000017 	ldw	fp,0(sp)
 800e918:	dec00204 	addi	sp,sp,8
 800e91c:	f800283a 	ret

0800e920 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800e920:	defffb04 	addi	sp,sp,-20
 800e924:	dfc00415 	stw	ra,16(sp)
 800e928:	df000315 	stw	fp,12(sp)
 800e92c:	df000304 	addi	fp,sp,12
 800e930:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800e934:	e0bfff17 	ldw	r2,-4(fp)
 800e938:	10000816 	blt	r2,zero,800e95c <close+0x3c>
 800e93c:	e13fff17 	ldw	r4,-4(fp)
 800e940:	01400304 	movi	r5,12
 800e944:	800c1240 	call	800c124 <__mulsi3>
 800e948:	1007883a 	mov	r3,r2
 800e94c:	00820074 	movhi	r2,2049
 800e950:	10890004 	addi	r2,r2,9216
 800e954:	1885883a 	add	r2,r3,r2
 800e958:	00000106 	br	800e960 <close+0x40>
 800e95c:	0005883a 	mov	r2,zero
 800e960:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800e964:	e0bffd17 	ldw	r2,-12(fp)
 800e968:	10001826 	beq	r2,zero,800e9cc <close+0xac>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800e96c:	e0bffd17 	ldw	r2,-12(fp)
 800e970:	10800017 	ldw	r2,0(r2)
 800e974:	10800417 	ldw	r2,16(r2)
 800e978:	10000626 	beq	r2,zero,800e994 <close+0x74>
 800e97c:	e0bffd17 	ldw	r2,-12(fp)
 800e980:	10800017 	ldw	r2,0(r2)
 800e984:	10800417 	ldw	r2,16(r2)
 800e988:	e13ffd17 	ldw	r4,-12(fp)
 800e98c:	103ee83a 	callr	r2
 800e990:	00000106 	br	800e998 <close+0x78>
 800e994:	0005883a 	mov	r2,zero
 800e998:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800e99c:	e13fff17 	ldw	r4,-4(fp)
 800e9a0:	800f0240 	call	800f024 <alt_release_fd>
    if (rval < 0)
 800e9a4:	e0bffe17 	ldw	r2,-8(fp)
 800e9a8:	1000060e 	bge	r2,zero,800e9c4 <close+0xa4>
    {
      ALT_ERRNO = -rval;
 800e9ac:	800e8d00 	call	800e8d0 <alt_get_errno>
 800e9b0:	e0fffe17 	ldw	r3,-8(fp)
 800e9b4:	00c7c83a 	sub	r3,zero,r3
 800e9b8:	10c00015 	stw	r3,0(r2)
      return -1;
 800e9bc:	00bfffc4 	movi	r2,-1
 800e9c0:	00000606 	br	800e9dc <close+0xbc>
    }
    return 0;
 800e9c4:	0005883a 	mov	r2,zero
 800e9c8:	00000406 	br	800e9dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800e9cc:	800e8d00 	call	800e8d0 <alt_get_errno>
 800e9d0:	00c01444 	movi	r3,81
 800e9d4:	10c00015 	stw	r3,0(r2)
    return -1;
 800e9d8:	00bfffc4 	movi	r2,-1
  }
}
 800e9dc:	e037883a 	mov	sp,fp
 800e9e0:	dfc00117 	ldw	ra,4(sp)
 800e9e4:	df000017 	ldw	fp,0(sp)
 800e9e8:	dec00204 	addi	sp,sp,8
 800e9ec:	f800283a 	ret

0800e9f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800e9f0:	defffc04 	addi	sp,sp,-16
 800e9f4:	df000315 	stw	fp,12(sp)
 800e9f8:	df000304 	addi	fp,sp,12
 800e9fc:	e13ffd15 	stw	r4,-12(fp)
 800ea00:	e17ffe15 	stw	r5,-8(fp)
 800ea04:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ea08:	e0bfff17 	ldw	r2,-4(fp)
}
 800ea0c:	e037883a 	mov	sp,fp
 800ea10:	df000017 	ldw	fp,0(sp)
 800ea14:	dec00104 	addi	sp,sp,4
 800ea18:	f800283a 	ret

0800ea1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ea1c:	defffe04 	addi	sp,sp,-8
 800ea20:	dfc00115 	stw	ra,4(sp)
 800ea24:	df000015 	stw	fp,0(sp)
 800ea28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ea2c:	00820074 	movhi	r2,2049
 800ea30:	108d8304 	addi	r2,r2,13836
 800ea34:	10800017 	ldw	r2,0(r2)
 800ea38:	10000526 	beq	r2,zero,800ea50 <alt_get_errno+0x34>
 800ea3c:	00820074 	movhi	r2,2049
 800ea40:	108d8304 	addi	r2,r2,13836
 800ea44:	10800017 	ldw	r2,0(r2)
 800ea48:	103ee83a 	callr	r2
 800ea4c:	00000206 	br	800ea58 <alt_get_errno+0x3c>
 800ea50:	00820074 	movhi	r2,2049
 800ea54:	10944a04 	addi	r2,r2,20776
}
 800ea58:	e037883a 	mov	sp,fp
 800ea5c:	dfc00117 	ldw	ra,4(sp)
 800ea60:	df000017 	ldw	fp,0(sp)
 800ea64:	dec00204 	addi	sp,sp,8
 800ea68:	f800283a 	ret

0800ea6c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ea6c:	defffb04 	addi	sp,sp,-20
 800ea70:	dfc00415 	stw	ra,16(sp)
 800ea74:	df000315 	stw	fp,12(sp)
 800ea78:	df000304 	addi	fp,sp,12
 800ea7c:	e13ffe15 	stw	r4,-8(fp)
 800ea80:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ea84:	e0bffe17 	ldw	r2,-8(fp)
 800ea88:	10000816 	blt	r2,zero,800eaac <fstat+0x40>
 800ea8c:	e13ffe17 	ldw	r4,-8(fp)
 800ea90:	01400304 	movi	r5,12
 800ea94:	800c1240 	call	800c124 <__mulsi3>
 800ea98:	1007883a 	mov	r3,r2
 800ea9c:	00820074 	movhi	r2,2049
 800eaa0:	10890004 	addi	r2,r2,9216
 800eaa4:	1885883a 	add	r2,r3,r2
 800eaa8:	00000106 	br	800eab0 <fstat+0x44>
 800eaac:	0005883a 	mov	r2,zero
 800eab0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800eab4:	e0bffd17 	ldw	r2,-12(fp)
 800eab8:	10001026 	beq	r2,zero,800eafc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800eabc:	e0bffd17 	ldw	r2,-12(fp)
 800eac0:	10800017 	ldw	r2,0(r2)
 800eac4:	10800817 	ldw	r2,32(r2)
 800eac8:	10000726 	beq	r2,zero,800eae8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800eacc:	e0bffd17 	ldw	r2,-12(fp)
 800ead0:	10800017 	ldw	r2,0(r2)
 800ead4:	10800817 	ldw	r2,32(r2)
 800ead8:	e13ffd17 	ldw	r4,-12(fp)
 800eadc:	e17fff17 	ldw	r5,-4(fp)
 800eae0:	103ee83a 	callr	r2
 800eae4:	00000906 	br	800eb0c <fstat+0xa0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800eae8:	e0bfff17 	ldw	r2,-4(fp)
 800eaec:	00c80004 	movi	r3,8192
 800eaf0:	10c00115 	stw	r3,4(r2)
      return 0;
 800eaf4:	0005883a 	mov	r2,zero
 800eaf8:	00000406 	br	800eb0c <fstat+0xa0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800eafc:	800ea1c0 	call	800ea1c <alt_get_errno>
 800eb00:	00c01444 	movi	r3,81
 800eb04:	10c00015 	stw	r3,0(r2)
    return -1;
 800eb08:	00bfffc4 	movi	r2,-1
  }
}
 800eb0c:	e037883a 	mov	sp,fp
 800eb10:	dfc00117 	ldw	ra,4(sp)
 800eb14:	df000017 	ldw	fp,0(sp)
 800eb18:	dec00204 	addi	sp,sp,8
 800eb1c:	f800283a 	ret

0800eb20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb20:	defffe04 	addi	sp,sp,-8
 800eb24:	dfc00115 	stw	ra,4(sp)
 800eb28:	df000015 	stw	fp,0(sp)
 800eb2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb30:	00820074 	movhi	r2,2049
 800eb34:	108d8304 	addi	r2,r2,13836
 800eb38:	10800017 	ldw	r2,0(r2)
 800eb3c:	10000526 	beq	r2,zero,800eb54 <alt_get_errno+0x34>
 800eb40:	00820074 	movhi	r2,2049
 800eb44:	108d8304 	addi	r2,r2,13836
 800eb48:	10800017 	ldw	r2,0(r2)
 800eb4c:	103ee83a 	callr	r2
 800eb50:	00000206 	br	800eb5c <alt_get_errno+0x3c>
 800eb54:	00820074 	movhi	r2,2049
 800eb58:	10944a04 	addi	r2,r2,20776
}
 800eb5c:	e037883a 	mov	sp,fp
 800eb60:	dfc00117 	ldw	ra,4(sp)
 800eb64:	df000017 	ldw	fp,0(sp)
 800eb68:	dec00204 	addi	sp,sp,8
 800eb6c:	f800283a 	ret

0800eb70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800eb70:	deffed04 	addi	sp,sp,-76
 800eb74:	dfc01215 	stw	ra,72(sp)
 800eb78:	df001115 	stw	fp,68(sp)
 800eb7c:	df001104 	addi	fp,sp,68
 800eb80:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eb84:	e0bfff17 	ldw	r2,-4(fp)
 800eb88:	10000816 	blt	r2,zero,800ebac <isatty+0x3c>
 800eb8c:	e13fff17 	ldw	r4,-4(fp)
 800eb90:	01400304 	movi	r5,12
 800eb94:	800c1240 	call	800c124 <__mulsi3>
 800eb98:	1007883a 	mov	r3,r2
 800eb9c:	00820074 	movhi	r2,2049
 800eba0:	10890004 	addi	r2,r2,9216
 800eba4:	1885883a 	add	r2,r3,r2
 800eba8:	00000106 	br	800ebb0 <isatty+0x40>
 800ebac:	0005883a 	mov	r2,zero
 800ebb0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ebb4:	e0bfef17 	ldw	r2,-68(fp)
 800ebb8:	10000e26 	beq	r2,zero,800ebf4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ebbc:	e0bfef17 	ldw	r2,-68(fp)
 800ebc0:	10800017 	ldw	r2,0(r2)
 800ebc4:	10800817 	ldw	r2,32(r2)
 800ebc8:	1000021e 	bne	r2,zero,800ebd4 <isatty+0x64>
    {
      return 1;
 800ebcc:	00800044 	movi	r2,1
 800ebd0:	00000c06 	br	800ec04 <isatty+0x94>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ebd4:	e0bff004 	addi	r2,fp,-64
 800ebd8:	e13fff17 	ldw	r4,-4(fp)
 800ebdc:	100b883a 	mov	r5,r2
 800ebe0:	800ea6c0 	call	800ea6c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ebe4:	e0bff117 	ldw	r2,-60(fp)
 800ebe8:	10880020 	cmpeqi	r2,r2,8192
 800ebec:	10803fcc 	andi	r2,r2,255
 800ebf0:	00000406 	br	800ec04 <isatty+0x94>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ebf4:	800eb200 	call	800eb20 <alt_get_errno>
 800ebf8:	00c01444 	movi	r3,81
 800ebfc:	10c00015 	stw	r3,0(r2)
    return 0;
 800ec00:	0005883a 	mov	r2,zero
  }
}
 800ec04:	e037883a 	mov	sp,fp
 800ec08:	dfc00117 	ldw	ra,4(sp)
 800ec0c:	df000017 	ldw	fp,0(sp)
 800ec10:	dec00204 	addi	sp,sp,8
 800ec14:	f800283a 	ret

0800ec18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800ec18:	defffc04 	addi	sp,sp,-16
 800ec1c:	df000315 	stw	fp,12(sp)
 800ec20:	df000304 	addi	fp,sp,12
 800ec24:	e13ffd15 	stw	r4,-12(fp)
 800ec28:	e17ffe15 	stw	r5,-8(fp)
 800ec2c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800ec30:	e0fffe17 	ldw	r3,-8(fp)
 800ec34:	e0bffd17 	ldw	r2,-12(fp)
 800ec38:	18800c26 	beq	r3,r2,800ec6c <alt_load_section+0x54>
  {
    while( to != end )
 800ec3c:	00000806 	br	800ec60 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800ec40:	e0bffe17 	ldw	r2,-8(fp)
 800ec44:	10c00104 	addi	r3,r2,4
 800ec48:	e0fffe15 	stw	r3,-8(fp)
 800ec4c:	e0fffd17 	ldw	r3,-12(fp)
 800ec50:	19000104 	addi	r4,r3,4
 800ec54:	e13ffd15 	stw	r4,-12(fp)
 800ec58:	18c00017 	ldw	r3,0(r3)
 800ec5c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800ec60:	e0fffe17 	ldw	r3,-8(fp)
 800ec64:	e0bfff17 	ldw	r2,-4(fp)
 800ec68:	18bff51e 	bne	r3,r2,800ec40 <__alt_data_end+0xf800ec40>
    {
      *to++ = *from++;
    }
  }
}
 800ec6c:	e037883a 	mov	sp,fp
 800ec70:	df000017 	ldw	fp,0(sp)
 800ec74:	dec00104 	addi	sp,sp,4
 800ec78:	f800283a 	ret

0800ec7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800ec7c:	defffe04 	addi	sp,sp,-8
 800ec80:	dfc00115 	stw	ra,4(sp)
 800ec84:	df000015 	stw	fp,0(sp)
 800ec88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800ec8c:	01020074 	movhi	r4,2049
 800ec90:	210d8804 	addi	r4,r4,13856
 800ec94:	01420074 	movhi	r5,2049
 800ec98:	2946cd04 	addi	r5,r5,6964
 800ec9c:	01820074 	movhi	r6,2049
 800eca0:	318d8804 	addi	r6,r6,13856
 800eca4:	800ec180 	call	800ec18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800eca8:	01020034 	movhi	r4,2048
 800ecac:	21000804 	addi	r4,r4,32
 800ecb0:	01420034 	movhi	r5,2048
 800ecb4:	29400804 	addi	r5,r5,32
 800ecb8:	01820034 	movhi	r6,2048
 800ecbc:	31806f04 	addi	r6,r6,444
 800ecc0:	800ec180 	call	800ec18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ecc4:	01020074 	movhi	r4,2049
 800ecc8:	21043504 	addi	r4,r4,4308
 800eccc:	01420074 	movhi	r5,2049
 800ecd0:	29443504 	addi	r5,r5,4308
 800ecd4:	01820074 	movhi	r6,2049
 800ecd8:	3186cd04 	addi	r6,r6,6964
 800ecdc:	800ec180 	call	800ec18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ece0:	80100440 	call	8010044 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ece4:	80102080 	call	8010208 <alt_icache_flush_all>
}
 800ece8:	e037883a 	mov	sp,fp
 800ecec:	dfc00117 	ldw	ra,4(sp)
 800ecf0:	df000017 	ldw	fp,0(sp)
 800ecf4:	dec00204 	addi	sp,sp,8
 800ecf8:	f800283a 	ret

0800ecfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ecfc:	defffe04 	addi	sp,sp,-8
 800ed00:	dfc00115 	stw	ra,4(sp)
 800ed04:	df000015 	stw	fp,0(sp)
 800ed08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ed0c:	00820074 	movhi	r2,2049
 800ed10:	108d8304 	addi	r2,r2,13836
 800ed14:	10800017 	ldw	r2,0(r2)
 800ed18:	10000526 	beq	r2,zero,800ed30 <alt_get_errno+0x34>
 800ed1c:	00820074 	movhi	r2,2049
 800ed20:	108d8304 	addi	r2,r2,13836
 800ed24:	10800017 	ldw	r2,0(r2)
 800ed28:	103ee83a 	callr	r2
 800ed2c:	00000206 	br	800ed38 <alt_get_errno+0x3c>
 800ed30:	00820074 	movhi	r2,2049
 800ed34:	10944a04 	addi	r2,r2,20776
}
 800ed38:	e037883a 	mov	sp,fp
 800ed3c:	dfc00117 	ldw	ra,4(sp)
 800ed40:	df000017 	ldw	fp,0(sp)
 800ed44:	dec00204 	addi	sp,sp,8
 800ed48:	f800283a 	ret

0800ed4c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800ed4c:	defff904 	addi	sp,sp,-28
 800ed50:	dfc00615 	stw	ra,24(sp)
 800ed54:	df000515 	stw	fp,20(sp)
 800ed58:	df000504 	addi	fp,sp,20
 800ed5c:	e13ffd15 	stw	r4,-12(fp)
 800ed60:	e17ffe15 	stw	r5,-8(fp)
 800ed64:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800ed68:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ed6c:	e0bffd17 	ldw	r2,-12(fp)
 800ed70:	10000816 	blt	r2,zero,800ed94 <lseek+0x48>
 800ed74:	e13ffd17 	ldw	r4,-12(fp)
 800ed78:	01400304 	movi	r5,12
 800ed7c:	800c1240 	call	800c124 <__mulsi3>
 800ed80:	1007883a 	mov	r3,r2
 800ed84:	00820074 	movhi	r2,2049
 800ed88:	10890004 	addi	r2,r2,9216
 800ed8c:	1885883a 	add	r2,r3,r2
 800ed90:	00000106 	br	800ed98 <lseek+0x4c>
 800ed94:	0005883a 	mov	r2,zero
 800ed98:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800ed9c:	e0bffc17 	ldw	r2,-16(fp)
 800eda0:	10001026 	beq	r2,zero,800ede4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800eda4:	e0bffc17 	ldw	r2,-16(fp)
 800eda8:	10800017 	ldw	r2,0(r2)
 800edac:	10800717 	ldw	r2,28(r2)
 800edb0:	10000926 	beq	r2,zero,800edd8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800edb4:	e0bffc17 	ldw	r2,-16(fp)
 800edb8:	10800017 	ldw	r2,0(r2)
 800edbc:	10800717 	ldw	r2,28(r2)
 800edc0:	e13ffc17 	ldw	r4,-16(fp)
 800edc4:	e17ffe17 	ldw	r5,-8(fp)
 800edc8:	e1bfff17 	ldw	r6,-4(fp)
 800edcc:	103ee83a 	callr	r2
 800edd0:	e0bffb15 	stw	r2,-20(fp)
 800edd4:	00000506 	br	800edec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800edd8:	00bfde84 	movi	r2,-134
 800eddc:	e0bffb15 	stw	r2,-20(fp)
 800ede0:	00000206 	br	800edec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800ede4:	00bfebc4 	movi	r2,-81
 800ede8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800edec:	e0bffb17 	ldw	r2,-20(fp)
 800edf0:	1000060e 	bge	r2,zero,800ee0c <lseek+0xc0>
  {
    ALT_ERRNO = -rc;
 800edf4:	800ecfc0 	call	800ecfc <alt_get_errno>
 800edf8:	e0fffb17 	ldw	r3,-20(fp)
 800edfc:	00c7c83a 	sub	r3,zero,r3
 800ee00:	10c00015 	stw	r3,0(r2)
    rc = -1;
 800ee04:	00bfffc4 	movi	r2,-1
 800ee08:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800ee0c:	e0bffb17 	ldw	r2,-20(fp)
}
 800ee10:	e037883a 	mov	sp,fp
 800ee14:	dfc00117 	ldw	ra,4(sp)
 800ee18:	df000017 	ldw	fp,0(sp)
 800ee1c:	dec00204 	addi	sp,sp,8
 800ee20:	f800283a 	ret

0800ee24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ee24:	defffd04 	addi	sp,sp,-12
 800ee28:	dfc00215 	stw	ra,8(sp)
 800ee2c:	df000115 	stw	fp,4(sp)
 800ee30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ee34:	0009883a 	mov	r4,zero
 800ee38:	800f3000 	call	800f300 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ee3c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800ee40:	800f3340 	call	800f334 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ee44:	01020074 	movhi	r4,2049
 800ee48:	2106c504 	addi	r4,r4,6932
 800ee4c:	01420074 	movhi	r5,2049
 800ee50:	2946c504 	addi	r5,r5,6932
 800ee54:	01820074 	movhi	r6,2049
 800ee58:	3186c504 	addi	r6,r6,6932
 800ee5c:	80105cc0 	call	80105cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ee60:	80101500 	call	8010150 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ee64:	01020074 	movhi	r4,2049
 800ee68:	21006b04 	addi	r4,r4,428
 800ee6c:	8010d180 	call	8010d18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ee70:	d126d317 	ldw	r4,-25780(gp)
 800ee74:	d0e6d417 	ldw	r3,-25776(gp)
 800ee78:	d0a6d517 	ldw	r2,-25772(gp)
 800ee7c:	180b883a 	mov	r5,r3
 800ee80:	100d883a 	mov	r6,r2
 800ee84:	80001f80 	call	80001f8 <main>
 800ee88:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800ee8c:	01000044 	movi	r4,1
 800ee90:	800e9200 	call	800e920 <close>
  exit (result);
 800ee94:	e13fff17 	ldw	r4,-4(fp)
 800ee98:	8010d2c0 	call	8010d2c <exit>

0800ee9c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800ee9c:	defffe04 	addi	sp,sp,-8
 800eea0:	df000115 	stw	fp,4(sp)
 800eea4:	df000104 	addi	fp,sp,4
 800eea8:	e13fff15 	stw	r4,-4(fp)
}
 800eeac:	e037883a 	mov	sp,fp
 800eeb0:	df000017 	ldw	fp,0(sp)
 800eeb4:	dec00104 	addi	sp,sp,4
 800eeb8:	f800283a 	ret

0800eebc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800eebc:	defffe04 	addi	sp,sp,-8
 800eec0:	df000115 	stw	fp,4(sp)
 800eec4:	df000104 	addi	fp,sp,4
 800eec8:	e13fff15 	stw	r4,-4(fp)
}
 800eecc:	e037883a 	mov	sp,fp
 800eed0:	df000017 	ldw	fp,0(sp)
 800eed4:	dec00104 	addi	sp,sp,4
 800eed8:	f800283a 	ret

0800eedc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eedc:	defffe04 	addi	sp,sp,-8
 800eee0:	dfc00115 	stw	ra,4(sp)
 800eee4:	df000015 	stw	fp,0(sp)
 800eee8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eeec:	00820074 	movhi	r2,2049
 800eef0:	108d8304 	addi	r2,r2,13836
 800eef4:	10800017 	ldw	r2,0(r2)
 800eef8:	10000526 	beq	r2,zero,800ef10 <alt_get_errno+0x34>
 800eefc:	00820074 	movhi	r2,2049
 800ef00:	108d8304 	addi	r2,r2,13836
 800ef04:	10800017 	ldw	r2,0(r2)
 800ef08:	103ee83a 	callr	r2
 800ef0c:	00000206 	br	800ef18 <alt_get_errno+0x3c>
 800ef10:	00820074 	movhi	r2,2049
 800ef14:	10944a04 	addi	r2,r2,20776
}
 800ef18:	e037883a 	mov	sp,fp
 800ef1c:	dfc00117 	ldw	ra,4(sp)
 800ef20:	df000017 	ldw	fp,0(sp)
 800ef24:	dec00204 	addi	sp,sp,8
 800ef28:	f800283a 	ret

0800ef2c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800ef2c:	defff904 	addi	sp,sp,-28
 800ef30:	dfc00615 	stw	ra,24(sp)
 800ef34:	df000515 	stw	fp,20(sp)
 800ef38:	df000504 	addi	fp,sp,20
 800ef3c:	e13ffd15 	stw	r4,-12(fp)
 800ef40:	e17ffe15 	stw	r5,-8(fp)
 800ef44:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ef48:	e0bffd17 	ldw	r2,-12(fp)
 800ef4c:	10000816 	blt	r2,zero,800ef70 <read+0x44>
 800ef50:	e13ffd17 	ldw	r4,-12(fp)
 800ef54:	01400304 	movi	r5,12
 800ef58:	800c1240 	call	800c124 <__mulsi3>
 800ef5c:	1007883a 	mov	r3,r2
 800ef60:	00820074 	movhi	r2,2049
 800ef64:	10890004 	addi	r2,r2,9216
 800ef68:	1885883a 	add	r2,r3,r2
 800ef6c:	00000106 	br	800ef74 <read+0x48>
 800ef70:	0005883a 	mov	r2,zero
 800ef74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800ef78:	e0bffb17 	ldw	r2,-20(fp)
 800ef7c:	10002026 	beq	r2,zero,800f000 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ef80:	e0bffb17 	ldw	r2,-20(fp)
 800ef84:	10800217 	ldw	r2,8(r2)
 800ef88:	108000cc 	andi	r2,r2,3
 800ef8c:	10800060 	cmpeqi	r2,r2,1
 800ef90:	1000171e 	bne	r2,zero,800eff0 <read+0xc4>
        (fd->dev->read))
 800ef94:	e0bffb17 	ldw	r2,-20(fp)
 800ef98:	10800017 	ldw	r2,0(r2)
 800ef9c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800efa0:	10001326 	beq	r2,zero,800eff0 <read+0xc4>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800efa4:	e0bffb17 	ldw	r2,-20(fp)
 800efa8:	10800017 	ldw	r2,0(r2)
 800efac:	10800517 	ldw	r2,20(r2)
 800efb0:	e0ffff17 	ldw	r3,-4(fp)
 800efb4:	e13ffb17 	ldw	r4,-20(fp)
 800efb8:	e17ffe17 	ldw	r5,-8(fp)
 800efbc:	180d883a 	mov	r6,r3
 800efc0:	103ee83a 	callr	r2
 800efc4:	e0bffc15 	stw	r2,-16(fp)
 800efc8:	e0bffc17 	ldw	r2,-16(fp)
 800efcc:	1000060e 	bge	r2,zero,800efe8 <read+0xbc>
        {
          ALT_ERRNO = -rval;
 800efd0:	800eedc0 	call	800eedc <alt_get_errno>
 800efd4:	e0fffc17 	ldw	r3,-16(fp)
 800efd8:	00c7c83a 	sub	r3,zero,r3
 800efdc:	10c00015 	stw	r3,0(r2)
          return -1;
 800efe0:	00bfffc4 	movi	r2,-1
 800efe4:	00000a06 	br	800f010 <read+0xe4>
        }
        return rval;
 800efe8:	e0bffc17 	ldw	r2,-16(fp)
 800efec:	00000806 	br	800f010 <read+0xe4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800eff0:	800eedc0 	call	800eedc <alt_get_errno>
 800eff4:	00c00344 	movi	r3,13
 800eff8:	10c00015 	stw	r3,0(r2)
 800effc:	00000306 	br	800f00c <read+0xe0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f000:	800eedc0 	call	800eedc <alt_get_errno>
 800f004:	00c01444 	movi	r3,81
 800f008:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800f00c:	00bfffc4 	movi	r2,-1
}
 800f010:	e037883a 	mov	sp,fp
 800f014:	dfc00117 	ldw	ra,4(sp)
 800f018:	df000017 	ldw	fp,0(sp)
 800f01c:	dec00204 	addi	sp,sp,8
 800f020:	f800283a 	ret

0800f024 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f024:	defffc04 	addi	sp,sp,-16
 800f028:	dfc00315 	stw	ra,12(sp)
 800f02c:	df000215 	stw	fp,8(sp)
 800f030:	dc000115 	stw	r16,4(sp)
 800f034:	df000204 	addi	fp,sp,8
 800f038:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f03c:	e0bffe17 	ldw	r2,-8(fp)
 800f040:	108000d0 	cmplti	r2,r2,3
 800f044:	1000111e 	bne	r2,zero,800f08c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f048:	04020074 	movhi	r16,2049
 800f04c:	84090004 	addi	r16,r16,9216
 800f050:	e0bffe17 	ldw	r2,-8(fp)
 800f054:	1009883a 	mov	r4,r2
 800f058:	01400304 	movi	r5,12
 800f05c:	800c1240 	call	800c124 <__mulsi3>
 800f060:	8085883a 	add	r2,r16,r2
 800f064:	10800204 	addi	r2,r2,8
 800f068:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f06c:	04020074 	movhi	r16,2049
 800f070:	84090004 	addi	r16,r16,9216
 800f074:	e0bffe17 	ldw	r2,-8(fp)
 800f078:	1009883a 	mov	r4,r2
 800f07c:	01400304 	movi	r5,12
 800f080:	800c1240 	call	800c124 <__mulsi3>
 800f084:	8085883a 	add	r2,r16,r2
 800f088:	10000015 	stw	zero,0(r2)
  }
}
 800f08c:	e6ffff04 	addi	sp,fp,-4
 800f090:	dfc00217 	ldw	ra,8(sp)
 800f094:	df000117 	ldw	fp,4(sp)
 800f098:	dc000017 	ldw	r16,0(sp)
 800f09c:	dec00304 	addi	sp,sp,12
 800f0a0:	f800283a 	ret

0800f0a4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f0a4:	defff904 	addi	sp,sp,-28
 800f0a8:	df000615 	stw	fp,24(sp)
 800f0ac:	df000604 	addi	fp,sp,24
 800f0b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f0b4:	0005303a 	rdctl	r2,status
 800f0b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f0bc:	e0fffc17 	ldw	r3,-16(fp)
 800f0c0:	00bfff84 	movi	r2,-2
 800f0c4:	1884703a 	and	r2,r3,r2
 800f0c8:	1001703a 	wrctl	status,r2
  
  return context;
 800f0cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f0d0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f0d4:	d0a00c17 	ldw	r2,-32720(gp)
 800f0d8:	10c000c4 	addi	r3,r2,3
 800f0dc:	00bfff04 	movi	r2,-4
 800f0e0:	1884703a 	and	r2,r3,r2
 800f0e4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f0e8:	d0e00c17 	ldw	r3,-32720(gp)
 800f0ec:	e0bfff17 	ldw	r2,-4(fp)
 800f0f0:	1885883a 	add	r2,r3,r2
 800f0f4:	00c40034 	movhi	r3,4096
 800f0f8:	18c00004 	addi	r3,r3,0
 800f0fc:	1880062e 	bgeu	r3,r2,800f118 <sbrk+0x74>
 800f100:	e0bffa17 	ldw	r2,-24(fp)
 800f104:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f108:	e0bffd17 	ldw	r2,-12(fp)
 800f10c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f110:	00bfffc4 	movi	r2,-1
 800f114:	00000b06 	br	800f144 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f118:	d0a00c17 	ldw	r2,-32720(gp)
 800f11c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f120:	d0e00c17 	ldw	r3,-32720(gp)
 800f124:	e0bfff17 	ldw	r2,-4(fp)
 800f128:	1885883a 	add	r2,r3,r2
 800f12c:	d0a00c15 	stw	r2,-32720(gp)
 800f130:	e0bffa17 	ldw	r2,-24(fp)
 800f134:	e0bffe15 	stw	r2,-8(fp)
 800f138:	e0bffe17 	ldw	r2,-8(fp)
 800f13c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f140:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f144:	e037883a 	mov	sp,fp
 800f148:	df000017 	ldw	fp,0(sp)
 800f14c:	dec00104 	addi	sp,sp,4
 800f150:	f800283a 	ret

0800f154 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f154:	defffd04 	addi	sp,sp,-12
 800f158:	dfc00215 	stw	ra,8(sp)
 800f15c:	df000115 	stw	fp,4(sp)
 800f160:	df000104 	addi	fp,sp,4
 800f164:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f168:	e13fff17 	ldw	r4,-4(fp)
 800f16c:	800fef00 	call	800fef0 <alt_busy_sleep>
}
 800f170:	e037883a 	mov	sp,fp
 800f174:	dfc00117 	ldw	ra,4(sp)
 800f178:	df000017 	ldw	fp,0(sp)
 800f17c:	dec00204 	addi	sp,sp,8
 800f180:	f800283a 	ret

0800f184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f184:	defffe04 	addi	sp,sp,-8
 800f188:	dfc00115 	stw	ra,4(sp)
 800f18c:	df000015 	stw	fp,0(sp)
 800f190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f194:	00820074 	movhi	r2,2049
 800f198:	108d8304 	addi	r2,r2,13836
 800f19c:	10800017 	ldw	r2,0(r2)
 800f1a0:	10000526 	beq	r2,zero,800f1b8 <alt_get_errno+0x34>
 800f1a4:	00820074 	movhi	r2,2049
 800f1a8:	108d8304 	addi	r2,r2,13836
 800f1ac:	10800017 	ldw	r2,0(r2)
 800f1b0:	103ee83a 	callr	r2
 800f1b4:	00000206 	br	800f1c0 <alt_get_errno+0x3c>
 800f1b8:	00820074 	movhi	r2,2049
 800f1bc:	10944a04 	addi	r2,r2,20776
}
 800f1c0:	e037883a 	mov	sp,fp
 800f1c4:	dfc00117 	ldw	ra,4(sp)
 800f1c8:	df000017 	ldw	fp,0(sp)
 800f1cc:	dec00204 	addi	sp,sp,8
 800f1d0:	f800283a 	ret

0800f1d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f1d4:	defff904 	addi	sp,sp,-28
 800f1d8:	dfc00615 	stw	ra,24(sp)
 800f1dc:	df000515 	stw	fp,20(sp)
 800f1e0:	df000504 	addi	fp,sp,20
 800f1e4:	e13ffd15 	stw	r4,-12(fp)
 800f1e8:	e17ffe15 	stw	r5,-8(fp)
 800f1ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f1f0:	e0bffd17 	ldw	r2,-12(fp)
 800f1f4:	10000816 	blt	r2,zero,800f218 <write+0x44>
 800f1f8:	e13ffd17 	ldw	r4,-12(fp)
 800f1fc:	01400304 	movi	r5,12
 800f200:	800c1240 	call	800c124 <__mulsi3>
 800f204:	1007883a 	mov	r3,r2
 800f208:	00820074 	movhi	r2,2049
 800f20c:	10890004 	addi	r2,r2,9216
 800f210:	1885883a 	add	r2,r3,r2
 800f214:	00000106 	br	800f21c <write+0x48>
 800f218:	0005883a 	mov	r2,zero
 800f21c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f220:	e0bffb17 	ldw	r2,-20(fp)
 800f224:	10001f26 	beq	r2,zero,800f2a4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f228:	e0bffb17 	ldw	r2,-20(fp)
 800f22c:	10800217 	ldw	r2,8(r2)
 800f230:	108000cc 	andi	r2,r2,3
 800f234:	10001726 	beq	r2,zero,800f294 <write+0xc0>
 800f238:	e0bffb17 	ldw	r2,-20(fp)
 800f23c:	10800017 	ldw	r2,0(r2)
 800f240:	10800617 	ldw	r2,24(r2)
 800f244:	10001326 	beq	r2,zero,800f294 <write+0xc0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f248:	e0bffb17 	ldw	r2,-20(fp)
 800f24c:	10800017 	ldw	r2,0(r2)
 800f250:	10800617 	ldw	r2,24(r2)
 800f254:	e0ffff17 	ldw	r3,-4(fp)
 800f258:	e13ffb17 	ldw	r4,-20(fp)
 800f25c:	e17ffe17 	ldw	r5,-8(fp)
 800f260:	180d883a 	mov	r6,r3
 800f264:	103ee83a 	callr	r2
 800f268:	e0bffc15 	stw	r2,-16(fp)
 800f26c:	e0bffc17 	ldw	r2,-16(fp)
 800f270:	1000060e 	bge	r2,zero,800f28c <write+0xb8>
      {
        ALT_ERRNO = -rval;
 800f274:	800f1840 	call	800f184 <alt_get_errno>
 800f278:	e0fffc17 	ldw	r3,-16(fp)
 800f27c:	00c7c83a 	sub	r3,zero,r3
 800f280:	10c00015 	stw	r3,0(r2)
        return -1;
 800f284:	00bfffc4 	movi	r2,-1
 800f288:	00000a06 	br	800f2b4 <write+0xe0>
      }
      return rval;
 800f28c:	e0bffc17 	ldw	r2,-16(fp)
 800f290:	00000806 	br	800f2b4 <write+0xe0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f294:	800f1840 	call	800f184 <alt_get_errno>
 800f298:	00c00344 	movi	r3,13
 800f29c:	10c00015 	stw	r3,0(r2)
 800f2a0:	00000306 	br	800f2b0 <write+0xdc>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f2a4:	800f1840 	call	800f184 <alt_get_errno>
 800f2a8:	00c01444 	movi	r3,81
 800f2ac:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 800f2b0:	00bfffc4 	movi	r2,-1
}
 800f2b4:	e037883a 	mov	sp,fp
 800f2b8:	dfc00117 	ldw	ra,4(sp)
 800f2bc:	df000017 	ldw	fp,0(sp)
 800f2c0:	dec00204 	addi	sp,sp,8
 800f2c4:	f800283a 	ret

0800f2c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f2c8:	defffd04 	addi	sp,sp,-12
 800f2cc:	dfc00215 	stw	ra,8(sp)
 800f2d0:	df000115 	stw	fp,4(sp)
 800f2d4:	df000104 	addi	fp,sp,4
 800f2d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f2dc:	e13fff17 	ldw	r4,-4(fp)
 800f2e0:	01420074 	movhi	r5,2049
 800f2e4:	294d8004 	addi	r5,r5,13824
 800f2e8:	80100b00 	call	80100b0 <alt_dev_llist_insert>
}
 800f2ec:	e037883a 	mov	sp,fp
 800f2f0:	dfc00117 	ldw	ra,4(sp)
 800f2f4:	df000017 	ldw	fp,0(sp)
 800f2f8:	dec00204 	addi	sp,sp,8
 800f2fc:	f800283a 	ret

0800f300 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f300:	defffd04 	addi	sp,sp,-12
 800f304:	dfc00215 	stw	ra,8(sp)
 800f308:	df000115 	stw	fp,4(sp)
 800f30c:	df000104 	addi	fp,sp,4
 800f310:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 800f314:	8010a800 	call	8010a80 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f318:	00800044 	movi	r2,1
 800f31c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f320:	e037883a 	mov	sp,fp
 800f324:	dfc00117 	ldw	ra,4(sp)
 800f328:	df000017 	ldw	fp,0(sp)
 800f32c:	dec00204 	addi	sp,sp,8
 800f330:	f800283a 	ret

0800f334 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f334:	defffe04 	addi	sp,sp,-8
 800f338:	dfc00115 	stw	ra,4(sp)
 800f33c:	df000015 	stw	fp,0(sp)
 800f340:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 800f344:	01020074 	movhi	r4,2049
 800f348:	21096a04 	addi	r4,r4,9640
 800f34c:	000b883a 	mov	r5,zero
 800f350:	01800144 	movi	r6,5
 800f354:	800f4dc0 	call	800f4dc <altera_avalon_jtag_uart_init>
 800f358:	01020074 	movhi	r4,2049
 800f35c:	21096004 	addi	r4,r4,9600
 800f360:	800f2c80 	call	800f2c8 <alt_dev_reg>
}
 800f364:	e037883a 	mov	sp,fp
 800f368:	dfc00117 	ldw	ra,4(sp)
 800f36c:	df000017 	ldw	fp,0(sp)
 800f370:	dec00204 	addi	sp,sp,8
 800f374:	f800283a 	ret

0800f378 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f378:	defffa04 	addi	sp,sp,-24
 800f37c:	dfc00515 	stw	ra,20(sp)
 800f380:	df000415 	stw	fp,16(sp)
 800f384:	df000404 	addi	fp,sp,16
 800f388:	e13ffd15 	stw	r4,-12(fp)
 800f38c:	e17ffe15 	stw	r5,-8(fp)
 800f390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f394:	e0bffd17 	ldw	r2,-12(fp)
 800f398:	10800017 	ldw	r2,0(r2)
 800f39c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f3a0:	e0bffc17 	ldw	r2,-16(fp)
 800f3a4:	10c00a04 	addi	r3,r2,40
 800f3a8:	e0bffd17 	ldw	r2,-12(fp)
 800f3ac:	10800217 	ldw	r2,8(r2)
 800f3b0:	1809883a 	mov	r4,r3
 800f3b4:	e17ffe17 	ldw	r5,-8(fp)
 800f3b8:	e1bfff17 	ldw	r6,-4(fp)
 800f3bc:	100f883a 	mov	r7,r2
 800f3c0:	800f9900 	call	800f990 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f3c4:	e037883a 	mov	sp,fp
 800f3c8:	dfc00117 	ldw	ra,4(sp)
 800f3cc:	df000017 	ldw	fp,0(sp)
 800f3d0:	dec00204 	addi	sp,sp,8
 800f3d4:	f800283a 	ret

0800f3d8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f3d8:	defffa04 	addi	sp,sp,-24
 800f3dc:	dfc00515 	stw	ra,20(sp)
 800f3e0:	df000415 	stw	fp,16(sp)
 800f3e4:	df000404 	addi	fp,sp,16
 800f3e8:	e13ffd15 	stw	r4,-12(fp)
 800f3ec:	e17ffe15 	stw	r5,-8(fp)
 800f3f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f3f4:	e0bffd17 	ldw	r2,-12(fp)
 800f3f8:	10800017 	ldw	r2,0(r2)
 800f3fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f400:	e0bffc17 	ldw	r2,-16(fp)
 800f404:	10c00a04 	addi	r3,r2,40
 800f408:	e0bffd17 	ldw	r2,-12(fp)
 800f40c:	10800217 	ldw	r2,8(r2)
 800f410:	1809883a 	mov	r4,r3
 800f414:	e17ffe17 	ldw	r5,-8(fp)
 800f418:	e1bfff17 	ldw	r6,-4(fp)
 800f41c:	100f883a 	mov	r7,r2
 800f420:	800fb980 	call	800fb98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f424:	e037883a 	mov	sp,fp
 800f428:	dfc00117 	ldw	ra,4(sp)
 800f42c:	df000017 	ldw	fp,0(sp)
 800f430:	dec00204 	addi	sp,sp,8
 800f434:	f800283a 	ret

0800f438 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f438:	defffc04 	addi	sp,sp,-16
 800f43c:	dfc00315 	stw	ra,12(sp)
 800f440:	df000215 	stw	fp,8(sp)
 800f444:	df000204 	addi	fp,sp,8
 800f448:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f44c:	e0bfff17 	ldw	r2,-4(fp)
 800f450:	10800017 	ldw	r2,0(r2)
 800f454:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f458:	e0bffe17 	ldw	r2,-8(fp)
 800f45c:	10c00a04 	addi	r3,r2,40
 800f460:	e0bfff17 	ldw	r2,-4(fp)
 800f464:	10800217 	ldw	r2,8(r2)
 800f468:	1809883a 	mov	r4,r3
 800f46c:	100b883a 	mov	r5,r2
 800f470:	800f83c0 	call	800f83c <altera_avalon_jtag_uart_close>
}
 800f474:	e037883a 	mov	sp,fp
 800f478:	dfc00117 	ldw	ra,4(sp)
 800f47c:	df000017 	ldw	fp,0(sp)
 800f480:	dec00204 	addi	sp,sp,8
 800f484:	f800283a 	ret

0800f488 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f488:	defffa04 	addi	sp,sp,-24
 800f48c:	dfc00515 	stw	ra,20(sp)
 800f490:	df000415 	stw	fp,16(sp)
 800f494:	df000404 	addi	fp,sp,16
 800f498:	e13ffd15 	stw	r4,-12(fp)
 800f49c:	e17ffe15 	stw	r5,-8(fp)
 800f4a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f4a4:	e0bffd17 	ldw	r2,-12(fp)
 800f4a8:	10800017 	ldw	r2,0(r2)
 800f4ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f4b0:	e0bffc17 	ldw	r2,-16(fp)
 800f4b4:	10800a04 	addi	r2,r2,40
 800f4b8:	1009883a 	mov	r4,r2
 800f4bc:	e17ffe17 	ldw	r5,-8(fp)
 800f4c0:	e1bfff17 	ldw	r6,-4(fp)
 800f4c4:	800f8a40 	call	800f8a4 <altera_avalon_jtag_uart_ioctl>
}
 800f4c8:	e037883a 	mov	sp,fp
 800f4cc:	dfc00117 	ldw	ra,4(sp)
 800f4d0:	df000017 	ldw	fp,0(sp)
 800f4d4:	dec00204 	addi	sp,sp,8
 800f4d8:	f800283a 	ret

0800f4dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f4dc:	defffa04 	addi	sp,sp,-24
 800f4e0:	dfc00515 	stw	ra,20(sp)
 800f4e4:	df000415 	stw	fp,16(sp)
 800f4e8:	df000404 	addi	fp,sp,16
 800f4ec:	e13ffd15 	stw	r4,-12(fp)
 800f4f0:	e17ffe15 	stw	r5,-8(fp)
 800f4f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f4f8:	e0bffd17 	ldw	r2,-12(fp)
 800f4fc:	00c00044 	movi	r3,1
 800f500:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f504:	e0bffd17 	ldw	r2,-12(fp)
 800f508:	10800017 	ldw	r2,0(r2)
 800f50c:	10800104 	addi	r2,r2,4
 800f510:	e0fffd17 	ldw	r3,-12(fp)
 800f514:	18c00817 	ldw	r3,32(r3)
 800f518:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f51c:	e0fffe17 	ldw	r3,-8(fp)
 800f520:	e0bfff17 	ldw	r2,-4(fp)
 800f524:	d8000015 	stw	zero,0(sp)
 800f528:	1809883a 	mov	r4,r3
 800f52c:	100b883a 	mov	r5,r2
 800f530:	01820074 	movhi	r6,2049
 800f534:	31bd6704 	addi	r6,r6,-2660
 800f538:	e1fffd17 	ldw	r7,-12(fp)
 800f53c:	80102240 	call	8010224 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f540:	e0bffd17 	ldw	r2,-12(fp)
 800f544:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f548:	e0bffd17 	ldw	r2,-12(fp)
 800f54c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f550:	00820074 	movhi	r2,2049
 800f554:	10944f04 	addi	r2,r2,20796
 800f558:	10800017 	ldw	r2,0(r2)
 800f55c:	1809883a 	mov	r4,r3
 800f560:	100b883a 	mov	r5,r2
 800f564:	01820074 	movhi	r6,2049
 800f568:	31bde604 	addi	r6,r6,-2152
 800f56c:	e1fffd17 	ldw	r7,-12(fp)
 800f570:	800fdb00 	call	800fdb0 <alt_alarm_start>
 800f574:	1000040e 	bge	r2,zero,800f588 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f578:	e0bffd17 	ldw	r2,-12(fp)
 800f57c:	00e00034 	movhi	r3,32768
 800f580:	18ffffc4 	addi	r3,r3,-1
 800f584:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f588:	e037883a 	mov	sp,fp
 800f58c:	dfc00117 	ldw	ra,4(sp)
 800f590:	df000017 	ldw	fp,0(sp)
 800f594:	dec00204 	addi	sp,sp,8
 800f598:	f800283a 	ret

0800f59c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f59c:	defff804 	addi	sp,sp,-32
 800f5a0:	df000715 	stw	fp,28(sp)
 800f5a4:	df000704 	addi	fp,sp,28
 800f5a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f5ac:	e0bfff17 	ldw	r2,-4(fp)
 800f5b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f5b4:	e0bffb17 	ldw	r2,-20(fp)
 800f5b8:	10800017 	ldw	r2,0(r2)
 800f5bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f5c0:	e0bffc17 	ldw	r2,-16(fp)
 800f5c4:	10800104 	addi	r2,r2,4
 800f5c8:	10800037 	ldwio	r2,0(r2)
 800f5cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f5d0:	e0bffd17 	ldw	r2,-12(fp)
 800f5d4:	1080c00c 	andi	r2,r2,768
 800f5d8:	1000011e 	bne	r2,zero,800f5e0 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f5dc:	00006a06 	br	800f788 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f5e0:	e0bffd17 	ldw	r2,-12(fp)
 800f5e4:	1080400c 	andi	r2,r2,256
 800f5e8:	10003226 	beq	r2,zero,800f6b4 <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f5ec:	00800074 	movhi	r2,1
 800f5f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f5f4:	e0bffb17 	ldw	r2,-20(fp)
 800f5f8:	10800a17 	ldw	r2,40(r2)
 800f5fc:	10800044 	addi	r2,r2,1
 800f600:	1081ffcc 	andi	r2,r2,2047
 800f604:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f608:	e0bffb17 	ldw	r2,-20(fp)
 800f60c:	10c00b17 	ldw	r3,44(r2)
 800f610:	e0bffe17 	ldw	r2,-8(fp)
 800f614:	1880011e 	bne	r3,r2,800f61c <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f618:	00001506 	br	800f670 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f61c:	e0bffc17 	ldw	r2,-16(fp)
 800f620:	10800037 	ldwio	r2,0(r2)
 800f624:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f628:	e0bff917 	ldw	r2,-28(fp)
 800f62c:	10a0000c 	andi	r2,r2,32768
 800f630:	1000011e 	bne	r2,zero,800f638 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f634:	00000e06 	br	800f670 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f638:	e0bffb17 	ldw	r2,-20(fp)
 800f63c:	10800a17 	ldw	r2,40(r2)
 800f640:	e0fff917 	ldw	r3,-28(fp)
 800f644:	e13ffb17 	ldw	r4,-20(fp)
 800f648:	2085883a 	add	r2,r4,r2
 800f64c:	10800e04 	addi	r2,r2,56
 800f650:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f654:	e0bffb17 	ldw	r2,-20(fp)
 800f658:	10800a17 	ldw	r2,40(r2)
 800f65c:	10800044 	addi	r2,r2,1
 800f660:	10c1ffcc 	andi	r3,r2,2047
 800f664:	e0bffb17 	ldw	r2,-20(fp)
 800f668:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f66c:	003fe106 	br	800f5f4 <__alt_data_end+0xf800f5f4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f670:	e0bff917 	ldw	r2,-28(fp)
 800f674:	10bfffec 	andhi	r2,r2,65535
 800f678:	10000e26 	beq	r2,zero,800f6b4 <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f67c:	e0bffb17 	ldw	r2,-20(fp)
 800f680:	10c00817 	ldw	r3,32(r2)
 800f684:	00bfff84 	movi	r2,-2
 800f688:	1886703a 	and	r3,r3,r2
 800f68c:	e0bffb17 	ldw	r2,-20(fp)
 800f690:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f694:	e0bffc17 	ldw	r2,-16(fp)
 800f698:	10800104 	addi	r2,r2,4
 800f69c:	e0fffb17 	ldw	r3,-20(fp)
 800f6a0:	18c00817 	ldw	r3,32(r3)
 800f6a4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f6a8:	e0bffc17 	ldw	r2,-16(fp)
 800f6ac:	10800104 	addi	r2,r2,4
 800f6b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f6b4:	e0bffd17 	ldw	r2,-12(fp)
 800f6b8:	1080800c 	andi	r2,r2,512
 800f6bc:	10003126 	beq	r2,zero,800f784 <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f6c0:	e0bffd17 	ldw	r2,-12(fp)
 800f6c4:	1004d43a 	srli	r2,r2,16
 800f6c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f6cc:	00001406 	br	800f720 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f6d0:	e0bffc17 	ldw	r2,-16(fp)
 800f6d4:	e0fffb17 	ldw	r3,-20(fp)
 800f6d8:	18c00d17 	ldw	r3,52(r3)
 800f6dc:	e13ffb17 	ldw	r4,-20(fp)
 800f6e0:	20c7883a 	add	r3,r4,r3
 800f6e4:	18c20e04 	addi	r3,r3,2104
 800f6e8:	18c00003 	ldbu	r3,0(r3)
 800f6ec:	18c03fcc 	andi	r3,r3,255
 800f6f0:	18c0201c 	xori	r3,r3,128
 800f6f4:	18ffe004 	addi	r3,r3,-128
 800f6f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f6fc:	e0bffb17 	ldw	r2,-20(fp)
 800f700:	10800d17 	ldw	r2,52(r2)
 800f704:	10800044 	addi	r2,r2,1
 800f708:	10c1ffcc 	andi	r3,r2,2047
 800f70c:	e0bffb17 	ldw	r2,-20(fp)
 800f710:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f714:	e0bffa17 	ldw	r2,-24(fp)
 800f718:	10bfffc4 	addi	r2,r2,-1
 800f71c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f720:	e0bffa17 	ldw	r2,-24(fp)
 800f724:	10000526 	beq	r2,zero,800f73c <altera_avalon_jtag_uart_irq+0x1a0>
 800f728:	e0bffb17 	ldw	r2,-20(fp)
 800f72c:	10c00d17 	ldw	r3,52(r2)
 800f730:	e0bffb17 	ldw	r2,-20(fp)
 800f734:	10800c17 	ldw	r2,48(r2)
 800f738:	18bfe51e 	bne	r3,r2,800f6d0 <__alt_data_end+0xf800f6d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f73c:	e0bffa17 	ldw	r2,-24(fp)
 800f740:	10001026 	beq	r2,zero,800f784 <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f744:	e0bffb17 	ldw	r2,-20(fp)
 800f748:	10c00817 	ldw	r3,32(r2)
 800f74c:	00bfff44 	movi	r2,-3
 800f750:	1886703a 	and	r3,r3,r2
 800f754:	e0bffb17 	ldw	r2,-20(fp)
 800f758:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f75c:	e0bffb17 	ldw	r2,-20(fp)
 800f760:	10800017 	ldw	r2,0(r2)
 800f764:	10800104 	addi	r2,r2,4
 800f768:	e0fffb17 	ldw	r3,-20(fp)
 800f76c:	18c00817 	ldw	r3,32(r3)
 800f770:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f774:	e0bffc17 	ldw	r2,-16(fp)
 800f778:	10800104 	addi	r2,r2,4
 800f77c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800f780:	003f8f06 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800f784:	003f8e06 	br	800f5c0 <__alt_data_end+0xf800f5c0>
}
 800f788:	e037883a 	mov	sp,fp
 800f78c:	df000017 	ldw	fp,0(sp)
 800f790:	dec00104 	addi	sp,sp,4
 800f794:	f800283a 	ret

0800f798 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800f798:	defff804 	addi	sp,sp,-32
 800f79c:	df000715 	stw	fp,28(sp)
 800f7a0:	df000704 	addi	fp,sp,28
 800f7a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800f7a8:	e0bffb17 	ldw	r2,-20(fp)
 800f7ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800f7b0:	e0bff917 	ldw	r2,-28(fp)
 800f7b4:	10800017 	ldw	r2,0(r2)
 800f7b8:	10800104 	addi	r2,r2,4
 800f7bc:	10800037 	ldwio	r2,0(r2)
 800f7c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800f7c4:	e0bffa17 	ldw	r2,-24(fp)
 800f7c8:	1081000c 	andi	r2,r2,1024
 800f7cc:	10000a26 	beq	r2,zero,800f7f8 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800f7d0:	e0bff917 	ldw	r2,-28(fp)
 800f7d4:	10800017 	ldw	r2,0(r2)
 800f7d8:	10800104 	addi	r2,r2,4
 800f7dc:	e0fff917 	ldw	r3,-28(fp)
 800f7e0:	18c00817 	ldw	r3,32(r3)
 800f7e4:	18c10014 	ori	r3,r3,1024
 800f7e8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 800f7ec:	e0bff917 	ldw	r2,-28(fp)
 800f7f0:	10000915 	stw	zero,36(r2)
 800f7f4:	00000a06 	br	800f820 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800f7f8:	e0bff917 	ldw	r2,-28(fp)
 800f7fc:	10800917 	ldw	r2,36(r2)
 800f800:	00e00034 	movhi	r3,32768
 800f804:	18ffff04 	addi	r3,r3,-4
 800f808:	18800536 	bltu	r3,r2,800f820 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 800f80c:	e0bff917 	ldw	r2,-28(fp)
 800f810:	10800917 	ldw	r2,36(r2)
 800f814:	10c00044 	addi	r3,r2,1
 800f818:	e0bff917 	ldw	r2,-28(fp)
 800f81c:	10c00915 	stw	r3,36(r2)
 800f820:	00820074 	movhi	r2,2049
 800f824:	10944f04 	addi	r2,r2,20796
 800f828:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800f82c:	e037883a 	mov	sp,fp
 800f830:	df000017 	ldw	fp,0(sp)
 800f834:	dec00104 	addi	sp,sp,4
 800f838:	f800283a 	ret

0800f83c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800f83c:	defffd04 	addi	sp,sp,-12
 800f840:	df000215 	stw	fp,8(sp)
 800f844:	df000204 	addi	fp,sp,8
 800f848:	e13ffe15 	stw	r4,-8(fp)
 800f84c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f850:	00000506 	br	800f868 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800f854:	e0bfff17 	ldw	r2,-4(fp)
 800f858:	1090000c 	andi	r2,r2,16384
 800f85c:	10000226 	beq	r2,zero,800f868 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800f860:	00bffd44 	movi	r2,-11
 800f864:	00000b06 	br	800f894 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800f868:	e0bffe17 	ldw	r2,-8(fp)
 800f86c:	10c00d17 	ldw	r3,52(r2)
 800f870:	e0bffe17 	ldw	r2,-8(fp)
 800f874:	10800c17 	ldw	r2,48(r2)
 800f878:	18800526 	beq	r3,r2,800f890 <altera_avalon_jtag_uart_close+0x54>
 800f87c:	e0bffe17 	ldw	r2,-8(fp)
 800f880:	10c00917 	ldw	r3,36(r2)
 800f884:	e0bffe17 	ldw	r2,-8(fp)
 800f888:	10800117 	ldw	r2,4(r2)
 800f88c:	18bff136 	bltu	r3,r2,800f854 <__alt_data_end+0xf800f854>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800f890:	0005883a 	mov	r2,zero
}
 800f894:	e037883a 	mov	sp,fp
 800f898:	df000017 	ldw	fp,0(sp)
 800f89c:	dec00104 	addi	sp,sp,4
 800f8a0:	f800283a 	ret

0800f8a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800f8a4:	defffa04 	addi	sp,sp,-24
 800f8a8:	df000515 	stw	fp,20(sp)
 800f8ac:	df000504 	addi	fp,sp,20
 800f8b0:	e13ffd15 	stw	r4,-12(fp)
 800f8b4:	e17ffe15 	stw	r5,-8(fp)
 800f8b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800f8bc:	00bff9c4 	movi	r2,-25
 800f8c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800f8c4:	e0bffe17 	ldw	r2,-8(fp)
 800f8c8:	10da8060 	cmpeqi	r3,r2,27137
 800f8cc:	1800031e 	bne	r3,zero,800f8dc <altera_avalon_jtag_uart_ioctl+0x38>
 800f8d0:	109a80a0 	cmpeqi	r2,r2,27138
 800f8d4:	1000191e 	bne	r2,zero,800f93c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800f8d8:	00002806 	br	800f97c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800f8dc:	e0bffd17 	ldw	r2,-12(fp)
 800f8e0:	10c00117 	ldw	r3,4(r2)
 800f8e4:	00a00034 	movhi	r2,32768
 800f8e8:	10bfffc4 	addi	r2,r2,-1
 800f8ec:	18801226 	beq	r3,r2,800f938 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800f8f0:	e0bfff17 	ldw	r2,-4(fp)
 800f8f4:	10800017 	ldw	r2,0(r2)
 800f8f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800f8fc:	e0bffc17 	ldw	r2,-16(fp)
 800f900:	10800090 	cmplti	r2,r2,2
 800f904:	1000061e 	bne	r2,zero,800f920 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f908:	e0fffc17 	ldw	r3,-16(fp)
 800f90c:	00a00034 	movhi	r2,32768
 800f910:	10bfffc4 	addi	r2,r2,-1
 800f914:	18800226 	beq	r3,r2,800f920 <altera_avalon_jtag_uart_ioctl+0x7c>
 800f918:	e0bffc17 	ldw	r2,-16(fp)
 800f91c:	00000206 	br	800f928 <altera_avalon_jtag_uart_ioctl+0x84>
 800f920:	00a00034 	movhi	r2,32768
 800f924:	10bfff84 	addi	r2,r2,-2
 800f928:	e0fffd17 	ldw	r3,-12(fp)
 800f92c:	18800115 	stw	r2,4(r3)
      rc = 0;
 800f930:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f934:	00001106 	br	800f97c <altera_avalon_jtag_uart_ioctl+0xd8>
 800f938:	00001006 	br	800f97c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800f93c:	e0bffd17 	ldw	r2,-12(fp)
 800f940:	10c00117 	ldw	r3,4(r2)
 800f944:	00a00034 	movhi	r2,32768
 800f948:	10bfffc4 	addi	r2,r2,-1
 800f94c:	18800a26 	beq	r3,r2,800f978 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800f950:	e0bffd17 	ldw	r2,-12(fp)
 800f954:	10c00917 	ldw	r3,36(r2)
 800f958:	e0bffd17 	ldw	r2,-12(fp)
 800f95c:	10800117 	ldw	r2,4(r2)
 800f960:	1885803a 	cmpltu	r2,r3,r2
 800f964:	10c03fcc 	andi	r3,r2,255
 800f968:	e0bfff17 	ldw	r2,-4(fp)
 800f96c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800f970:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800f974:	00000006 	br	800f978 <altera_avalon_jtag_uart_ioctl+0xd4>
 800f978:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800f97c:	e0bffb17 	ldw	r2,-20(fp)
}
 800f980:	e037883a 	mov	sp,fp
 800f984:	df000017 	ldw	fp,0(sp)
 800f988:	dec00104 	addi	sp,sp,4
 800f98c:	f800283a 	ret

0800f990 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800f990:	defff304 	addi	sp,sp,-52
 800f994:	dfc00c15 	stw	ra,48(sp)
 800f998:	df000b15 	stw	fp,44(sp)
 800f99c:	df000b04 	addi	fp,sp,44
 800f9a0:	e13ffc15 	stw	r4,-16(fp)
 800f9a4:	e17ffd15 	stw	r5,-12(fp)
 800f9a8:	e1bffe15 	stw	r6,-8(fp)
 800f9ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800f9b0:	e0bffd17 	ldw	r2,-12(fp)
 800f9b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800f9b8:	00004906 	br	800fae0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800f9bc:	e0bffc17 	ldw	r2,-16(fp)
 800f9c0:	10800a17 	ldw	r2,40(r2)
 800f9c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800f9c8:	e0bffc17 	ldw	r2,-16(fp)
 800f9cc:	10800b17 	ldw	r2,44(r2)
 800f9d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800f9d4:	e0fff717 	ldw	r3,-36(fp)
 800f9d8:	e0bff817 	ldw	r2,-32(fp)
 800f9dc:	18800536 	bltu	r3,r2,800f9f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800f9e0:	e0fff717 	ldw	r3,-36(fp)
 800f9e4:	e0bff817 	ldw	r2,-32(fp)
 800f9e8:	1885c83a 	sub	r2,r3,r2
 800f9ec:	e0bff615 	stw	r2,-40(fp)
 800f9f0:	00000406 	br	800fa04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800f9f4:	00c20004 	movi	r3,2048
 800f9f8:	e0bff817 	ldw	r2,-32(fp)
 800f9fc:	1885c83a 	sub	r2,r3,r2
 800fa00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fa04:	e0bff617 	ldw	r2,-40(fp)
 800fa08:	1000011e 	bne	r2,zero,800fa10 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fa0c:	00001d06 	br	800fa84 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fa10:	e0fffe17 	ldw	r3,-8(fp)
 800fa14:	e0bff617 	ldw	r2,-40(fp)
 800fa18:	1880022e 	bgeu	r3,r2,800fa24 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fa1c:	e0bffe17 	ldw	r2,-8(fp)
 800fa20:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fa24:	e0bff817 	ldw	r2,-32(fp)
 800fa28:	10800e04 	addi	r2,r2,56
 800fa2c:	e0fffc17 	ldw	r3,-16(fp)
 800fa30:	1885883a 	add	r2,r3,r2
 800fa34:	e13ff517 	ldw	r4,-44(fp)
 800fa38:	100b883a 	mov	r5,r2
 800fa3c:	e1bff617 	ldw	r6,-40(fp)
 800fa40:	80078540 	call	8007854 <memcpy>
      ptr   += n;
 800fa44:	e0fff517 	ldw	r3,-44(fp)
 800fa48:	e0bff617 	ldw	r2,-40(fp)
 800fa4c:	1885883a 	add	r2,r3,r2
 800fa50:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fa54:	e0fffe17 	ldw	r3,-8(fp)
 800fa58:	e0bff617 	ldw	r2,-40(fp)
 800fa5c:	1885c83a 	sub	r2,r3,r2
 800fa60:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fa64:	e0fff817 	ldw	r3,-32(fp)
 800fa68:	e0bff617 	ldw	r2,-40(fp)
 800fa6c:	1885883a 	add	r2,r3,r2
 800fa70:	10c1ffcc 	andi	r3,r2,2047
 800fa74:	e0bffc17 	ldw	r2,-16(fp)
 800fa78:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fa7c:	e0bffe17 	ldw	r2,-8(fp)
 800fa80:	00bfce16 	blt	zero,r2,800f9bc <__alt_data_end+0xf800f9bc>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fa84:	e0fff517 	ldw	r3,-44(fp)
 800fa88:	e0bffd17 	ldw	r2,-12(fp)
 800fa8c:	18800126 	beq	r3,r2,800fa94 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fa90:	00001506 	br	800fae8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fa94:	e0bfff17 	ldw	r2,-4(fp)
 800fa98:	1090000c 	andi	r2,r2,16384
 800fa9c:	10000126 	beq	r2,zero,800faa4 <altera_avalon_jtag_uart_read+0x114>
      break;
 800faa0:	00001106 	br	800fae8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800faa4:	0001883a 	nop
 800faa8:	e0bffc17 	ldw	r2,-16(fp)
 800faac:	10c00a17 	ldw	r3,40(r2)
 800fab0:	e0bff717 	ldw	r2,-36(fp)
 800fab4:	1880051e 	bne	r3,r2,800facc <altera_avalon_jtag_uart_read+0x13c>
 800fab8:	e0bffc17 	ldw	r2,-16(fp)
 800fabc:	10c00917 	ldw	r3,36(r2)
 800fac0:	e0bffc17 	ldw	r2,-16(fp)
 800fac4:	10800117 	ldw	r2,4(r2)
 800fac8:	18bff736 	bltu	r3,r2,800faa8 <__alt_data_end+0xf800faa8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800facc:	e0bffc17 	ldw	r2,-16(fp)
 800fad0:	10c00a17 	ldw	r3,40(r2)
 800fad4:	e0bff717 	ldw	r2,-36(fp)
 800fad8:	1880011e 	bne	r3,r2,800fae0 <altera_avalon_jtag_uart_read+0x150>
      break;
 800fadc:	00000206 	br	800fae8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fae0:	e0bffe17 	ldw	r2,-8(fp)
 800fae4:	00bfb516 	blt	zero,r2,800f9bc <__alt_data_end+0xf800f9bc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fae8:	e0fff517 	ldw	r3,-44(fp)
 800faec:	e0bffd17 	ldw	r2,-12(fp)
 800faf0:	18801726 	beq	r3,r2,800fb50 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800faf4:	0005303a 	rdctl	r2,status
 800faf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fafc:	e0fffa17 	ldw	r3,-24(fp)
 800fb00:	00bfff84 	movi	r2,-2
 800fb04:	1884703a 	and	r2,r3,r2
 800fb08:	1001703a 	wrctl	status,r2
  
  return context;
 800fb0c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fb10:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fb14:	e0bffc17 	ldw	r2,-16(fp)
 800fb18:	10800817 	ldw	r2,32(r2)
 800fb1c:	10c00054 	ori	r3,r2,1
 800fb20:	e0bffc17 	ldw	r2,-16(fp)
 800fb24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fb28:	e0bffc17 	ldw	r2,-16(fp)
 800fb2c:	10800017 	ldw	r2,0(r2)
 800fb30:	10800104 	addi	r2,r2,4
 800fb34:	e0fffc17 	ldw	r3,-16(fp)
 800fb38:	18c00817 	ldw	r3,32(r3)
 800fb3c:	10c00035 	stwio	r3,0(r2)
 800fb40:	e0bff917 	ldw	r2,-28(fp)
 800fb44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fb48:	e0bffb17 	ldw	r2,-20(fp)
 800fb4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fb50:	e0fff517 	ldw	r3,-44(fp)
 800fb54:	e0bffd17 	ldw	r2,-12(fp)
 800fb58:	18800426 	beq	r3,r2,800fb6c <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
 800fb5c:	e0fff517 	ldw	r3,-44(fp)
 800fb60:	e0bffd17 	ldw	r2,-12(fp)
 800fb64:	1885c83a 	sub	r2,r3,r2
 800fb68:	00000606 	br	800fb84 <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
 800fb6c:	e0bfff17 	ldw	r2,-4(fp)
 800fb70:	1090000c 	andi	r2,r2,16384
 800fb74:	10000226 	beq	r2,zero,800fb80 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
 800fb78:	00bffd44 	movi	r2,-11
 800fb7c:	00000106 	br	800fb84 <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
 800fb80:	00bffec4 	movi	r2,-5
}
 800fb84:	e037883a 	mov	sp,fp
 800fb88:	dfc00117 	ldw	ra,4(sp)
 800fb8c:	df000017 	ldw	fp,0(sp)
 800fb90:	dec00204 	addi	sp,sp,8
 800fb94:	f800283a 	ret

0800fb98 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fb98:	defff304 	addi	sp,sp,-52
 800fb9c:	dfc00c15 	stw	ra,48(sp)
 800fba0:	df000b15 	stw	fp,44(sp)
 800fba4:	df000b04 	addi	fp,sp,44
 800fba8:	e13ffc15 	stw	r4,-16(fp)
 800fbac:	e17ffd15 	stw	r5,-12(fp)
 800fbb0:	e1bffe15 	stw	r6,-8(fp)
 800fbb4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fbb8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fbbc:	e0bffd17 	ldw	r2,-12(fp)
 800fbc0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fbc4:	00003906 	br	800fcac <altera_avalon_jtag_uart_write+0x114>
 800fbc8:	00003806 	br	800fcac <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fbcc:	e0bffc17 	ldw	r2,-16(fp)
 800fbd0:	10800c17 	ldw	r2,48(r2)
 800fbd4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fbd8:	e0bffc17 	ldw	r2,-16(fp)
 800fbdc:	10800d17 	ldw	r2,52(r2)
 800fbe0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fbe4:	e0fff817 	ldw	r3,-32(fp)
 800fbe8:	e0bff517 	ldw	r2,-44(fp)
 800fbec:	1880062e 	bgeu	r3,r2,800fc08 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
 800fbf0:	e0fff517 	ldw	r3,-44(fp)
 800fbf4:	e0bff817 	ldw	r2,-32(fp)
 800fbf8:	1885c83a 	sub	r2,r3,r2
 800fbfc:	10bfffc4 	addi	r2,r2,-1
 800fc00:	e0bff615 	stw	r2,-40(fp)
 800fc04:	00000b06 	br	800fc34 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 800fc08:	e0bff517 	ldw	r2,-44(fp)
 800fc0c:	10000526 	beq	r2,zero,800fc24 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fc10:	00c20004 	movi	r3,2048
 800fc14:	e0bff817 	ldw	r2,-32(fp)
 800fc18:	1885c83a 	sub	r2,r3,r2
 800fc1c:	e0bff615 	stw	r2,-40(fp)
 800fc20:	00000406 	br	800fc34 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fc24:	00c1ffc4 	movi	r3,2047
 800fc28:	e0bff817 	ldw	r2,-32(fp)
 800fc2c:	1885c83a 	sub	r2,r3,r2
 800fc30:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fc34:	e0bff617 	ldw	r2,-40(fp)
 800fc38:	1000011e 	bne	r2,zero,800fc40 <altera_avalon_jtag_uart_write+0xa8>
        break;
 800fc3c:	00001d06 	br	800fcb4 <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
 800fc40:	e0fffe17 	ldw	r3,-8(fp)
 800fc44:	e0bff617 	ldw	r2,-40(fp)
 800fc48:	1880022e 	bgeu	r3,r2,800fc54 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 800fc4c:	e0bffe17 	ldw	r2,-8(fp)
 800fc50:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fc54:	e0bff817 	ldw	r2,-32(fp)
 800fc58:	10820e04 	addi	r2,r2,2104
 800fc5c:	e0fffc17 	ldw	r3,-16(fp)
 800fc60:	1885883a 	add	r2,r3,r2
 800fc64:	1009883a 	mov	r4,r2
 800fc68:	e17ffd17 	ldw	r5,-12(fp)
 800fc6c:	e1bff617 	ldw	r6,-40(fp)
 800fc70:	80078540 	call	8007854 <memcpy>
      ptr   += n;
 800fc74:	e0fffd17 	ldw	r3,-12(fp)
 800fc78:	e0bff617 	ldw	r2,-40(fp)
 800fc7c:	1885883a 	add	r2,r3,r2
 800fc80:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800fc84:	e0fffe17 	ldw	r3,-8(fp)
 800fc88:	e0bff617 	ldw	r2,-40(fp)
 800fc8c:	1885c83a 	sub	r2,r3,r2
 800fc90:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fc94:	e0fff817 	ldw	r3,-32(fp)
 800fc98:	e0bff617 	ldw	r2,-40(fp)
 800fc9c:	1885883a 	add	r2,r3,r2
 800fca0:	10c1ffcc 	andi	r3,r2,2047
 800fca4:	e0bffc17 	ldw	r2,-16(fp)
 800fca8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fcac:	e0bffe17 	ldw	r2,-8(fp)
 800fcb0:	00bfc616 	blt	zero,r2,800fbcc <__alt_data_end+0xf800fbcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fcb4:	0005303a 	rdctl	r2,status
 800fcb8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fcbc:	e0fffa17 	ldw	r3,-24(fp)
 800fcc0:	00bfff84 	movi	r2,-2
 800fcc4:	1884703a 	and	r2,r3,r2
 800fcc8:	1001703a 	wrctl	status,r2
  
  return context;
 800fccc:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800fcd0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fcd4:	e0bffc17 	ldw	r2,-16(fp)
 800fcd8:	10800817 	ldw	r2,32(r2)
 800fcdc:	10c00094 	ori	r3,r2,2
 800fce0:	e0bffc17 	ldw	r2,-16(fp)
 800fce4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fce8:	e0bffc17 	ldw	r2,-16(fp)
 800fcec:	10800017 	ldw	r2,0(r2)
 800fcf0:	10800104 	addi	r2,r2,4
 800fcf4:	e0fffc17 	ldw	r3,-16(fp)
 800fcf8:	18c00817 	ldw	r3,32(r3)
 800fcfc:	10c00035 	stwio	r3,0(r2)
 800fd00:	e0bff917 	ldw	r2,-28(fp)
 800fd04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fd08:	e0bffb17 	ldw	r2,-20(fp)
 800fd0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800fd10:	e0bffe17 	ldw	r2,-8(fp)
 800fd14:	0080120e 	bge	zero,r2,800fd60 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800fd18:	e0bfff17 	ldw	r2,-4(fp)
 800fd1c:	1090000c 	andi	r2,r2,16384
 800fd20:	10000126 	beq	r2,zero,800fd28 <altera_avalon_jtag_uart_write+0x190>
        break;
 800fd24:	00001006 	br	800fd68 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800fd28:	0001883a 	nop
 800fd2c:	e0bffc17 	ldw	r2,-16(fp)
 800fd30:	10c00d17 	ldw	r3,52(r2)
 800fd34:	e0bff517 	ldw	r2,-44(fp)
 800fd38:	1880051e 	bne	r3,r2,800fd50 <altera_avalon_jtag_uart_write+0x1b8>
 800fd3c:	e0bffc17 	ldw	r2,-16(fp)
 800fd40:	10c00917 	ldw	r3,36(r2)
 800fd44:	e0bffc17 	ldw	r2,-16(fp)
 800fd48:	10800117 	ldw	r2,4(r2)
 800fd4c:	18bff736 	bltu	r3,r2,800fd2c <__alt_data_end+0xf800fd2c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800fd50:	e0bffc17 	ldw	r2,-16(fp)
 800fd54:	10800917 	ldw	r2,36(r2)
 800fd58:	10000126 	beq	r2,zero,800fd60 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800fd5c:	00000206 	br	800fd68 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800fd60:	e0bffe17 	ldw	r2,-8(fp)
 800fd64:	00bf9816 	blt	zero,r2,800fbc8 <__alt_data_end+0xf800fbc8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800fd68:	e0fffd17 	ldw	r3,-12(fp)
 800fd6c:	e0bff717 	ldw	r2,-36(fp)
 800fd70:	18800426 	beq	r3,r2,800fd84 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800fd74:	e0fffd17 	ldw	r3,-12(fp)
 800fd78:	e0bff717 	ldw	r2,-36(fp)
 800fd7c:	1885c83a 	sub	r2,r3,r2
 800fd80:	00000606 	br	800fd9c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800fd84:	e0bfff17 	ldw	r2,-4(fp)
 800fd88:	1090000c 	andi	r2,r2,16384
 800fd8c:	10000226 	beq	r2,zero,800fd98 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800fd90:	00bffd44 	movi	r2,-11
 800fd94:	00000106 	br	800fd9c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800fd98:	00bffec4 	movi	r2,-5
}
 800fd9c:	e037883a 	mov	sp,fp
 800fda0:	dfc00117 	ldw	ra,4(sp)
 800fda4:	df000017 	ldw	fp,0(sp)
 800fda8:	dec00204 	addi	sp,sp,8
 800fdac:	f800283a 	ret

0800fdb0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800fdb0:	defff504 	addi	sp,sp,-44
 800fdb4:	df000a15 	stw	fp,40(sp)
 800fdb8:	df000a04 	addi	fp,sp,40
 800fdbc:	e13ffc15 	stw	r4,-16(fp)
 800fdc0:	e17ffd15 	stw	r5,-12(fp)
 800fdc4:	e1bffe15 	stw	r6,-8(fp)
 800fdc8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800fdcc:	e03ff615 	stw	zero,-40(fp)
 800fdd0:	00820074 	movhi	r2,2049
 800fdd4:	10944f04 	addi	r2,r2,20796
 800fdd8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800fddc:	10003f26 	beq	r2,zero,800fedc <alt_alarm_start+0x12c>
  {
    if (alarm)
 800fde0:	e0bffc17 	ldw	r2,-16(fp)
 800fde4:	10003b26 	beq	r2,zero,800fed4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800fde8:	e0bffc17 	ldw	r2,-16(fp)
 800fdec:	e0fffe17 	ldw	r3,-8(fp)
 800fdf0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800fdf4:	e0bffc17 	ldw	r2,-16(fp)
 800fdf8:	e0ffff17 	ldw	r3,-4(fp)
 800fdfc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fe00:	0005303a 	rdctl	r2,status
 800fe04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fe08:	e0fff817 	ldw	r3,-32(fp)
 800fe0c:	00bfff84 	movi	r2,-2
 800fe10:	1884703a 	and	r2,r3,r2
 800fe14:	1001703a 	wrctl	status,r2
  
  return context;
 800fe18:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800fe1c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800fe20:	00820074 	movhi	r2,2049
 800fe24:	10945004 	addi	r2,r2,20800
 800fe28:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800fe2c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800fe30:	e0fffd17 	ldw	r3,-12(fp)
 800fe34:	e0bff617 	ldw	r2,-40(fp)
 800fe38:	1885883a 	add	r2,r3,r2
 800fe3c:	10c00044 	addi	r3,r2,1
 800fe40:	e0bffc17 	ldw	r2,-16(fp)
 800fe44:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800fe48:	e0bffc17 	ldw	r2,-16(fp)
 800fe4c:	10c00217 	ldw	r3,8(r2)
 800fe50:	e0bff617 	ldw	r2,-40(fp)
 800fe54:	1880042e 	bgeu	r3,r2,800fe68 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800fe58:	e0bffc17 	ldw	r2,-16(fp)
 800fe5c:	00c00044 	movi	r3,1
 800fe60:	10c00405 	stb	r3,16(r2)
 800fe64:	00000206 	br	800fe70 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800fe68:	e0bffc17 	ldw	r2,-16(fp)
 800fe6c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800fe70:	e0bffc17 	ldw	r2,-16(fp)
 800fe74:	00c20074 	movhi	r3,2049
 800fe78:	18cd8604 	addi	r3,r3,13848
 800fe7c:	e0fff915 	stw	r3,-28(fp)
 800fe80:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800fe84:	e0bffa17 	ldw	r2,-24(fp)
 800fe88:	e0fff917 	ldw	r3,-28(fp)
 800fe8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800fe90:	e0bff917 	ldw	r2,-28(fp)
 800fe94:	10c00017 	ldw	r3,0(r2)
 800fe98:	e0bffa17 	ldw	r2,-24(fp)
 800fe9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800fea0:	e0bff917 	ldw	r2,-28(fp)
 800fea4:	10800017 	ldw	r2,0(r2)
 800fea8:	e0fffa17 	ldw	r3,-24(fp)
 800feac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800feb0:	e0bff917 	ldw	r2,-28(fp)
 800feb4:	e0fffa17 	ldw	r3,-24(fp)
 800feb8:	10c00015 	stw	r3,0(r2)
 800febc:	e0bff717 	ldw	r2,-36(fp)
 800fec0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fec4:	e0bffb17 	ldw	r2,-20(fp)
 800fec8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800fecc:	0005883a 	mov	r2,zero
 800fed0:	00000306 	br	800fee0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800fed4:	00bffa84 	movi	r2,-22
 800fed8:	00000106 	br	800fee0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800fedc:	00bfde84 	movi	r2,-134
  }
}
 800fee0:	e037883a 	mov	sp,fp
 800fee4:	df000017 	ldw	fp,0(sp)
 800fee8:	dec00104 	addi	sp,sp,4
 800feec:	f800283a 	ret

0800fef0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800fef0:	defffa04 	addi	sp,sp,-24
 800fef4:	dfc00515 	stw	ra,20(sp)
 800fef8:	df000415 	stw	fp,16(sp)
 800fefc:	df000404 	addi	fp,sp,16
 800ff00:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800ff04:	00800244 	movi	r2,9
 800ff08:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800ff0c:	e13ffd17 	ldw	r4,-12(fp)
 800ff10:	014003f4 	movhi	r5,15
 800ff14:	29509004 	addi	r5,r5,16960
 800ff18:	800c1240 	call	800c124 <__mulsi3>
 800ff1c:	0100bef4 	movhi	r4,763
 800ff20:	213c2004 	addi	r4,r4,-3968
 800ff24:	100b883a 	mov	r5,r2
 800ff28:	800c1140 	call	800c114 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800ff2c:	01200034 	movhi	r4,32768
 800ff30:	213fffc4 	addi	r4,r4,-1
 800ff34:	100b883a 	mov	r5,r2
 800ff38:	800c1140 	call	800c114 <__udivsi3>
 800ff3c:	e13fff17 	ldw	r4,-4(fp)
 800ff40:	100b883a 	mov	r5,r2
 800ff44:	800c1140 	call	800c114 <__udivsi3>
 800ff48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800ff4c:	e0bffe17 	ldw	r2,-8(fp)
 800ff50:	10002926 	beq	r2,zero,800fff8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 800ff54:	e03ffc15 	stw	zero,-16(fp)
 800ff58:	00001606 	br	800ffb4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800ff5c:	00a00034 	movhi	r2,32768
 800ff60:	10bfffc4 	addi	r2,r2,-1
 800ff64:	10bfffc4 	addi	r2,r2,-1
 800ff68:	103ffe1e 	bne	r2,zero,800ff64 <__alt_data_end+0xf800ff64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800ff6c:	e13ffd17 	ldw	r4,-12(fp)
 800ff70:	014003f4 	movhi	r5,15
 800ff74:	29509004 	addi	r5,r5,16960
 800ff78:	800c1240 	call	800c124 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800ff7c:	0100bef4 	movhi	r4,763
 800ff80:	213c2004 	addi	r4,r4,-3968
 800ff84:	100b883a 	mov	r5,r2
 800ff88:	800c1140 	call	800c114 <__udivsi3>
 800ff8c:	01200034 	movhi	r4,32768
 800ff90:	213fffc4 	addi	r4,r4,-1
 800ff94:	100b883a 	mov	r5,r2
 800ff98:	800c1140 	call	800c114 <__udivsi3>
 800ff9c:	e0ffff17 	ldw	r3,-4(fp)
 800ffa0:	1885c83a 	sub	r2,r3,r2
 800ffa4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800ffa8:	e0bffc17 	ldw	r2,-16(fp)
 800ffac:	10800044 	addi	r2,r2,1
 800ffb0:	e0bffc15 	stw	r2,-16(fp)
 800ffb4:	e0fffc17 	ldw	r3,-16(fp)
 800ffb8:	e0bffe17 	ldw	r2,-8(fp)
 800ffbc:	18bfe716 	blt	r3,r2,800ff5c <__alt_data_end+0xf800ff5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ffc0:	e13ffd17 	ldw	r4,-12(fp)
 800ffc4:	014003f4 	movhi	r5,15
 800ffc8:	29509004 	addi	r5,r5,16960
 800ffcc:	800c1240 	call	800c124 <__mulsi3>
 800ffd0:	0100bef4 	movhi	r4,763
 800ffd4:	213c2004 	addi	r4,r4,-3968
 800ffd8:	100b883a 	mov	r5,r2
 800ffdc:	800c1140 	call	800c114 <__udivsi3>
 800ffe0:	1009883a 	mov	r4,r2
 800ffe4:	e17fff17 	ldw	r5,-4(fp)
 800ffe8:	800c1240 	call	800c124 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800ffec:	10bfffc4 	addi	r2,r2,-1
 800fff0:	103ffe1e 	bne	r2,zero,800ffec <__alt_data_end+0xf800ffec>
 800fff4:	00000d06 	br	801002c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800fff8:	e13ffd17 	ldw	r4,-12(fp)
 800fffc:	014003f4 	movhi	r5,15
 8010000:	29509004 	addi	r5,r5,16960
 8010004:	800c1240 	call	800c124 <__mulsi3>
 8010008:	0100bef4 	movhi	r4,763
 801000c:	213c2004 	addi	r4,r4,-3968
 8010010:	100b883a 	mov	r5,r2
 8010014:	800c1140 	call	800c114 <__udivsi3>
 8010018:	1009883a 	mov	r4,r2
 801001c:	e17fff17 	ldw	r5,-4(fp)
 8010020:	800c1240 	call	800c124 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010024:	10bfffc4 	addi	r2,r2,-1
 8010028:	00bffe16 	blt	zero,r2,8010024 <__alt_data_end+0xf8010024>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801002c:	0005883a 	mov	r2,zero
}
 8010030:	e037883a 	mov	sp,fp
 8010034:	dfc00117 	ldw	ra,4(sp)
 8010038:	df000017 	ldw	fp,0(sp)
 801003c:	dec00204 	addi	sp,sp,8
 8010040:	f800283a 	ret

08010044 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010044:	deffff04 	addi	sp,sp,-4
 8010048:	df000015 	stw	fp,0(sp)
 801004c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010050:	e037883a 	mov	sp,fp
 8010054:	df000017 	ldw	fp,0(sp)
 8010058:	dec00104 	addi	sp,sp,4
 801005c:	f800283a 	ret

08010060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010060:	defffe04 	addi	sp,sp,-8
 8010064:	dfc00115 	stw	ra,4(sp)
 8010068:	df000015 	stw	fp,0(sp)
 801006c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010070:	00820074 	movhi	r2,2049
 8010074:	108d8304 	addi	r2,r2,13836
 8010078:	10800017 	ldw	r2,0(r2)
 801007c:	10000526 	beq	r2,zero,8010094 <alt_get_errno+0x34>
 8010080:	00820074 	movhi	r2,2049
 8010084:	108d8304 	addi	r2,r2,13836
 8010088:	10800017 	ldw	r2,0(r2)
 801008c:	103ee83a 	callr	r2
 8010090:	00000206 	br	801009c <alt_get_errno+0x3c>
 8010094:	00820074 	movhi	r2,2049
 8010098:	10944a04 	addi	r2,r2,20776
}
 801009c:	e037883a 	mov	sp,fp
 80100a0:	dfc00117 	ldw	ra,4(sp)
 80100a4:	df000017 	ldw	fp,0(sp)
 80100a8:	dec00204 	addi	sp,sp,8
 80100ac:	f800283a 	ret

080100b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80100b0:	defffa04 	addi	sp,sp,-24
 80100b4:	dfc00515 	stw	ra,20(sp)
 80100b8:	df000415 	stw	fp,16(sp)
 80100bc:	df000404 	addi	fp,sp,16
 80100c0:	e13ffe15 	stw	r4,-8(fp)
 80100c4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80100c8:	e0bffe17 	ldw	r2,-8(fp)
 80100cc:	10000326 	beq	r2,zero,80100dc <alt_dev_llist_insert+0x2c>
 80100d0:	e0bffe17 	ldw	r2,-8(fp)
 80100d4:	10800217 	ldw	r2,8(r2)
 80100d8:	1000051e 	bne	r2,zero,80100f0 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 80100dc:	80100600 	call	8010060 <alt_get_errno>
 80100e0:	00c00584 	movi	r3,22
 80100e4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 80100e8:	00bffa84 	movi	r2,-22
 80100ec:	00001306 	br	801013c <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80100f0:	e0bffe17 	ldw	r2,-8(fp)
 80100f4:	e0ffff17 	ldw	r3,-4(fp)
 80100f8:	e0fffc15 	stw	r3,-16(fp)
 80100fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010100:	e0bffd17 	ldw	r2,-12(fp)
 8010104:	e0fffc17 	ldw	r3,-16(fp)
 8010108:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801010c:	e0bffc17 	ldw	r2,-16(fp)
 8010110:	10c00017 	ldw	r3,0(r2)
 8010114:	e0bffd17 	ldw	r2,-12(fp)
 8010118:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801011c:	e0bffc17 	ldw	r2,-16(fp)
 8010120:	10800017 	ldw	r2,0(r2)
 8010124:	e0fffd17 	ldw	r3,-12(fp)
 8010128:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801012c:	e0bffc17 	ldw	r2,-16(fp)
 8010130:	e0fffd17 	ldw	r3,-12(fp)
 8010134:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010138:	0005883a 	mov	r2,zero
}
 801013c:	e037883a 	mov	sp,fp
 8010140:	dfc00117 	ldw	ra,4(sp)
 8010144:	df000017 	ldw	fp,0(sp)
 8010148:	dec00204 	addi	sp,sp,8
 801014c:	f800283a 	ret

08010150 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010150:	defffd04 	addi	sp,sp,-12
 8010154:	dfc00215 	stw	ra,8(sp)
 8010158:	df000115 	stw	fp,4(sp)
 801015c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010160:	00820074 	movhi	r2,2049
 8010164:	10843404 	addi	r2,r2,4304
 8010168:	e0bfff15 	stw	r2,-4(fp)
 801016c:	00000606 	br	8010188 <_do_ctors+0x38>
        (*ctor) (); 
 8010170:	e0bfff17 	ldw	r2,-4(fp)
 8010174:	10800017 	ldw	r2,0(r2)
 8010178:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801017c:	e0bfff17 	ldw	r2,-4(fp)
 8010180:	10bfff04 	addi	r2,r2,-4
 8010184:	e0bfff15 	stw	r2,-4(fp)
 8010188:	e0ffff17 	ldw	r3,-4(fp)
 801018c:	00820074 	movhi	r2,2049
 8010190:	10843504 	addi	r2,r2,4308
 8010194:	18bff62e 	bgeu	r3,r2,8010170 <__alt_data_end+0xf8010170>
        (*ctor) (); 
}
 8010198:	e037883a 	mov	sp,fp
 801019c:	dfc00117 	ldw	ra,4(sp)
 80101a0:	df000017 	ldw	fp,0(sp)
 80101a4:	dec00204 	addi	sp,sp,8
 80101a8:	f800283a 	ret

080101ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80101ac:	defffd04 	addi	sp,sp,-12
 80101b0:	dfc00215 	stw	ra,8(sp)
 80101b4:	df000115 	stw	fp,4(sp)
 80101b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80101bc:	00820074 	movhi	r2,2049
 80101c0:	10843404 	addi	r2,r2,4304
 80101c4:	e0bfff15 	stw	r2,-4(fp)
 80101c8:	00000606 	br	80101e4 <_do_dtors+0x38>
        (*dtor) (); 
 80101cc:	e0bfff17 	ldw	r2,-4(fp)
 80101d0:	10800017 	ldw	r2,0(r2)
 80101d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80101d8:	e0bfff17 	ldw	r2,-4(fp)
 80101dc:	10bfff04 	addi	r2,r2,-4
 80101e0:	e0bfff15 	stw	r2,-4(fp)
 80101e4:	e0ffff17 	ldw	r3,-4(fp)
 80101e8:	00820074 	movhi	r2,2049
 80101ec:	10843504 	addi	r2,r2,4308
 80101f0:	18bff62e 	bgeu	r3,r2,80101cc <__alt_data_end+0xf80101cc>
        (*dtor) (); 
}
 80101f4:	e037883a 	mov	sp,fp
 80101f8:	dfc00117 	ldw	ra,4(sp)
 80101fc:	df000017 	ldw	fp,0(sp)
 8010200:	dec00204 	addi	sp,sp,8
 8010204:	f800283a 	ret

08010208 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8010208:	deffff04 	addi	sp,sp,-4
 801020c:	df000015 	stw	fp,0(sp)
 8010210:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8010214:	e037883a 	mov	sp,fp
 8010218:	df000017 	ldw	fp,0(sp)
 801021c:	dec00104 	addi	sp,sp,4
 8010220:	f800283a 	ret

08010224 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8010224:	defff904 	addi	sp,sp,-28
 8010228:	dfc00615 	stw	ra,24(sp)
 801022c:	df000515 	stw	fp,20(sp)
 8010230:	df000504 	addi	fp,sp,20
 8010234:	e13ffc15 	stw	r4,-16(fp)
 8010238:	e17ffd15 	stw	r5,-12(fp)
 801023c:	e1bffe15 	stw	r6,-8(fp)
 8010240:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8010244:	e0800217 	ldw	r2,8(fp)
 8010248:	d8800015 	stw	r2,0(sp)
 801024c:	e13ffc17 	ldw	r4,-16(fp)
 8010250:	e17ffd17 	ldw	r5,-12(fp)
 8010254:	e1bffe17 	ldw	r6,-8(fp)
 8010258:	e1ffff17 	ldw	r7,-4(fp)
 801025c:	80103fc0 	call	80103fc <alt_iic_isr_register>
}  
 8010260:	e037883a 	mov	sp,fp
 8010264:	dfc00117 	ldw	ra,4(sp)
 8010268:	df000017 	ldw	fp,0(sp)
 801026c:	dec00204 	addi	sp,sp,8
 8010270:	f800283a 	ret

08010274 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010274:	defff904 	addi	sp,sp,-28
 8010278:	df000615 	stw	fp,24(sp)
 801027c:	df000604 	addi	fp,sp,24
 8010280:	e13ffe15 	stw	r4,-8(fp)
 8010284:	e17fff15 	stw	r5,-4(fp)
 8010288:	e0bfff17 	ldw	r2,-4(fp)
 801028c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010290:	0005303a 	rdctl	r2,status
 8010294:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010298:	e0fffb17 	ldw	r3,-20(fp)
 801029c:	00bfff84 	movi	r2,-2
 80102a0:	1884703a 	and	r2,r3,r2
 80102a4:	1001703a 	wrctl	status,r2
  
  return context;
 80102a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80102ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80102b0:	e0bffa17 	ldw	r2,-24(fp)
 80102b4:	00c00044 	movi	r3,1
 80102b8:	1884983a 	sll	r2,r3,r2
 80102bc:	1007883a 	mov	r3,r2
 80102c0:	00820074 	movhi	r2,2049
 80102c4:	10944e04 	addi	r2,r2,20792
 80102c8:	10800017 	ldw	r2,0(r2)
 80102cc:	1886b03a 	or	r3,r3,r2
 80102d0:	00820074 	movhi	r2,2049
 80102d4:	10944e04 	addi	r2,r2,20792
 80102d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80102dc:	00820074 	movhi	r2,2049
 80102e0:	10944e04 	addi	r2,r2,20792
 80102e4:	10800017 	ldw	r2,0(r2)
 80102e8:	100170fa 	wrctl	ienable,r2
 80102ec:	e0bffc17 	ldw	r2,-16(fp)
 80102f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80102f4:	e0bffd17 	ldw	r2,-12(fp)
 80102f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80102fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 8010300:	e037883a 	mov	sp,fp
 8010304:	df000017 	ldw	fp,0(sp)
 8010308:	dec00104 	addi	sp,sp,4
 801030c:	f800283a 	ret

08010310 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8010310:	defff904 	addi	sp,sp,-28
 8010314:	df000615 	stw	fp,24(sp)
 8010318:	df000604 	addi	fp,sp,24
 801031c:	e13ffe15 	stw	r4,-8(fp)
 8010320:	e17fff15 	stw	r5,-4(fp)
 8010324:	e0bfff17 	ldw	r2,-4(fp)
 8010328:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801032c:	0005303a 	rdctl	r2,status
 8010330:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010334:	e0fffb17 	ldw	r3,-20(fp)
 8010338:	00bfff84 	movi	r2,-2
 801033c:	1884703a 	and	r2,r3,r2
 8010340:	1001703a 	wrctl	status,r2
  
  return context;
 8010344:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010348:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801034c:	e0bffa17 	ldw	r2,-24(fp)
 8010350:	00c00044 	movi	r3,1
 8010354:	1884983a 	sll	r2,r3,r2
 8010358:	0084303a 	nor	r2,zero,r2
 801035c:	1007883a 	mov	r3,r2
 8010360:	00820074 	movhi	r2,2049
 8010364:	10944e04 	addi	r2,r2,20792
 8010368:	10800017 	ldw	r2,0(r2)
 801036c:	1886703a 	and	r3,r3,r2
 8010370:	00820074 	movhi	r2,2049
 8010374:	10944e04 	addi	r2,r2,20792
 8010378:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801037c:	00820074 	movhi	r2,2049
 8010380:	10944e04 	addi	r2,r2,20792
 8010384:	10800017 	ldw	r2,0(r2)
 8010388:	100170fa 	wrctl	ienable,r2
 801038c:	e0bffc17 	ldw	r2,-16(fp)
 8010390:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010394:	e0bffd17 	ldw	r2,-12(fp)
 8010398:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801039c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 80103a0:	e037883a 	mov	sp,fp
 80103a4:	df000017 	ldw	fp,0(sp)
 80103a8:	dec00104 	addi	sp,sp,4
 80103ac:	f800283a 	ret

080103b0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80103b0:	defffc04 	addi	sp,sp,-16
 80103b4:	df000315 	stw	fp,12(sp)
 80103b8:	df000304 	addi	fp,sp,12
 80103bc:	e13ffe15 	stw	r4,-8(fp)
 80103c0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80103c4:	000530fa 	rdctl	r2,ienable
 80103c8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80103cc:	e0bfff17 	ldw	r2,-4(fp)
 80103d0:	00c00044 	movi	r3,1
 80103d4:	1884983a 	sll	r2,r3,r2
 80103d8:	1007883a 	mov	r3,r2
 80103dc:	e0bffd17 	ldw	r2,-12(fp)
 80103e0:	1884703a 	and	r2,r3,r2
 80103e4:	1004c03a 	cmpne	r2,r2,zero
 80103e8:	10803fcc 	andi	r2,r2,255
}
 80103ec:	e037883a 	mov	sp,fp
 80103f0:	df000017 	ldw	fp,0(sp)
 80103f4:	dec00104 	addi	sp,sp,4
 80103f8:	f800283a 	ret

080103fc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80103fc:	defff504 	addi	sp,sp,-44
 8010400:	dfc00a15 	stw	ra,40(sp)
 8010404:	df000915 	stw	fp,36(sp)
 8010408:	df000904 	addi	fp,sp,36
 801040c:	e13ffc15 	stw	r4,-16(fp)
 8010410:	e17ffd15 	stw	r5,-12(fp)
 8010414:	e1bffe15 	stw	r6,-8(fp)
 8010418:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801041c:	00bffa84 	movi	r2,-22
 8010420:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010424:	e0bffd17 	ldw	r2,-12(fp)
 8010428:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801042c:	e0bff817 	ldw	r2,-32(fp)
 8010430:	10800808 	cmpgei	r2,r2,32
 8010434:	1000271e 	bne	r2,zero,80104d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010438:	0005303a 	rdctl	r2,status
 801043c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010440:	e0fffa17 	ldw	r3,-24(fp)
 8010444:	00bfff84 	movi	r2,-2
 8010448:	1884703a 	and	r2,r3,r2
 801044c:	1001703a 	wrctl	status,r2
  
  return context;
 8010450:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010454:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8010458:	00c20074 	movhi	r3,2049
 801045c:	18d45b04 	addi	r3,r3,20844
 8010460:	e0bff817 	ldw	r2,-32(fp)
 8010464:	100490fa 	slli	r2,r2,3
 8010468:	1885883a 	add	r2,r3,r2
 801046c:	e0fffe17 	ldw	r3,-8(fp)
 8010470:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010474:	00c20074 	movhi	r3,2049
 8010478:	18d45b04 	addi	r3,r3,20844
 801047c:	e0bff817 	ldw	r2,-32(fp)
 8010480:	100490fa 	slli	r2,r2,3
 8010484:	1885883a 	add	r2,r3,r2
 8010488:	10800104 	addi	r2,r2,4
 801048c:	e0ffff17 	ldw	r3,-4(fp)
 8010490:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010494:	e0bffe17 	ldw	r2,-8(fp)
 8010498:	10000526 	beq	r2,zero,80104b0 <alt_iic_isr_register+0xb4>
 801049c:	e0bff817 	ldw	r2,-32(fp)
 80104a0:	e13ffc17 	ldw	r4,-16(fp)
 80104a4:	100b883a 	mov	r5,r2
 80104a8:	80102740 	call	8010274 <alt_ic_irq_enable>
 80104ac:	00000406 	br	80104c0 <alt_iic_isr_register+0xc4>
 80104b0:	e0bff817 	ldw	r2,-32(fp)
 80104b4:	e13ffc17 	ldw	r4,-16(fp)
 80104b8:	100b883a 	mov	r5,r2
 80104bc:	80103100 	call	8010310 <alt_ic_irq_disable>
 80104c0:	e0bff715 	stw	r2,-36(fp)
 80104c4:	e0bff917 	ldw	r2,-28(fp)
 80104c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80104cc:	e0bffb17 	ldw	r2,-20(fp)
 80104d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80104d4:	e0bff717 	ldw	r2,-36(fp)
}
 80104d8:	e037883a 	mov	sp,fp
 80104dc:	dfc00117 	ldw	ra,4(sp)
 80104e0:	df000017 	ldw	fp,0(sp)
 80104e4:	dec00204 	addi	sp,sp,8
 80104e8:	f800283a 	ret

080104ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80104ec:	defff804 	addi	sp,sp,-32
 80104f0:	dfc00715 	stw	ra,28(sp)
 80104f4:	df000615 	stw	fp,24(sp)
 80104f8:	dc000515 	stw	r16,20(sp)
 80104fc:	df000604 	addi	fp,sp,24
 8010500:	e13ffb15 	stw	r4,-20(fp)
 8010504:	e17ffc15 	stw	r5,-16(fp)
 8010508:	e1bffd15 	stw	r6,-12(fp)
 801050c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8010510:	e13ffc17 	ldw	r4,-16(fp)
 8010514:	e17ffd17 	ldw	r5,-12(fp)
 8010518:	e1bffe17 	ldw	r6,-8(fp)
 801051c:	80107880 	call	8010788 <open>
 8010520:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8010524:	e0bffa17 	ldw	r2,-24(fp)
 8010528:	10002216 	blt	r2,zero,80105b4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801052c:	04020074 	movhi	r16,2049
 8010530:	84090004 	addi	r16,r16,9216
 8010534:	e0bffa17 	ldw	r2,-24(fp)
 8010538:	1009883a 	mov	r4,r2
 801053c:	01400304 	movi	r5,12
 8010540:	800c1240 	call	800c124 <__mulsi3>
 8010544:	8085883a 	add	r2,r16,r2
 8010548:	10c00017 	ldw	r3,0(r2)
 801054c:	e0bffb17 	ldw	r2,-20(fp)
 8010550:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010554:	04020074 	movhi	r16,2049
 8010558:	84090004 	addi	r16,r16,9216
 801055c:	e0bffa17 	ldw	r2,-24(fp)
 8010560:	1009883a 	mov	r4,r2
 8010564:	01400304 	movi	r5,12
 8010568:	800c1240 	call	800c124 <__mulsi3>
 801056c:	8085883a 	add	r2,r16,r2
 8010570:	10800104 	addi	r2,r2,4
 8010574:	10c00017 	ldw	r3,0(r2)
 8010578:	e0bffb17 	ldw	r2,-20(fp)
 801057c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010580:	04020074 	movhi	r16,2049
 8010584:	84090004 	addi	r16,r16,9216
 8010588:	e0bffa17 	ldw	r2,-24(fp)
 801058c:	1009883a 	mov	r4,r2
 8010590:	01400304 	movi	r5,12
 8010594:	800c1240 	call	800c124 <__mulsi3>
 8010598:	8085883a 	add	r2,r16,r2
 801059c:	10800204 	addi	r2,r2,8
 80105a0:	10c00017 	ldw	r3,0(r2)
 80105a4:	e0bffb17 	ldw	r2,-20(fp)
 80105a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80105ac:	e13ffa17 	ldw	r4,-24(fp)
 80105b0:	800f0240 	call	800f024 <alt_release_fd>
  }
} 
 80105b4:	e6ffff04 	addi	sp,fp,-4
 80105b8:	dfc00217 	ldw	ra,8(sp)
 80105bc:	df000117 	ldw	fp,4(sp)
 80105c0:	dc000017 	ldw	r16,0(sp)
 80105c4:	dec00304 	addi	sp,sp,12
 80105c8:	f800283a 	ret

080105cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80105cc:	defffb04 	addi	sp,sp,-20
 80105d0:	dfc00415 	stw	ra,16(sp)
 80105d4:	df000315 	stw	fp,12(sp)
 80105d8:	df000304 	addi	fp,sp,12
 80105dc:	e13ffd15 	stw	r4,-12(fp)
 80105e0:	e17ffe15 	stw	r5,-8(fp)
 80105e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80105e8:	01020074 	movhi	r4,2049
 80105ec:	21090304 	addi	r4,r4,9228
 80105f0:	e17ffd17 	ldw	r5,-12(fp)
 80105f4:	01800044 	movi	r6,1
 80105f8:	01c07fc4 	movi	r7,511
 80105fc:	80104ec0 	call	80104ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8010600:	01020074 	movhi	r4,2049
 8010604:	21090004 	addi	r4,r4,9216
 8010608:	e17ffe17 	ldw	r5,-8(fp)
 801060c:	000d883a 	mov	r6,zero
 8010610:	01c07fc4 	movi	r7,511
 8010614:	80104ec0 	call	80104ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8010618:	01020074 	movhi	r4,2049
 801061c:	21090604 	addi	r4,r4,9240
 8010620:	e17fff17 	ldw	r5,-4(fp)
 8010624:	01800044 	movi	r6,1
 8010628:	01c07fc4 	movi	r7,511
 801062c:	80104ec0 	call	80104ec <alt_open_fd>
}  
 8010630:	e037883a 	mov	sp,fp
 8010634:	dfc00117 	ldw	ra,4(sp)
 8010638:	df000017 	ldw	fp,0(sp)
 801063c:	dec00204 	addi	sp,sp,8
 8010640:	f800283a 	ret

08010644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010644:	defffe04 	addi	sp,sp,-8
 8010648:	dfc00115 	stw	ra,4(sp)
 801064c:	df000015 	stw	fp,0(sp)
 8010650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010654:	00820074 	movhi	r2,2049
 8010658:	108d8304 	addi	r2,r2,13836
 801065c:	10800017 	ldw	r2,0(r2)
 8010660:	10000526 	beq	r2,zero,8010678 <alt_get_errno+0x34>
 8010664:	00820074 	movhi	r2,2049
 8010668:	108d8304 	addi	r2,r2,13836
 801066c:	10800017 	ldw	r2,0(r2)
 8010670:	103ee83a 	callr	r2
 8010674:	00000206 	br	8010680 <alt_get_errno+0x3c>
 8010678:	00820074 	movhi	r2,2049
 801067c:	10944a04 	addi	r2,r2,20776
}
 8010680:	e037883a 	mov	sp,fp
 8010684:	dfc00117 	ldw	ra,4(sp)
 8010688:	df000017 	ldw	fp,0(sp)
 801068c:	dec00204 	addi	sp,sp,8
 8010690:	f800283a 	ret

08010694 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010694:	defffb04 	addi	sp,sp,-20
 8010698:	dfc00415 	stw	ra,16(sp)
 801069c:	df000315 	stw	fp,12(sp)
 80106a0:	dc000215 	stw	r16,8(sp)
 80106a4:	df000304 	addi	fp,sp,12
 80106a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80106ac:	e0bffe17 	ldw	r2,-8(fp)
 80106b0:	10800217 	ldw	r2,8(r2)
 80106b4:	10d00034 	orhi	r3,r2,16384
 80106b8:	e0bffe17 	ldw	r2,-8(fp)
 80106bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80106c0:	e03ffd15 	stw	zero,-12(fp)
 80106c4:	00002306 	br	8010754 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80106c8:	04020074 	movhi	r16,2049
 80106cc:	84090004 	addi	r16,r16,9216
 80106d0:	e0bffd17 	ldw	r2,-12(fp)
 80106d4:	1009883a 	mov	r4,r2
 80106d8:	01400304 	movi	r5,12
 80106dc:	800c1240 	call	800c124 <__mulsi3>
 80106e0:	8085883a 	add	r2,r16,r2
 80106e4:	10c00017 	ldw	r3,0(r2)
 80106e8:	e0bffe17 	ldw	r2,-8(fp)
 80106ec:	10800017 	ldw	r2,0(r2)
 80106f0:	1880151e 	bne	r3,r2,8010748 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80106f4:	04020074 	movhi	r16,2049
 80106f8:	84090004 	addi	r16,r16,9216
 80106fc:	e0bffd17 	ldw	r2,-12(fp)
 8010700:	1009883a 	mov	r4,r2
 8010704:	01400304 	movi	r5,12
 8010708:	800c1240 	call	800c124 <__mulsi3>
 801070c:	8085883a 	add	r2,r16,r2
 8010710:	10800204 	addi	r2,r2,8
 8010714:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010718:	10000b0e 	bge	r2,zero,8010748 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801071c:	e13ffd17 	ldw	r4,-12(fp)
 8010720:	01400304 	movi	r5,12
 8010724:	800c1240 	call	800c124 <__mulsi3>
 8010728:	1007883a 	mov	r3,r2
 801072c:	00820074 	movhi	r2,2049
 8010730:	10890004 	addi	r2,r2,9216
 8010734:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010738:	e0bffe17 	ldw	r2,-8(fp)
 801073c:	18800226 	beq	r3,r2,8010748 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010740:	00bffcc4 	movi	r2,-13
 8010744:	00000a06 	br	8010770 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010748:	e0bffd17 	ldw	r2,-12(fp)
 801074c:	10800044 	addi	r2,r2,1
 8010750:	e0bffd15 	stw	r2,-12(fp)
 8010754:	00820074 	movhi	r2,2049
 8010758:	108d8204 	addi	r2,r2,13832
 801075c:	10800017 	ldw	r2,0(r2)
 8010760:	1007883a 	mov	r3,r2
 8010764:	e0bffd17 	ldw	r2,-12(fp)
 8010768:	18bfd72e 	bgeu	r3,r2,80106c8 <__alt_data_end+0xf80106c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801076c:	0005883a 	mov	r2,zero
}
 8010770:	e6ffff04 	addi	sp,fp,-4
 8010774:	dfc00217 	ldw	ra,8(sp)
 8010778:	df000117 	ldw	fp,4(sp)
 801077c:	dc000017 	ldw	r16,0(sp)
 8010780:	dec00304 	addi	sp,sp,12
 8010784:	f800283a 	ret

08010788 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010788:	defff604 	addi	sp,sp,-40
 801078c:	dfc00915 	stw	ra,36(sp)
 8010790:	df000815 	stw	fp,32(sp)
 8010794:	df000804 	addi	fp,sp,32
 8010798:	e13ffd15 	stw	r4,-12(fp)
 801079c:	e17ffe15 	stw	r5,-8(fp)
 80107a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80107a4:	00bfffc4 	movi	r2,-1
 80107a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80107ac:	00bffb44 	movi	r2,-19
 80107b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80107b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80107b8:	e13ffd17 	ldw	r4,-12(fp)
 80107bc:	01420074 	movhi	r5,2049
 80107c0:	294d8004 	addi	r5,r5,13824
 80107c4:	8010aa00 	call	8010aa0 <alt_find_dev>
 80107c8:	e0bff815 	stw	r2,-32(fp)
 80107cc:	e0bff817 	ldw	r2,-32(fp)
 80107d0:	1000051e 	bne	r2,zero,80107e8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80107d4:	e13ffd17 	ldw	r4,-12(fp)
 80107d8:	8010b300 	call	8010b30 <alt_find_file>
 80107dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80107e0:	00800044 	movi	r2,1
 80107e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80107e8:	e0bff817 	ldw	r2,-32(fp)
 80107ec:	10002b26 	beq	r2,zero,801089c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80107f0:	e13ff817 	ldw	r4,-32(fp)
 80107f4:	8010c440 	call	8010c44 <alt_get_fd>
 80107f8:	e0bff915 	stw	r2,-28(fp)
 80107fc:	e0bff917 	ldw	r2,-28(fp)
 8010800:	1000030e 	bge	r2,zero,8010810 <open+0x88>
    {
      status = index;
 8010804:	e0bff917 	ldw	r2,-28(fp)
 8010808:	e0bffa15 	stw	r2,-24(fp)
 801080c:	00002506 	br	80108a4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010810:	e13ff917 	ldw	r4,-28(fp)
 8010814:	01400304 	movi	r5,12
 8010818:	800c1240 	call	800c124 <__mulsi3>
 801081c:	1007883a 	mov	r3,r2
 8010820:	00820074 	movhi	r2,2049
 8010824:	10890004 	addi	r2,r2,9216
 8010828:	1885883a 	add	r2,r3,r2
 801082c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010830:	e0fffe17 	ldw	r3,-8(fp)
 8010834:	00900034 	movhi	r2,16384
 8010838:	10bfffc4 	addi	r2,r2,-1
 801083c:	1886703a 	and	r3,r3,r2
 8010840:	e0bffc17 	ldw	r2,-16(fp)
 8010844:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010848:	e0bffb17 	ldw	r2,-20(fp)
 801084c:	1000051e 	bne	r2,zero,8010864 <open+0xdc>
 8010850:	e13ffc17 	ldw	r4,-16(fp)
 8010854:	80106940 	call	8010694 <alt_file_locked>
 8010858:	e0bffa15 	stw	r2,-24(fp)
 801085c:	e0bffa17 	ldw	r2,-24(fp)
 8010860:	10001016 	blt	r2,zero,80108a4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010864:	e0bff817 	ldw	r2,-32(fp)
 8010868:	10800317 	ldw	r2,12(r2)
 801086c:	10000826 	beq	r2,zero,8010890 <open+0x108>
 8010870:	e0bff817 	ldw	r2,-32(fp)
 8010874:	10800317 	ldw	r2,12(r2)
 8010878:	e13ffc17 	ldw	r4,-16(fp)
 801087c:	e17ffd17 	ldw	r5,-12(fp)
 8010880:	e1bffe17 	ldw	r6,-8(fp)
 8010884:	e1ffff17 	ldw	r7,-4(fp)
 8010888:	103ee83a 	callr	r2
 801088c:	00000106 	br	8010894 <open+0x10c>
 8010890:	0005883a 	mov	r2,zero
 8010894:	e0bffa15 	stw	r2,-24(fp)
 8010898:	00000206 	br	80108a4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801089c:	00bffb44 	movi	r2,-19
 80108a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80108a4:	e0bffa17 	ldw	r2,-24(fp)
 80108a8:	1000080e 	bge	r2,zero,80108cc <open+0x144>
  {
    alt_release_fd (index);  
 80108ac:	e13ff917 	ldw	r4,-28(fp)
 80108b0:	800f0240 	call	800f024 <alt_release_fd>
    ALT_ERRNO = -status;
 80108b4:	80106440 	call	8010644 <alt_get_errno>
 80108b8:	e0fffa17 	ldw	r3,-24(fp)
 80108bc:	00c7c83a 	sub	r3,zero,r3
 80108c0:	10c00015 	stw	r3,0(r2)
    return -1;
 80108c4:	00bfffc4 	movi	r2,-1
 80108c8:	00000106 	br	80108d0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80108cc:	e0bff917 	ldw	r2,-28(fp)
}
 80108d0:	e037883a 	mov	sp,fp
 80108d4:	dfc00117 	ldw	ra,4(sp)
 80108d8:	df000017 	ldw	fp,0(sp)
 80108dc:	dec00204 	addi	sp,sp,8
 80108e0:	f800283a 	ret

080108e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80108e4:	defffa04 	addi	sp,sp,-24
 80108e8:	df000515 	stw	fp,20(sp)
 80108ec:	df000504 	addi	fp,sp,20
 80108f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80108f4:	0005303a 	rdctl	r2,status
 80108f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80108fc:	e0fffc17 	ldw	r3,-16(fp)
 8010900:	00bfff84 	movi	r2,-2
 8010904:	1884703a 	and	r2,r3,r2
 8010908:	1001703a 	wrctl	status,r2
  
  return context;
 801090c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010910:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010914:	e0bfff17 	ldw	r2,-4(fp)
 8010918:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801091c:	e0bffd17 	ldw	r2,-12(fp)
 8010920:	10800017 	ldw	r2,0(r2)
 8010924:	e0fffd17 	ldw	r3,-12(fp)
 8010928:	18c00117 	ldw	r3,4(r3)
 801092c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010930:	e0bffd17 	ldw	r2,-12(fp)
 8010934:	10800117 	ldw	r2,4(r2)
 8010938:	e0fffd17 	ldw	r3,-12(fp)
 801093c:	18c00017 	ldw	r3,0(r3)
 8010940:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010944:	e0bffd17 	ldw	r2,-12(fp)
 8010948:	e0fffd17 	ldw	r3,-12(fp)
 801094c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010950:	e0bffd17 	ldw	r2,-12(fp)
 8010954:	e0fffd17 	ldw	r3,-12(fp)
 8010958:	10c00015 	stw	r3,0(r2)
 801095c:	e0bffb17 	ldw	r2,-20(fp)
 8010960:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010964:	e0bffe17 	ldw	r2,-8(fp)
 8010968:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801096c:	e037883a 	mov	sp,fp
 8010970:	df000017 	ldw	fp,0(sp)
 8010974:	dec00104 	addi	sp,sp,4
 8010978:	f800283a 	ret

0801097c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801097c:	defffb04 	addi	sp,sp,-20
 8010980:	dfc00415 	stw	ra,16(sp)
 8010984:	df000315 	stw	fp,12(sp)
 8010988:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801098c:	d0a00e17 	ldw	r2,-32712(gp)
 8010990:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010994:	d0a6d817 	ldw	r2,-25760(gp)
 8010998:	10800044 	addi	r2,r2,1
 801099c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80109a0:	00002e06 	br	8010a5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80109a4:	e0bffd17 	ldw	r2,-12(fp)
 80109a8:	10800017 	ldw	r2,0(r2)
 80109ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80109b0:	e0bffd17 	ldw	r2,-12(fp)
 80109b4:	10800403 	ldbu	r2,16(r2)
 80109b8:	10803fcc 	andi	r2,r2,255
 80109bc:	10000426 	beq	r2,zero,80109d0 <alt_tick+0x54>
 80109c0:	d0a6d817 	ldw	r2,-25760(gp)
 80109c4:	1000021e 	bne	r2,zero,80109d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80109c8:	e0bffd17 	ldw	r2,-12(fp)
 80109cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80109d0:	e0bffd17 	ldw	r2,-12(fp)
 80109d4:	10800217 	ldw	r2,8(r2)
 80109d8:	d0e6d817 	ldw	r3,-25760(gp)
 80109dc:	18801d36 	bltu	r3,r2,8010a54 <alt_tick+0xd8>
 80109e0:	e0bffd17 	ldw	r2,-12(fp)
 80109e4:	10800403 	ldbu	r2,16(r2)
 80109e8:	10803fcc 	andi	r2,r2,255
 80109ec:	1000191e 	bne	r2,zero,8010a54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80109f0:	e0bffd17 	ldw	r2,-12(fp)
 80109f4:	10800317 	ldw	r2,12(r2)
 80109f8:	e0fffd17 	ldw	r3,-12(fp)
 80109fc:	18c00517 	ldw	r3,20(r3)
 8010a00:	1809883a 	mov	r4,r3
 8010a04:	103ee83a 	callr	r2
 8010a08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010a0c:	e0bfff17 	ldw	r2,-4(fp)
 8010a10:	1000031e 	bne	r2,zero,8010a20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010a14:	e13ffd17 	ldw	r4,-12(fp)
 8010a18:	80108e40 	call	80108e4 <alt_alarm_stop>
 8010a1c:	00000d06 	br	8010a54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010a20:	e0bffd17 	ldw	r2,-12(fp)
 8010a24:	10c00217 	ldw	r3,8(r2)
 8010a28:	e0bfff17 	ldw	r2,-4(fp)
 8010a2c:	1887883a 	add	r3,r3,r2
 8010a30:	e0bffd17 	ldw	r2,-12(fp)
 8010a34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010a38:	e0bffd17 	ldw	r2,-12(fp)
 8010a3c:	10c00217 	ldw	r3,8(r2)
 8010a40:	d0a6d817 	ldw	r2,-25760(gp)
 8010a44:	1880032e 	bgeu	r3,r2,8010a54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010a48:	e0bffd17 	ldw	r2,-12(fp)
 8010a4c:	00c00044 	movi	r3,1
 8010a50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010a54:	e0bffe17 	ldw	r2,-8(fp)
 8010a58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010a5c:	e0fffd17 	ldw	r3,-12(fp)
 8010a60:	d0a00e04 	addi	r2,gp,-32712
 8010a64:	18bfcf1e 	bne	r3,r2,80109a4 <__alt_data_end+0xf80109a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010a68:	0001883a 	nop
}
 8010a6c:	e037883a 	mov	sp,fp
 8010a70:	dfc00117 	ldw	ra,4(sp)
 8010a74:	df000017 	ldw	fp,0(sp)
 8010a78:	dec00204 	addi	sp,sp,8
 8010a7c:	f800283a 	ret

08010a80 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8010a80:	deffff04 	addi	sp,sp,-4
 8010a84:	df000015 	stw	fp,0(sp)
 8010a88:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010a8c:	000170fa 	wrctl	ienable,zero
}
 8010a90:	e037883a 	mov	sp,fp
 8010a94:	df000017 	ldw	fp,0(sp)
 8010a98:	dec00104 	addi	sp,sp,4
 8010a9c:	f800283a 	ret

08010aa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010aa0:	defffa04 	addi	sp,sp,-24
 8010aa4:	dfc00515 	stw	ra,20(sp)
 8010aa8:	df000415 	stw	fp,16(sp)
 8010aac:	df000404 	addi	fp,sp,16
 8010ab0:	e13ffe15 	stw	r4,-8(fp)
 8010ab4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010ab8:	e0bfff17 	ldw	r2,-4(fp)
 8010abc:	10800017 	ldw	r2,0(r2)
 8010ac0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010ac4:	e13ffe17 	ldw	r4,-8(fp)
 8010ac8:	80021500 	call	8002150 <strlen>
 8010acc:	10800044 	addi	r2,r2,1
 8010ad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010ad4:	00000d06 	br	8010b0c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010ad8:	e0bffc17 	ldw	r2,-16(fp)
 8010adc:	10c00217 	ldw	r3,8(r2)
 8010ae0:	e0bffd17 	ldw	r2,-12(fp)
 8010ae4:	1809883a 	mov	r4,r3
 8010ae8:	e17ffe17 	ldw	r5,-8(fp)
 8010aec:	100d883a 	mov	r6,r2
 8010af0:	8010d640 	call	8010d64 <memcmp>
 8010af4:	1000021e 	bne	r2,zero,8010b00 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010af8:	e0bffc17 	ldw	r2,-16(fp)
 8010afc:	00000706 	br	8010b1c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010b00:	e0bffc17 	ldw	r2,-16(fp)
 8010b04:	10800017 	ldw	r2,0(r2)
 8010b08:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010b0c:	e0fffc17 	ldw	r3,-16(fp)
 8010b10:	e0bfff17 	ldw	r2,-4(fp)
 8010b14:	18bff01e 	bne	r3,r2,8010ad8 <__alt_data_end+0xf8010ad8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010b18:	0005883a 	mov	r2,zero
}
 8010b1c:	e037883a 	mov	sp,fp
 8010b20:	dfc00117 	ldw	ra,4(sp)
 8010b24:	df000017 	ldw	fp,0(sp)
 8010b28:	dec00204 	addi	sp,sp,8
 8010b2c:	f800283a 	ret

08010b30 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010b30:	defffb04 	addi	sp,sp,-20
 8010b34:	dfc00415 	stw	ra,16(sp)
 8010b38:	df000315 	stw	fp,12(sp)
 8010b3c:	df000304 	addi	fp,sp,12
 8010b40:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010b44:	00820074 	movhi	r2,2049
 8010b48:	108d7e04 	addi	r2,r2,13816
 8010b4c:	10800017 	ldw	r2,0(r2)
 8010b50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010b54:	00003106 	br	8010c1c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010b58:	e0bffd17 	ldw	r2,-12(fp)
 8010b5c:	10800217 	ldw	r2,8(r2)
 8010b60:	1009883a 	mov	r4,r2
 8010b64:	80021500 	call	8002150 <strlen>
 8010b68:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010b6c:	e0bffd17 	ldw	r2,-12(fp)
 8010b70:	10c00217 	ldw	r3,8(r2)
 8010b74:	e0bffe17 	ldw	r2,-8(fp)
 8010b78:	10bfffc4 	addi	r2,r2,-1
 8010b7c:	1885883a 	add	r2,r3,r2
 8010b80:	10800003 	ldbu	r2,0(r2)
 8010b84:	10803fcc 	andi	r2,r2,255
 8010b88:	1080201c 	xori	r2,r2,128
 8010b8c:	10bfe004 	addi	r2,r2,-128
 8010b90:	10800bd8 	cmpnei	r2,r2,47
 8010b94:	1000031e 	bne	r2,zero,8010ba4 <alt_find_file+0x74>
    {
      len -= 1;
 8010b98:	e0bffe17 	ldw	r2,-8(fp)
 8010b9c:	10bfffc4 	addi	r2,r2,-1
 8010ba0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010ba4:	e0bffe17 	ldw	r2,-8(fp)
 8010ba8:	e0ffff17 	ldw	r3,-4(fp)
 8010bac:	1885883a 	add	r2,r3,r2
 8010bb0:	10800003 	ldbu	r2,0(r2)
 8010bb4:	10803fcc 	andi	r2,r2,255
 8010bb8:	1080201c 	xori	r2,r2,128
 8010bbc:	10bfe004 	addi	r2,r2,-128
 8010bc0:	10800be0 	cmpeqi	r2,r2,47
 8010bc4:	1000081e 	bne	r2,zero,8010be8 <alt_find_file+0xb8>
 8010bc8:	e0bffe17 	ldw	r2,-8(fp)
 8010bcc:	e0ffff17 	ldw	r3,-4(fp)
 8010bd0:	1885883a 	add	r2,r3,r2
 8010bd4:	10800003 	ldbu	r2,0(r2)
 8010bd8:	10803fcc 	andi	r2,r2,255
 8010bdc:	1080201c 	xori	r2,r2,128
 8010be0:	10bfe004 	addi	r2,r2,-128
 8010be4:	10000a1e 	bne	r2,zero,8010c10 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010be8:	e0bffd17 	ldw	r2,-12(fp)
 8010bec:	10c00217 	ldw	r3,8(r2)
 8010bf0:	e0bffe17 	ldw	r2,-8(fp)
 8010bf4:	1809883a 	mov	r4,r3
 8010bf8:	e17fff17 	ldw	r5,-4(fp)
 8010bfc:	100d883a 	mov	r6,r2
 8010c00:	8010d640 	call	8010d64 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010c04:	1000021e 	bne	r2,zero,8010c10 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010c08:	e0bffd17 	ldw	r2,-12(fp)
 8010c0c:	00000806 	br	8010c30 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010c10:	e0bffd17 	ldw	r2,-12(fp)
 8010c14:	10800017 	ldw	r2,0(r2)
 8010c18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010c1c:	e0fffd17 	ldw	r3,-12(fp)
 8010c20:	00820074 	movhi	r2,2049
 8010c24:	108d7e04 	addi	r2,r2,13816
 8010c28:	18bfcb1e 	bne	r3,r2,8010b58 <__alt_data_end+0xf8010b58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010c2c:	0005883a 	mov	r2,zero
}
 8010c30:	e037883a 	mov	sp,fp
 8010c34:	dfc00117 	ldw	ra,4(sp)
 8010c38:	df000017 	ldw	fp,0(sp)
 8010c3c:	dec00204 	addi	sp,sp,8
 8010c40:	f800283a 	ret

08010c44 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010c44:	defffa04 	addi	sp,sp,-24
 8010c48:	dfc00515 	stw	ra,20(sp)
 8010c4c:	df000415 	stw	fp,16(sp)
 8010c50:	dc000315 	stw	r16,12(sp)
 8010c54:	df000404 	addi	fp,sp,16
 8010c58:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010c5c:	00bffa04 	movi	r2,-24
 8010c60:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010c64:	e03ffc15 	stw	zero,-16(fp)
 8010c68:	00002106 	br	8010cf0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010c6c:	04020074 	movhi	r16,2049
 8010c70:	84090004 	addi	r16,r16,9216
 8010c74:	e0bffc17 	ldw	r2,-16(fp)
 8010c78:	1009883a 	mov	r4,r2
 8010c7c:	01400304 	movi	r5,12
 8010c80:	800c1240 	call	800c124 <__mulsi3>
 8010c84:	8085883a 	add	r2,r16,r2
 8010c88:	10800017 	ldw	r2,0(r2)
 8010c8c:	1000151e 	bne	r2,zero,8010ce4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010c90:	04020074 	movhi	r16,2049
 8010c94:	84090004 	addi	r16,r16,9216
 8010c98:	e0bffc17 	ldw	r2,-16(fp)
 8010c9c:	1009883a 	mov	r4,r2
 8010ca0:	01400304 	movi	r5,12
 8010ca4:	800c1240 	call	800c124 <__mulsi3>
 8010ca8:	8085883a 	add	r2,r16,r2
 8010cac:	e0fffe17 	ldw	r3,-8(fp)
 8010cb0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010cb4:	00820074 	movhi	r2,2049
 8010cb8:	108d8204 	addi	r2,r2,13832
 8010cbc:	10c00017 	ldw	r3,0(r2)
 8010cc0:	e0bffc17 	ldw	r2,-16(fp)
 8010cc4:	1880040e 	bge	r3,r2,8010cd8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010cc8:	00820074 	movhi	r2,2049
 8010ccc:	108d8204 	addi	r2,r2,13832
 8010cd0:	e0fffc17 	ldw	r3,-16(fp)
 8010cd4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010cd8:	e0bffc17 	ldw	r2,-16(fp)
 8010cdc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010ce0:	00000606 	br	8010cfc <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010ce4:	e0bffc17 	ldw	r2,-16(fp)
 8010ce8:	10800044 	addi	r2,r2,1
 8010cec:	e0bffc15 	stw	r2,-16(fp)
 8010cf0:	e0bffc17 	ldw	r2,-16(fp)
 8010cf4:	10800810 	cmplti	r2,r2,32
 8010cf8:	103fdc1e 	bne	r2,zero,8010c6c <__alt_data_end+0xf8010c6c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010cfc:	e0bffd17 	ldw	r2,-12(fp)
}
 8010d00:	e6ffff04 	addi	sp,fp,-4
 8010d04:	dfc00217 	ldw	ra,8(sp)
 8010d08:	df000117 	ldw	fp,4(sp)
 8010d0c:	dc000017 	ldw	r16,0(sp)
 8010d10:	dec00304 	addi	sp,sp,12
 8010d14:	f800283a 	ret

08010d18 <atexit>:
 8010d18:	200b883a 	mov	r5,r4
 8010d1c:	000d883a 	mov	r6,zero
 8010d20:	0009883a 	mov	r4,zero
 8010d24:	000f883a 	mov	r7,zero
 8010d28:	8010de01 	jmpi	8010de0 <__register_exitproc>

08010d2c <exit>:
 8010d2c:	defffe04 	addi	sp,sp,-8
 8010d30:	000b883a 	mov	r5,zero
 8010d34:	dc000015 	stw	r16,0(sp)
 8010d38:	dfc00115 	stw	ra,4(sp)
 8010d3c:	2021883a 	mov	r16,r4
 8010d40:	8010efc0 	call	8010efc <__call_exitprocs>
 8010d44:	00820074 	movhi	r2,2049
 8010d48:	108d7804 	addi	r2,r2,13792
 8010d4c:	11000017 	ldw	r4,0(r2)
 8010d50:	20800f17 	ldw	r2,60(r4)
 8010d54:	10000126 	beq	r2,zero,8010d5c <exit+0x30>
 8010d58:	103ee83a 	callr	r2
 8010d5c:	8009883a 	mov	r4,r16
 8010d60:	80110a00 	call	80110a0 <_exit>

08010d64 <memcmp>:
 8010d64:	01c000c4 	movi	r7,3
 8010d68:	3980192e 	bgeu	r7,r6,8010dd0 <memcmp+0x6c>
 8010d6c:	2144b03a 	or	r2,r4,r5
 8010d70:	11c4703a 	and	r2,r2,r7
 8010d74:	10000f26 	beq	r2,zero,8010db4 <memcmp+0x50>
 8010d78:	21c00003 	ldbu	r7,0(r4)
 8010d7c:	28800003 	ldbu	r2,0(r5)
 8010d80:	3880151e 	bne	r7,r2,8010dd8 <memcmp+0x74>
 8010d84:	30ffff84 	addi	r3,r6,-2
 8010d88:	01bfffc4 	movi	r6,-1
 8010d8c:	00000406 	br	8010da0 <memcmp+0x3c>
 8010d90:	21c00003 	ldbu	r7,0(r4)
 8010d94:	28800003 	ldbu	r2,0(r5)
 8010d98:	18ffffc4 	addi	r3,r3,-1
 8010d9c:	38800e1e 	bne	r7,r2,8010dd8 <memcmp+0x74>
 8010da0:	21000044 	addi	r4,r4,1
 8010da4:	29400044 	addi	r5,r5,1
 8010da8:	19bff91e 	bne	r3,r6,8010d90 <__alt_data_end+0xf8010d90>
 8010dac:	0005883a 	mov	r2,zero
 8010db0:	f800283a 	ret
 8010db4:	20c00017 	ldw	r3,0(r4)
 8010db8:	28800017 	ldw	r2,0(r5)
 8010dbc:	1880041e 	bne	r3,r2,8010dd0 <memcmp+0x6c>
 8010dc0:	31bfff04 	addi	r6,r6,-4
 8010dc4:	21000104 	addi	r4,r4,4
 8010dc8:	29400104 	addi	r5,r5,4
 8010dcc:	39bff936 	bltu	r7,r6,8010db4 <__alt_data_end+0xf8010db4>
 8010dd0:	303fe91e 	bne	r6,zero,8010d78 <__alt_data_end+0xf8010d78>
 8010dd4:	003ff506 	br	8010dac <__alt_data_end+0xf8010dac>
 8010dd8:	3885c83a 	sub	r2,r7,r2
 8010ddc:	f800283a 	ret

08010de0 <__register_exitproc>:
 8010de0:	defffa04 	addi	sp,sp,-24
 8010de4:	00820074 	movhi	r2,2049
 8010de8:	108d7804 	addi	r2,r2,13792
 8010dec:	dc000315 	stw	r16,12(sp)
 8010df0:	14000017 	ldw	r16,0(r2)
 8010df4:	dc400415 	stw	r17,16(sp)
 8010df8:	dfc00515 	stw	ra,20(sp)
 8010dfc:	80805217 	ldw	r2,328(r16)
 8010e00:	2023883a 	mov	r17,r4
 8010e04:	10003a26 	beq	r2,zero,8010ef0 <__register_exitproc+0x110>
 8010e08:	10c00117 	ldw	r3,4(r2)
 8010e0c:	020007c4 	movi	r8,31
 8010e10:	40c0190e 	bge	r8,r3,8010e78 <__register_exitproc+0x98>
 8010e14:	00800034 	movhi	r2,0
 8010e18:	10800004 	addi	r2,r2,0
 8010e1c:	1000061e 	bne	r2,zero,8010e38 <__register_exitproc+0x58>
 8010e20:	00bfffc4 	movi	r2,-1
 8010e24:	dfc00517 	ldw	ra,20(sp)
 8010e28:	dc400417 	ldw	r17,16(sp)
 8010e2c:	dc000317 	ldw	r16,12(sp)
 8010e30:	dec00604 	addi	sp,sp,24
 8010e34:	f800283a 	ret
 8010e38:	01006404 	movi	r4,400
 8010e3c:	d9400015 	stw	r5,0(sp)
 8010e40:	d9800115 	stw	r6,4(sp)
 8010e44:	d9c00215 	stw	r7,8(sp)
 8010e48:	00000000 	call	0 <__reset-0x8000000>
 8010e4c:	d9400017 	ldw	r5,0(sp)
 8010e50:	d9800117 	ldw	r6,4(sp)
 8010e54:	d9c00217 	ldw	r7,8(sp)
 8010e58:	103ff126 	beq	r2,zero,8010e20 <__alt_data_end+0xf8010e20>
 8010e5c:	81005217 	ldw	r4,328(r16)
 8010e60:	10000115 	stw	zero,4(r2)
 8010e64:	0007883a 	mov	r3,zero
 8010e68:	11000015 	stw	r4,0(r2)
 8010e6c:	80805215 	stw	r2,328(r16)
 8010e70:	10006215 	stw	zero,392(r2)
 8010e74:	10006315 	stw	zero,396(r2)
 8010e78:	88000d1e 	bne	r17,zero,8010eb0 <__register_exitproc+0xd0>
 8010e7c:	19000084 	addi	r4,r3,2
 8010e80:	2109883a 	add	r4,r4,r4
 8010e84:	18c00044 	addi	r3,r3,1
 8010e88:	2109883a 	add	r4,r4,r4
 8010e8c:	10c00115 	stw	r3,4(r2)
 8010e90:	1105883a 	add	r2,r2,r4
 8010e94:	11400015 	stw	r5,0(r2)
 8010e98:	0005883a 	mov	r2,zero
 8010e9c:	dfc00517 	ldw	ra,20(sp)
 8010ea0:	dc400417 	ldw	r17,16(sp)
 8010ea4:	dc000317 	ldw	r16,12(sp)
 8010ea8:	dec00604 	addi	sp,sp,24
 8010eac:	f800283a 	ret
 8010eb0:	18c9883a 	add	r4,r3,r3
 8010eb4:	2109883a 	add	r4,r4,r4
 8010eb8:	1109883a 	add	r4,r2,r4
 8010ebc:	21802215 	stw	r6,136(r4)
 8010ec0:	01800044 	movi	r6,1
 8010ec4:	12006217 	ldw	r8,392(r2)
 8010ec8:	30cc983a 	sll	r6,r6,r3
 8010ecc:	4190b03a 	or	r8,r8,r6
 8010ed0:	12006215 	stw	r8,392(r2)
 8010ed4:	21c04215 	stw	r7,264(r4)
 8010ed8:	01000084 	movi	r4,2
 8010edc:	893fe71e 	bne	r17,r4,8010e7c <__alt_data_end+0xf8010e7c>
 8010ee0:	11006317 	ldw	r4,396(r2)
 8010ee4:	218cb03a 	or	r6,r4,r6
 8010ee8:	11806315 	stw	r6,396(r2)
 8010eec:	003fe306 	br	8010e7c <__alt_data_end+0xf8010e7c>
 8010ef0:	80805304 	addi	r2,r16,332
 8010ef4:	80805215 	stw	r2,328(r16)
 8010ef8:	003fc306 	br	8010e08 <__alt_data_end+0xf8010e08>

08010efc <__call_exitprocs>:
 8010efc:	00820074 	movhi	r2,2049
 8010f00:	108d7804 	addi	r2,r2,13792
 8010f04:	10800017 	ldw	r2,0(r2)
 8010f08:	defff304 	addi	sp,sp,-52
 8010f0c:	df000b15 	stw	fp,44(sp)
 8010f10:	d8800015 	stw	r2,0(sp)
 8010f14:	10805204 	addi	r2,r2,328
 8010f18:	dd400815 	stw	r21,32(sp)
 8010f1c:	dfc00c15 	stw	ra,48(sp)
 8010f20:	ddc00a15 	stw	r23,40(sp)
 8010f24:	dd800915 	stw	r22,36(sp)
 8010f28:	dd000715 	stw	r20,28(sp)
 8010f2c:	dcc00615 	stw	r19,24(sp)
 8010f30:	dc800515 	stw	r18,20(sp)
 8010f34:	dc400415 	stw	r17,16(sp)
 8010f38:	dc000315 	stw	r16,12(sp)
 8010f3c:	d9000115 	stw	r4,4(sp)
 8010f40:	2839883a 	mov	fp,r5
 8010f44:	d8800215 	stw	r2,8(sp)
 8010f48:	057fffc4 	movi	r21,-1
 8010f4c:	d8800017 	ldw	r2,0(sp)
 8010f50:	14805217 	ldw	r18,328(r2)
 8010f54:	90001826 	beq	r18,zero,8010fb8 <__call_exitprocs+0xbc>
 8010f58:	ddc00217 	ldw	r23,8(sp)
 8010f5c:	90c00117 	ldw	r3,4(r18)
 8010f60:	1c3fffc4 	addi	r16,r3,-1
 8010f64:	80001116 	blt	r16,zero,8010fac <__call_exitprocs+0xb0>
 8010f68:	18c00044 	addi	r3,r3,1
 8010f6c:	8427883a 	add	r19,r16,r16
 8010f70:	18c7883a 	add	r3,r3,r3
 8010f74:	95802204 	addi	r22,r18,136
 8010f78:	9ce7883a 	add	r19,r19,r19
 8010f7c:	18c7883a 	add	r3,r3,r3
 8010f80:	b4e7883a 	add	r19,r22,r19
 8010f84:	90e3883a 	add	r17,r18,r3
 8010f88:	e0001726 	beq	fp,zero,8010fe8 <__call_exitprocs+0xec>
 8010f8c:	8c87c83a 	sub	r3,r17,r18
 8010f90:	b0c7883a 	add	r3,r22,r3
 8010f94:	18c01e17 	ldw	r3,120(r3)
 8010f98:	1f001326 	beq	r3,fp,8010fe8 <__call_exitprocs+0xec>
 8010f9c:	843fffc4 	addi	r16,r16,-1
 8010fa0:	9cffff04 	addi	r19,r19,-4
 8010fa4:	8c7fff04 	addi	r17,r17,-4
 8010fa8:	857ff71e 	bne	r16,r21,8010f88 <__alt_data_end+0xf8010f88>
 8010fac:	00800034 	movhi	r2,0
 8010fb0:	10800004 	addi	r2,r2,0
 8010fb4:	10002a1e 	bne	r2,zero,8011060 <__call_exitprocs+0x164>
 8010fb8:	dfc00c17 	ldw	ra,48(sp)
 8010fbc:	df000b17 	ldw	fp,44(sp)
 8010fc0:	ddc00a17 	ldw	r23,40(sp)
 8010fc4:	dd800917 	ldw	r22,36(sp)
 8010fc8:	dd400817 	ldw	r21,32(sp)
 8010fcc:	dd000717 	ldw	r20,28(sp)
 8010fd0:	dcc00617 	ldw	r19,24(sp)
 8010fd4:	dc800517 	ldw	r18,20(sp)
 8010fd8:	dc400417 	ldw	r17,16(sp)
 8010fdc:	dc000317 	ldw	r16,12(sp)
 8010fe0:	dec00d04 	addi	sp,sp,52
 8010fe4:	f800283a 	ret
 8010fe8:	91000117 	ldw	r4,4(r18)
 8010fec:	88c00017 	ldw	r3,0(r17)
 8010ff0:	213fffc4 	addi	r4,r4,-1
 8010ff4:	24001526 	beq	r4,r16,801104c <__call_exitprocs+0x150>
 8010ff8:	88000015 	stw	zero,0(r17)
 8010ffc:	183fe726 	beq	r3,zero,8010f9c <__alt_data_end+0xf8010f9c>
 8011000:	00800044 	movi	r2,1
 8011004:	1408983a 	sll	r4,r2,r16
 8011008:	91406217 	ldw	r5,392(r18)
 801100c:	95000117 	ldw	r20,4(r18)
 8011010:	214a703a 	and	r5,r4,r5
 8011014:	28000b26 	beq	r5,zero,8011044 <__call_exitprocs+0x148>
 8011018:	91406317 	ldw	r5,396(r18)
 801101c:	2148703a 	and	r4,r4,r5
 8011020:	20000c1e 	bne	r4,zero,8011054 <__call_exitprocs+0x158>
 8011024:	99400017 	ldw	r5,0(r19)
 8011028:	d9000117 	ldw	r4,4(sp)
 801102c:	183ee83a 	callr	r3
 8011030:	90c00117 	ldw	r3,4(r18)
 8011034:	1d3fc51e 	bne	r3,r20,8010f4c <__alt_data_end+0xf8010f4c>
 8011038:	b8c00017 	ldw	r3,0(r23)
 801103c:	1cbfd726 	beq	r3,r18,8010f9c <__alt_data_end+0xf8010f9c>
 8011040:	003fc206 	br	8010f4c <__alt_data_end+0xf8010f4c>
 8011044:	183ee83a 	callr	r3
 8011048:	003ff906 	br	8011030 <__alt_data_end+0xf8011030>
 801104c:	94000115 	stw	r16,4(r18)
 8011050:	003fea06 	br	8010ffc <__alt_data_end+0xf8010ffc>
 8011054:	99000017 	ldw	r4,0(r19)
 8011058:	183ee83a 	callr	r3
 801105c:	003ff406 	br	8011030 <__alt_data_end+0xf8011030>
 8011060:	90c00117 	ldw	r3,4(r18)
 8011064:	1800081e 	bne	r3,zero,8011088 <__call_exitprocs+0x18c>
 8011068:	90c00017 	ldw	r3,0(r18)
 801106c:	18000a26 	beq	r3,zero,8011098 <__call_exitprocs+0x19c>
 8011070:	9009883a 	mov	r4,r18
 8011074:	b8c00015 	stw	r3,0(r23)
 8011078:	00000000 	call	0 <__reset-0x8000000>
 801107c:	bc800017 	ldw	r18,0(r23)
 8011080:	903fb61e 	bne	r18,zero,8010f5c <__alt_data_end+0xf8010f5c>
 8011084:	003fcc06 	br	8010fb8 <__alt_data_end+0xf8010fb8>
 8011088:	90c00017 	ldw	r3,0(r18)
 801108c:	902f883a 	mov	r23,r18
 8011090:	1825883a 	mov	r18,r3
 8011094:	003ffa06 	br	8011080 <__alt_data_end+0xf8011080>
 8011098:	0007883a 	mov	r3,zero
 801109c:	003ffb06 	br	801108c <__alt_data_end+0xf801108c>

080110a0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80110a0:	defffd04 	addi	sp,sp,-12
 80110a4:	df000215 	stw	fp,8(sp)
 80110a8:	df000204 	addi	fp,sp,8
 80110ac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80110b0:	0001883a 	nop
 80110b4:	e0bfff17 	ldw	r2,-4(fp)
 80110b8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80110bc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80110c0:	10000226 	beq	r2,zero,80110cc <_exit+0x2c>
    ALT_SIM_FAIL();
 80110c4:	002af070 	cmpltui	zero,zero,43969
 80110c8:	00000106 	br	80110d0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80110cc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80110d0:	003fff06 	br	80110d0 <__alt_data_end+0xf80110d0>
